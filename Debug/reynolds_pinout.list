
reynolds_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005644  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080057fc  080057fc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057fc  080057fc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005804  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000068  08005868  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008c8  08005868  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d8ce  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255f  00000000  00000000  0002d99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  0002ff00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ab6  00000000  00000000  00030d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000141ce  00000000  00000000  000317be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ff07  00000000  00000000  0004598c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bd57  00000000  00000000  00055893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003570  00000000  00000000  000d15ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d4b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080056ec 	.word	0x080056ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080056ec 	.word	0x080056ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <button_setup>:

#include "button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	6019      	str	r1, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	1d3a      	adds	r2, r7, #4
 8000232:	3304      	adds	r3, #4
 8000234:	ca03      	ldmia	r2!, {r0, r1}
 8000236:	c303      	stmia	r3!, {r0, r1}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	709a      	strb	r2, [r3, #2]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2201      	movs	r2, #1
 800024e:	735a      	strb	r2, [r3, #13]
	button->debounce_idx = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	button->debounce_count_limit = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	615a      	str	r2, [r3, #20]

	return 0;
 800025c:	2300      	movs	r3, #0

}
 800025e:	0018      	movs	r0, r3
 8000260:	46bd      	mov	sp, r7
 8000262:	b004      	add	sp, #16
 8000264:	bd80      	pop	{r7, pc}

08000266 <button_debounce_fsm>:


uint8_t button_debounce_fsm(button_t *button)
{
 8000266:	b580      	push	{r7, lr}
 8000268:	b088      	sub	sp, #32
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 800026e:	211f      	movs	r1, #31
 8000270:	187b      	adds	r3, r7, r1
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	7b12      	ldrb	r2, [r2, #12]
 8000276:	701a      	strb	r2, [r3, #0]
	button_edge_t edge = button->edge;
 8000278:	2317      	movs	r3, #23
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	7852      	ldrb	r2, [r2, #1]
 8000280:	701a      	strb	r2, [r3, #0]
	uint32_t debounce_idx = button->debounce_idx;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	691b      	ldr	r3, [r3, #16]
 8000286:	61bb      	str	r3, [r7, #24]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	613b      	str	r3, [r7, #16]
	button_status_t button_status;

	switch(debounce_fsm_state)
 800028e:	187b      	adds	r3, r7, r1
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2b02      	cmp	r3, #2
 8000294:	d022      	beq.n	80002dc <button_debounce_fsm+0x76>
 8000296:	dc36      	bgt.n	8000306 <button_debounce_fsm+0xa0>
 8000298:	2b00      	cmp	r3, #0
 800029a:	d002      	beq.n	80002a2 <button_debounce_fsm+0x3c>
 800029c:	2b01      	cmp	r3, #1
 800029e:	d011      	beq.n	80002c4 <button_debounce_fsm+0x5e>
 80002a0:	e031      	b.n	8000306 <button_debounce_fsm+0xa0>
	{
		case BUTTON_DEBOUNCE_IDLE:

			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	7b5b      	ldrb	r3, [r3, #13]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d132      	bne.n	8000310 <button_debounce_fsm+0xaa>
			{
				if(debounce_count_limit == 0)
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d104      	bne.n	80002ba <button_debounce_fsm+0x54>
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002b0:	231f      	movs	r3, #31
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	2202      	movs	r2, #2
 80002b6:	701a      	strb	r2, [r3, #0]
				else
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
				}
			}
			break;
 80002b8:	e02a      	b.n	8000310 <button_debounce_fsm+0xaa>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80002ba:	231f      	movs	r3, #31
 80002bc:	18fb      	adds	r3, r7, r3
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
			break;
 80002c2:	e025      	b.n	8000310 <button_debounce_fsm+0xaa>
		case BUTTON_DEBOUNCE_WAIT:

			if(debounce_idx >= debounce_count_limit)
 80002c4:	69ba      	ldr	r2, [r7, #24]
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d303      	bcc.n	80002d4 <button_debounce_fsm+0x6e>
			{
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002cc:	231f      	movs	r3, #31
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	2202      	movs	r2, #2
 80002d2:	701a      	strb	r2, [r3, #0]
			}
			debounce_idx++;
 80002d4:	69bb      	ldr	r3, [r7, #24]
 80002d6:	3301      	adds	r3, #1
 80002d8:	61bb      	str	r3, [r7, #24]

			break;
 80002da:	e01a      	b.n	8000312 <button_debounce_fsm+0xac>
		case BUTTON_DEBOUNCE_CLEAR_LOCK:

			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2202      	movs	r2, #2
 80002e0:	709a      	strb	r2, [r3, #2]
			button->debounce_idx = 0;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2200      	movs	r2, #0
 80002e6:	611a      	str	r2, [r3, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2201      	movs	r2, #1
 80002ec:	735a      	strb	r2, [r3, #13]
			button_get_status(button, &button_status);
 80002ee:	230f      	movs	r3, #15
 80002f0:	18fa      	adds	r2, r7, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	0011      	movs	r1, r2
 80002f6:	0018      	movs	r0, r3
 80002f8:	f000 f843 	bl	8000382 <button_get_status>

			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 80002fc:	231f      	movs	r3, #31
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	2200      	movs	r2, #0
 8000302:	701a      	strb	r2, [r3, #0]

			break;
 8000304:	e005      	b.n	8000312 <button_debounce_fsm+0xac>
		default:
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000306:	231f      	movs	r3, #31
 8000308:	18fb      	adds	r3, r7, r3
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
			break;
 800030e:	e000      	b.n	8000312 <button_debounce_fsm+0xac>
			break;
 8000310:	46c0      	nop			; (mov r8, r8)
	}

	button->debounce_fsm_state = debounce_fsm_state;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	221f      	movs	r2, #31
 8000316:	18ba      	adds	r2, r7, r2
 8000318:	7812      	ldrb	r2, [r2, #0]
 800031a:	731a      	strb	r2, [r3, #12]
	button->edge = edge;
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2217      	movs	r2, #23
 8000320:	18ba      	adds	r2, r7, r2
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	705a      	strb	r2, [r3, #1]
	button->debounce_idx = debounce_idx;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	69ba      	ldr	r2, [r7, #24]
 800032a:	611a      	str	r2, [r3, #16]

	return 0;
 800032c:	2300      	movs	r3, #0
}
 800032e:	0018      	movs	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	b008      	add	sp, #32
 8000334:	bd80      	pop	{r7, pc}

08000336 <button_positive_edge_detected>:

}


uint8_t button_positive_edge_detected(button_t *button)
{
 8000336:	b580      	push	{r7, lr}
 8000338:	b082      	sub	sp, #8
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	7b5b      	ldrb	r3, [r3, #13]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d105      	bne.n	8000352 <button_positive_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2202      	movs	r2, #2
 800034a:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2200      	movs	r2, #0
 8000350:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000352:	2300      	movs	r3, #0
}
 8000354:	0018      	movs	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}

0800035c <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	7b5b      	ldrb	r3, [r3, #13]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d105      	bne.n	8000378 <button_negative_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2201      	movs	r2, #1
 8000370:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2200      	movs	r2, #0
 8000376:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000378:	2300      	movs	r3, #0
}
 800037a:	0018      	movs	r0, r3
 800037c:	46bd      	mov	sp, r7
 800037e:	b002      	add	sp, #8
 8000380:	bd80      	pop	{r7, pc}

08000382 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000382:	b5b0      	push	{r4, r5, r7, lr}
 8000384:	b084      	sub	sp, #16
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	6039      	str	r1, [r7, #0]
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685a      	ldr	r2, [r3, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	891b      	ldrh	r3, [r3, #8]
 8000394:	250f      	movs	r5, #15
 8000396:	197c      	adds	r4, r7, r5
 8000398:	0019      	movs	r1, r3
 800039a:	0010      	movs	r0, r2
 800039c:	f003 fc36 	bl	8003c0c <HAL_GPIO_ReadPin>
 80003a0:	0003      	movs	r3, r0
 80003a2:	7023      	strb	r3, [r4, #0]
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 80003a4:	197b      	adds	r3, r7, r5
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d103      	bne.n	80003b4 <button_get_status+0x32>
	{
		button->status = BUTTON_ON;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2201      	movs	r2, #1
 80003b0:	701a      	strb	r2, [r3, #0]
 80003b2:	e002      	b.n	80003ba <button_get_status+0x38>
	}
	else
	{
		button->status = BUTTON_OFF;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
	}

	*status = button->status;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	781a      	ldrb	r2, [r3, #0]
 80003be:	683b      	ldr	r3, [r7, #0]
 80003c0:	701a      	strb	r2, [r3, #0]

	return 0;
 80003c2:	2300      	movs	r3, #0
}
 80003c4:	0018      	movs	r0, r3
 80003c6:	46bd      	mov	sp, r7
 80003c8:	b004      	add	sp, #16
 80003ca:	bdb0      	pop	{r4, r5, r7, pc}

080003cc <button_set_isr_attended>:

uint8_t button_set_isr_attended(button_t *button)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2200      	movs	r2, #0
 80003d8:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	709a      	strb	r2, [r3, #2]
	return 0;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	0018      	movs	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	b002      	add	sp, #8
 80003e8:	bd80      	pop	{r7, pc}

080003ea <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 80003ea:	b084      	sub	sp, #16
 80003ec:	b5b0      	push	{r4, r5, r7, lr}
 80003ee:	af00      	add	r7, sp, #0
 80003f0:	250c      	movs	r5, #12
 80003f2:	1d2c      	adds	r4, r5, #4
 80003f4:	19e4      	adds	r4, r4, r7
 80003f6:	6020      	str	r0, [r4, #0]
 80003f8:	6061      	str	r1, [r4, #4]
 80003fa:	60a2      	str	r2, [r4, #8]
 80003fc:	60e3      	str	r3, [r4, #12]
	*button_isr_status = button.edge_attended;
 80003fe:	0029      	movs	r1, r5
 8000400:	1d0b      	adds	r3, r1, #4
 8000402:	19db      	adds	r3, r3, r7
 8000404:	789a      	ldrb	r2, [r3, #2]
 8000406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000408:	701a      	strb	r2, [r3, #0]
	*edge = button.edge;
 800040a:	1d0b      	adds	r3, r1, #4
 800040c:	19db      	adds	r3, r3, r7
 800040e:	785a      	ldrb	r2, [r3, #1]
 8000410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000412:	701a      	strb	r2, [r3, #0]
	return 0;
 8000414:	2300      	movs	r3, #0
}
 8000416:	0018      	movs	r0, r3
 8000418:	46bd      	mov	sp, r7
 800041a:	bcb0      	pop	{r4, r5, r7}
 800041c:	bc08      	pop	{r3}
 800041e:	b004      	add	sp, #16
 8000420:	4718      	bx	r3

08000422 <deadline_timer_setup>:
#include <deadline_timer.h>

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 8000422:	b082      	sub	sp, #8
 8000424:	b5b0      	push	{r4, r5, r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af04      	add	r7, sp, #16
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	2418      	movs	r4, #24
 800042e:	1939      	adds	r1, r7, r4
 8000430:	600a      	str	r2, [r1, #0]
 8000432:	604b      	str	r3, [r1, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	2260      	movs	r2, #96	; 0x60
 8000438:	2100      	movs	r1, #0
 800043a:	5499      	strb	r1, [r3, r2]

	timer_clock_clear(&deadline_timer->time_current);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	0018      	movs	r0, r3
 8000440:	f000 f8ba 	bl	80005b8 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	3330      	adds	r3, #48	; 0x30
 8000448:	0018      	movs	r0, r3
 800044a:	f000 f8b5 	bl	80005b8 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	3348      	adds	r3, #72	; 0x48
 8000452:	0018      	movs	r0, r3
 8000454:	f000 f8b0 	bl	80005b8 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3318      	adds	r3, #24
 800045c:	001d      	movs	r5, r3
 800045e:	193c      	adds	r4, r7, r4
 8000460:	466b      	mov	r3, sp
 8000462:	0018      	movs	r0, r3
 8000464:	0023      	movs	r3, r4
 8000466:	3308      	adds	r3, #8
 8000468:	2210      	movs	r2, #16
 800046a:	0019      	movs	r1, r3
 800046c:	f005 f934 	bl	80056d8 <memcpy>
 8000470:	6822      	ldr	r2, [r4, #0]
 8000472:	6863      	ldr	r3, [r4, #4]
 8000474:	0028      	movs	r0, r5
 8000476:	f000 f8b3 	bl	80005e0 <timer_clock_set_time>
	return 0;
 800047a:	2300      	movs	r3, #0

}
 800047c:	0018      	movs	r0, r3
 800047e:	46bd      	mov	sp, r7
 8000480:	b002      	add	sp, #8
 8000482:	bcb0      	pop	{r4, r5, r7}
 8000484:	bc08      	pop	{r3}
 8000486:	b002      	add	sp, #8
 8000488:	4718      	bx	r3

0800048a <deadline_timer_setup_shared_clock>:


uint8_t deadline_timer_setup_shared_clock(deadline_timer_t *deadline_timer,
												timer_clock_t *time_current,
												timer_clock_t deadline)
{
 800048a:	b082      	sub	sp, #8
 800048c:	b5b0      	push	{r4, r5, r7, lr}
 800048e:	b086      	sub	sp, #24
 8000490:	af04      	add	r7, sp, #16
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
 8000496:	2418      	movs	r4, #24
 8000498:	1939      	adds	r1, r7, r4
 800049a:	600a      	str	r2, [r1, #0]
 800049c:	604b      	str	r3, [r1, #4]
//	timer_clock_t *temp;

	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2260      	movs	r2, #96	; 0x60
 80004a2:	2100      	movs	r1, #0
 80004a4:	5499      	strb	r1, [r3, r2]



//	deadline_timer->time_current = time_current;
	deadline_timer_assign_current(&deadline_timer->time_current, time_current);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 f823 	bl	80004f8 <deadline_timer_assign_current>

//	timer_clock_clear(&deadline_timer->time_current);
	timer_clock_clear(&deadline_timer->time_initial);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	3330      	adds	r3, #48	; 0x30
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 f87e 	bl	80005b8 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	3348      	adds	r3, #72	; 0x48
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 f879 	bl	80005b8 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	3318      	adds	r3, #24
 80004ca:	001d      	movs	r5, r3
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	466b      	mov	r3, sp
 80004d0:	0018      	movs	r0, r3
 80004d2:	0023      	movs	r3, r4
 80004d4:	3308      	adds	r3, #8
 80004d6:	2210      	movs	r2, #16
 80004d8:	0019      	movs	r1, r3
 80004da:	f005 f8fd 	bl	80056d8 <memcpy>
 80004de:	6822      	ldr	r2, [r4, #0]
 80004e0:	6863      	ldr	r3, [r4, #4]
 80004e2:	0028      	movs	r0, r5
 80004e4:	f000 f87c 	bl	80005e0 <timer_clock_set_time>
	return 0;
 80004e8:	2300      	movs	r3, #0
}
 80004ea:	0018      	movs	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bcb0      	pop	{r4, r5, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	b002      	add	sp, #8
 80004f6:	4718      	bx	r3

080004f8 <deadline_timer_assign_current>:


void deadline_timer_assign_current(timer_clock_t *time_current,
											timer_clock_t *time_current_2)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	time_current = time_current_2;
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	607b      	str	r3, [r7, #4]
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}

0800050e <deadline_timer_force_expiration>:


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2260      	movs	r2, #96	; 0x60
 800051a:	2101      	movs	r1, #1
 800051c:	5499      	strb	r1, [r3, r2]
	return 0;
 800051e:	2300      	movs	r3, #0
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b002      	add	sp, #8
 8000526:	bd80      	pop	{r7, pc}

08000528 <deadline_timer_check>:
uint8_t deadline_timer_check(deadline_timer_t *deadline_timer,
								deadline_timer_expired_t *deadline_expired)
{
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	b087      	sub	sp, #28
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8000532:	260f      	movs	r6, #15
 8000534:	19bb      	adds	r3, r7, r6
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	//TODO: (High) fix this to include seconds

//	deadline_timer_expired_t deadline_expired_sec = TIMER_EXPIRED_FALSE;
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 800053a:	250e      	movs	r5, #14
 800053c:	197b      	adds	r3, r7, r5
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]


	deadline_timer_compare_check(deadline_timer->time_current.msec,
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6898      	ldr	r0, [r3, #8]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6a19      	ldr	r1, [r3, #32]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800054e:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <deadline_timer_check+0x50>)
 8000550:	197b      	adds	r3, r7, r5
 8000552:	9300      	str	r3, [sp, #0]
 8000554:	0023      	movs	r3, r4
 8000556:	f000 f87f 	bl	8000658 <deadline_timer_compare_check>
											deadline_timer->deadline.msec,
											deadline_timer->time_initial.msec,
											DEADLINE_MAX_MSEC,
											&deadline_expired_msec);

	*deadline_expired = deadline_expired_msec;
 800055a:	197b      	adds	r3, r7, r5
 800055c:	781a      	ldrb	r2, [r3, #0]
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	701a      	strb	r2, [r3, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 8000562:	197b      	adds	r3, r7, r5
 8000564:	7819      	ldrb	r1, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2260      	movs	r2, #96	; 0x60
 800056a:	5499      	strb	r1, [r3, r2]
	return status;
 800056c:	19bb      	adds	r3, r7, r6
 800056e:	781b      	ldrb	r3, [r3, #0]

}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b005      	add	sp, #20
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000578:	3b9aca00 	.word	0x3b9aca00

0800057c <deadline_timer_count>:

uint8_t deadline_timer_count(deadline_timer_t *deadline_timer)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	deadline_timer_increment(&deadline_timer->time_current);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	0018      	movs	r0, r3
 8000588:	f000 f844 	bl	8000614 <deadline_timer_increment>
	return 0;
 800058c:	2300      	movs	r3, #0
}
 800058e:	0018      	movs	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	b002      	add	sp, #8
 8000594:	bd80      	pop	{r7, pc}

08000596 <deadline_timer_set_initial_time>:
	timer_clock_set_time(&deadline_timer->deadline, deadline);

	return 0;
}
uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
	deadline_timer->time_initial = deadline_timer->time_current;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	3330      	adds	r3, #48	; 0x30
 80005a4:	0011      	movs	r1, r2
 80005a6:	2218      	movs	r2, #24
 80005a8:	0018      	movs	r0, r3
 80005aa:	f005 f895 	bl	80056d8 <memcpy>
	return 0;
 80005ae:	2300      	movs	r3, #0
}
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <timer_clock_clear>:
	return 0;
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	timer->counts = 0;
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	2200      	movs	r2, #0
 80005c4:	2300      	movs	r3, #0
 80005c6:	600a      	str	r2, [r1, #0]
 80005c8:	604b      	str	r3, [r1, #4]
	timer->msec = 0;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
	timer->sec = 0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	0018      	movs	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	b002      	add	sp, #8
 80005de:	bd80      	pop	{r7, pc}

080005e0 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer,
												timer_clock_t new_time)
{
 80005e0:	b082      	sub	sp, #8
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
 80005ea:	2010      	movs	r0, #16
 80005ec:	1839      	adds	r1, r7, r0
 80005ee:	600a      	str	r2, [r1, #0]
 80005f0:	604b      	str	r3, [r1, #4]
	timer->msec = new_time.msec;
 80005f2:	0001      	movs	r1, r0
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	689a      	ldr	r2, [r3, #8]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]
	timer->sec = new_time.sec;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	68da      	ldr	r2, [r3, #12]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	60da      	str	r2, [r3, #12]
	return 0;
 8000604:	2300      	movs	r3, #0
}
 8000606:	0018      	movs	r0, r3
 8000608:	46bd      	mov	sp, r7
 800060a:	b002      	add	sp, #8
 800060c:	bc80      	pop	{r7}
 800060e:	bc08      	pop	{r3}
 8000610:	b002      	add	sp, #8
 8000612:	4718      	bx	r3

08000614 <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	timer->msec++;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	1c5a      	adds	r2, r3, #1
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	609a      	str	r2, [r3, #8]
	timer->counts++;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	2001      	movs	r0, #1
 800062e:	2100      	movs	r1, #0
 8000630:	1812      	adds	r2, r2, r0
 8000632:	414b      	adcs	r3, r1
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	600a      	str	r2, [r1, #0]
 8000638:	604b      	str	r3, [r1, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689b      	ldr	r3, [r3, #8]
 800063e:	4a05      	ldr	r2, [pc, #20]	; (8000654 <deadline_timer_increment+0x40>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d902      	bls.n	800064a <deadline_timer_increment+0x36>
	{
//		timer->sec++;
		timer->msec = 0;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
//	if(timer->counts >= (DEADLINE_MAX_COUNT) )
//	{
//		timer->counts = 0;
//	}

	return 0;
 800064a:	2300      	movs	r3, #0
}
 800064c:	0018      	movs	r0, r3
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	3b9ac9ff 	.word	0x3b9ac9ff

08000658 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6178      	str	r0, [r7, #20]
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 8000666:	2317      	movs	r3, #23
 8000668:	2208      	movs	r2, #8
 800066a:	189b      	adds	r3, r3, r2
 800066c:	19db      	adds	r3, r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
	int64_t remaining = 0;
 8000672:	2200      	movs	r2, #0
 8000674:	2300      	movs	r3, #0
 8000676:	623a      	str	r2, [r7, #32]
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t deadline_difference = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	61bb      	str	r3, [r7, #24]

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	001c      	movs	r4, r3
 800068a:	2300      	movs	r3, #0
 800068c:	001d      	movs	r5, r3
 800068e:	683a      	ldr	r2, [r7, #0]
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	1b12      	subs	r2, r2, r4
 8000694:	41ab      	sbcs	r3, r5
 8000696:	623a      	str	r2, [r7, #32]
 8000698:	627b      	str	r3, [r7, #36]	; 0x24

	if(remaining < 0)
 800069a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069c:	2b00      	cmp	r3, #0
 800069e:	da07      	bge.n	80006b0 <deadline_timer_compare_check+0x58>
	{
		remaining = (max_time - time_initial) + time_current;
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1ad2      	subs	r2, r2, r3
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	18d3      	adds	r3, r2, r3
 80006aa:	623b      	str	r3, [r7, #32]
 80006ac:	2300      	movs	r3, #0
 80006ae:	627b      	str	r3, [r7, #36]	; 0x24

	}
	deadline_difference = (uint32_t) remaining;
 80006b0:	6a3b      	ldr	r3, [r7, #32]
 80006b2:	61bb      	str	r3, [r7, #24]

	if(deadline_difference >= deadline)
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	d803      	bhi.n	80006c4 <deadline_timer_compare_check+0x6c>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 80006bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e002      	b.n	80006ca <deadline_timer_compare_check+0x72>
	}
	else
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
 80006c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80006ca:	2317      	movs	r3, #23
 80006cc:	2208      	movs	r2, #8
 80006ce:	189b      	adds	r3, r3, r2
 80006d0:	19db      	adds	r3, r3, r7
 80006d2:	781b      	ldrb	r3, [r3, #0]
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b00a      	add	sp, #40	; 0x28
 80006da:	bdb0      	pop	{r4, r5, r7, pc}

080006dc <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b089      	sub	sp, #36	; 0x24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	0008      	movs	r0, r1
 80006e6:	0011      	movs	r1, r2
 80006e8:	1cbb      	adds	r3, r7, #2
 80006ea:	1c02      	adds	r2, r0, #0
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	1c7b      	adds	r3, r7, #1
 80006f0:	1c0a      	adds	r2, r1, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(irq_type);
 80006f4:	1c7b      	adds	r3, r7, #1
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	0018      	movs	r0, r3
 80006fc:	f003 f82f 	bl	800375e <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	240c      	movs	r4, #12
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	2314      	movs	r3, #20
 8000708:	001a      	movs	r2, r3
 800070a:	2100      	movs	r1, #0
 800070c:	f004 ff9e 	bl	800564c <memset>

	HAL_GPIO_DeInit(port, pin);
 8000710:	1cbb      	adds	r3, r7, #2
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f003 f9a7 	bl	8003a6c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800071e:	1cbb      	adds	r3, r7, #2
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	193b      	adds	r3, r7, r4
 8000724:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000732:	193a      	adds	r2, r7, r4
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f003 f82d 	bl	8003798 <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	b009      	add	sp, #36	; 0x24
 8000744:	bd90      	pop	{r4, r7, pc}
	...

08000748 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b089      	sub	sp, #36	; 0x24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	0008      	movs	r0, r1
 8000752:	0011      	movs	r1, r2
 8000754:	1cbb      	adds	r3, r7, #2
 8000756:	1c02      	adds	r2, r0, #0
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	1c7b      	adds	r3, r7, #1
 800075c:	1c0a      	adds	r2, r1, #0
 800075e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	240c      	movs	r4, #12
 8000762:	193b      	adds	r3, r7, r4
 8000764:	0018      	movs	r0, r3
 8000766:	2314      	movs	r3, #20
 8000768:	001a      	movs	r2, r3
 800076a:	2100      	movs	r1, #0
 800076c:	f004 ff6e 	bl	800564c <memset>
	HAL_GPIO_DeInit(port, pin);
 8000770:	1cbb      	adds	r3, r7, #2
 8000772:	881a      	ldrh	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	0011      	movs	r1, r2
 8000778:	0018      	movs	r0, r3
 800077a:	f003 f977 	bl	8003a6c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800077e:	1cbb      	adds	r3, r7, #2
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	193b      	adds	r3, r7, r4
 8000784:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	4a0e      	ldr	r2, [pc, #56]	; (80007c4 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000792:	193a      	adds	r2, r7, r4
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	0011      	movs	r1, r2
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fffd 	bl	8003798 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 800079e:	1c7b      	adds	r3, r7, #1
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b25b      	sxtb	r3, r3
 80007a4:	2203      	movs	r2, #3
 80007a6:	2100      	movs	r1, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f002 ffb3 	bl	8003714 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 80007ae:	1c7b      	adds	r3, r7, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	b25b      	sxtb	r3, r3
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 ffc2 	bl	800373e <HAL_NVIC_EnableIRQ>


}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b009      	add	sp, #36	; 0x24
 80007c0:	bd90      	pop	{r4, r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	10110000 	.word	0x10110000

080007c8 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b089      	sub	sp, #36	; 0x24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	0008      	movs	r0, r1
 80007d2:	0011      	movs	r1, r2
 80007d4:	1cbb      	adds	r3, r7, #2
 80007d6:	1c02      	adds	r2, r0, #0
 80007d8:	801a      	strh	r2, [r3, #0]
 80007da:	1c7b      	adds	r3, r7, #1
 80007dc:	1c0a      	adds	r2, r1, #0
 80007de:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	240c      	movs	r4, #12
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2314      	movs	r3, #20
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f004 ff2e 	bl	800564c <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 80007f0:	1c7b      	adds	r3, r7, #1
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 ffb1 	bl	800375e <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 80007fc:	1cbb      	adds	r3, r7, #2
 80007fe:	881a      	ldrh	r2, [r3, #0]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	0011      	movs	r1, r2
 8000804:	0018      	movs	r0, r3
 8000806:	f003 f931 	bl	8003a6c <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800080a:	1cbb      	adds	r3, r7, #2
 800080c:	881a      	ldrh	r2, [r3, #0]
 800080e:	0021      	movs	r1, r4
 8000810:	187b      	adds	r3, r7, r1
 8000812:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2201      	movs	r2, #1
 8000818:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2203      	movs	r2, #3
 8000824:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000826:	187a      	adds	r2, r7, r1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f002 ffb3 	bl	8003798 <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0289      	lsls	r1, r1, #10
 800083c:	430a      	orrs	r2, r1
 800083e:	601a      	str	r2, [r3, #0]

}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b009      	add	sp, #36	; 0x24
 8000846:	bd90      	pop	{r4, r7, pc}
 8000848:	40010000 	.word	0x40010000

0800084c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b08b      	sub	sp, #44	; 0x2c
 8000850:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	2414      	movs	r4, #20
 8000854:	193b      	adds	r3, r7, r4
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f004 fef5 	bl	800564c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b73      	ldr	r3, [pc, #460]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000866:	4b72      	ldr	r3, [pc, #456]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000868:	2104      	movs	r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	; 0x34
 800086e:	4b70      	ldr	r3, [pc, #448]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	2204      	movs	r2, #4
 8000874:	4013      	ands	r3, r2
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b6d      	ldr	r3, [pc, #436]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087e:	4b6c      	ldr	r3, [pc, #432]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000880:	2120      	movs	r1, #32
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	; 0x34
 8000886:	4b6a      	ldr	r3, [pc, #424]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800088a:	2220      	movs	r2, #32
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b67      	ldr	r3, [pc, #412]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 8000898:	2101      	movs	r1, #1
 800089a:	430a      	orrs	r2, r1
 800089c:	635a      	str	r2, [r3, #52]	; 0x34
 800089e:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a2:	2201      	movs	r2, #1
 80008a4:	4013      	ands	r3, r2
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ae:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008b0:	2102      	movs	r1, #2
 80008b2:	430a      	orrs	r2, r1
 80008b4:	635a      	str	r2, [r3, #52]	; 0x34
 80008b6:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ba:	2202      	movs	r2, #2
 80008bc:	4013      	ands	r3, r2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80008c2:	23c0      	movs	r3, #192	; 0xc0
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	485b      	ldr	r0, [pc, #364]	; (8000a34 <MX_GPIO_Init+0x1e8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	0019      	movs	r1, r3
 80008cc:	f003 f9bb 	bl	8003c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 80008d0:	4959      	ldr	r1, [pc, #356]	; (8000a38 <MX_GPIO_Init+0x1ec>)
 80008d2:	23a0      	movs	r3, #160	; 0xa0
 80008d4:	05db      	lsls	r3, r3, #23
 80008d6:	2200      	movs	r2, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f003 f9b4 	bl	8003c46 <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 80008de:	4b57      	ldr	r3, [pc, #348]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	0018      	movs	r0, r3
 80008e6:	f003 f9ae 	bl	8003c46 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	22c0      	movs	r2, #192	; 0xc0
 80008ee:	0212      	lsls	r2, r2, #8
 80008f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2201      	movs	r2, #1
 80008f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000904:	193b      	adds	r3, r7, r4
 8000906:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x1e8>)
 8000908:	0019      	movs	r1, r3
 800090a:	0010      	movs	r0, r2
 800090c:	f002 ff44 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2204      	movs	r2, #4
 8000914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000922:	193b      	adds	r3, r7, r4
 8000924:	4a46      	ldr	r2, [pc, #280]	; (8000a40 <MX_GPIO_Init+0x1f4>)
 8000926:	0019      	movs	r1, r3
 8000928:	0010      	movs	r0, r2
 800092a:	f002 ff35 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 800092e:	193b      	adds	r3, r7, r4
 8000930:	4a41      	ldr	r2, [pc, #260]	; (8000a38 <MX_GPIO_Init+0x1ec>)
 8000932:	601a      	str	r2, [r3, #0]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	193a      	adds	r2, r7, r4
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f002 ff22 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2204      	movs	r2, #4
 8000958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	4a39      	ldr	r2, [pc, #228]	; (8000a44 <MX_GPIO_Init+0x1f8>)
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 8000966:	193a      	adds	r2, r7, r4
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f002 ff12 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2282      	movs	r2, #130	; 0x82
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800097c:	193b      	adds	r3, r7, r4
 800097e:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <MX_GPIO_Init+0x1fc>)
 8000980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	193b      	adds	r3, r7, r4
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	193a      	adds	r2, r7, r4
 800098a:	23a0      	movs	r3, #160	; 0xa0
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f002 ff01 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2260      	movs	r2, #96	; 0x60
 800099a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	193a      	adds	r2, r7, r4
 80009aa:	23a0      	movs	r3, #160	; 0xa0
 80009ac:	05db      	lsls	r3, r3, #23
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f002 fef1 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2240      	movs	r2, #64	; 0x40
 80009ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	2201      	movs	r2, #1
 80009c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	193b      	adds	r3, r7, r4
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	4a1a      	ldr	r2, [pc, #104]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 80009d2:	0019      	movs	r1, r3
 80009d4:	0010      	movs	r0, r2
 80009d6:	f002 fedf 	bl	8003798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2280      	movs	r2, #128	; 0x80
 80009e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <MX_GPIO_Init+0x200>)
 80009e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_GPIO_Init+0x1f0>)
 80009f2:	0019      	movs	r1, r3
 80009f4:	0010      	movs	r0, r2
 80009f6:	f002 fecf 	bl	8003798 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_GPIO_Init+0x204>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_GPIO_Init+0x204>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0449      	lsls	r1, r1, #17
 8000a04:	430a      	orrs	r2, r1
 8000a06:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2006      	movs	r0, #6
 8000a0e:	f002 fe81 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a12:	2006      	movs	r0, #6
 8000a14:	f002 fe93 	bl	800373e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2007      	movs	r0, #7
 8000a1e:	f002 fe79 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a22:	2007      	movs	r0, #7
 8000a24:	f002 fe8b 	bl	800373e <HAL_NVIC_EnableIRQ>

}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	b00b      	add	sp, #44	; 0x2c
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	50000800 	.word	0x50000800
 8000a38:	00000583 	.word	0x00000583
 8000a3c:	50000400 	.word	0x50000400
 8000a40:	50001400 	.word	0x50001400
 8000a44:	10210000 	.word	0x10210000
 8000a48:	10310000 	.word	0x10310000
 8000a4c:	10110000 	.word	0x10110000
 8000a50:	40010000 	.word	0x40010000

08000a54 <led_signal_setup>:
 */

#include "led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	6019      	str	r1, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1d3a      	adds	r2, r7, #4
 8000a66:	ca03      	ldmia	r2!, {r0, r1}
 8000a68:	c303      	stmia	r3!, {r0, r1}
	led_signal->type = LED_SIGNAL_OFF;
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	725a      	strb	r2, [r3, #9]

	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <led_signal_fsm>:



uint8_t led_signal_fsm(led_signal_t *led_signal)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
	led_signal_type_t type = led_signal->type;
 8000a82:	210f      	movs	r1, #15
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	7a52      	ldrb	r2, [r2, #9]
 8000a8a:	701a      	strb	r2, [r3, #0]

	switch(type)
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b03      	cmp	r3, #3
 8000a92:	d012      	beq.n	8000aba <led_signal_fsm+0x40>
 8000a94:	dc13      	bgt.n	8000abe <led_signal_fsm+0x44>
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d00a      	beq.n	8000ab0 <led_signal_fsm+0x36>
 8000a9a:	dc10      	bgt.n	8000abe <led_signal_fsm+0x44>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d010      	beq.n	8000ac2 <led_signal_fsm+0x48>
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d000      	beq.n	8000aa6 <led_signal_fsm+0x2c>
			led_signal_togle_fsm(led_signal);
			break;
		case LED_SIGNAL_BLINK_2:
			break;
		default:
			break;
 8000aa4:	e00b      	b.n	8000abe <led_signal_fsm+0x44>
			led_signal_solid_fsm(led_signal);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 f820 	bl	8000aee <led_signal_solid_fsm>
			break;
 8000aae:	e009      	b.n	8000ac4 <led_signal_fsm+0x4a>
			led_signal_togle_fsm(led_signal);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f872 	bl	8000b9c <led_signal_togle_fsm>
			break;
 8000ab8:	e004      	b.n	8000ac4 <led_signal_fsm+0x4a>
			break;
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	e002      	b.n	8000ac4 <led_signal_fsm+0x4a>
			break;
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	e000      	b.n	8000ac4 <led_signal_fsm+0x4a>
			break;
 8000ac2:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}

08000ace <led_signal_type_selector>:



uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	000a      	movs	r2, r1
 8000ad8:	1cfb      	adds	r3, r7, #3
 8000ada:	701a      	strb	r2, [r3, #0]
	led_signal->type = type;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	1cfa      	adds	r2, r7, #3
 8000ae0:	7812      	ldrb	r2, [r2, #0]
 8000ae2:	725a      	strb	r2, [r3, #9]
	return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}

08000aee <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b084      	sub	sp, #16
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000af6:	210f      	movs	r1, #15
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	7a92      	ldrb	r2, [r2, #10]
 8000afe:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000b00:	230e      	movs	r3, #14
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	7a12      	ldrb	r2, [r2, #8]
 8000b08:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	d027      	beq.n	8000b62 <led_signal_solid_fsm+0x74>
 8000b12:	dc31      	bgt.n	8000b78 <led_signal_solid_fsm+0x8a>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d01a      	beq.n	8000b4e <led_signal_solid_fsm+0x60>
 8000b18:	dc2e      	bgt.n	8000b78 <led_signal_solid_fsm+0x8a>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <led_signal_solid_fsm+0x36>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d00a      	beq.n	8000b38 <led_signal_solid_fsm+0x4a>
 8000b22:	e029      	b.n	8000b78 <led_signal_solid_fsm+0x8a>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000b24:	230e      	movs	r3, #14
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d129      	bne.n	8000b82 <led_signal_solid_fsm+0x94>
			{
				state = LED_SIGNAL_STATE_ON;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b36:	e024      	b.n	8000b82 <led_signal_solid_fsm+0x94>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6818      	ldr	r0, [r3, #0]
 8000b3c:	6859      	ldr	r1, [r3, #4]
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	f000 f8a1 	bl	8000c86 <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	2202      	movs	r2, #2
 8000b4a:	701a      	strb	r2, [r3, #0]
			break;
 8000b4c:	e01c      	b.n	8000b88 <led_signal_solid_fsm+0x9a>
		case LED_SIGNAL_STATE_SOLID_ON:

			if(control == LED_SIGNAL_CTRL_STOP)
 8000b4e:	230e      	movs	r3, #14
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d116      	bne.n	8000b86 <led_signal_solid_fsm+0x98>
			{
				state = LED_SIGNAL_STATE_END;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b60:	e011      	b.n	8000b86 <led_signal_solid_fsm+0x98>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	6859      	ldr	r1, [r3, #4]
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	f000 f8a0 	bl	8000cae <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000b6e:	230f      	movs	r3, #15
 8000b70:	18fb      	adds	r3, r7, r3
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
			break;
 8000b76:	e007      	b.n	8000b88 <led_signal_solid_fsm+0x9a>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
			break;
 8000b80:	e002      	b.n	8000b88 <led_signal_solid_fsm+0x9a>
			break;
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	e000      	b.n	8000b88 <led_signal_solid_fsm+0x9a>
			break;
 8000b86:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	18ba      	adds	r2, r7, r2
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	729a      	strb	r2, [r3, #10]

	return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	0018      	movs	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <led_signal_togle_fsm>:

uint8_t led_signal_togle_fsm(led_signal_t *led_signal)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	7a92      	ldrb	r2, [r2, #10]
 8000bac:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000bae:	230e      	movs	r3, #14
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	7a12      	ldrb	r2, [r2, #8]
 8000bb6:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b04      	cmp	r3, #4
 8000bbe:	d02d      	beq.n	8000c1c <led_signal_togle_fsm+0x80>
 8000bc0:	dc37      	bgt.n	8000c32 <led_signal_togle_fsm+0x96>
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d01a      	beq.n	8000bfc <led_signal_togle_fsm+0x60>
 8000bc6:	dc34      	bgt.n	8000c32 <led_signal_togle_fsm+0x96>
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <led_signal_togle_fsm+0x36>
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d00a      	beq.n	8000be6 <led_signal_togle_fsm+0x4a>
 8000bd0:	e02f      	b.n	8000c32 <led_signal_togle_fsm+0x96>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000bd2:	230e      	movs	r3, #14
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d12f      	bne.n	8000c3c <led_signal_togle_fsm+0xa0>
			{
				state = LED_SIGNAL_STATE_ON;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	2201      	movs	r2, #1
 8000be2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000be4:	e02a      	b.n	8000c3c <led_signal_togle_fsm+0xa0>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6818      	ldr	r0, [r3, #0]
 8000bea:	6859      	ldr	r1, [r3, #4]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	f000 f84a 	bl	8000c86 <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	701a      	strb	r2, [r3, #0]
			break;
 8000bfa:	e022      	b.n	8000c42 <led_signal_togle_fsm+0xa6>
		case LED_SIGNAL_STATE_TOGLE:

			led_signal_toggle(*led_signal);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	6859      	ldr	r1, [r3, #4]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	f000 f867 	bl	8000cd6 <led_signal_toggle>
			if(control == LED_SIGNAL_CTRL_STOP)
 8000c08:	230e      	movs	r3, #14
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d116      	bne.n	8000c40 <led_signal_togle_fsm+0xa4>
			{
				state = LED_SIGNAL_STATE_END;
 8000c12:	230f      	movs	r3, #15
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	2204      	movs	r2, #4
 8000c18:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c1a:	e011      	b.n	8000c40 <led_signal_togle_fsm+0xa4>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6818      	ldr	r0, [r3, #0]
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	689a      	ldr	r2, [r3, #8]
 8000c24:	f000 f843 	bl	8000cae <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
			break;
 8000c30:	e007      	b.n	8000c42 <led_signal_togle_fsm+0xa6>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000c32:	230f      	movs	r3, #15
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
			break;
 8000c3a:	e002      	b.n	8000c42 <led_signal_togle_fsm+0xa6>
			break;
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	e000      	b.n	8000c42 <led_signal_togle_fsm+0xa6>
			break;
 8000c40:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	220f      	movs	r2, #15
 8000c46:	18ba      	adds	r2, r7, r2
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	729a      	strb	r2, [r3, #10]

	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b004      	add	sp, #16
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <led_signal_start>:


uint8_t led_signal_start(led_signal_t *led_signal)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_START;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	721a      	strb	r2, [r3, #8]

	return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2201      	movs	r2, #1
 8000c7a:	721a      	strb	r2, [r3, #8]

	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b084      	sub	sp, #16
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	6018      	str	r0, [r3, #0]
 8000c90:	6059      	str	r1, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	889b      	ldrh	r3, [r3, #4]
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	f002 ffd1 	bl	8003c46 <HAL_GPIO_WritePin>
	return 0;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}

08000cae <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	6018      	str	r0, [r3, #0]
 8000cb8:	6059      	str	r1, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	889b      	ldrh	r3, [r3, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	0019      	movs	r1, r3
 8000cc8:	f002 ffbd 	bl	8003c46 <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b004      	add	sp, #16
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	6018      	str	r0, [r3, #0]
 8000ce0:	6059      	str	r1, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	889b      	ldrh	r3, [r3, #4]
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f002 ffc6 	bl	8003c80 <HAL_GPIO_TogglePin>
	return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b004      	add	sp, #16
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <light_setup>:
#include "lights.h"


uint8_t light_setup(light_t *light, light_gpio_t hardware_output_1,
												light_gpio_t hardware_output_2)
{
 8000cfe:	b082      	sub	sp, #8
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	1d38      	adds	r0, r7, #4
 8000d0a:	6001      	str	r1, [r0, #0]
 8000d0c:	6042      	str	r2, [r0, #4]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	2418      	movs	r4, #24
 8000d12:	1912      	adds	r2, r2, r4
 8000d14:	2108      	movs	r1, #8
 8000d16:	468c      	mov	ip, r1
 8000d18:	44bc      	add	ip, r7
 8000d1a:	4462      	add	r2, ip
 8000d1c:	6013      	str	r3, [r2, #0]

	light->hardware_output_1 = hardware_output_1;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	1d3a      	adds	r2, r7, #4
 8000d22:	3304      	adds	r3, #4
 8000d24:	ca03      	ldmia	r2!, {r0, r1}
 8000d26:	c303      	stmia	r3!, {r0, r1}
	light->hardware_output_2 = hardware_output_2;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2204      	movs	r2, #4
 8000d2c:	1912      	adds	r2, r2, r4
 8000d2e:	2108      	movs	r1, #8
 8000d30:	468c      	mov	ip, r1
 8000d32:	44bc      	add	ip, r7
 8000d34:	4462      	add	r2, ip
 8000d36:	330c      	adds	r3, #12
 8000d38:	ca03      	ldmia	r2!, {r0, r1}
 8000d3a:	c303      	stmia	r3!, {r0, r1}
	light_deenergize(light);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f978 	bl	8001034 <light_deenergize>
	light->light_status = LIGHT_OFF;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2221      	movs	r2, #33	; 0x21
 8000d4e:	2101      	movs	r1, #1
 8000d50:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2222      	movs	r2, #34	; 0x22
 8000d56:	2101      	movs	r1, #1
 8000d58:	5499      	strb	r1, [r3, r2]
	light->fsm_pulse_counts = 1;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	619a      	str	r2, [r3, #24]
	return 0;
 8000d60:	2300      	movs	r3, #0

}
 8000d62:	0018      	movs	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b005      	add	sp, #20
 8000d68:	bc90      	pop	{r4, r7}
 8000d6a:	bc08      	pop	{r3}
 8000d6c:	b002      	add	sp, #8
 8000d6e:	4718      	bx	r3

08000d70 <light_on_pulse_fsm>:
uint8_t light_on_pulse_fsm(light_t *light)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2221      	movs	r2, #33	; 0x21
 8000d7c:	5c9b      	ldrb	r3, [r3, r2]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d111      	bne.n	8000da6 <light_on_pulse_fsm+0x36>
		(light->fsm_run_off != LIGHT_RUN_TRUE) )
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2222      	movs	r2, #34	; 0x22
 8000d86:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00c      	beq.n	8000da6 <light_on_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_ON);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	0018      	movs	r0, r3
 8000d92:	f000 f890 	bl	8000eb6 <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7d1b      	ldrb	r3, [r3, #20]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d103      	bne.n	8000da6 <light_on_pulse_fsm+0x36>
		{
			light->fsm_run_on = LIGHT_RUN_FALSE;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2221      	movs	r2, #33	; 0x21
 8000da2:	2101      	movs	r1, #1
 8000da4:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	0018      	movs	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <light_off_pulse_fsm>:

uint8_t light_off_pulse_fsm(light_t *light)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2222      	movs	r2, #34	; 0x22
 8000dbc:	5c9b      	ldrb	r3, [r3, r2]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d111      	bne.n	8000de6 <light_off_pulse_fsm+0x36>
			(light->fsm_run_on != LIGHT_RUN_TRUE) )
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2221      	movs	r2, #33	; 0x21
 8000dc6:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00c      	beq.n	8000de6 <light_off_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_OFF);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 f870 	bl	8000eb6 <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	7d1b      	ldrb	r3, [r3, #20]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <light_off_pulse_fsm+0x36>
		{
			light->fsm_run_off = LIGHT_RUN_FALSE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2222      	movs	r2, #34	; 0x22
 8000de2:	2101      	movs	r1, #1
 8000de4:	5499      	strb	r1, [r3, r2]
		}
	}

	return 0;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	0018      	movs	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <light_ask_off_pulse_fsm>:


uint8_t light_ask_off_pulse_fsm(light_t *light)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000df8:	200f      	movs	r0, #15
 8000dfa:	183b      	adds	r3, r7, r0
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2221      	movs	r2, #33	; 0x21
 8000e04:	2101      	movs	r1, #1
 8000e06:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_TRUE;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2222      	movs	r2, #34	; 0x22
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2223      	movs	r2, #35	; 0x23
 8000e14:	2100      	movs	r1, #0
 8000e16:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2220      	movs	r2, #32
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]
	status = 0;
 8000e20:	183b      	adds	r3, r7, r0
 8000e22:	2200      	movs	r2, #0
 8000e24:	701a      	strb	r2, [r3, #0]

	return status;
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	781b      	ldrb	r3, [r3, #0]
}
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b004      	add	sp, #16
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <light_ask_on_pulse_fsm>:
uint8_t light_ask_on_pulse_fsm(light_t *light)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_TRUE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2221      	movs	r2, #33	; 0x21
 8000e46:	2100      	movs	r1, #0
 8000e48:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2222      	movs	r2, #34	; 0x22
 8000e4e:	2101      	movs	r1, #1
 8000e50:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2223      	movs	r2, #35	; 0x23
 8000e56:	2100      	movs	r1, #0
 8000e58:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2220      	movs	r2, #32
 8000e5e:	2100      	movs	r1, #0
 8000e60:	5499      	strb	r1, [r3, r2]

	return status;
 8000e62:	183b      	adds	r3, r7, r0
 8000e64:	781b      	ldrb	r3, [r3, #0]
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b004      	add	sp, #16
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <light_check_init_fsm>:
uint8_t light_check_init_fsm(light_t light, light_fsm_init_t *init)
{
 8000e6e:	b084      	sub	sp, #16
 8000e70:	b5b0      	push	{r4, r5, r7, lr}
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	250c      	movs	r5, #12
 8000e76:	1d2c      	adds	r4, r5, #4
 8000e78:	19e4      	adds	r4, r4, r7
 8000e7a:	6020      	str	r0, [r4, #0]
 8000e7c:	6061      	str	r1, [r4, #4]
 8000e7e:	60a2      	str	r2, [r4, #8]
 8000e80:	60e3      	str	r3, [r4, #12]
	*init = light.fsm_init;
 8000e82:	1d2b      	adds	r3, r5, #4
 8000e84:	19db      	adds	r3, r3, r7
 8000e86:	2223      	movs	r2, #35	; 0x23
 8000e88:	5c9a      	ldrb	r2, [r3, r2]
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bcb0      	pop	{r4, r5, r7}
 8000e96:	bc08      	pop	{r3}
 8000e98:	b004      	add	sp, #16
 8000e9a:	4718      	bx	r3

08000e9c <light_acknowledge_init_fsm>:

uint8_t light_acknowledge_init_fsm(light_t *light)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
	light->fsm_init = LIGHT_INIT_FALSE;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2223      	movs	r2, #35	; 0x23
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	5499      	strb	r1, [r3, r2]
	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	0018      	movs	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b002      	add	sp, #8
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <light_pulse_fsm>:



uint8_t light_pulse_fsm(light_t *light, light_status_t new_status)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b088      	sub	sp, #32
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	000a      	movs	r2, r1
 8000ec0:	1cfb      	adds	r3, r7, #3
 8000ec2:	701a      	strb	r2, [r3, #0]
	//TODO: (high) check if the implementation of this FSM is necessary

	light_fsm_state_t state = light->fsm_state;
 8000ec4:	201f      	movs	r0, #31
 8000ec6:	183b      	adds	r3, r7, r0
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	2120      	movs	r1, #32
 8000ecc:	5c52      	ldrb	r2, [r2, r1]
 8000ece:	701a      	strb	r2, [r3, #0]
//	light_fsm_init_t fsm_init = light->fsm_init;
	uint32_t fsm_pulse_counts = light->fsm_pulse_counts;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	613b      	str	r3, [r7, #16]
	uint32_t fsm_pulse_idx = light->fsm_pulse_idx;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	61bb      	str	r3, [r7, #24]
	light_fsm_status_t fsm_status = light->fsm_status;
 8000edc:	2317      	movs	r3, #23
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	7d12      	ldrb	r2, [r2, #20]
 8000ee4:	701a      	strb	r2, [r3, #0]
	light_fsm_init_t fsm_init = light->fsm_init;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	2123      	movs	r1, #35	; 0x23
 8000eee:	5c52      	ldrb	r2, [r2, r1]
 8000ef0:	701a      	strb	r2, [r3, #0]
//	light_status_t light_status = light->light_status;
//	light_status_t new_light_status = light->new_light_status;


	switch(state)
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d035      	beq.n	8000f66 <light_pulse_fsm+0xb0>
 8000efa:	dc41      	bgt.n	8000f80 <light_pulse_fsm+0xca>
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d002      	beq.n	8000f06 <light_pulse_fsm+0x50>
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d01e      	beq.n	8000f42 <light_pulse_fsm+0x8c>
			fsm_status = LIGHT_STATE_STATUS_READY;
			state = LIGHT_STATE_IDLE;
			break;
		default:

			break;
 8000f04:	e03c      	b.n	8000f80 <light_pulse_fsm+0xca>
				fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000f06:	2317      	movs	r3, #23
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
				if(new_status == LIGHT_ON)
 8000f0e:	1cfb      	adds	r3, r7, #3
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d104      	bne.n	8000f20 <light_pulse_fsm+0x6a>
					light_on(light);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 f84d 	bl	8000fb8 <light_on>
 8000f1e:	e003      	b.n	8000f28 <light_pulse_fsm+0x72>
					light_off(light);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	0018      	movs	r0, r3
 8000f24:	f000 f867 	bl	8000ff6 <light_off>
				if(fsm_pulse_counts == 0)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d104      	bne.n	8000f38 <light_pulse_fsm+0x82>
					state = LIGHT_STATE_DEENERGIZING;
 8000f2e:	231f      	movs	r3, #31
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	2203      	movs	r2, #3
 8000f34:	701a      	strb	r2, [r3, #0]
			break;
 8000f36:	e026      	b.n	8000f86 <light_pulse_fsm+0xd0>
					state = LIGHT_STATE_WAIT;
 8000f38:	231f      	movs	r3, #31
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	701a      	strb	r2, [r3, #0]
			break;
 8000f40:	e021      	b.n	8000f86 <light_pulse_fsm+0xd0>
			fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000f42:	2317      	movs	r3, #23
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2201      	movs	r2, #1
 8000f48:	701a      	strb	r2, [r3, #0]
			fsm_pulse_idx++;
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d915      	bls.n	8000f84 <light_pulse_fsm+0xce>
				state = LIGHT_STATE_DEENERGIZING;
 8000f58:	231f      	movs	r3, #31
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
			break;
 8000f64:	e00e      	b.n	8000f84 <light_pulse_fsm+0xce>
			light_deenergize(light);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 f863 	bl	8001034 <light_deenergize>
			fsm_status = LIGHT_STATE_STATUS_READY;
 8000f6e:	2317      	movs	r3, #23
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			state = LIGHT_STATE_IDLE;
 8000f76:	231f      	movs	r3, #31
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
			break;
 8000f7e:	e002      	b.n	8000f86 <light_pulse_fsm+0xd0>
			break;
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	e000      	b.n	8000f86 <light_pulse_fsm+0xd0>
			break;
 8000f84:	46c0      	nop			; (mov r8, r8)
	}

	light->fsm_state = state;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	221f      	movs	r2, #31
 8000f8a:	18ba      	adds	r2, r7, r2
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	545a      	strb	r2, [r3, r1]
	light->fsm_init = fsm_init;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	220f      	movs	r2, #15
 8000f96:	18ba      	adds	r2, r7, r2
 8000f98:	2123      	movs	r1, #35	; 0x23
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	545a      	strb	r2, [r3, r1]
	light->fsm_pulse_idx = fsm_pulse_idx;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	61da      	str	r2, [r3, #28]
	light->fsm_status = fsm_status;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2217      	movs	r2, #23
 8000fa8:	18ba      	adds	r2, r7, r2
 8000faa:	7812      	ldrb	r2, [r2, #0]
 8000fac:	751a      	strb	r2, [r3, #20]

	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b008      	add	sp, #32
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <light_on>:

uint8_t light_on(light_t *light)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6858      	ldr	r0, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	891b      	ldrh	r3, [r3, #8]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	0019      	movs	r1, r3
 8000fcc:	f002 fe3b 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68d8      	ldr	r0, [r3, #12]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8a1b      	ldrh	r3, [r3, #16]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	0019      	movs	r1, r3
 8000fdc:	f002 fe33 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_SET);

	light->light_status = LIGHT_ON;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_ON;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	705a      	strb	r2, [r3, #1]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <light_off>:

uint8_t light_off(light_t *light)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6858      	ldr	r0, [r3, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	891b      	ldrh	r3, [r3, #8]
 8001006:	2201      	movs	r2, #1
 8001008:	0019      	movs	r1, r3
 800100a:	f002 fe1c 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68d8      	ldr	r0, [r3, #12]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	8a1b      	ldrh	r3, [r3, #16]
 8001016:	2200      	movs	r2, #0
 8001018:	0019      	movs	r1, r3
 800101a:	f002 fe14 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->light_status = LIGHT_OFF;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_OFF;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	705a      	strb	r2, [r3, #1]
	return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}

08001034 <light_deenergize>:


uint8_t light_deenergize(light_t *light)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6858      	ldr	r0, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	891b      	ldrh	r3, [r3, #8]
 8001044:	2200      	movs	r2, #0
 8001046:	0019      	movs	r1, r3
 8001048:	f002 fdfd 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68d8      	ldr	r0, [r3, #12]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	8a1b      	ldrh	r3, [r3, #16]
 8001054:	2200      	movs	r2, #0
 8001056:	0019      	movs	r1, r3
 8001058:	f002 fdf5 	bl	8003c46 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->power_status = LIGHT_POWER_STATUS_DEENERGIZED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	705a      	strb	r2, [r3, #1]
	return 0;
 8001062:	2300      	movs	r3, #0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b002      	add	sp, #8
 800106a:	bd80      	pop	{r7, pc}

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	b0a7      	sub	sp, #156	; 0x9c
 8001070:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001072:	f002 f9d0 	bl	8003416 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001076:	f000 fb1d 	bl	80016b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800107a:	f7ff fbe7 	bl	800084c <MX_GPIO_Init>
  MX_TIM1_Init();
 800107e:	f001 ffaf 	bl	8002fe0 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001082:	f002 f88f 	bl	80031a4 <MX_TIM14_Init>
  MX_TIM3_Init();
 8001086:	f002 f805 	bl	8003094 <MX_TIM3_Init>
  MX_TIM17_Init();
 800108a:	f002 f8d7 	bl	800323c <MX_TIM17_Init>
  MX_TIM16_Init();
 800108e:	f002 f8ad 	bl	80031ec <MX_TIM16_Init>


  //DIP SWITCH SETUP
  switch_selector_t switch_selector;
  switch_selector_gpio_t switch_selector_gpio[2];//We can use malloc also
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001092:	2164      	movs	r1, #100	; 0x64
 8001094:	187b      	adds	r3, r7, r1
 8001096:	22a0      	movs	r2, #160	; 0xa0
 8001098:	05d2      	lsls	r2, r2, #23
 800109a:	601a      	str	r2, [r3, #0]
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2220      	movs	r2, #32
 80010a0:	809a      	strh	r2, [r3, #4]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	22a0      	movs	r2, #160	; 0xa0
 80010a6:	05d2      	lsls	r2, r2, #23
 80010a8:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2240      	movs	r2, #64	; 0x40
 80010ae:	819a      	strh	r2, [r3, #12]

  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 80010b0:	1879      	adds	r1, r7, r1
 80010b2:	2374      	movs	r3, #116	; 0x74
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2202      	movs	r2, #2
 80010b8:	0018      	movs	r0, r3
 80010ba:	f001 fe87 	bl	8002dcc <switch_selector_setup>

  //MOTION SENSOR SETUP
  //-------------------

  //This seems to be a good initial conf.
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 80010be:	4bf2      	ldr	r3, [pc, #968]	; (8001488 <main+0x41c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 80010c4:	4bf0      	ldr	r3, [pc, #960]	; (8001488 <main+0x41c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_4HZ;
 80010ca:	4bef      	ldr	r3, [pc, #956]	; (8001488 <main+0x41c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	719a      	strb	r2, [r3, #6]
//  motion_initial_conf.op_mode = PYD1598_FORCE_READOUT;
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 80010d0:	4bed      	ldr	r3, [pc, #948]	; (8001488 <main+0x41c>)
 80010d2:	2202      	movs	r2, #2
 80010d4:	711a      	strb	r2, [r3, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_1_PULSE;
 80010d6:	4bec      	ldr	r3, [pc, #944]	; (8001488 <main+0x41c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	709a      	strb	r2, [r3, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 80010dc:	4bea      	ldr	r3, [pc, #936]	; (8001488 <main+0x41c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	715a      	strb	r2, [r3, #5]
//  motion_initial_conf.threshold = 135;
//  motion_initial_conf.threshold = 80;
  motion_initial_conf.threshold = 20;
 80010e2:	4be9      	ldr	r3, [pc, #932]	; (8001488 <main+0x41c>)
 80010e4:	2214      	movs	r2, #20
 80010e6:	701a      	strb	r2, [r3, #0]
  motion_initial_conf.window_time = PYD1598_WT_2_SEC;
 80010e8:	4be7      	ldr	r3, [pc, #924]	; (8001488 <main+0x41c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	70da      	strb	r2, [r3, #3]

  //Hardware assignation:
  pyd1598_hardware_interface_t setin_pin;
  pyd1598_hardware_interface_t direct_link_pin;

  setin_pin.pin = SERIN_Pin;
 80010ee:	215c      	movs	r1, #92	; 0x5c
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2280      	movs	r2, #128	; 0x80
 80010f4:	01d2      	lsls	r2, r2, #7
 80010f6:	809a      	strh	r2, [r3, #4]
  setin_pin.port = SERIN_GPIO_Port;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	4ae4      	ldr	r2, [pc, #912]	; (800148c <main+0x420>)
 80010fc:	601a      	str	r2, [r3, #0]
  setin_pin.irq_type = EXTI4_15_IRQn;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2207      	movs	r2, #7
 8001102:	719a      	strb	r2, [r3, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001104:	2054      	movs	r0, #84	; 0x54
 8001106:	183b      	adds	r3, r7, r0
 8001108:	2280      	movs	r2, #128	; 0x80
 800110a:	809a      	strh	r2, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 800110c:	183b      	adds	r3, r7, r0
 800110e:	4ae0      	ldr	r2, [pc, #896]	; (8001490 <main+0x424>)
 8001110:	601a      	str	r2, [r3, #0]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001112:	183b      	adds	r3, r7, r0
 8001114:	2207      	movs	r2, #7
 8001116:	719a      	strb	r2, [r3, #6]

//  uint8_t idx = 0;

  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001118:	187b      	adds	r3, r7, r1
 800111a:	4adb      	ldr	r2, [pc, #876]	; (8001488 <main+0x41c>)
 800111c:	4cdd      	ldr	r4, [pc, #884]	; (8001494 <main+0x428>)
 800111e:	1838      	adds	r0, r7, r0
 8001120:	2104      	movs	r1, #4
 8001122:	4469      	add	r1, sp
 8001124:	c860      	ldmia	r0!, {r5, r6}
 8001126:	c160      	stmia	r1!, {r5, r6}
 8001128:	4669      	mov	r1, sp
 800112a:	6858      	ldr	r0, [r3, #4]
 800112c:	6008      	str	r0, [r1, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6811      	ldr	r1, [r2, #0]
 8001132:	6852      	ldr	r2, [r2, #4]
 8001134:	0020      	movs	r0, r4
 8001136:	f000 ff9a 	bl	800206e <pyd1598_setup>

//  pyd1598_serin_set_zero_pulse(setin_pin);
  HAL_Delay(1000);
 800113a:	23fa      	movs	r3, #250	; 0xfa
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	0018      	movs	r0, r3
 8001140:	f002 f9e6 	bl	8003510 <HAL_Delay>

  pyd1598_request_write(&motion_sensor);
 8001144:	4bd3      	ldr	r3, [pc, #844]	; (8001494 <main+0x428>)
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f9b6 	bl	80024b8 <pyd1598_request_write>

  //LIGHTS SETUP
  //-----------
  //timers config:
  deadline.msec = 20;
 800114c:	4bd2      	ldr	r3, [pc, #840]	; (8001498 <main+0x42c>)
 800114e:	2214      	movs	r2, #20
 8001150:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8001152:	4bd1      	ldr	r3, [pc, #836]	; (8001498 <main+0x42c>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001158:	4ccf      	ldr	r4, [pc, #828]	; (8001498 <main+0x42c>)
 800115a:	4dd0      	ldr	r5, [pc, #832]	; (800149c <main+0x430>)
 800115c:	466b      	mov	r3, sp
 800115e:	0018      	movs	r0, r3
 8001160:	0023      	movs	r3, r4
 8001162:	3308      	adds	r3, #8
 8001164:	2210      	movs	r2, #16
 8001166:	0019      	movs	r1, r3
 8001168:	f004 fab6 	bl	80056d8 <memcpy>
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	6863      	ldr	r3, [r4, #4]
 8001170:	0028      	movs	r0, r5
 8001172:	f7ff f956 	bl	8000422 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8001176:	4cc8      	ldr	r4, [pc, #800]	; (8001498 <main+0x42c>)
 8001178:	4dc9      	ldr	r5, [pc, #804]	; (80014a0 <main+0x434>)
 800117a:	466b      	mov	r3, sp
 800117c:	0018      	movs	r0, r3
 800117e:	0023      	movs	r3, r4
 8001180:	3308      	adds	r3, #8
 8001182:	2210      	movs	r2, #16
 8001184:	0019      	movs	r1, r3
 8001186:	f004 faa7 	bl	80056d8 <memcpy>
 800118a:	6822      	ldr	r2, [r4, #0]
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	0028      	movs	r0, r5
 8001190:	f7ff f947 	bl	8000422 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8001194:	4cc0      	ldr	r4, [pc, #768]	; (8001498 <main+0x42c>)
 8001196:	4dc3      	ldr	r5, [pc, #780]	; (80014a4 <main+0x438>)
 8001198:	466b      	mov	r3, sp
 800119a:	0018      	movs	r0, r3
 800119c:	0023      	movs	r3, r4
 800119e:	3308      	adds	r3, #8
 80011a0:	2210      	movs	r2, #16
 80011a2:	0019      	movs	r1, r3
 80011a4:	f004 fa98 	bl	80056d8 <memcpy>
 80011a8:	6822      	ldr	r2, [r4, #0]
 80011aa:	6863      	ldr	r3, [r4, #4]
 80011ac:	0028      	movs	r0, r5
 80011ae:	f7ff f938 	bl	8000422 <deadline_timer_setup>
  light_gpio_t light_2_output_a;
  light_gpio_t light_2_output_b;
  light_gpio_t light_uv_output_a;
  light_gpio_t light_uv_output_b;

  light_1_output_a.pin = LAMP1_OUTA_Pin;
 80011b2:	214c      	movs	r1, #76	; 0x4c
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	809a      	strh	r2, [r3, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 80011ba:	253c      	movs	r5, #60	; 0x3c
 80011bc:	197b      	adds	r3, r7, r5
 80011be:	2280      	movs	r2, #128	; 0x80
 80011c0:	0052      	lsls	r2, r2, #1
 80011c2:	809a      	strh	r2, [r3, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 80011c4:	262c      	movs	r6, #44	; 0x2c
 80011c6:	19bb      	adds	r3, r7, r6
 80011c8:	2201      	movs	r2, #1
 80011ca:	809a      	strh	r2, [r3, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 80011cc:	2044      	movs	r0, #68	; 0x44
 80011ce:	183b      	adds	r3, r7, r0
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	809a      	strh	r2, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 80011d6:	2434      	movs	r4, #52	; 0x34
 80011d8:	193b      	adds	r3, r7, r4
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	809a      	strh	r2, [r3, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 80011de:	2324      	movs	r3, #36	; 0x24
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	4ab1      	ldr	r2, [pc, #708]	; (80014a8 <main+0x43c>)
 80011e4:	809a      	strh	r2, [r3, #4]

  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 80011e6:	187b      	adds	r3, r7, r1
 80011e8:	4aa9      	ldr	r2, [pc, #676]	; (8001490 <main+0x424>)
 80011ea:	601a      	str	r2, [r3, #0]
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 80011ec:	197b      	adds	r3, r7, r5
 80011ee:	22a0      	movs	r2, #160	; 0xa0
 80011f0:	05d2      	lsls	r2, r2, #23
 80011f2:	601a      	str	r2, [r3, #0]
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 80011f4:	19bb      	adds	r3, r7, r6
 80011f6:	22a0      	movs	r2, #160	; 0xa0
 80011f8:	05d2      	lsls	r2, r2, #23
 80011fa:	601a      	str	r2, [r3, #0]
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 80011fc:	183b      	adds	r3, r7, r0
 80011fe:	22a0      	movs	r2, #160	; 0xa0
 8001200:	05d2      	lsls	r2, r2, #23
 8001202:	601a      	str	r2, [r3, #0]
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001204:	193b      	adds	r3, r7, r4
 8001206:	22a0      	movs	r2, #160	; 0xa0
 8001208:	05d2      	lsls	r2, r2, #23
 800120a:	601a      	str	r2, [r3, #0]
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 800120c:	2324      	movs	r3, #36	; 0x24
 800120e:	18fb      	adds	r3, r7, r3
 8001210:	4a9e      	ldr	r2, [pc, #632]	; (800148c <main+0x420>)
 8001212:	601a      	str	r2, [r3, #0]


  light_setup(&light_1,light_1_output_a, light_1_output_b);
 8001214:	183b      	adds	r3, r7, r0
 8001216:	187a      	adds	r2, r7, r1
 8001218:	4ca4      	ldr	r4, [pc, #656]	; (80014ac <main+0x440>)
 800121a:	4669      	mov	r1, sp
 800121c:	6858      	ldr	r0, [r3, #4]
 800121e:	6008      	str	r0, [r1, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6811      	ldr	r1, [r2, #0]
 8001224:	6852      	ldr	r2, [r2, #4]
 8001226:	0020      	movs	r0, r4
 8001228:	f7ff fd69 	bl	8000cfe <light_setup>
  light_setup(&light_2,light_2_output_a, light_2_output_b);
 800122c:	2434      	movs	r4, #52	; 0x34
 800122e:	193b      	adds	r3, r7, r4
 8001230:	197a      	adds	r2, r7, r5
 8001232:	4c9f      	ldr	r4, [pc, #636]	; (80014b0 <main+0x444>)
 8001234:	4669      	mov	r1, sp
 8001236:	6858      	ldr	r0, [r3, #4]
 8001238:	6008      	str	r0, [r1, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6811      	ldr	r1, [r2, #0]
 800123e:	6852      	ldr	r2, [r2, #4]
 8001240:	0020      	movs	r0, r4
 8001242:	f7ff fd5c 	bl	8000cfe <light_setup>
  light_setup(&light_uv,light_uv_output_a, light_uv_output_b);
 8001246:	2324      	movs	r3, #36	; 0x24
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	19ba      	adds	r2, r7, r6
 800124c:	4c99      	ldr	r4, [pc, #612]	; (80014b4 <main+0x448>)
 800124e:	4669      	mov	r1, sp
 8001250:	6858      	ldr	r0, [r3, #4]
 8001252:	6008      	str	r0, [r1, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6811      	ldr	r1, [r2, #0]
 8001258:	6852      	ldr	r2, [r2, #4]
 800125a:	0020      	movs	r0, r4
 800125c:	f7ff fd4f 	bl	8000cfe <light_setup>

  //BUTTONS SETUP
  //-------------

  //timers config:
  timer_buttons.msec = 1;
 8001260:	4b95      	ldr	r3, [pc, #596]	; (80014b8 <main+0x44c>)
 8001262:	2201      	movs	r2, #1
 8001264:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001266:	4c94      	ldr	r4, [pc, #592]	; (80014b8 <main+0x44c>)
 8001268:	4d94      	ldr	r5, [pc, #592]	; (80014bc <main+0x450>)
 800126a:	466b      	mov	r3, sp
 800126c:	0018      	movs	r0, r3
 800126e:	0023      	movs	r3, r4
 8001270:	3308      	adds	r3, #8
 8001272:	2210      	movs	r2, #16
 8001274:	0019      	movs	r1, r3
 8001276:	f004 fa2f 	bl	80056d8 <memcpy>
 800127a:	6822      	ldr	r2, [r4, #0]
 800127c:	6863      	ldr	r3, [r4, #4]
 800127e:	0028      	movs	r0, r5
 8001280:	f7ff f8cf 	bl	8000422 <deadline_timer_setup>

  //Hardware assignation:
  button_gpio_t button_input;
  button_input.pin = LAMP1_IN_Pin;
 8001284:	211c      	movs	r1, #28
 8001286:	187b      	adds	r3, r7, r1
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	0092      	lsls	r2, r2, #2
 800128c:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	22a0      	movs	r2, #160	; 0xa0
 8001292:	05d2      	lsls	r2, r2, #23
 8001294:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_1, button_input);
 8001296:	000c      	movs	r4, r1
 8001298:	187b      	adds	r3, r7, r1
 800129a:	4889      	ldr	r0, [pc, #548]	; (80014c0 <main+0x454>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	f7fe ffbe 	bl	8000220 <button_setup>

  button_input.pin = LAMP2_IN_Pin;
 80012a4:	0021      	movs	r1, r4
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2208      	movs	r2, #8
 80012aa:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP2_IN_GPIO_Port;
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	22a0      	movs	r2, #160	; 0xa0
 80012b0:	05d2      	lsls	r2, r2, #23
 80012b2:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_2, button_input);
 80012b4:	000c      	movs	r4, r1
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	4882      	ldr	r0, [pc, #520]	; (80014c4 <main+0x458>)
 80012ba:	6819      	ldr	r1, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	f7fe ffaf 	bl	8000220 <button_setup>

  button_input.pin = UV_IN_Pin;
 80012c2:	0021      	movs	r1, r4
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2204      	movs	r2, #4
 80012c8:	809a      	strh	r2, [r3, #4]
  button_input.port = UV_IN_GPIO_Port;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	22a0      	movs	r2, #160	; 0xa0
 80012ce:	05d2      	lsls	r2, r2, #23
 80012d0:	601a      	str	r2, [r3, #0]
  button_setup(&button_uv, button_input);
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	487c      	ldr	r0, [pc, #496]	; (80014c8 <main+0x45c>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	f7fe ffa1 	bl	8000220 <button_setup>
  //-------------
  led_signal_t signal_led;
  led_signal_gpio_t signal_led_gpio;
  deadline_timer_expired_t indicator_timer_expired;

  signal_led_gpio.pin = LED_Pin;
 80012de:	2108      	movs	r1, #8
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2202      	movs	r2, #2
 80012e4:	809a      	strh	r2, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	22a0      	movs	r2, #160	; 0xa0
 80012ea:	05d2      	lsls	r2, r2, #23
 80012ec:	601a      	str	r2, [r3, #0]
  led_signal_setup(&signal_led, signal_led_gpio);
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2610      	movs	r6, #16
 80012f2:	19b8      	adds	r0, r7, r6
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	f7ff fbac 	bl	8000a54 <led_signal_setup>
  deadline.msec = 500;
 80012fc:	4b66      	ldr	r3, [pc, #408]	; (8001498 <main+0x42c>)
 80012fe:	22fa      	movs	r2, #250	; 0xfa
 8001300:	0052      	lsls	r2, r2, #1
 8001302:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8001304:	4b64      	ldr	r3, [pc, #400]	; (8001498 <main+0x42c>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
//  deadline_timer_setup(&deadline_led_indicator, deadline);

  deadline_timer_setup_shared_clock(&deadline_led_indicator,
 800130a:	4c63      	ldr	r4, [pc, #396]	; (8001498 <main+0x42c>)
 800130c:	4e6b      	ldr	r6, [pc, #428]	; (80014bc <main+0x450>)
 800130e:	4d6f      	ldr	r5, [pc, #444]	; (80014cc <main+0x460>)
 8001310:	466b      	mov	r3, sp
 8001312:	0018      	movs	r0, r3
 8001314:	0023      	movs	r3, r4
 8001316:	3308      	adds	r3, #8
 8001318:	2210      	movs	r2, #16
 800131a:	0019      	movs	r1, r3
 800131c:	f004 f9dc 	bl	80056d8 <memcpy>
 8001320:	6822      	ldr	r2, [r4, #0]
 8001322:	6863      	ldr	r3, [r4, #4]
 8001324:	0031      	movs	r1, r6
 8001326:	0028      	movs	r0, r5
 8001328:	f7ff f8af 	bl	800048a <deadline_timer_setup_shared_clock>
		  	  	  	  	  	  	  &deadline_buttons.time_current, deadline);

  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 800132c:	2610      	movs	r6, #16
 800132e:	19bb      	adds	r3, r7, r6
 8001330:	2101      	movs	r1, #1
 8001332:	0018      	movs	r0, r3
 8001334:	f7ff fbcb 	bl	8000ace <led_signal_type_selector>

  //APPLICATION LIGHT SETUP
  //-------------
//TODO: (medium) create a typedef for all this
  //Light 1
  timer_motion_light_1.msec = 5000;
 8001338:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <main+0x464>)
 800133a:	4a66      	ldr	r2, [pc, #408]	; (80014d4 <main+0x468>)
 800133c:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 800133e:	4c64      	ldr	r4, [pc, #400]	; (80014d0 <main+0x464>)
 8001340:	4d65      	ldr	r5, [pc, #404]	; (80014d8 <main+0x46c>)
 8001342:	466b      	mov	r3, sp
 8001344:	0018      	movs	r0, r3
 8001346:	0023      	movs	r3, r4
 8001348:	3308      	adds	r3, #8
 800134a:	2210      	movs	r2, #16
 800134c:	0019      	movs	r1, r3
 800134e:	f004 f9c3 	bl	80056d8 <memcpy>
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	0028      	movs	r0, r5
 8001358:	f7ff f863 	bl	8000422 <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 800135c:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <main+0x470>)
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]

  //Light 2
  timer_motion_light_2.msec = 5000;
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <main+0x474>)
 8001364:	4a5b      	ldr	r2, [pc, #364]	; (80014d4 <main+0x468>)
 8001366:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 8001368:	4c59      	ldr	r4, [pc, #356]	; (80014d0 <main+0x464>)
 800136a:	4d5e      	ldr	r5, [pc, #376]	; (80014e4 <main+0x478>)
 800136c:	466b      	mov	r3, sp
 800136e:	0018      	movs	r0, r3
 8001370:	0023      	movs	r3, r4
 8001372:	3308      	adds	r3, #8
 8001374:	2210      	movs	r2, #16
 8001376:	0019      	movs	r1, r3
 8001378:	f004 f9ae 	bl	80056d8 <memcpy>
 800137c:	6822      	ldr	r2, [r4, #0]
 800137e:	6863      	ldr	r3, [r4, #4]
 8001380:	0028      	movs	r0, r5
 8001382:	f7ff f84e 	bl	8000422 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 8001386:	4b58      	ldr	r3, [pc, #352]	; (80014e8 <main+0x47c>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]

  //Light UV
  timer_motion_uv.msec = 5000;
 800138c:	4b57      	ldr	r3, [pc, #348]	; (80014ec <main+0x480>)
 800138e:	4a51      	ldr	r2, [pc, #324]	; (80014d4 <main+0x468>)
 8001390:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 8001392:	4c56      	ldr	r4, [pc, #344]	; (80014ec <main+0x480>)
 8001394:	4d56      	ldr	r5, [pc, #344]	; (80014f0 <main+0x484>)
 8001396:	466b      	mov	r3, sp
 8001398:	0018      	movs	r0, r3
 800139a:	0023      	movs	r3, r4
 800139c:	3308      	adds	r3, #8
 800139e:	2210      	movs	r2, #16
 80013a0:	0019      	movs	r1, r3
 80013a2:	f004 f999 	bl	80056d8 <memcpy>
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	0028      	movs	r0, r5
 80013ac:	f7ff f839 	bl	8000422 <deadline_timer_setup>
  timer_motion_uv_safe.msec = 5000;
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <main+0x488>)
 80013b2:	4a48      	ldr	r2, [pc, #288]	; (80014d4 <main+0x468>)
 80013b4:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv);
 80013b6:	4c4d      	ldr	r4, [pc, #308]	; (80014ec <main+0x480>)
 80013b8:	4d4f      	ldr	r5, [pc, #316]	; (80014f8 <main+0x48c>)
 80013ba:	466b      	mov	r3, sp
 80013bc:	0018      	movs	r0, r3
 80013be:	0023      	movs	r3, r4
 80013c0:	3308      	adds	r3, #8
 80013c2:	2210      	movs	r2, #16
 80013c4:	0019      	movs	r1, r3
 80013c6:	f004 f987 	bl	80056d8 <memcpy>
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6863      	ldr	r3, [r4, #4]
 80013ce:	0028      	movs	r0, r5
 80013d0:	f7ff f827 	bl	8000422 <deadline_timer_setup>
  uv_state = MOTION_LIGHT_UV_IDLE;
 80013d4:	4b49      	ldr	r3, [pc, #292]	; (80014fc <main+0x490>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
  abort_uv = MOTION_ABORT_FALSE;
 80013da:	4b49      	ldr	r3, [pc, #292]	; (8001500 <main+0x494>)
 80013dc:	2201      	movs	r2, #1
 80013de:	701a      	strb	r2, [r3, #0]

  //motion switch
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 80013e0:	4b48      	ldr	r3, [pc, #288]	; (8001504 <main+0x498>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 80013e6:	4b48      	ldr	r3, [pc, #288]	; (8001508 <main+0x49c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	701a      	strb	r2, [r3, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 80013ec:	4b47      	ldr	r3, [pc, #284]	; (800150c <main+0x4a0>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]

  //Start interrupts:
  HAL_TIM_Base_Start_IT(&htim1);
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <main+0x4a4>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f003 f811 	bl	800441c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <main+0x4a8>)
 80013fc:	0018      	movs	r0, r3
 80013fe:	f003 f80d 	bl	800441c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <main+0x4ac>)
 8001404:	0018      	movs	r0, r3
 8001406:	f003 f809 	bl	800441c <HAL_TIM_Base_Start_IT>

  //Direct Link communication timer
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2016      	movs	r0, #22
 8001410:	f002 f980 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001414:	2016      	movs	r0, #22
 8001416:	f002 f992 	bl	800373e <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim17);
 800141a:	4b40      	ldr	r3, [pc, #256]	; (800151c <main+0x4b0>)
 800141c:	0018      	movs	r0, r3
 800141e:	f002 fffd 	bl	800441c <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2100      	movs	r1, #0
 8001426:	2007      	movs	r0, #7
 8001428:	f002 f974 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800142c:	2007      	movs	r0, #7
 800142e:	f002 f986 	bl	800373e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2103      	movs	r1, #3
 8001436:	2006      	movs	r0, #6
 8001438:	f002 f96c 	bl	8003714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800143c:	2006      	movs	r0, #6
 800143e:	f002 f97e 	bl	800373e <HAL_NVIC_EnableIRQ>



  light_ask_off_pulse_fsm(&light_1);
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <main+0x440>)
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff fcd3 	bl	8000df0 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_2);
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <main+0x444>)
 800144c:	0018      	movs	r0, r3
 800144e:	f7ff fccf 	bl	8000df0 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_uv);
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <main+0x448>)
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff fccb 	bl	8000df0 <light_ask_off_pulse_fsm>
  led_signal_stop(&signal_led);
 800145a:	19bb      	adds	r3, r7, r6
 800145c:	0018      	movs	r0, r3
 800145e:	f7ff fc06 	bl	8000c6e <led_signal_stop>
#ifdef DEBUG_REYNOLDS

//	  event_detection();


	  switch(switch_selector.value)
 8001462:	2374      	movs	r3, #116	; 0x74
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b03      	cmp	r3, #3
 800146a:	d100      	bne.n	800146e <main+0x402>
 800146c:	e0c7      	b.n	80015fe <main+0x592>
 800146e:	d900      	bls.n	8001472 <main+0x406>
 8001470:	e0c7      	b.n	8001602 <main+0x596>
 8001472:	2b02      	cmp	r3, #2
 8001474:	d100      	bne.n	8001478 <main+0x40c>
 8001476:	e0c0      	b.n	80015fa <main+0x58e>
 8001478:	d900      	bls.n	800147c <main+0x410>
 800147a:	e0c2      	b.n	8001602 <main+0x596>
 800147c:	2b00      	cmp	r3, #0
 800147e:	d04f      	beq.n	8001520 <main+0x4b4>
 8001480:	2b01      	cmp	r3, #1
 8001482:	d100      	bne.n	8001486 <main+0x41a>
 8001484:	e086      	b.n	8001594 <main+0x528>
 8001486:	e0bc      	b.n	8001602 <main+0x596>
 8001488:	200000e8 	.word	0x200000e8
 800148c:	50000800 	.word	0x50000800
 8001490:	50000400 	.word	0x50000400
 8001494:	20000088 	.word	0x20000088
 8001498:	20000228 	.word	0x20000228
 800149c:	200000f0 	.word	0x200000f0
 80014a0:	20000158 	.word	0x20000158
 80014a4:	200001c0 	.word	0x200001c0
 80014a8:	ffff8000 	.word	0xffff8000
 80014ac:	20000240 	.word	0x20000240
 80014b0:	20000264 	.word	0x20000264
 80014b4:	20000288 	.word	0x20000288
 80014b8:	20000318 	.word	0x20000318
 80014bc:	200002b0 	.word	0x200002b0
 80014c0:	20000330 	.word	0x20000330
 80014c4:	20000348 	.word	0x20000348
 80014c8:	20000360 	.word	0x20000360
 80014cc:	20000380 	.word	0x20000380
 80014d0:	20000450 	.word	0x20000450
 80014d4:	00001388 	.word	0x00001388
 80014d8:	200003e8 	.word	0x200003e8
 80014dc:	20000468 	.word	0x20000468
 80014e0:	200004d8 	.word	0x200004d8
 80014e4:	20000470 	.word	0x20000470
 80014e8:	200004f0 	.word	0x200004f0
 80014ec:	20000560 	.word	0x20000560
 80014f0:	200004f8 	.word	0x200004f8
 80014f4:	200005e0 	.word	0x200005e0
 80014f8:	20000578 	.word	0x20000578
 80014fc:	200005f8 	.word	0x200005f8
 8001500:	200005f9 	.word	0x200005f9
 8001504:	20000378 	.word	0x20000378
 8001508:	20000379 	.word	0x20000379
 800150c:	2000037a 	.word	0x2000037a
 8001510:	20000600 	.word	0x20000600
 8001514:	20000698 	.word	0x20000698
 8001518:	200006e4 	.word	0x200006e4
 800151c:	20000730 	.word	0x20000730
	  {
		  case MOTION_SWITCH_MODE_0:
			  events_detection(&motion_sensor, &deadline_buttons,
 8001520:	4c4c      	ldr	r4, [pc, #304]	; (8001654 <main+0x5e8>)
 8001522:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <main+0x5ec>)
 8001524:	494d      	ldr	r1, [pc, #308]	; (800165c <main+0x5f0>)
 8001526:	484e      	ldr	r0, [pc, #312]	; (8001660 <main+0x5f4>)
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <main+0x5f8>)
 800152a:	9304      	str	r3, [sp, #16]
 800152c:	4b4e      	ldr	r3, [pc, #312]	; (8001668 <main+0x5fc>)
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	4b4e      	ldr	r3, [pc, #312]	; (800166c <main+0x600>)
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <main+0x604>)
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	4b4e      	ldr	r3, [pc, #312]	; (8001674 <main+0x608>)
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	0023      	movs	r3, r4
 800153e:	f000 f974 	bl	800182a <events_detection>
			  			  	  	  &button_light_1, &button_light_2, &button_uv,
			  					  &motion_sensed_light_1, &motion_sensed_light_2,
			  					  &motion_sensed_uv,
			  					  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8001542:	4c4d      	ldr	r4, [pc, #308]	; (8001678 <main+0x60c>)
 8001544:	4a46      	ldr	r2, [pc, #280]	; (8001660 <main+0x5f4>)
 8001546:	4944      	ldr	r1, [pc, #272]	; (8001658 <main+0x5ec>)
 8001548:	484c      	ldr	r0, [pc, #304]	; (800167c <main+0x610>)
 800154a:	4b49      	ldr	r3, [pc, #292]	; (8001670 <main+0x604>)
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	4b4c      	ldr	r3, [pc, #304]	; (8001680 <main+0x614>)
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	0023      	movs	r3, r4
 8001554:	f000 fa96 	bl	8001a84 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 8001558:	4c4a      	ldr	r4, [pc, #296]	; (8001684 <main+0x618>)
 800155a:	4a41      	ldr	r2, [pc, #260]	; (8001660 <main+0x5f4>)
 800155c:	493d      	ldr	r1, [pc, #244]	; (8001654 <main+0x5e8>)
 800155e:	484a      	ldr	r0, [pc, #296]	; (8001688 <main+0x61c>)
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <main+0x600>)
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	4b49      	ldr	r3, [pc, #292]	; (800168c <main+0x620>)
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	0023      	movs	r3, r4
 800156a:	f000 fa8b 	bl	8001a84 <motion_light_control_fsm>
										&deadline_motion_light_2, &light_2_state,
										&motion_sensed_light_2);

			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
 800156e:	4c48      	ldr	r4, [pc, #288]	; (8001690 <main+0x624>)
 8001570:	4a3b      	ldr	r2, [pc, #236]	; (8001660 <main+0x5f4>)
 8001572:	4940      	ldr	r1, [pc, #256]	; (8001674 <main+0x608>)
 8001574:	4847      	ldr	r0, [pc, #284]	; (8001694 <main+0x628>)
 8001576:	2310      	movs	r3, #16
 8001578:	18fb      	adds	r3, r7, r3
 800157a:	9304      	str	r3, [sp, #16]
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <main+0x5f8>)
 800157e:	9303      	str	r3, [sp, #12]
 8001580:	4b39      	ldr	r3, [pc, #228]	; (8001668 <main+0x5fc>)
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <main+0x62c>)
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	4b44      	ldr	r3, [pc, #272]	; (800169c <main+0x630>)
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	0023      	movs	r3, r4
 800158e:	f000 fb2f 	bl	8001bf0 <motion_light_uv_control_fsm>
								&deadline_motion_uv, &deadline_motion_uv_safe,
								&uv_state,&motion_sensed_uv, &abort_uv, &signal_led);
			  break;
 8001592:	e038      	b.n	8001606 <main+0x59a>
		  case MOTION_SWITCH_MODE_1:

			  events_detection_motion_in_one_lamp(&motion_sensor, &deadline_buttons,
 8001594:	4c2f      	ldr	r4, [pc, #188]	; (8001654 <main+0x5e8>)
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <main+0x5ec>)
 8001598:	4930      	ldr	r1, [pc, #192]	; (800165c <main+0x5f0>)
 800159a:	4831      	ldr	r0, [pc, #196]	; (8001660 <main+0x5f4>)
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <main+0x5f8>)
 800159e:	9303      	str	r3, [sp, #12]
 80015a0:	4b31      	ldr	r3, [pc, #196]	; (8001668 <main+0x5fc>)
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	4b32      	ldr	r3, [pc, #200]	; (8001670 <main+0x604>)
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <main+0x608>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	0023      	movs	r3, r4
 80015ae:	f000 f9d6 	bl	800195e <events_detection_motion_in_one_lamp>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80015b2:	4c31      	ldr	r4, [pc, #196]	; (8001678 <main+0x60c>)
 80015b4:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <main+0x5f4>)
 80015b6:	4928      	ldr	r1, [pc, #160]	; (8001658 <main+0x5ec>)
 80015b8:	4830      	ldr	r0, [pc, #192]	; (800167c <main+0x610>)
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <main+0x604>)
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <main+0x614>)
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	0023      	movs	r3, r4
 80015c4:	f000 fa5e 	bl	8001a84 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  direct_light_control_fsm(&light_2, &button_light_2,
 80015c8:	4b35      	ldr	r3, [pc, #212]	; (80016a0 <main+0x634>)
 80015ca:	4a2e      	ldr	r2, [pc, #184]	; (8001684 <main+0x618>)
 80015cc:	4921      	ldr	r1, [pc, #132]	; (8001654 <main+0x5e8>)
 80015ce:	482e      	ldr	r0, [pc, #184]	; (8001688 <main+0x61c>)
 80015d0:	f000 fbd2 	bl	8001d78 <direct_light_control_fsm>
												  &deadline_motion_light_2,
												  &light_2_no_motion_state);

			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
 80015d4:	4c2e      	ldr	r4, [pc, #184]	; (8001690 <main+0x624>)
 80015d6:	4a22      	ldr	r2, [pc, #136]	; (8001660 <main+0x5f4>)
 80015d8:	4926      	ldr	r1, [pc, #152]	; (8001674 <main+0x608>)
 80015da:	482e      	ldr	r0, [pc, #184]	; (8001694 <main+0x628>)
 80015dc:	2310      	movs	r3, #16
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	9304      	str	r3, [sp, #16]
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <main+0x5f8>)
 80015e4:	9303      	str	r3, [sp, #12]
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <main+0x5fc>)
 80015e8:	9302      	str	r3, [sp, #8]
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <main+0x62c>)
 80015ec:	9301      	str	r3, [sp, #4]
 80015ee:	4b2b      	ldr	r3, [pc, #172]	; (800169c <main+0x630>)
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	0023      	movs	r3, r4
 80015f4:	f000 fafc 	bl	8001bf0 <motion_light_uv_control_fsm>
								&deadline_motion_uv, &deadline_motion_uv_safe,
								&uv_state,&motion_sensed_uv, &abort_uv, &signal_led);
			  break;
 80015f8:	e005      	b.n	8001606 <main+0x59a>
		  case MOTION_SWITCH_MODE_2:
			  //do nothing
			  __NOP();
 80015fa:	46c0      	nop			; (mov r8, r8)
			  break;
 80015fc:	e003      	b.n	8001606 <main+0x59a>
		  case MOTION_SWITCH_MODE_3:
			  //do nothing
			  __NOP();
 80015fe:	46c0      	nop			; (mov r8, r8)
			  break;
 8001600:	e001      	b.n	8001606 <main+0x59a>
		  default:
			  //do nothing
			  __NOP();
 8001602:	46c0      	nop			; (mov r8, r8)
			  break;
 8001604:	46c0      	nop			; (mov r8, r8)
	  }

	  //Actuator routines:
	  discreate_actuator(&light_1, &deadline_timer_light_1);
 8001606:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <main+0x638>)
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <main+0x610>)
 800160a:	0011      	movs	r1, r2
 800160c:	0018      	movs	r0, r3
 800160e:	f000 f894 	bl	800173a <discreate_actuator>
	  discreate_actuator(&light_2, &deadline_timer_light_2);
 8001612:	4a25      	ldr	r2, [pc, #148]	; (80016a8 <main+0x63c>)
 8001614:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <main+0x61c>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f000 f88e 	bl	800173a <discreate_actuator>
	  discreate_actuator(&light_uv, &deadline_timer_uv);
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <main+0x640>)
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <main+0x628>)
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f888 	bl	800173a <discreate_actuator>

	  //LED indicator
	  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 800162a:	1dfa      	adds	r2, r7, #7
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <main+0x644>)
 800162e:	0011      	movs	r1, r2
 8001630:	0018      	movs	r0, r3
 8001632:	f7fe ff79 	bl	8000528 <deadline_timer_check>

	  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d000      	beq.n	8001640 <main+0x5d4>
 800163e:	e710      	b.n	8001462 <main+0x3f6>
	  {
		  led_signal_fsm(&signal_led);
 8001640:	2310      	movs	r3, #16
 8001642:	18fb      	adds	r3, r7, r3
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff fa18 	bl	8000a7a <led_signal_fsm>
		  deadline_timer_set_initial_time(&deadline_led_indicator);
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <main+0x644>)
 800164c:	0018      	movs	r0, r3
 800164e:	f7fe ffa2 	bl	8000596 <deadline_timer_set_initial_time>
	  switch(switch_selector.value)
 8001652:	e706      	b.n	8001462 <main+0x3f6>
 8001654:	20000348 	.word	0x20000348
 8001658:	20000330 	.word	0x20000330
 800165c:	200002b0 	.word	0x200002b0
 8001660:	20000088 	.word	0x20000088
 8001664:	200005f9 	.word	0x200005f9
 8001668:	2000037a 	.word	0x2000037a
 800166c:	20000379 	.word	0x20000379
 8001670:	20000378 	.word	0x20000378
 8001674:	20000360 	.word	0x20000360
 8001678:	200003e8 	.word	0x200003e8
 800167c:	20000240 	.word	0x20000240
 8001680:	20000468 	.word	0x20000468
 8001684:	20000470 	.word	0x20000470
 8001688:	20000264 	.word	0x20000264
 800168c:	200004f0 	.word	0x200004f0
 8001690:	200004f8 	.word	0x200004f8
 8001694:	20000288 	.word	0x20000288
 8001698:	200005f8 	.word	0x200005f8
 800169c:	20000578 	.word	0x20000578
 80016a0:	200004f1 	.word	0x200004f1
 80016a4:	200000f0 	.word	0x200000f0
 80016a8:	20000158 	.word	0x20000158
 80016ac:	200001c0 	.word	0x200001c0
 80016b0:	20000380 	.word	0x20000380

080016b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08d      	sub	sp, #52	; 0x34
 80016b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ba:	2414      	movs	r4, #20
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	0018      	movs	r0, r3
 80016c0:	231c      	movs	r3, #28
 80016c2:	001a      	movs	r2, r3
 80016c4:	2100      	movs	r1, #0
 80016c6:	f003 ffc1 	bl	800564c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ca:	003b      	movs	r3, r7
 80016cc:	0018      	movs	r0, r3
 80016ce:	2314      	movs	r3, #20
 80016d0:	001a      	movs	r2, r3
 80016d2:	2100      	movs	r1, #0
 80016d4:	f003 ffba 	bl	800564c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d8:	193b      	adds	r3, r7, r4
 80016da:	2202      	movs	r2, #2
 80016dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2280      	movs	r2, #128	; 0x80
 80016e2:	0052      	lsls	r2, r2, #1
 80016e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	193b      	adds	r3, r7, r4
 80016f4:	0018      	movs	r0, r3
 80016f6:	f002 fb09 	bl	8003d0c <HAL_RCC_OscConfig>
 80016fa:	1e03      	subs	r3, r0, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80016fe:	f000 fcb1 	bl	8002064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001702:	003b      	movs	r3, r7
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001708:	003b      	movs	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	003b      	movs	r3, r7
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001714:	003b      	movs	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800171a:	003b      	movs	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001720:	003b      	movs	r3, r7
 8001722:	2101      	movs	r1, #1
 8001724:	0018      	movs	r0, r3
 8001726:	f002 fcd5 	bl	80040d4 <HAL_RCC_ClockConfig>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800172e:	f000 fc99 	bl	8002064 <Error_Handler>
  }
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b00d      	add	sp, #52	; 0x34
 8001738:	bd90      	pop	{r4, r7, pc}

0800173a <discreate_actuator>:

//TODO: (medium) all the digital outputs behave light a light. Last requirement
//changes added other kind of actuators. Change the HAL layer and middleware
//layer to set a proper name
void discreate_actuator(light_t *actuator, deadline_timer_t *deadline_timer)
{
 800173a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173c:	b08b      	sub	sp, #44	; 0x2c
 800173e:	af06      	add	r7, sp, #24
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]

	light_fsm_init_t init = LIGHT_INIT_FALSE;
 8001744:	260f      	movs	r6, #15
 8001746:	19bb      	adds	r3, r7, r6
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == LIGHT_RUN_TRUE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2221      	movs	r2, #33	; 0x21
 8001750:	5c9b      	ldrb	r3, [r3, r2]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d12f      	bne.n	80017b6 <discreate_actuator+0x7c>
	{
		//		if(actuator_state == MOTION_LIGHT_TURN_ON_LIGHT)
		light_check_init_fsm(*actuator, &init);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	19ba      	adds	r2, r7, r6
 800175a:	9205      	str	r2, [sp, #20]
 800175c:	466a      	mov	r2, sp
 800175e:	0011      	movs	r1, r2
 8001760:	001a      	movs	r2, r3
 8001762:	3210      	adds	r2, #16
 8001764:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001766:	c131      	stmia	r1!, {r0, r4, r5}
 8001768:	ca11      	ldmia	r2!, {r0, r4}
 800176a:	c111      	stmia	r1!, {r0, r4}
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f7ff fb7b 	bl	8000e6e <light_check_init_fsm>

		if(init == LIGHT_INIT_TRUE)
 8001778:	19bb      	adds	r3, r7, r6
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <discreate_actuator+0x56>
		{
			deadline_timer_set_initial_time(deadline_timer);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe ff07 	bl	8000596 <deadline_timer_set_initial_time>
			light_acknowledge_init_fsm(actuator);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff fb86 	bl	8000e9c <light_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 8001790:	240e      	movs	r4, #14
 8001792:	193a      	adds	r2, r7, r4
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	0011      	movs	r1, r2
 8001798:	0018      	movs	r0, r3
 800179a:	f7fe fec5 	bl	8000528 <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d107      	bne.n	80017b6 <discreate_actuator+0x7c>
		{
			light_on_pulse_fsm(actuator);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff fae1 	bl	8000d70 <light_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7fe fef0 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == LIGHT_RUN_TRUE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2222      	movs	r2, #34	; 0x22
 80017ba:	5c9b      	ldrb	r3, [r3, r2]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d130      	bne.n	8001822 <discreate_actuator+0xe8>
	{
//	  if(actuator_state == MOTION_LIGHT_TURN_OFF_LIGHT)

	  light_check_init_fsm(*actuator, &init);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	260f      	movs	r6, #15
 80017c4:	19ba      	adds	r2, r7, r6
 80017c6:	9205      	str	r2, [sp, #20]
 80017c8:	466a      	mov	r2, sp
 80017ca:	0011      	movs	r1, r2
 80017cc:	001a      	movs	r2, r3
 80017ce:	3210      	adds	r2, #16
 80017d0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80017d2:	c131      	stmia	r1!, {r0, r4, r5}
 80017d4:	ca11      	ldmia	r2!, {r0, r4}
 80017d6:	c111      	stmia	r1!, {r0, r4}
 80017d8:	6818      	ldr	r0, [r3, #0]
 80017da:	6859      	ldr	r1, [r3, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f7ff fb45 	bl	8000e6e <light_check_init_fsm>

	  if(init == LIGHT_INIT_TRUE)
 80017e4:	19bb      	adds	r3, r7, r6
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <discreate_actuator+0xc2>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	0018      	movs	r0, r3
 80017f0:	f7fe fed1 	bl	8000596 <deadline_timer_set_initial_time>
		  light_acknowledge_init_fsm(actuator);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fb50 	bl	8000e9c <light_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 80017fc:	240e      	movs	r4, #14
 80017fe:	193a      	adds	r2, r7, r4
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	0011      	movs	r1, r2
 8001804:	0018      	movs	r0, r3
 8001806:	f7fe fe8f 	bl	8000528 <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 800180a:	193b      	adds	r3, r7, r4
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <discreate_actuator+0xe8>
	  {
		  light_off_pulse_fsm(actuator);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	0018      	movs	r0, r3
 8001816:	f7ff facb 	bl	8000db0 <light_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7fe feba 	bl	8000596 <deadline_timer_set_initial_time>
	  }
	}
}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b005      	add	sp, #20
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800182a <events_detection>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 800182a:	b5b0      	push	{r4, r5, r7, lr}
 800182c:	b08a      	sub	sp, #40	; 0x28
 800182e:	af04      	add	r7, sp, #16
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8001838:	2417      	movs	r4, #23
 800183a:	193a      	adds	r2, r7, r4
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f000 ff26 	bl	8002692 <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 8001846:	193b      	adds	r3, r7, r4
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d10c      	bne.n	8001868 <events_detection+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 800184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001850:	2202      	movs	r2, #2
 8001852:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 8001854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001856:	2202      	movs	r2, #2
 8001858:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 800185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800185c:	2202      	movs	r2, #2
 800185e:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2258      	movs	r2, #88	; 0x58
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	0011      	movs	r1, r2
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f8e7 	bl	8001a42 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	0011      	movs	r1, r2
 800187a:	0018      	movs	r0, r3
 800187c:	f000 f8e1 	bl	8001a42 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f8db 	bl	8001a42 <sense_button_event>


	//Activating a switch while uv fsm is running acts as motion detection

	button_check_isr_request(*button_lamp_1, &button_isr_stat, &check_edge);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2215      	movs	r2, #21
 8001890:	18ba      	adds	r2, r7, r2
 8001892:	9203      	str	r2, [sp, #12]
 8001894:	2516      	movs	r5, #22
 8001896:	197a      	adds	r2, r7, r5
 8001898:	9202      	str	r2, [sp, #8]
 800189a:	466a      	mov	r2, sp
 800189c:	0011      	movs	r1, r2
 800189e:	001a      	movs	r2, r3
 80018a0:	3210      	adds	r2, #16
 80018a2:	ca11      	ldmia	r2!, {r0, r4}
 80018a4:	c111      	stmia	r1!, {r0, r4}
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f7fe fd9c 	bl	80003ea <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80018b2:	197b      	adds	r3, r7, r5
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d102      	bne.n	80018c0 <events_detection+0x96>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 80018ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
	}

	button_check_isr_request(*button_lamp_2, &button_isr_stat, &check_edge);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	2215      	movs	r2, #21
 80018c4:	18ba      	adds	r2, r7, r2
 80018c6:	9203      	str	r2, [sp, #12]
 80018c8:	2516      	movs	r5, #22
 80018ca:	197a      	adds	r2, r7, r5
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	466a      	mov	r2, sp
 80018d0:	0011      	movs	r1, r2
 80018d2:	001a      	movs	r2, r3
 80018d4:	3210      	adds	r2, #16
 80018d6:	ca11      	ldmia	r2!, {r0, r4}
 80018d8:	c111      	stmia	r1!, {r0, r4}
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	6859      	ldr	r1, [r3, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f7fe fd82 	bl	80003ea <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80018e6:	197b      	adds	r3, r7, r5
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d102      	bne.n	80018f4 <events_detection+0xca>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 80018ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	}

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	2215      	movs	r2, #21
 80018f8:	18ba      	adds	r2, r7, r2
 80018fa:	9203      	str	r2, [sp, #12]
 80018fc:	2516      	movs	r5, #22
 80018fe:	197a      	adds	r2, r7, r5
 8001900:	9202      	str	r2, [sp, #8]
 8001902:	466a      	mov	r2, sp
 8001904:	0011      	movs	r1, r2
 8001906:	001a      	movs	r2, r3
 8001908:	3210      	adds	r2, #16
 800190a:	ca11      	ldmia	r2!, {r0, r4}
 800190c:	c111      	stmia	r1!, {r0, r4}
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	6859      	ldr	r1, [r3, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f7fe fd68 	bl	80003ea <button_check_isr_request>

	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 800191a:	197b      	adds	r3, r7, r5
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d119      	bne.n	8001956 <events_detection+0x12c>
	{
		button_status_t status_button_light_1;
		button_status_t status_button_light_2;

		button_get_status(button_lamp_1, &status_button_light_1);
 8001922:	2414      	movs	r4, #20
 8001924:	193a      	adds	r2, r7, r4
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f7fe fd29 	bl	8000382 <button_get_status>
		button_get_status(button_lamp_2, &status_button_light_2);
 8001930:	2513      	movs	r5, #19
 8001932:	197a      	adds	r2, r7, r5
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	0011      	movs	r1, r2
 8001938:	0018      	movs	r0, r3
 800193a:	f7fe fd22 	bl	8000382 <button_get_status>

		if( (status_button_light_1 == BUTTON_ON) ||
 800193e:	193b      	adds	r3, r7, r4
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d003      	beq.n	800194e <events_detection+0x124>
			(status_button_light_2 == BUTTON_ON))
 8001946:	197b      	adds	r3, r7, r5
 8001948:	781b      	ldrb	r3, [r3, #0]
		if( (status_button_light_1 == BUTTON_ON) ||
 800194a:	2b01      	cmp	r3, #1
 800194c:	d103      	bne.n	8001956 <events_detection+0x12c>
		{
			button_set_isr_attended(button_lamp_uv);
 800194e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001950:	0018      	movs	r0, r3
 8001952:	f7fe fd3b 	bl	80003cc <button_set_isr_attended>
		}
	}

}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b006      	add	sp, #24
 800195c:	bdb0      	pop	{r4, r5, r7, pc}

0800195e <events_detection_motion_in_one_lamp>:
							button_t *button_lamp_2,
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 800195e:	b5b0      	push	{r4, r5, r7, lr}
 8001960:	b08a      	sub	sp, #40	; 0x28
 8001962:	af04      	add	r7, sp, #16
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 800196c:	2417      	movs	r4, #23
 800196e:	193a      	adds	r2, r7, r4
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f000 fe8c 	bl	8002692 <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 800197a:	193b      	adds	r3, r7, r4
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d109      	bne.n	8001996 <events_detection_motion_in_one_lamp+0x38>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001984:	2202      	movs	r2, #2
 8001986:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2258      	movs	r2, #88	; 0x58
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0011      	movs	r1, r2
 800199c:	0018      	movs	r0, r3
 800199e:	f000 f850 	bl	8001a42 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	0011      	movs	r1, r2
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f84a 	bl	8001a42 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 80019ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	0011      	movs	r1, r2
 80019b4:	0018      	movs	r0, r3
 80019b6:	f000 f844 	bl	8001a42 <sense_button_event>


	//Activating a switch while uv fsm is running acts as motion detection

	button_check_isr_request(*button_lamp_1, &button_isr_stat, &check_edge);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2215      	movs	r2, #21
 80019be:	18ba      	adds	r2, r7, r2
 80019c0:	9203      	str	r2, [sp, #12]
 80019c2:	2516      	movs	r5, #22
 80019c4:	197a      	adds	r2, r7, r5
 80019c6:	9202      	str	r2, [sp, #8]
 80019c8:	466a      	mov	r2, sp
 80019ca:	0011      	movs	r1, r2
 80019cc:	001a      	movs	r2, r3
 80019ce:	3210      	adds	r2, #16
 80019d0:	ca11      	ldmia	r2!, {r0, r4}
 80019d2:	c111      	stmia	r1!, {r0, r4}
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	6859      	ldr	r1, [r3, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f7fe fd05 	bl	80003ea <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80019e0:	197b      	adds	r3, r7, r5
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d102      	bne.n	80019ee <events_detection_motion_in_one_lamp+0x90>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 80019e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
	}

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	2215      	movs	r2, #21
 80019f2:	18ba      	adds	r2, r7, r2
 80019f4:	9203      	str	r2, [sp, #12]
 80019f6:	2516      	movs	r5, #22
 80019f8:	197a      	adds	r2, r7, r5
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	466a      	mov	r2, sp
 80019fe:	0011      	movs	r1, r2
 8001a00:	001a      	movs	r2, r3
 8001a02:	3210      	adds	r2, #16
 8001a04:	ca11      	ldmia	r2!, {r0, r4}
 8001a06:	c111      	stmia	r1!, {r0, r4}
 8001a08:	6818      	ldr	r0, [r3, #0]
 8001a0a:	6859      	ldr	r1, [r3, #4]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	f7fe fceb 	bl	80003ea <button_check_isr_request>

	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001a14:	197b      	adds	r3, r7, r5
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d10e      	bne.n	8001a3a <events_detection_motion_in_one_lamp+0xdc>
	{
		button_status_t status_button_light_1;

		button_get_status(button_lamp_1, &status_button_light_1);
 8001a1c:	2414      	movs	r4, #20
 8001a1e:	193a      	adds	r2, r7, r4
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7fe fcac 	bl	8000382 <button_get_status>

		if(status_button_light_1 == BUTTON_ON)
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <events_detection_motion_in_one_lamp+0xdc>
		{
			button_set_isr_attended(button_lamp_uv);
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fcc9 	bl	80003cc <button_set_isr_attended>
		}
	}

}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}

08001a42 <sense_button_event>:
	}

}

void sense_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8001a42:	b590      	push	{r4, r7, lr}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
 8001a4a:	6039      	str	r1, [r7, #0]

	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	7b5b      	ldrb	r3, [r3, #13]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d112      	bne.n	8001a7a <sense_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 8001a54:	240f      	movs	r4, #15
 8001a56:	193a      	adds	r2, r7, r4
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe fd63 	bl	8000528 <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <sense_button_event+0x38>
		{
			button_debounce_fsm(button);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7fe fbfa 	bl	8000266 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7fe fd8e 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}


}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b005      	add	sp, #20
 8001a80:	bd90      	pop	{r4, r7, pc}
	...

08001a84 <motion_light_control_fsm>:
						button_t *button,
						pyd1598_sensor_t *motion_sensor,
						deadline_timer_t *deadline_timer,
						motion_light_state_t *fsm_state,
						motion_sensed_t *motion_sensed)
{
 8001a84:	b5b0      	push	{r4, r5, r7, lr}
 8001a86:	b08a      	sub	sp, #40	; 0x28
 8001a88:	af04      	add	r7, sp, #16
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	785a      	ldrb	r2, [r3, #1]
 8001a96:	2116      	movs	r1, #22
 8001a98:	187b      	adds	r3, r7, r1
 8001a9a:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	187a      	adds	r2, r7, r1
 8001aa0:	9203      	str	r2, [sp, #12]
 8001aa2:	2517      	movs	r5, #23
 8001aa4:	197a      	adds	r2, r7, r5
 8001aa6:	9202      	str	r2, [sp, #8]
 8001aa8:	466a      	mov	r2, sp
 8001aaa:	0011      	movs	r1, r2
 8001aac:	001a      	movs	r2, r3
 8001aae:	3210      	adds	r2, #16
 8001ab0:	ca11      	ldmia	r2!, {r0, r4}
 8001ab2:	c111      	stmia	r1!, {r0, r4}
 8001ab4:	6818      	ldr	r0, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f7fe fc95 	bl	80003ea <button_check_isr_request>

	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001ac0:	197b      	adds	r3, r7, r5
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d003      	beq.n	8001ad0 <motion_light_control_fsm+0x4c>
		(*motion_sensed == MOTION_ISR_UNATTENDED))
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	781b      	ldrb	r3, [r3, #0]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d121      	bne.n	8001b14 <motion_light_control_fsm+0x90>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001ad0:	2217      	movs	r2, #23
 8001ad2:	18bb      	adds	r3, r7, r2
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d10e      	bne.n	8001af8 <motion_light_control_fsm+0x74>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001ada:	18bb      	adds	r3, r7, r2
 8001adc:	2200      	movs	r2, #0
 8001ade:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 8001ae0:	2316      	movs	r3, #22
 8001ae2:	18fb      	adds	r3, r7, r3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d103      	bne.n	8001af2 <motion_light_control_fsm+0x6e>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aec:	2205      	movs	r2, #5
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	e002      	b.n	8001af8 <motion_light_control_fsm+0x74>
			}
			else
			{
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
			}
		}

		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d109      	bne.n	8001b14 <motion_light_control_fsm+0x90>
			(*fsm_state == MOTION_LIGHT_IDLE))
 8001b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b02:	781b      	ldrb	r3, [r3, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d105      	bne.n	8001b14 <motion_light_control_fsm+0x90>
		{
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]

			*motion_sensed = MOTION_ISR_ATTENDED;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
		}

	}

	switch(*fsm_state)
 8001b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b05      	cmp	r3, #5
 8001b1a:	d858      	bhi.n	8001bce <motion_light_control_fsm+0x14a>
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	4b33      	ldr	r3, [pc, #204]	; (8001bec <motion_light_control_fsm+0x168>)
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8001b26:	46c0      	nop			; (mov r8, r8)

			break;
 8001b28:	e056      	b.n	8001bd8 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 8001b2a:	2115      	movs	r1, #21
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
			button_get_status(button, &button_status);
 8001b32:	000c      	movs	r4, r1
 8001b34:	187a      	adds	r2, r7, r1
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe fc21 	bl	8000382 <button_get_status>

			if(button_status == BUTTON_ON)
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <motion_light_control_fsm+0xd2>
			{
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
				 //if an edge where detected an error occurred in the button
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
				*motion_sensed = MOTION_ISR_ATTENDED;
			}

			break;
 8001b54:	e040      	b.n	8001bd8 <motion_light_control_fsm+0x154>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b58:	2205      	movs	r2, #5
 8001b5a:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
			break;
 8001b62:	e039      	b.n	8001bd8 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff f963 	bl	8000e32 <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 8001b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6e:	2203      	movs	r2, #3
 8001b70:	701a      	strb	r2, [r3, #0]

			break;
 8001b72:	e031      	b.n	8001bd8 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(deadline_timer);
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7fe fd0d 	bl	8000596 <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	2204      	movs	r2, #4
 8001b80:	701a      	strb	r2, [r3, #0]

			break;
 8001b82:	e029      	b.n	8001bd8 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(deadline_timer, &deadline_expired);
 8001b84:	2414      	movs	r4, #20
 8001b86:	193a      	adds	r2, r7, r4
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f7fe fccb 	bl	8000528 <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001b92:	193b      	adds	r3, r7, r4
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d102      	bne.n	8001ba0 <motion_light_control_fsm+0x11c>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d116      	bne.n	8001bd6 <motion_light_control_fsm+0x152>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
//					*fsm_state = MOTION_LIGHT_INIT_TIMER;
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001bb4:	e00f      	b.n	8001bd6 <motion_light_control_fsm+0x152>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(deadline_timer);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fca8 	bl	800050e <deadline_timer_force_expiration>
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff f915 	bl	8000df0 <light_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 8001bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
			break;
 8001bcc:	e004      	b.n	8001bd8 <motion_light_control_fsm+0x154>
		default:
			*fsm_state = MOTION_LIGHT_IDLE;
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
			break;
 8001bd4:	e000      	b.n	8001bd8 <motion_light_control_fsm+0x154>
			break;
 8001bd6:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8001bd8:	2317      	movs	r3, #23
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	709a      	strb	r2, [r3, #2]

}
 8001be2:	46c0      	nop			; (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b006      	add	sp, #24
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	08005704 	.word	0x08005704

08001bf0 <motion_light_uv_control_fsm>:
						deadline_timer_t *deadline_safe_timer,
						motion_light_uv_state_t *fsm_state,
						motion_sensed_t *motion_sensed,
						motion_light_uv_abort_t *uv_abort,
						led_signal_t *signal)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b09c      	sub	sp, #112	; 0x70
 8001bf4:	af16      	add	r7, sp, #88	; 0x58
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	785a      	ldrb	r2, [r3, #1]
 8001c02:	2116      	movs	r1, #22
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	187a      	adds	r2, r7, r1
 8001c0c:	9203      	str	r2, [sp, #12]
 8001c0e:	2517      	movs	r5, #23
 8001c10:	197a      	adds	r2, r7, r5
 8001c12:	9202      	str	r2, [sp, #8]
 8001c14:	466a      	mov	r2, sp
 8001c16:	0011      	movs	r1, r2
 8001c18:	001a      	movs	r2, r3
 8001c1a:	3210      	adds	r2, #16
 8001c1c:	ca11      	ldmia	r2!, {r0, r4}
 8001c1e:	c111      	stmia	r1!, {r0, r4}
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f7fe fbdf 	bl	80003ea <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8001c2c:	687c      	ldr	r4, [r7, #4]
 8001c2e:	2315      	movs	r3, #21
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	9314      	str	r3, [sp, #80]	; 0x50
 8001c34:	466b      	mov	r3, sp
 8001c36:	0018      	movs	r0, r3
 8001c38:	0023      	movs	r3, r4
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	2250      	movs	r2, #80	; 0x50
 8001c3e:	0019      	movs	r1, r3
 8001c40:	f003 fd4a 	bl	80056d8 <memcpy>
 8001c44:	6820      	ldr	r0, [r4, #0]
 8001c46:	6861      	ldr	r1, [r4, #4]
 8001c48:	68a2      	ldr	r2, [r4, #8]
 8001c4a:	68e3      	ldr	r3, [r4, #12]
 8001c4c:	f000 fd0a 	bl	8002664 <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001c50:	197b      	adds	r3, r7, r5
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d105      	bne.n	8001c64 <motion_light_uv_control_fsm+0x74>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001c58:	197b      	adds	r3, r7, r5
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
		*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <motion_light_uv_control_fsm+0x88>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c6e:	2207      	movs	r2, #7
 8001c70:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 8001c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b07      	cmp	r3, #7
 8001c7e:	d869      	bhi.n	8001d54 <motion_light_uv_control_fsm+0x164>
 8001c80:	009a      	lsls	r2, r3, #2
 8001c82:	4b3c      	ldr	r3, [pc, #240]	; (8001d74 <motion_light_uv_control_fsm+0x184>)
 8001c84:	18d3      	adds	r3, r2, r3
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 8001c8a:	46c0      	nop			; (mov r8, r8)

			break;
 8001c8c:	e069      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8001c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7fe fc80 	bl	8000596 <deadline_timer_set_initial_time>
			//Start LED indicator
			led_signal_start(signal);
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe ffdc 	bl	8000c56 <led_signal_start>

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8001c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	701a      	strb	r2, [r3, #0]
			break;
 8001ca4:	e05d      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_expired_t deadline_safe_expired;
			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8001ca6:	2414      	movs	r4, #20
 8001ca8:	193a      	adds	r2, r7, r4
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	0011      	movs	r1, r2
 8001cae:	0018      	movs	r0, r3
 8001cb0:	f7fe fc3a 	bl	8000528 <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001cb4:	193b      	adds	r3, r7, r4
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d103      	bne.n	8001cc4 <motion_light_uv_control_fsm+0xd4>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8001cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	701a      	strb	r2, [r3, #0]
					*motion_sensed = MOTION_ISR_ATTENDED;
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
				}
			}

			break;
 8001cc2:	e04b      	b.n	8001d5c <motion_light_uv_control_fsm+0x16c>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d147      	bne.n	8001d5c <motion_light_uv_control_fsm+0x16c>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8001ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
			break;
 8001cd8:	e040      	b.n	8001d5c <motion_light_uv_control_fsm+0x16c>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
			light_ask_on_pulse_fsm(light_uv);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff f8a8 	bl	8000e32 <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8001ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce4:	2204      	movs	r2, #4
 8001ce6:	701a      	strb	r2, [r3, #0]

			break;
 8001ce8:	e03b      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7fe fc52 	bl	8000596 <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8001cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf4:	2205      	movs	r2, #5
 8001cf6:	701a      	strb	r2, [r3, #0]
			break;
 8001cf8:	e033      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 8001cfa:	2413      	movs	r4, #19
 8001cfc:	193a      	adds	r2, r7, r4
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	0011      	movs	r1, r2
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7fe fc10 	bl	8000528 <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <motion_light_uv_control_fsm+0x126>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d12:	2206      	movs	r2, #6
 8001d14:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d120      	bne.n	8001d60 <motion_light_uv_control_fsm+0x170>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	2207      	movs	r2, #7
 8001d28:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001d2a:	e019      	b.n	8001d60 <motion_light_uv_control_fsm+0x170>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	2206      	movs	r2, #6
 8001d30:	701a      	strb	r2, [r3, #0]
			break;
 8001d32:	e016      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe fbe9 	bl	800050e <deadline_timer_force_expiration>


			//Stop LED indicator
			led_signal_stop(signal);
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe ff95 	bl	8000c6e <led_signal_stop>
			light_ask_off_pulse_fsm(light_uv);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff f852 	bl	8000df0 <light_ask_off_pulse_fsm>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
			break;
 8001d52:	e006      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
			break;
 8001d5a:	e002      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
			break;
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	e000      	b.n	8001d62 <motion_light_uv_control_fsm+0x172>
			break;
 8001d60:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8001d62:	2317      	movs	r3, #23
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	709a      	strb	r2, [r3, #2]

}
 8001d6c:	46c0      	nop			; (mov r8, r8)
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b006      	add	sp, #24
 8001d72:	bdb0      	pop	{r4, r5, r7, pc}
 8001d74:	0800571c 	.word	0x0800571c

08001d78 <direct_light_control_fsm>:

void direct_light_control_fsm(light_t *light,
						button_t *button,
						deadline_timer_t *deadline_timer,
						motion_light_no_motion_state_t *fsm_state)
{
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	b08b      	sub	sp, #44	; 0x2c
 8001d7c:	af04      	add	r7, sp, #16
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	785a      	ldrb	r2, [r3, #1]
 8001d8a:	2516      	movs	r5, #22
 8001d8c:	197b      	adds	r3, r7, r5
 8001d8e:	701a      	strb	r2, [r3, #0]
	button_status_t button_status = BUTTON_OFF;
 8001d90:	2315      	movs	r3, #21
 8001d92:	18fb      	adds	r3, r7, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	197a      	adds	r2, r7, r5
 8001d9c:	9203      	str	r2, [sp, #12]
 8001d9e:	2617      	movs	r6, #23
 8001da0:	19ba      	adds	r2, r7, r6
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	466a      	mov	r2, sp
 8001da6:	0011      	movs	r1, r2
 8001da8:	001a      	movs	r2, r3
 8001daa:	3210      	adds	r2, #16
 8001dac:	ca11      	ldmia	r2!, {r0, r4}
 8001dae:	c111      	stmia	r1!, {r0, r4}
 8001db0:	6818      	ldr	r0, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f7fe fb17 	bl	80003ea <button_check_isr_request>

	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8001dbc:	19bb      	adds	r3, r7, r6
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d10d      	bne.n	8001de0 <direct_light_control_fsm+0x68>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001dc4:	19bb      	adds	r3, r7, r6
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]

		if(edge == BUTTON_EDGE_NEGATIVE)
 8001dca:	197b      	adds	r3, r7, r5
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d103      	bne.n	8001dda <direct_light_control_fsm+0x62>
		{
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2203      	movs	r2, #3
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e002      	b.n	8001de0 <direct_light_control_fsm+0x68>
		}
		else
		{
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(*fsm_state)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d021      	beq.n	8001e2c <direct_light_control_fsm+0xb4>
 8001de8:	dc28      	bgt.n	8001e3c <direct_light_control_fsm+0xc4>
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d007      	beq.n	8001dfe <direct_light_control_fsm+0x86>
 8001dee:	dc25      	bgt.n	8001e3c <direct_light_control_fsm+0xc4>
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <direct_light_control_fsm+0x82>
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00a      	beq.n	8001e0e <direct_light_control_fsm+0x96>
 8001df8:	e020      	b.n	8001e3c <direct_light_control_fsm+0xc4>
	{
		case NO_MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8001dfa:	46c0      	nop			; (mov r8, r8)

			break;
 8001dfc:	e023      	b.n	8001e46 <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff f816 	bl	8000e32 <light_ask_on_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]

			break;
 8001e0c:	e01b      	b.n	8001e46 <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_CHECK_BUTTON:
			//This updates the timer count
			button_get_status(button, &button_status);
 8001e0e:	2415      	movs	r4, #21
 8001e10:	193a      	adds	r2, r7, r4
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	0011      	movs	r1, r2
 8001e16:	0018      	movs	r0, r3
 8001e18:	f7fe fab3 	bl	8000382 <button_get_status>

			//TODO: (low) This step is just to ensure things are done
			if(button_status == BUTTON_OFF)
 8001e1c:	193b      	adds	r3, r7, r4
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10f      	bne.n	8001e44 <direct_light_control_fsm+0xcc>
			{
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	2203      	movs	r2, #3
 8001e28:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001e2a:	e00b      	b.n	8001e44 <direct_light_control_fsm+0xcc>
		case NO_MOTION_LIGHT_TURN_OFF_LIGHT:
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe ffde 	bl	8000df0 <light_ask_off_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
			break;
 8001e3a:	e004      	b.n	8001e46 <direct_light_control_fsm+0xce>
		default:
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
			break;
 8001e42:	e000      	b.n	8001e46 <direct_light_control_fsm+0xce>
			break;
 8001e44:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8001e46:	2317      	movs	r3, #23
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781a      	ldrb	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	709a      	strb	r2, [r3, #2]

}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b007      	add	sp, #28
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e58 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

	if (htim == &htim17)
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d106      	bne.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e6a:	791a      	ldrb	r2, [r3, #4]
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001e6e:	0011      	movs	r1, r2
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f9c5 	bl	8002200 <pyd1598_dl_readout_fsm>
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d105      	bne.n	8001e8a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e80:	4819      	ldr	r0, [pc, #100]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001e82:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e86:	f000 fb23 	bl	80024d0 <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d123      	bne.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x82>
	{

		//TODO: (low)can I change this to the infinite while loop in the main?
		deadline_timer_count(&deadline_timer_light_1);
 8001e92:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7fe fb71 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7fe fb6d 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fb69 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7fe fb65 	bl	800057c <deadline_timer_count>
		//
		deadline_timer_count(&deadline_motion_light_1);
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fb61 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7fe fb5d 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7fe fb59 	bl	800057c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fb55 	bl	800057c <deadline_timer_count>

		deadline_timer_count(&deadline_led_indicator);
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe fb51 	bl	800057c <deadline_timer_count>

	}



}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000730 	.word	0x20000730
 8001ee8:	20000088 	.word	0x20000088
 8001eec:	200000a8 	.word	0x200000a8
 8001ef0:	20000698 	.word	0x20000698
 8001ef4:	200006e4 	.word	0x200006e4
 8001ef8:	200000f0 	.word	0x200000f0
 8001efc:	20000158 	.word	0x20000158
 8001f00:	200001c0 	.word	0x200001c0
 8001f04:	200002b0 	.word	0x200002b0
 8001f08:	200003e8 	.word	0x200003e8
 8001f0c:	20000470 	.word	0x20000470
 8001f10:	200004f8 	.word	0x200004f8
 8001f14:	20000578 	.word	0x20000578
 8001f18:	20000380 	.word	0x20000380

08001f1c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	1dbb      	adds	r3, r7, #6
 8001f26:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8001f2a:	2248      	movs	r2, #72	; 0x48
 8001f2c:	5a9b      	ldrh	r3, [r3, r2]
 8001f2e:	1dba      	adds	r2, r7, #6
 8001f30:	8812      	ldrh	r2, [r2, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d107      	bne.n	8001f46 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
	{
//		pyd1598_direct_link_isr_init_set();
		motion_sensor.direct_link.start_fsm = true;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8001f38:	2241      	movs	r2, #65	; 0x41
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	}
	else
	{
		__NOP();
 8001f46:	46c0      	nop			; (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f4a:	891b      	ldrh	r3, [r3, #8]
 8001f4c:	1dba      	adds	r2, r7, #6
 8001f4e:	8812      	ldrh	r2, [r2, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10b      	bne.n	8001f6c <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f56:	7b5b      	ldrb	r3, [r3, #13]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_1);
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe f9e9 	bl	8000336 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f7fe fb15 	bl	8000596 <deadline_timer_set_initial_time>
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001f6e:	891b      	ldrh	r3, [r3, #8]
 8001f70:	1dba      	adds	r2, r7, #6
 8001f72:	8812      	ldrh	r2, [r2, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10b      	bne.n	8001f90 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001f7a:	7b5b      	ldrb	r3, [r3, #13]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d107      	bne.n	8001f90 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		{
			button_positive_edge_detected(&button_light_2);
 8001f80:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe f9d7 	bl	8000336 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001f88:	4b0f      	ldr	r3, [pc, #60]	; (8001fc8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	f7fe fb03 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001f92:	891b      	ldrh	r3, [r3, #8]
 8001f94:	1dba      	adds	r2, r7, #6
 8001f96:	8812      	ldrh	r2, [r2, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10b      	bne.n	8001fb4 <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001f9e:	7b5b      	ldrb	r3, [r3, #13]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d107      	bne.n	8001fb4 <HAL_GPIO_EXTI_Rising_Callback+0x98>
		{
			button_positive_edge_detected(&button_uv);
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7fe f9c5 	bl	8000336 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f7fe faf1 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b002      	add	sp, #8
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000088 	.word	0x20000088
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	20000330 	.word	0x20000330
 8001fc8:	200002b0 	.word	0x200002b0
 8001fcc:	20000348 	.word	0x20000348
 8001fd0:	20000360 	.word	0x20000360

08001fd4 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	0002      	movs	r2, r0
 8001fdc:	1dbb      	adds	r3, r7, #6
 8001fde:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8001fe2:	891b      	ldrh	r3, [r3, #8]
 8001fe4:	1dba      	adds	r2, r7, #6
 8001fe6:	8812      	ldrh	r2, [r2, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d10b      	bne.n	8002004 <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8001fee:	7b5b      	ldrb	r3, [r3, #13]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_GPIO_EXTI_Falling_Callback+0x30>
		{
			button_negative_edge_detected(&button_light_1);
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7fe f9b0 	bl	800035c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7fe fac9 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002006:	891b      	ldrh	r3, [r3, #8]
 8002008:	1dba      	adds	r2, r7, #6
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d10b      	bne.n	8002028 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002012:	7b5b      	ldrb	r3, [r3, #13]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d107      	bne.n	8002028 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		{
			button_negative_edge_detected(&button_light_2);
 8002018:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 800201a:	0018      	movs	r0, r3
 800201c:	f7fe f99e 	bl	800035c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002020:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002022:	0018      	movs	r0, r3
 8002024:	f7fe fab7 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 800202a:	891b      	ldrh	r3, [r3, #8]
 800202c:	1dba      	adds	r2, r7, #6
 800202e:	8812      	ldrh	r2, [r2, #0]
 8002030:	429a      	cmp	r2, r3
 8002032:	d10b      	bne.n	800204c <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8002036:	7b5b      	ldrb	r3, [r3, #13]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d107      	bne.n	800204c <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button_negative_edge_detected(&button_uv);
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe f98c 	bl	800035c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe faa5 	bl	8000596 <deadline_timer_set_initial_time>
		}
	}
}
 800204c:	46c0      	nop			; (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000330 	.word	0x20000330
 8002058:	200002b0 	.word	0x200002b0
 800205c:	20000348 	.word	0x20000348
 8002060:	20000360 	.word	0x20000360

08002064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
}
 800206a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206c:	e7fe      	b.n	800206c <Error_Handler+0x8>

0800206e <pyd1598_setup>:

/**********************************High Level**********************************/
void pyd1598_setup(pyd1598_sensor_t *sensor, pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t serin_inteface,
							pyd1598_hardware_interface_t direct_link_inteface)
{
 800206e:	b082      	sub	sp, #8
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	1d38      	adds	r0, r7, #4
 800207a:	6001      	str	r1, [r0, #0]
 800207c:	6042      	str	r2, [r0, #4]
 800207e:	2204      	movs	r2, #4
 8002080:	2520      	movs	r5, #32
 8002082:	1952      	adds	r2, r2, r5
 8002084:	19d2      	adds	r2, r2, r7
 8002086:	6013      	str	r3, [r2, #0]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8002088:	68fc      	ldr	r4, [r7, #12]
 800208a:	2304      	movs	r3, #4
 800208c:	195b      	adds	r3, r3, r5
 800208e:	19db      	adds	r3, r3, r7
 8002090:	1d3a      	adds	r2, r7, #4
 8002092:	4669      	mov	r1, sp
 8002094:	6858      	ldr	r0, [r3, #4]
 8002096:	6008      	str	r0, [r1, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6811      	ldr	r1, [r2, #0]
 800209c:	6852      	ldr	r2, [r2, #4]
 800209e:	0020      	movs	r0, r4
 80020a0:	f000 f831 	bl	8002106 <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3320      	adds	r3, #32
 80020a8:	0018      	movs	r0, r3
 80020aa:	230c      	movs	r3, #12
 80020ac:	195b      	adds	r3, r3, r5
 80020ae:	19db      	adds	r3, r3, r7
 80020b0:	6819      	ldr	r1, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	f000 f85f 	bl	8002176 <pyd1598_direct_link_setup>



	sensor->current_config.blind_time = 0;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2251      	movs	r2, #81	; 0x51
 80020bc:	2100      	movs	r1, #0
 80020be:	5499      	strb	r1, [r3, r2]
	sensor->current_config.count_mode = 0;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2257      	movs	r2, #87	; 0x57
 80020c4:	2100      	movs	r1, #0
 80020c6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.hpf_cutoff = 0;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2256      	movs	r2, #86	; 0x56
 80020cc:	2100      	movs	r1, #0
 80020ce:	5499      	strb	r1, [r3, r2]
	sensor->current_config.op_mode = 0;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2254      	movs	r2, #84	; 0x54
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.pulse_counter = 0;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2252      	movs	r2, #82	; 0x52
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]
	sensor->current_config.signal_source = 0;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2255      	movs	r2, #85	; 0x55
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.threshold = 0;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2250      	movs	r2, #80	; 0x50
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]
	sensor->current_config.window_time = 0;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2253      	movs	r2, #83	; 0x53
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]





}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b004      	add	sp, #16
 80020fe:	bcb0      	pop	{r4, r5, r7}
 8002100:	bc08      	pop	{r3}
 8002102:	b002      	add	sp, #8
 8002104:	4718      	bx	r3

08002106 <pyd1598_serin_setup>:

void pyd1598_serin_setup(pyd1598_serin_t *serin,
							pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8002106:	b082      	sub	sp, #8
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	1d38      	adds	r0, r7, #4
 8002112:	6001      	str	r1, [r0, #0]
 8002114:	6042      	str	r2, [r0, #4]
 8002116:	2204      	movs	r2, #4
 8002118:	2418      	movs	r4, #24
 800211a:	1912      	adds	r2, r2, r4
 800211c:	2108      	movs	r1, #8
 800211e:	468c      	mov	ip, r1
 8002120:	44bc      	add	ip, r7
 8002122:	4462      	add	r2, ip
 8002124:	6013      	str	r3, [r2, #0]
	serin->config = initial_config;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1d3a      	adds	r2, r7, #4
 800212a:	ca03      	ldmia	r2!, {r0, r1}
 800212c:	c303      	stmia	r3!, {r0, r1}


	pyd1598_serin_add_all_conf(serin->config, serin);
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	f000 fac6 	bl	80026c6 <pyd1598_serin_add_all_conf>

	serin->hardware_inteface = hardware_inteface;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2204      	movs	r2, #4
 800213e:	1912      	adds	r2, r2, r4
 8002140:	2108      	movs	r1, #8
 8002142:	468c      	mov	ip, r1
 8002144:	44bc      	add	ip, r7
 8002146:	4462      	add	r2, ip
 8002148:	3318      	adds	r3, #24
 800214a:	ca03      	ldmia	r2!, {r0, r1}
 800214c:	c303      	stmia	r3!, {r0, r1}
	//This is incremented when data is send to SERIN pin
	serin->data_idx = 0;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
	//This mask is shifted when data is send to SERIN pin.
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	0452      	lsls	r2, r2, #17
 800215a:	60da      	str	r2, [r3, #12]
	serin->state = PYD1598_SERIN_IDLE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	751a      	strb	r2, [r3, #20]
	serin->start_fsm = false;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	755a      	strb	r2, [r3, #21]




}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b005      	add	sp, #20
 800216e:	bc90      	pop	{r4, r7}
 8002170:	bc08      	pop	{r3}
 8002172:	b002      	add	sp, #8
 8002174:	4718      	bx	r3

08002176 <pyd1598_direct_link_setup>:

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	1d3b      	adds	r3, r7, #4
 8002180:	6019      	str	r1, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1d3a      	adds	r2, r7, #4
 8002188:	3324      	adds	r3, #36	; 0x24
 800218a:	ca03      	ldmia	r2!, {r0, r1}
 800218c:	c303      	stmia	r3!, {r0, r1}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	705a      	strb	r2, [r3, #1]
	direct_link->config.count_mode = 0;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	71da      	strb	r2, [r3, #7]
	direct_link->config.hpf_cutoff = 0;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	719a      	strb	r2, [r3, #6]
	direct_link->config.op_mode = 0;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	711a      	strb	r2, [r3, #4]
	direct_link->config.pulse_counter = 0;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	709a      	strb	r2, [r3, #2]
	direct_link->config.signal_source = 0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	715a      	strb	r2, [r3, #5]
	direct_link->config.threshold = 0;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
	direct_link->config.window_time = 0;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	70da      	strb	r2, [r3, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	739a      	strb	r2, [r3, #14]
	direct_link->source_value.pir_bpf = 0;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	811a      	strh	r2, [r3, #8]
	direct_link->source_value.pir_lpf = 0;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	815a      	strh	r2, [r3, #10]
	direct_link->source_value.temperature = 0;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	819a      	strh	r2, [r3, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
	direct_link->datagram_bufffer = 0;
 80021dc:	68f9      	ldr	r1, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	2300      	movs	r3, #0
 80021e2:	610a      	str	r2, [r1, #16]
 80021e4:	614b      	str	r3, [r1, #20]
	direct_link->start_fsm = 0;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2221      	movs	r2, #33	; 0x21
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
	direct_link->time_update_idx = 0;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2222      	movs	r2, #34	; 0x22
 80021f2:	2100      	movs	r1, #0
 80021f4:	5499      	strb	r1, [r3, r2]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <pyd1598_dl_readout_fsm>:
/*_________________________________Direct link FSM____________________________*/


void pyd1598_dl_readout_fsm(pyd1598_direct_link_t *direct_link,
													pyd1598_op_mode_t op_mode)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	000a      	movs	r2, r1
 800220a:	1cfb      	adds	r3, r7, #3
 800220c:	701a      	strb	r2, [r3, #0]

	//Information variables
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	60fb      	str	r3, [r7, #12]

	//FSM variables
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8002218:	2313      	movs	r3, #19
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	7f52      	ldrb	r2, [r2, #29]
 8002220:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8002222:	231f      	movs	r3, #31
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	7fd2      	ldrb	r2, [r2, #31]
 800222a:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 800222c:	201e      	movs	r0, #30
 800222e:	183b      	adds	r3, r7, r0
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	2120      	movs	r1, #32
 8002234:	5c52      	ldrb	r2, [r2, r1]
 8002236:	701a      	strb	r2, [r3, #0]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8002238:	231d      	movs	r3, #29
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	2122      	movs	r1, #34	; 0x22
 8002240:	5c52      	ldrb	r2, [r2, r1]
 8002242:	701a      	strb	r2, [r3, #0]
	bool start_fsm = direct_link->start_fsm;
 8002244:	231c      	movs	r3, #28
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	2121      	movs	r1, #33	; 0x21
 800224c:	5c52      	ldrb	r2, [r2, r1]
 800224e:	701a      	strb	r2, [r3, #0]
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8002250:	231b      	movs	r3, #27
 8002252:	18fb      	adds	r3, r7, r3
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	2123      	movs	r1, #35	; 0x23
 8002258:	5c52      	ldrb	r2, [r2, r1]
 800225a:	701a      	strb	r2, [r3, #0]

	//Local variable
	uint32_t idx = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]


	//TODO: (low) implement readout abort state

	switch(readout_state)
 8002260:	183b      	adds	r3, r7, r0
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d900      	bls.n	800226a <pyd1598_dl_readout_fsm+0x6a>
 8002268:	e0f1      	b.n	800244e <pyd1598_dl_readout_fsm+0x24e>
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	4b91      	ldr	r3, [pc, #580]	; (80024b4 <pyd1598_dl_readout_fsm+0x2b4>)
 800226e:	18d3      	adds	r3, r2, r3
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	469f      	mov	pc, r3
	{
		case PYD1598_READOUT_IDLE:

			//This state do nothing until start_fsm is activated outside the FSM
			if(start_fsm == true)
 8002274:	231c      	movs	r3, #28
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d100      	bne.n	8002280 <pyd1598_dl_readout_fsm+0x80>
 800227e:	e0ef      	b.n	8002460 <pyd1598_dl_readout_fsm+0x260>
			{
				//From Table 5 and section 2.7 of the datasheet we know that the
				//time difference from this state and the next ones should be
				// 					120μs < t_{DS} < 150μs
				if(op_mode == PYD1598_FORCE_READOUT)
 8002280:	1cfb      	adds	r3, r7, #3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10e      	bne.n	80022a6 <pyd1598_dl_readout_fsm+0xa6>
				{
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800228c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800228e:	f000 fc13 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002296:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002298:	f000 fc4a 	bl	8002b30 <pyd1598_direct_link_set_one_pulse>
					readout_state = PYD1598_READOUT_GET_MSG;
 800229c:	231e      	movs	r3, #30
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	2201      	movs	r2, #1
 80022a2:	701a      	strb	r2, [r3, #0]
 80022a4:	e023      	b.n	80022ee <pyd1598_dl_readout_fsm+0xee>

				}
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 80022a6:	1cfb      	adds	r3, r7, #3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d003      	beq.n	80022b6 <pyd1598_dl_readout_fsm+0xb6>
 80022ae:	1cfb      	adds	r3, r7, #3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d11b      	bne.n	80022ee <pyd1598_dl_readout_fsm+0xee>
						(op_mode == PYD1598_WAKE_UP))
				{
					//TODO: (high) is it possible to set another flag if it
					//comes from an interrupt

					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022bc:	f000 fbfc 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022c6:	f000 fc4d 	bl	8002b64 <pyd1598_direct_link_set_negative_edge>

					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 80022ca:	1cfb      	adds	r3, r7, #3
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d009      	beq.n	80022e6 <pyd1598_dl_readout_fsm+0xe6>
 80022d2:	2313      	movs	r3, #19
 80022d4:	18fb      	adds	r3, r7, r3
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d104      	bne.n	80022e6 <pyd1598_dl_readout_fsm+0xe6>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
					{
						//since in Wake-up mode read is optional:
						readout_state = PYD1598_READOUT_END_COM;
 80022dc:	231e      	movs	r3, #30
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2204      	movs	r2, #4
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e003      	b.n	80022ee <pyd1598_dl_readout_fsm+0xee>
					}
					else
					{
						readout_state = PYD1598_READOUT_GET_MSG;
 80022e6:	231e      	movs	r3, #30
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
				else
				{
					//TODO: (low) define an error handler
				}

				start_fsm = false;
 80022ee:	231c      	movs	r3, #28
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 80022f6:	231f      	movs	r3, #31
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2201      	movs	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]

			}

			break;
 80022fe:	e0af      	b.n	8002460 <pyd1598_dl_readout_fsm+0x260>
		case PYD1598_READOUT_GET_MSG:

			//TODO: (HIGH) remember to protect from interrupts!!!!!!!!!!!!!

			datagram_bufffer = 0;
 8002300:	2200      	movs	r2, #0
 8002302:	2300      	movs	r3, #0
 8002304:	60ba      	str	r2, [r7, #8]
 8002306:	60fb      	str	r3, [r7, #12]

			//Proceeding with the Readout:
			for(idx = 0; idx < 40; idx++)
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	e01e      	b.n	800234c <pyd1598_dl_readout_fsm+0x14c>
			{
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002312:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002314:	f000 fc0c 	bl	8002b30 <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800231c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800231e:	f000 fbdf 	bl	8002ae0 <pyd1598_direct_link_set_as_input>

				//TODO: (low) Test without using a function call so the pin bit
				// can be faster.
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2208      	movs	r2, #8
 8002326:	18ba      	adds	r2, r7, r2
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800232c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800232e:	f000 fc2b 	bl	8002b88 <pyd1598_direct_link_read_pin>
													&datagram_bufffer, idx);

				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002336:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002338:	f000 fc14 	bl	8002b64 <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002340:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002342:	f000 fbb9 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b27      	cmp	r3, #39	; 0x27
 8002350:	d9dd      	bls.n	800230e <pyd1598_dl_readout_fsm+0x10e>

			//host controller must force DIRECT LINK pin to LOW for at least
			//t_{UP} >  1250μs and subsequently release DIRECT LINK (High Z)


			time_update_idx = 0;
 8002352:	231d      	movs	r3, #29
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]

			readout_status = READOUT_BUSY;
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8002362:	231e      	movs	r3, #30
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2203      	movs	r2, #3
 8002368:	701a      	strb	r2, [r3, #0]

			break;
 800236a:	e07c      	b.n	8002466 <pyd1598_dl_readout_fsm+0x266>
		case PYD1598_READOUT_SIGNAL_DOWN:
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002370:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002372:	f000 fba1 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800237a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800237c:	f000 fbf2 	bl	8002b64 <pyd1598_direct_link_set_negative_edge>

			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8002380:	1cfb      	adds	r3, r7, #3
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d003      	beq.n	8002390 <pyd1598_dl_readout_fsm+0x190>
 8002388:	1cfb      	adds	r3, r7, #3
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d119      	bne.n	80023c4 <pyd1598_dl_readout_fsm+0x1c4>
				(op_mode == PYD1598_WAKE_UP))
			{
				//since these op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002394:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002396:	f000 fbb7 	bl	8002b08 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 800239a:	231f      	movs	r3, #31
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_IDLE;
 80023a2:	231e      	movs	r3, #30
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
				time_update_idx = 0;
 80023aa:	231d      	movs	r3, #29
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]

				if(op_mode == PYD1598_WAKE_UP)
 80023b2:	1cfb      	adds	r3, r7, #3
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d10c      	bne.n	80023d4 <pyd1598_dl_readout_fsm+0x1d4>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 80023ba:	231b      	movs	r3, #27
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2202      	movs	r2, #2
 80023c0:	701a      	strb	r2, [r3, #0]
				if(op_mode == PYD1598_WAKE_UP)
 80023c2:	e007      	b.n	80023d4 <pyd1598_dl_readout_fsm+0x1d4>


			}
			else
			{
				readout_status = READOUT_BUSY;
 80023c4:	231f      	movs	r3, #31
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 80023cc:	231e      	movs	r3, #30
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2202      	movs	r2, #2
 80023d2:	701a      	strb	r2, [r3, #0]
			// 					120μs < t_{DS} < 150μs,
			//and since
			//					t_{UP} >  1250μs
			//this state should remain at least 1250/120 = 10.42 -> 11 cycles.

			time_update_idx++;
 80023d4:	211d      	movs	r1, #29
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	3201      	adds	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]

			//TODO: (low) create a mechanism to configure the number of cycles
			if(time_update_idx >= 11)
 80023e0:	187b      	adds	r3, r7, r1
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b0a      	cmp	r3, #10
 80023e6:	d93d      	bls.n	8002464 <pyd1598_dl_readout_fsm+0x264>
			{
				time_update_idx = 0;
 80023e8:	187b      	adds	r3, r7, r1
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 80023ee:	231f      	movs	r3, #31
 80023f0:	18fb      	adds	r3, r7, r3
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_END_COM;
 80023f6:	231e      	movs	r3, #30
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2204      	movs	r2, #4
 80023fc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80023fe:	e031      	b.n	8002464 <pyd1598_dl_readout_fsm+0x264>
		case PYD1598_READOUT_END_COM:
			//TODO: (low) check if this conditional is required since it is done
			//in PYD1598_READOUT_SIGNAL_DOWN.

			//release DIRECT LINK (High Z)
			if(op_mode == PYD1598_FORCE_READOUT)
 8002400:	1cfb      	adds	r3, r7, #3
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <pyd1598_dl_readout_fsm+0x214>
			{
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800240c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800240e:	f000 fb67 	bl	8002ae0 <pyd1598_direct_link_set_as_input>
 8002412:	e014      	b.n	800243e <pyd1598_dl_readout_fsm+0x23e>
			}
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8002414:	1cfb      	adds	r3, r7, #3
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d003      	beq.n	8002424 <pyd1598_dl_readout_fsm+0x224>
 800241c:	1cfb      	adds	r3, r7, #3
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d10c      	bne.n	800243e <pyd1598_dl_readout_fsm+0x23e>
					(op_mode == PYD1598_WAKE_UP))
			{
				//since this op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002428:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800242a:	f000 fb6d 	bl	8002b08 <pyd1598_direct_link_set_as_interrupt_input>

				if(op_mode == PYD1598_WAKE_UP)
 800242e:	1cfb      	adds	r3, r7, #3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d103      	bne.n	800243e <pyd1598_dl_readout_fsm+0x23e>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8002436:	231b      	movs	r3, #27
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
				}

			}
			readout_status = READOUT_READY;
 800243e:	231f      	movs	r3, #31
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_IDLE;
 8002446:	231e      	movs	r3, #30
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	2200      	movs	r2, #0
 800244c:	701a      	strb	r2, [r3, #0]

		default:
			readout_state = PYD1598_READOUT_IDLE;
 800244e:	231e      	movs	r3, #30
 8002450:	18fb      	adds	r3, r7, r3
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
			readout_status = READOUT_READY;
 8002456:	231f      	movs	r3, #31
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
			break;
 800245e:	e002      	b.n	8002466 <pyd1598_dl_readout_fsm+0x266>
			break;
 8002460:	46c0      	nop			; (mov r8, r8)
 8002462:	e000      	b.n	8002466 <pyd1598_dl_readout_fsm+0x266>
			break;
 8002464:	46c0      	nop			; (mov r8, r8)
	}

	direct_link->readout_state = readout_state;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	221e      	movs	r2, #30
 800246a:	18ba      	adds	r2, r7, r2
 800246c:	2120      	movs	r1, #32
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	545a      	strb	r2, [r3, r1]
	direct_link->readout_status = readout_status;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	221f      	movs	r2, #31
 8002476:	18ba      	adds	r2, r7, r2
 8002478:	7812      	ldrb	r2, [r2, #0]
 800247a:	77da      	strb	r2, [r3, #31]
	direct_link->time_update_idx = time_update_idx;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	221d      	movs	r2, #29
 8002480:	18ba      	adds	r2, r7, r2
 8002482:	2122      	movs	r1, #34	; 0x22
 8002484:	7812      	ldrb	r2, [r2, #0]
 8002486:	545a      	strb	r2, [r3, r1]
	direct_link->start_fsm = start_fsm;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	221c      	movs	r2, #28
 800248c:	18ba      	adds	r2, r7, r2
 800248e:	2121      	movs	r1, #33	; 0x21
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	545a      	strb	r2, [r3, r1]
	//Saving datagram to be read outside the ISR:
	direct_link->datagram_bufffer = datagram_bufffer;
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	610a      	str	r2, [r1, #16]
 800249c:	614b      	str	r3, [r1, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	221b      	movs	r2, #27
 80024a2:	18ba      	adds	r2, r7, r2
 80024a4:	2123      	movs	r1, #35	; 0x23
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	545a      	strb	r2, [r3, r1]


}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b008      	add	sp, #32
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	0800573c 	.word	0x0800573c

080024b8 <pyd1598_request_write>:


/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	sensor->serin.start_fsm = true;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	755a      	strb	r2, [r3, #21]
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b002      	add	sp, #8
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <pyd1598_serin_send_datagram_fsm>:


void pyd1598_serin_send_datagram_fsm(pyd1598_serin_t *serin,
									pyd1598_hardware_interface_t data_link_pin)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b08f      	sub	sp, #60	; 0x3c
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	6019      	str	r1, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
	//Declaring the FSM variables and define them to protect the serin variables
	//from any outside change

	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 80024de:	2437      	movs	r4, #55	; 0x37
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	7d12      	ldrb	r2, [r2, #20]
 80024e6:	701a      	strb	r2, [r3, #0]
	uint32_t data_idx = serin->data_idx;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
	bool start_fsm = serin->start_fsm;
 80024ee:	232f      	movs	r3, #47	; 0x2f
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	7d52      	ldrb	r2, [r2, #21]
 80024f6:	701a      	strb	r2, [r3, #0]
	pyd1598_config_t config = serin->config;
 80024f8:	231c      	movs	r3, #28
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	ca03      	ldmia	r2!, {r0, r1}
 8002500:	c303      	stmia	r3!, {r0, r1}
	uint32_t mask = serin->mask;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t conf_datagram = serin->conf_datagram;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 800250e:	2314      	movs	r3, #20
 8002510:	18fa      	adds	r2, r7, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3318      	adds	r3, #24
 8002516:	cb03      	ldmia	r3!, {r0, r1}
 8002518:	c203      	stmia	r2!, {r0, r1}

	switch(state)
 800251a:	193b      	adds	r3, r7, r4
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d900      	bls.n	8002524 <pyd1598_serin_send_datagram_fsm+0x54>
 8002522:	e07f      	b.n	8002624 <pyd1598_serin_send_datagram_fsm+0x154>
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <pyd1598_serin_send_datagram_fsm+0x190>)
 8002528:	18d3      	adds	r3, r2, r3
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	469f      	mov	pc, r3
	{
		case PYD1598_SERIN_IDLE:
			if(start_fsm == true)
 800252e:	242f      	movs	r4, #47	; 0x2f
 8002530:	193b      	adds	r3, r7, r4
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d100      	bne.n	800253a <pyd1598_serin_send_datagram_fsm+0x6a>
 8002538:	e079      	b.n	800262e <pyd1598_serin_send_datagram_fsm+0x15e>
			{
				pyd1598_direct_link_set_as_output(data_link_pin);
 800253a:	1d3b      	adds	r3, r7, #4
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	6859      	ldr	r1, [r3, #4]
 8002540:	f000 faba 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8002544:	1d3b      	adds	r3, r7, #4
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	6859      	ldr	r1, [r3, #4]
 800254a:	f000 fb0b 	bl	8002b64 <pyd1598_direct_link_set_negative_edge>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 800254e:	2337      	movs	r3, #55	; 0x37
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
				start_fsm = false;
 8002556:	193b      	adds	r3, r7, r4
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800255c:	e067      	b.n	800262e <pyd1598_serin_send_datagram_fsm+0x15e>
		case PYD1598_SERIN_SETUP_FOR_MESSAGE:

			data_idx = 0;
 800255e:	2300      	movs	r3, #0
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
//			pyd1598_direct_link_set_as_output();
//			pyd1598_direct_link_set_negative_edge();

			mask = PYD1598_SERIN_BIT_24_MASK;
 8002562:	2380      	movs	r3, #128	; 0x80
 8002564:	045b      	lsls	r3, r3, #17
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
			state = PYD1598_SERIN_SEND_MSG;
 8002568:	2337      	movs	r3, #55	; 0x37
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]

			break;
 8002570:	e05e      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_MSG:
			// program the timer interrupt considering: t_{SHD} = 80-150μs
			if((conf_datagram & mask) == 0)
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002576:	4013      	ands	r3, r2
 8002578:	d106      	bne.n	8002588 <pyd1598_serin_send_datagram_fsm+0xb8>
			{
				pyd1598_serin_set_zero_pulse(output);
 800257a:	2314      	movs	r3, #20
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	f000 fa5d 	bl	8002a40 <pyd1598_serin_set_zero_pulse>
 8002586:	e005      	b.n	8002594 <pyd1598_serin_send_datagram_fsm+0xc4>
			}
			else
			{
				pyd1598_serin_set_one_pulse(output);
 8002588:	2314      	movs	r3, #20
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	f000 fa78 	bl	8002a84 <pyd1598_serin_set_one_pulse>
			}

			mask >>= 1;
 8002594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002596:	085b      	lsrs	r3, r3, #1
 8002598:	62bb      	str	r3, [r7, #40]	; 0x28

//			if(data_idx >= (PYD1598_SERIN_MSG_LONG+1))
			if(mask == 0)
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d104      	bne.n	80025aa <pyd1598_serin_send_datagram_fsm+0xda>
			{
				state = PYD1598_SERIN_SEND_DOWN;
 80025a0:	2337      	movs	r3, #55	; 0x37
 80025a2:	18fb      	adds	r3, r7, r3
 80025a4:	2203      	movs	r2, #3
 80025a6:	701a      	strb	r2, [r3, #0]
			else
			{
				data_idx++;
			}

			break;
 80025a8:	e042      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	3301      	adds	r3, #1
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80025b0:	e03e      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_DOWN:
			pyd1598_direct_link_set_as_output(data_link_pin);
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	6859      	ldr	r1, [r3, #4]
 80025b8:	f000 fa7e 	bl	8002ab8 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	f000 facf 	bl	8002b64 <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 80025c6:	2337      	movs	r3, #55	; 0x37
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2204      	movs	r2, #4
 80025cc:	701a      	strb	r2, [r3, #0]

			break;
 80025ce:	e02f      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>

		case PYD1598_SERIN_WAIT_LOAD_TIME:
			//Data Load Time t_{SLT} > 650μs. i.e. 8.125 to 4.333 times
			//(9 times for a 80μs interrupt or 4 times for a 150μs interrupt)
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 80025d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d2:	2b22      	cmp	r3, #34	; 0x22
 80025d4:	d904      	bls.n	80025e0 <pyd1598_serin_send_datagram_fsm+0x110>
			{
				state = PYD1598_SERIN_END_COM;
 80025d6:	2337      	movs	r3, #55	; 0x37
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				data_idx++;
			}
			break;
 80025de:	e027      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	3301      	adds	r3, #1
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80025e6:	e023      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_END_COM:

			if(config.op_mode == PYD1598_FORCE_READOUT)
 80025e8:	231c      	movs	r3, #28
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	791b      	ldrb	r3, [r3, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <pyd1598_serin_send_datagram_fsm+0x12e>
			{
				pyd1598_direct_link_set_as_input(data_link_pin);
 80025f2:	1d3b      	adds	r3, r7, #4
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	f000 fa72 	bl	8002ae0 <pyd1598_direct_link_set_as_input>
 80025fc:	e00d      	b.n	800261a <pyd1598_serin_send_datagram_fsm+0x14a>
			}
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 80025fe:	221c      	movs	r2, #28
 8002600:	18bb      	adds	r3, r7, r2
 8002602:	791b      	ldrb	r3, [r3, #4]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d003      	beq.n	8002610 <pyd1598_serin_send_datagram_fsm+0x140>
					(config.op_mode == PYD1598_WAKE_UP) )
 8002608:	18bb      	adds	r3, r7, r2
 800260a:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 800260c:	2b02      	cmp	r3, #2
 800260e:	d104      	bne.n	800261a <pyd1598_serin_send_datagram_fsm+0x14a>
			{
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	f000 fa77 	bl	8002b08 <pyd1598_direct_link_set_as_interrupt_input>
			}
			state = PYD1598_SERIN_IDLE;
 800261a:	2337      	movs	r3, #55	; 0x37
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
			break;
 8002622:	e005      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
		default:
			state = PYD1598_SERIN_IDLE;
 8002624:	2337      	movs	r3, #55	; 0x37
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]
			break;
 800262c:	e000      	b.n	8002630 <pyd1598_serin_send_datagram_fsm+0x160>
			break;
 800262e:	46c0      	nop			; (mov r8, r8)

	}

	//This are the FSM variables that are changed in this function.
	serin->state = state;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2237      	movs	r2, #55	; 0x37
 8002634:	18ba      	adds	r2, r7, r2
 8002636:	7812      	ldrb	r2, [r2, #0]
 8002638:	751a      	strb	r2, [r3, #20]
	serin->data_idx = data_idx;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800263e:	611a      	str	r2, [r3, #16]
	serin->start_fsm = false;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	755a      	strb	r2, [r3, #21]
	serin->mask = mask;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800264a:	60da      	str	r2, [r3, #12]
	serin->start_fsm = start_fsm;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	222f      	movs	r2, #47	; 0x2f
 8002650:	18ba      	adds	r2, r7, r2
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	755a      	strb	r2, [r3, #21]

}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b00f      	add	sp, #60	; 0x3c
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	08005750 	.word	0x08005750

08002664 <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8002664:	b084      	sub	sp, #16
 8002666:	b5b0      	push	{r4, r5, r7, lr}
 8002668:	af00      	add	r7, sp, #0
 800266a:	250c      	movs	r5, #12
 800266c:	1d2c      	adds	r4, r5, #4
 800266e:	19e4      	adds	r4, r4, r7
 8002670:	6020      	str	r0, [r4, #0]
 8002672:	6061      	str	r1, [r4, #4]
 8002674:	60a2      	str	r2, [r4, #8]
 8002676:	60e3      	str	r3, [r4, #12]
	*motion_isr_status = sensor.motion_sensed;
 8002678:	1d2b      	adds	r3, r5, #4
 800267a:	19db      	adds	r3, r3, r7
 800267c:	2258      	movs	r2, #88	; 0x58
 800267e:	5c9a      	ldrb	r2, [r3, r2]
 8002680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002682:	701a      	strb	r2, [r3, #0]
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	bcb0      	pop	{r4, r5, r7}
 800268c:	bc08      	pop	{r3}
 800268e:	b004      	add	sp, #16
 8002690:	4718      	bx	r3

08002692 <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2243      	movs	r2, #67	; 0x43
 80026a0:	5c9b      	ldrb	r3, [r3, r2]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d10a      	bne.n	80026bc <pyd1598_read_wakeup_signal+0x2a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2243      	movs	r2, #67	; 0x43
 80026aa:	2100      	movs	r1, #0
 80026ac:	5499      	strb	r1, [r3, r2]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2258      	movs	r2, #88	; 0x58
 80026b8:	2102      	movs	r1, #2
 80026ba:	5499      	strb	r1, [r3, r2]
	}

	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <pyd1598_serin_add_all_conf>:
/*______________________________SERIN functions_______________________________*/


uint8_t pyd1598_serin_add_all_conf(pyd1598_config_t config,
													pyd1598_serin_t *serin)
{
 80026c6:	b5b0      	push	{r4, r5, r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	2408      	movs	r4, #8
 80026ce:	193b      	adds	r3, r7, r4
 80026d0:	6018      	str	r0, [r3, #0]
 80026d2:	6059      	str	r1, [r3, #4]
 80026d4:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 80026d6:	2517      	movs	r5, #23
 80026d8:	197b      	adds	r3, r7, r5
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
	//TODO: (low) set error handler
	pyd1598_serin_add_threshold(config.threshold, serin);
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	0011      	movs	r1, r2
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f838 	bl	800275c <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f855 	bl	80027a4 <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 80026fa:	193b      	adds	r3, r7, r4
 80026fc:	789b      	ldrb	r3, [r3, #2]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	0011      	movs	r1, r2
 8002702:	0018      	movs	r0, r3
 8002704:	f000 f878 	bl	80027f8 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8002708:	193b      	adds	r3, r7, r4
 800270a:	78db      	ldrb	r3, [r3, #3]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f89b 	bl	800284c <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8002716:	193b      	adds	r3, r7, r4
 8002718:	791b      	ldrb	r3, [r3, #4]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f000 f8be 	bl	80028a0 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8002724:	193b      	adds	r3, r7, r4
 8002726:	795b      	ldrb	r3, [r3, #5]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f8db 	bl	80028e8 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8002732:	193b      	adds	r3, r7, r4
 8002734:	799b      	ldrb	r3, [r3, #6]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	0011      	movs	r1, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 f8fe 	bl	800293c <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8002740:	193b      	adds	r3, r7, r4
 8002742:	79db      	ldrb	r3, [r3, #7]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	0011      	movs	r1, r2
 8002748:	0018      	movs	r0, r3
 800274a:	f000 f921 	bl	8002990 <pyd1598_serin_add_count_mode>
	return status;
 800274e:	197b      	adds	r3, r7, r5
 8002750:	781b      	ldrb	r3, [r3, #0]
}
 8002752:	0018      	movs	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	b006      	add	sp, #24
 8002758:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800275c <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 800275c:	b5b0      	push	{r4, r5, r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	0002      	movs	r2, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800276a:	200f      	movs	r0, #15
 800276c:	183b      	adds	r3, r7, r0
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]

	serin->config.threshold = new_threshold;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	1dfa      	adds	r2, r7, #7
 8002776:	7812      	ldrb	r2, [r2, #0]
 8002778:	701a      	strb	r2, [r3, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3308      	adds	r3, #8
 800277e:	0019      	movs	r1, r3
 8002780:	0005      	movs	r5, r0
 8002782:	183c      	adds	r4, r7, r0
 8002784:	4a06      	ldr	r2, [pc, #24]	; (80027a0 <pyd1598_serin_add_threshold+0x44>)
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	7818      	ldrb	r0, [r3, #0]
 800278a:	2311      	movs	r3, #17
 800278c:	f000 f92a 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 8002790:	0003      	movs	r3, r0
 8002792:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_THRESHOLD,
											PYD1598_SHIFT_THRESHOLD);
	return status;
 8002794:	197b      	adds	r3, r7, r5
 8002796:	781b      	ldrb	r3, [r3, #0]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	0001ffff 	.word	0x0001ffff

080027a4 <pyd1598_serin_add_blind_time>:
//Reg Val is 4 bits ...
//max_value 8sec =8000ms
//min value 0.5sec =500ms
uint8_t pyd1598_serin_add_blind_time(pyd1598_blind_time_t new_blind_time,
														pyd1598_serin_t *serin)
{
 80027a4:	b5b0      	push	{r4, r5, r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	0002      	movs	r2, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80027b2:	200f      	movs	r0, #15
 80027b4:	183b      	adds	r3, r7, r0
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]

	new_blind_time &= 0x0F;
 80027ba:	1dfb      	adds	r3, r7, #7
 80027bc:	1dfa      	adds	r2, r7, #7
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	210f      	movs	r1, #15
 80027c2:	400a      	ands	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	serin->config.blind_time = new_blind_time;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	1dfa      	adds	r2, r7, #7
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	705a      	strb	r2, [r3, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3308      	adds	r3, #8
 80027d2:	0019      	movs	r1, r3
 80027d4:	0005      	movs	r5, r0
 80027d6:	183c      	adds	r4, r7, r0
 80027d8:	4a06      	ldr	r2, [pc, #24]	; (80027f4 <pyd1598_serin_add_blind_time+0x50>)
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	7818      	ldrb	r0, [r3, #0]
 80027de:	230d      	movs	r3, #13
 80027e0:	f000 f900 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 80027e4:	0003      	movs	r3, r0
 80027e6:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_BLIND_TIME,
											PYD1598_SHIFT_BLIND_TIME);
	return status;
 80027e8:	197b      	adds	r3, r7, r5
 80027ea:	781b      	ldrb	r3, [r3, #0]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b004      	add	sp, #16
 80027f2:	bdb0      	pop	{r4, r5, r7, pc}
 80027f4:	01fe1fff 	.word	0x01fe1fff

080027f8 <pyd1598_serin_add_pulse_counter>:

uint8_t pyd1598_serin_add_pulse_counter(pyd1598_pulse_counter_t pulse_counter,
														pyd1598_serin_t *serin)
{
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	0002      	movs	r2, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002806:	200f      	movs	r0, #15
 8002808:	183b      	adds	r3, r7, r0
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

	pulse_counter &= 0x03;
 800280e:	1dfb      	adds	r3, r7, #7
 8002810:	1dfa      	adds	r2, r7, #7
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	2103      	movs	r1, #3
 8002816:	400a      	ands	r2, r1
 8002818:	701a      	strb	r2, [r3, #0]
	serin->config.pulse_counter = pulse_counter;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	1dfa      	adds	r2, r7, #7
 800281e:	7812      	ldrb	r2, [r2, #0]
 8002820:	709a      	strb	r2, [r3, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	3308      	adds	r3, #8
 8002826:	0019      	movs	r1, r3
 8002828:	0005      	movs	r5, r0
 800282a:	183c      	adds	r4, r7, r0
 800282c:	4a06      	ldr	r2, [pc, #24]	; (8002848 <pyd1598_serin_add_pulse_counter+0x50>)
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	7818      	ldrb	r0, [r3, #0]
 8002832:	230b      	movs	r3, #11
 8002834:	f000 f8d6 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 8002838:	0003      	movs	r3, r0
 800283a:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_PULSE_COUNTER,
											PYD1598_SHIFT_PULSE_COUNTER);
	return status;
 800283c:	197b      	adds	r3, r7, r5
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bdb0      	pop	{r4, r5, r7, pc}
 8002848:	01ffe7ff 	.word	0x01ffe7ff

0800284c <pyd1598_serin_add_window_time>:
uint8_t pyd1598_serin_add_window_time(pyd1598_window_time_t window_time,
														pyd1598_serin_t *serin)
{
 800284c:	b5b0      	push	{r4, r5, r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	0002      	movs	r2, r0
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800285a:	200f      	movs	r0, #15
 800285c:	183b      	adds	r3, r7, r0
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]

	window_time &= 0x03;
 8002862:	1dfb      	adds	r3, r7, #7
 8002864:	1dfa      	adds	r2, r7, #7
 8002866:	7812      	ldrb	r2, [r2, #0]
 8002868:	2103      	movs	r1, #3
 800286a:	400a      	ands	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
	serin->config.window_time = window_time;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	1dfa      	adds	r2, r7, #7
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	70da      	strb	r2, [r3, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	3308      	adds	r3, #8
 800287a:	0019      	movs	r1, r3
 800287c:	0005      	movs	r5, r0
 800287e:	183c      	adds	r4, r7, r0
 8002880:	4a06      	ldr	r2, [pc, #24]	; (800289c <pyd1598_serin_add_window_time+0x50>)
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	7818      	ldrb	r0, [r3, #0]
 8002886:	2309      	movs	r3, #9
 8002888:	f000 f8ac 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 800288c:	0003      	movs	r3, r0
 800288e:	7023      	strb	r3, [r4, #0]
										PYD1598_MASK_WINDOW_TIME,
										PYD1598_SHIFT_WINDOW_TIME);
	return status;
 8002890:	197b      	adds	r3, r7, r5
 8002892:	781b      	ldrb	r3, [r3, #0]
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bdb0      	pop	{r4, r5, r7, pc}
 800289c:	01fff9ff 	.word	0x01fff9ff

080028a0 <pyd1598_serin_add_operation_mode>:
uint8_t pyd1598_serin_add_operation_mode(pyd1598_op_mode_t new_op_mode,
														pyd1598_serin_t *serin)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	0002      	movs	r2, r0
 80028a8:	6039      	str	r1, [r7, #0]
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80028ae:	200f      	movs	r0, #15
 80028b0:	183b      	adds	r3, r7, r0
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
	serin->config.op_mode = new_op_mode;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	1dfa      	adds	r2, r7, #7
 80028ba:	7812      	ldrb	r2, [r2, #0]
 80028bc:	711a      	strb	r2, [r3, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	3308      	adds	r3, #8
 80028c2:	0019      	movs	r1, r3
 80028c4:	0005      	movs	r5, r0
 80028c6:	183c      	adds	r4, r7, r0
 80028c8:	4a06      	ldr	r2, [pc, #24]	; (80028e4 <pyd1598_serin_add_operation_mode+0x44>)
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	7818      	ldrb	r0, [r3, #0]
 80028ce:	2307      	movs	r3, #7
 80028d0:	f000 f888 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 80028d4:	0003      	movs	r3, r0
 80028d6:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_OPERATION_MODES,
											PYD1598_SHIFT_OPERATION_MODES);
	return status;
 80028d8:	197b      	adds	r3, r7, r5
 80028da:	781b      	ldrb	r3, [r3, #0]
}
 80028dc:	0018      	movs	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	01fffe7f 	.word	0x01fffe7f

080028e8 <pyd1598_serin_add_signal_source>:
uint8_t pyd1598_serin_add_signal_source(pyd1598_signal_source_t signal_source,
														pyd1598_serin_t *serin)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	0002      	movs	r2, r0
 80028f0:	6039      	str	r1, [r7, #0]
 80028f2:	1dfb      	adds	r3, r7, #7
 80028f4:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80028f6:	200f      	movs	r0, #15
 80028f8:	183b      	adds	r3, r7, r0
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

	signal_source &= 0x03;
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	1dfa      	adds	r2, r7, #7
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	2103      	movs	r1, #3
 8002906:	400a      	ands	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]
	serin->config.signal_source = signal_source;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	1dfa      	adds	r2, r7, #7
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	715a      	strb	r2, [r3, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	3308      	adds	r3, #8
 8002916:	0019      	movs	r1, r3
 8002918:	0005      	movs	r5, r0
 800291a:	183c      	adds	r4, r7, r0
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <pyd1598_serin_add_signal_source+0x50>)
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	7818      	ldrb	r0, [r3, #0]
 8002922:	2305      	movs	r3, #5
 8002924:	f000 f85e 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 8002928:	0003      	movs	r3, r0
 800292a:	7023      	strb	r3, [r4, #0]
												&serin->conf_datagram,
												PYD1598_MASK_SIGNAL_SOURCE,
												PYD1598_SHIFT_SIGNAL_SOURCE);
	return status;
 800292c:	197b      	adds	r3, r7, r5
 800292e:	781b      	ldrb	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b004      	add	sp, #16
 8002936:	bdb0      	pop	{r4, r5, r7, pc}
 8002938:	01ffff9f 	.word	0x01ffff9f

0800293c <pyd1598_serin_add_hpf_cutoff>:

uint8_t pyd1598_serin_add_hpf_cutoff(pyd1598_hpf_cutoff_t new_hpf_cutoff,
														pyd1598_serin_t *serin)
{
 800293c:	b5b0      	push	{r4, r5, r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	0002      	movs	r2, r0
 8002944:	6039      	str	r1, [r7, #0]
 8002946:	1dfb      	adds	r3, r7, #7
 8002948:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800294a:	200f      	movs	r0, #15
 800294c:	183b      	adds	r3, r7, r0
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]

	new_hpf_cutoff &= 0x03;
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	1dfa      	adds	r2, r7, #7
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	2103      	movs	r1, #3
 800295a:	400a      	ands	r2, r1
 800295c:	701a      	strb	r2, [r3, #0]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	1dfa      	adds	r2, r7, #7
 8002962:	7812      	ldrb	r2, [r2, #0]
 8002964:	719a      	strb	r2, [r3, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	0019      	movs	r1, r3
 800296c:	0005      	movs	r5, r0
 800296e:	183c      	adds	r4, r7, r0
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <pyd1598_serin_add_hpf_cutoff+0x50>)
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	7818      	ldrb	r0, [r3, #0]
 8002976:	2302      	movs	r3, #2
 8002978:	f000 f834 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 800297c:	0003      	movs	r3, r0
 800297e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_HPF_CUTOFF,
											PYD1598_SHIFT_HPF_CUTOFF);
	return status;
 8002980:	197b      	adds	r3, r7, r5
 8002982:	781b      	ldrb	r3, [r3, #0]
}
 8002984:	0018      	movs	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	b004      	add	sp, #16
 800298a:	bdb0      	pop	{r4, r5, r7, pc}
 800298c:	01fffffb 	.word	0x01fffffb

08002990 <pyd1598_serin_add_count_mode>:

uint8_t pyd1598_serin_add_count_mode(pyd1598_count_mode_t new_count_mode,
														pyd1598_serin_t *serin)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	0002      	movs	r2, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800299e:	200f      	movs	r0, #15
 80029a0:	183b      	adds	r3, r7, r0
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]

	new_count_mode &= 0x03;
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	1dfa      	adds	r2, r7, #7
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	2103      	movs	r1, #3
 80029ae:	400a      	ands	r2, r1
 80029b0:	701a      	strb	r2, [r3, #0]
	serin->config.count_mode = new_count_mode;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	1dfa      	adds	r2, r7, #7
 80029b6:	7812      	ldrb	r2, [r2, #0]
 80029b8:	71da      	strb	r2, [r3, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	3308      	adds	r3, #8
 80029be:	0019      	movs	r1, r3
 80029c0:	0005      	movs	r5, r0
 80029c2:	183c      	adds	r4, r7, r0
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <pyd1598_serin_add_count_mode+0x50>)
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	7818      	ldrb	r0, [r3, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	f000 f80a 	bl	80029e4 <pyd1598_serin_add_to_datagram>
 80029d0:	0003      	movs	r3, r0
 80029d2:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_COUNT_MODE,
											PYD1598_SHIFT_COUNT_MODE);
	return status;
 80029d4:	197b      	adds	r3, r7, r5
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bdb0      	pop	{r4, r5, r7, pc}
 80029e0:	01fffffd 	.word	0x01fffffd

080029e4 <pyd1598_serin_add_to_datagram>:

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b087      	sub	sp, #28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	0019      	movs	r1, r3
 80029f0:	240f      	movs	r4, #15
 80029f2:	193b      	adds	r3, r7, r4
 80029f4:	1c02      	adds	r2, r0, #0
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	200e      	movs	r0, #14
 80029fa:	183b      	adds	r3, r7, r0
 80029fc:	1c0a      	adds	r2, r1, #0
 80029fe:	701a      	strb	r2, [r3, #0]
	uint32_t old_config = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
	uint32_t new_config = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	4013      	ands	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 8002a16:	193b      	adds	r3, r7, r4
 8002a18:	781a      	ldrb	r2, [r3, #0]
 8002a1a:	183b      	adds	r3, r7, r0
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	0013      	movs	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

	//Adding data to the datagram copy
	new_config |= old_config;
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	601a      	str	r2, [r3, #0]

	return 0;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	0018      	movs	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b007      	add	sp, #28
 8002a3e:	bd90      	pop	{r4, r7, pc}

08002a40 <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	003b      	movs	r3, r7
 8002a48:	6018      	str	r0, [r3, #0]
 8002a4a:	6059      	str	r1, [r3, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	003b      	movs	r3, r7
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	0019      	movs	r1, r3
 8002a58:	f001 f8f5 	bl	8003c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002a5c:	003b      	movs	r3, r7
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	003b      	movs	r3, r7
 8002a62:	889b      	ldrh	r3, [r3, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	0019      	movs	r1, r3
 8002a68:	f001 f8ed 	bl	8003c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002a6c:	003b      	movs	r3, r7
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	003b      	movs	r3, r7
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	0019      	movs	r1, r3
 8002a78:	f001 f8e5 	bl	8003c46 <HAL_GPIO_WritePin>
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b002      	add	sp, #8
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	003b      	movs	r3, r7
 8002a8c:	6018      	str	r0, [r3, #0]
 8002a8e:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002a90:	003b      	movs	r3, r7
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	003b      	movs	r3, r7
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	0019      	movs	r1, r3
 8002a9c:	f001 f8d3 	bl	8003c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002aa0:	003b      	movs	r3, r7
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	003b      	movs	r3, r7
 8002aa6:	889b      	ldrh	r3, [r3, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	0019      	movs	r1, r3
 8002aac:	f001 f8cb 	bl	8003c46 <HAL_GPIO_WritePin>
}
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	b002      	add	sp, #8
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	003b      	movs	r3, r7
 8002ac0:	6018      	str	r0, [r3, #0]
 8002ac2:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8002ac4:	003b      	movs	r3, r7
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	003b      	movs	r3, r7
 8002aca:	8899      	ldrh	r1, [r3, #4]
 8002acc:	003b      	movs	r3, r7
 8002ace:	799b      	ldrb	r3, [r3, #6]
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	f7fd fe78 	bl	80007c8 <HAL_DIRECT_LINK_conf_as_output>
}
 8002ad8:	46c0      	nop			; (mov r8, r8)
 8002ada:	46bd      	mov	sp, r7
 8002adc:	b002      	add	sp, #8
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	003b      	movs	r3, r7
 8002ae8:	6018      	str	r0, [r3, #0]
 8002aea:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8002aec:	003b      	movs	r3, r7
 8002aee:	6818      	ldr	r0, [r3, #0]
 8002af0:	003b      	movs	r3, r7
 8002af2:	8899      	ldrh	r1, [r3, #4]
 8002af4:	003b      	movs	r3, r7
 8002af6:	799b      	ldrb	r3, [r3, #6]
 8002af8:	b25b      	sxtb	r3, r3
 8002afa:	001a      	movs	r2, r3
 8002afc:	f7fd fdee 	bl	80006dc <HAL_DIRECT_LINK_conf_as_input>
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b002      	add	sp, #8
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	003b      	movs	r3, r7
 8002b10:	6018      	str	r0, [r3, #0]
 8002b12:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8002b14:	003b      	movs	r3, r7
 8002b16:	6818      	ldr	r0, [r3, #0]
 8002b18:	003b      	movs	r3, r7
 8002b1a:	8899      	ldrh	r1, [r3, #4]
 8002b1c:	003b      	movs	r3, r7
 8002b1e:	799b      	ldrb	r3, [r3, #6]
 8002b20:	b25b      	sxtb	r3, r3
 8002b22:	001a      	movs	r2, r3
 8002b24:	f7fd fe10 	bl	8000748 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b002      	add	sp, #8
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	003b      	movs	r3, r7
 8002b38:	6018      	str	r0, [r3, #0]
 8002b3a:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	003b      	movs	r3, r7
 8002b42:	889b      	ldrh	r3, [r3, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	0019      	movs	r1, r3
 8002b48:	f001 f87d 	bl	8003c46 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002b4c:	003b      	movs	r3, r7
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	003b      	movs	r3, r7
 8002b52:	889b      	ldrh	r3, [r3, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	0019      	movs	r1, r3
 8002b58:	f001 f875 	bl	8003c46 <HAL_GPIO_WritePin>
}
 8002b5c:	46c0      	nop			; (mov r8, r8)
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	003b      	movs	r3, r7
 8002b6c:	6018      	str	r0, [r3, #0]
 8002b6e:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002b70:	003b      	movs	r3, r7
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	003b      	movs	r3, r7
 8002b76:	889b      	ldrh	r3, [r3, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	f001 f863 	bl	8003c46 <HAL_GPIO_WritePin>
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8002b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b8a:	b08f      	sub	sp, #60	; 0x3c
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	2608      	movs	r6, #8
 8002b90:	2418      	movs	r4, #24
 8002b92:	1935      	adds	r5, r6, r4
 8002b94:	2608      	movs	r6, #8
 8002b96:	19be      	adds	r6, r7, r6
 8002b98:	19ae      	adds	r6, r5, r6
 8002b9a:	6030      	str	r0, [r6, #0]
 8002b9c:	6071      	str	r1, [r6, #4]
 8002b9e:	627a      	str	r2, [r7, #36]	; 0x24
 8002ba0:	623b      	str	r3, [r7, #32]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;
 8002ba2:	2017      	movs	r0, #23
 8002ba4:	0026      	movs	r6, r4
 8002ba6:	1983      	adds	r3, r0, r6
 8002ba8:	2208      	movs	r2, #8
 8002baa:	4694      	mov	ip, r2
 8002bac:	44bc      	add	ip, r7
 8002bae:	4463      	add	r3, ip
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8002bb4:	2108      	movs	r1, #8
 8002bb6:	198b      	adds	r3, r1, r6
 8002bb8:	2208      	movs	r2, #8
 8002bba:	4694      	mov	ip, r2
 8002bbc:	44bc      	add	ip, r7
 8002bbe:	4463      	add	r3, ip
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	198b      	adds	r3, r1, r6
 8002bc4:	2108      	movs	r1, #8
 8002bc6:	468c      	mov	ip, r1
 8002bc8:	44bc      	add	ip, r7
 8002bca:	4463      	add	r3, ip
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	0034      	movs	r4, r6
 8002bd0:	1981      	adds	r1, r0, r6
 8002bd2:	2008      	movs	r0, #8
 8002bd4:	1838      	adds	r0, r7, r0
 8002bd6:	180e      	adds	r6, r1, r0
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f001 f816 	bl	8003c0c <HAL_GPIO_ReadPin>
 8002be0:	0003      	movs	r3, r0
 8002be2:	7033      	strb	r3, [r6, #0]

	if(pin_value == GPIO_PIN_SET)
 8002be4:	2017      	movs	r0, #23
 8002be6:	0026      	movs	r6, r4
 8002be8:	1983      	adds	r3, r0, r6
 8002bea:	2208      	movs	r2, #8
 8002bec:	4694      	mov	ip, r2
 8002bee:	44bc      	add	ip, r7
 8002bf0:	4463      	add	r3, ip
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d110      	bne.n	8002c1a <pyd1598_direct_link_read_pin+0x92>
	{
		*buffer  |= readout_mask;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	6818      	ldr	r0, [r3, #0]
 8002bfc:	6859      	ldr	r1, [r3, #4]
 8002bfe:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0006      	movs	r6, r0
 8002c06:	4316      	orrs	r6, r2
 8002c08:	613e      	str	r6, [r7, #16]
 8002c0a:	4319      	orrs	r1, r3
 8002c0c:	6179      	str	r1, [r7, #20]
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	6939      	ldr	r1, [r7, #16]
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	6019      	str	r1, [r3, #0]
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e020      	b.n	8002c5c <pyd1598_direct_link_read_pin+0xd4>
	}
	else if(pin_value == GPIO_PIN_RESET)
 8002c1a:	2317      	movs	r3, #23
 8002c1c:	2218      	movs	r2, #24
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	2208      	movs	r2, #8
 8002c22:	4694      	mov	ip, r2
 8002c24:	44bc      	add	ip, r7
 8002c26:	4463      	add	r3, ip
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <pyd1598_direct_link_read_pin+0xd2>
	{
		*buffer  &= ~readout_mask;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4919      	ldr	r1, [pc, #100]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c36:	6808      	ldr	r0, [r1, #0]
 8002c38:	6849      	ldr	r1, [r1, #4]
 8002c3a:	43c6      	mvns	r6, r0
 8002c3c:	61be      	str	r6, [r7, #24]
 8002c3e:	43c9      	mvns	r1, r1
 8002c40:	61f9      	str	r1, [r7, #28]
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	4011      	ands	r1, r2
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	69f9      	ldr	r1, [r7, #28]
 8002c4a:	4019      	ands	r1, r3
 8002c4c:	60f9      	str	r1, [r7, #12]
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	6019      	str	r1, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e000      	b.n	8002c5c <pyd1598_direct_link_read_pin+0xd4>
	}
	else
	{
		__NOP();
 8002c5a:	46c0      	nop			; (mov r8, r8)
	}

	readout_mask = (readout_mask >> 1);
 8002c5c:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	07d9      	lsls	r1, r3, #31
 8002c64:	0850      	lsrs	r0, r2, #1
 8002c66:	6038      	str	r0, [r7, #0]
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	4308      	orrs	r0, r1
 8002c6c:	6038      	str	r0, [r7, #0]
 8002c6e:	085b      	lsrs	r3, r3, #1
 8002c70:	607b      	str	r3, [r7, #4]
 8002c72:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c74:	6839      	ldr	r1, [r7, #0]
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6019      	str	r1, [r3, #0]
 8002c7a:	605a      	str	r2, [r3, #4]

	if(readout_mask == ((uint64_t) 0))
 8002c7c:	4b07      	ldr	r3, [pc, #28]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0011      	movs	r1, r2
 8002c84:	4319      	orrs	r1, r3
 8002c86:	d104      	bne.n	8002c92 <pyd1598_direct_link_read_pin+0x10a>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8002c88:	4904      	ldr	r1, [pc, #16]	; (8002c9c <pyd1598_direct_link_read_pin+0x114>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	600a      	str	r2, [r1, #0]
 8002c90:	604b      	str	r3, [r1, #4]
	}
	return 0;
 8002c92:	2300      	movs	r3, #0

}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b00f      	add	sp, #60	; 0x3c
 8002c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_MspInit+0x50>)
 8002ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_MspInit+0x50>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_MspInit+0x50>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_MspInit+0x50>)
 8002cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_MspInit+0x50>)
 8002cc4:	2180      	movs	r1, #128	; 0x80
 8002cc6:	0549      	lsls	r1, r1, #21
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ccc:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_MspInit+0x50>)
 8002cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	055b      	lsls	r3, r3, #21
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002cda:	2008      	movs	r0, #8
 8002cdc:	f000 fc3c 	bl	8003558 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002ce0:	2010      	movs	r0, #16
 8002ce2:	f000 fc39 	bl	8003558 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cf8:	e7fe      	b.n	8002cf8 <NMI_Handler+0x4>

08002cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cfe:	e7fe      	b.n	8002cfe <HardFault_Handler+0x4>

08002d00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d04:	46c0      	nop			; (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d18:	f000 fbde 	bl	80034d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 8002d26:	2004      	movs	r0, #4
 8002d28:	f000 ffc6 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 8002d2c:	2008      	movs	r0, #8
 8002d2e:	f000 ffc3 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 8002d3c:	2080      	movs	r0, #128	; 0x80
 8002d3e:	f000 ffbb 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 ffb6 	bl	8003cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d58:	4b03      	ldr	r3, [pc, #12]	; (8002d68 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f001 fc66 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000600 	.word	0x20000600

08002d6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <TIM1_CC_IRQHandler+0x14>)
 8002d72:	0018      	movs	r0, r3
 8002d74:	f001 fc5a 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	20000600 	.word	0x20000600

08002d84 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002d88:	4b03      	ldr	r3, [pc, #12]	; (8002d98 <TIM14_IRQHandler+0x14>)
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fc4e 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002d90:	46c0      	nop			; (mov r8, r8)
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	20000698 	.word	0x20000698

08002d9c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <TIM16_IRQHandler+0x14>)
 8002da2:	0018      	movs	r0, r3
 8002da4:	f001 fc42 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	200006e4 	.word	0x200006e4

08002db4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <TIM17_IRQHandler+0x14>)
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 fc36 	bl	800462c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	20000730 	.word	0x20000730

08002dcc <switch_selector_setup>:
#include "switch_selector.h"

uint8_t switch_selector_setup(switch_selector_t *switch_selector,
								switch_selector_gpio_t *switch_selector_gpio,
								uint8_t switch_size)
{
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	701a      	strb	r2, [r3, #0]

	uint8_t status = 0;
 8002dda:	231f      	movs	r3, #31
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8002de2:	231e      	movs	r3, #30
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]



	if(switch_size > 32)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d901      	bls.n	8002df6 <switch_selector_setup+0x2a>
	{
		return 2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	e050      	b.n	8002e98 <switch_selector_setup+0xcc>
	}


	switch_selector->value = 0;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
	switch_selector->switch_size = switch_size;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1dfa      	adds	r2, r7, #7
 8002e00:	7812      	ldrb	r2, [r2, #0]
 8002e02:	711a      	strb	r2, [r3, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 8002e04:	1dfb      	adds	r3, r7, #7
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f002 fb60 	bl	80054d0 <malloc>
 8002e10:	0003      	movs	r3, r0
 8002e12:	001a      	movs	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]
	uint32_t value;
	switch_selector_status_t pin_status;

	for(idx = 0; idx < switch_size; idx++)
 8002e18:	231e      	movs	r3, #30
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	e030      	b.n	8002e84 <switch_selector_setup+0xb8>
	{
		if((switch_selector_gpio + idx) != NULL)
 8002e22:	201e      	movs	r0, #30
 8002e24:	183b      	adds	r3, r7, r0
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d012      	beq.n	8002e58 <switch_selector_setup+0x8c>
		{
//			switch_selector->switch_selector_gpio[idx] = switch_selector_gpio[idx];
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 8002e32:	183b      	adds	r3, r7, r0
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	68ba      	ldr	r2, [r7, #8]
 8002e3a:	18d1      	adds	r1, r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	183b      	adds	r3, r7, r0
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	18d3      	adds	r3, r2, r3
 8002e48:	000a      	movs	r2, r1
 8002e4a:	ca03      	ldmia	r2!, {r0, r1}
 8002e4c:	c303      	stmia	r3!, {r0, r1}

			status = 0;
 8002e4e:	231f      	movs	r3, #31
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e004      	b.n	8002e62 <switch_selector_setup+0x96>
		}
		else
		{
			status = 1;
 8002e58:	231f      	movs	r3, #31
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
			break;
 8002e60:	e017      	b.n	8002e92 <switch_selector_setup+0xc6>
		}

		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8002e62:	2318      	movs	r3, #24
 8002e64:	18fc      	adds	r4, r7, r3
 8002e66:	2317      	movs	r3, #23
 8002e68:	18fa      	adds	r2, r7, r3
 8002e6a:	251e      	movs	r5, #30
 8002e6c:	197b      	adds	r3, r7, r5
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	0023      	movs	r3, r4
 8002e74:	f000 f814 	bl	8002ea0 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8002e78:	0029      	movs	r1, r5
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	3201      	adds	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	231e      	movs	r3, #30
 8002e86:	18fa      	adds	r2, r7, r3
 8002e88:	1dfb      	adds	r3, r7, #7
 8002e8a:	7812      	ldrb	r2, [r2, #0]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3c7      	bcc.n	8002e22 <switch_selector_setup+0x56>

	}

	return status;
 8002e92:	231f      	movs	r3, #31
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	781b      	ldrb	r3, [r3, #0]

}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b008      	add	sp, #32
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ea0 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8002ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	250b      	movs	r5, #11
 8002eae:	197b      	adds	r3, r7, r5
 8002eb0:	1c0a      	adds	r2, r1, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]

	switch_mask <<= pin;
 8002eb8:	197b      	adds	r3, r7, r5
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	197b      	adds	r3, r7, r5
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	18d3      	adds	r3, r2, r3
 8002ed0:	6818      	ldr	r0, [r3, #0]
							(switch_selector->switch_selector_gpio + pin)->pin);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	197b      	adds	r3, r7, r5
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	18d3      	adds	r3, r2, r3
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8002ede:	889b      	ldrh	r3, [r3, #4]
 8002ee0:	2613      	movs	r6, #19
 8002ee2:	19bc      	adds	r4, r7, r6
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	f000 fe91 	bl	8003c0c <HAL_GPIO_ReadPin>
 8002eea:	0003      	movs	r3, r0
 8002eec:	7023      	strb	r3, [r4, #0]

	if(pin_value == GPIO_PIN_SET)
 8002eee:	19bb      	adds	r3, r7, r6
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d10e      	bne.n	8002f14 <switch_selector_read_bit+0x74>
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	18d3      	adds	r3, r2, r3
 8002f02:	2201      	movs	r2, #1
 8002f04:	719a      	strb	r2, [r3, #6]

		switch_selector->value |= switch_mask;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e00f      	b.n	8002f34 <switch_selector_read_bit+0x94>
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	230b      	movs	r3, #11
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	18d3      	adds	r3, r2, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	43d2      	mvns	r2, r2
 8002f2e:	401a      	ands	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	230b      	movs	r3, #11
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	799a      	ldrb	r2, [r3, #6]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	701a      	strb	r2, [r3, #0]

	*value = switch_selector->value;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	601a      	str	r2, [r3, #0]

	return 0;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	0018      	movs	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b007      	add	sp, #28
 8002f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f64:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <_sbrk+0x5c>)
 8002f66:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <_sbrk+0x60>)
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <_sbrk+0x64>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d102      	bne.n	8002f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f78:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <_sbrk+0x64>)
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <_sbrk+0x68>)
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <_sbrk+0x64>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	18d3      	adds	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d207      	bcs.n	8002f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f8c:	f002 fb78 	bl	8005680 <__errno>
 8002f90:	0003      	movs	r3, r0
 8002f92:	220c      	movs	r2, #12
 8002f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	425b      	negs	r3, r3
 8002f9a:	e009      	b.n	8002fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <_sbrk+0x64>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	18d2      	adds	r2, r2, r3
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <_sbrk+0x64>)
 8002fac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fae:	68fb      	ldr	r3, [r7, #12]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b006      	add	sp, #24
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20001800 	.word	0x20001800
 8002fbc:	00000400 	.word	0x00000400
 8002fc0:	200005fc 	.word	0x200005fc
 8002fc4:	200008c8 	.word	0x200008c8

08002fc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <SystemInit+0x14>)
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	0512      	lsls	r2, r2, #20
 8002fd2:	609a      	str	r2, [r3, #8]
#endif
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	0018      	movs	r0, r3
 8002fec:	2310      	movs	r3, #16
 8002fee:	001a      	movs	r2, r3
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	f002 fb2b 	bl	800564c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	001a      	movs	r2, r3
 8002ffe:	2100      	movs	r1, #0
 8003000:	f002 fb24 	bl	800564c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <MX_TIM1_Init+0xac>)
 8003006:	4a22      	ldr	r2, [pc, #136]	; (8003090 <MX_TIM1_Init+0xb0>)
 8003008:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <MX_TIM1_Init+0xac>)
 800300c:	222f      	movs	r2, #47	; 0x2f
 800300e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003010:	4b1e      	ldr	r3, [pc, #120]	; (800308c <MX_TIM1_Init+0xac>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003016:	4b1d      	ldr	r3, [pc, #116]	; (800308c <MX_TIM1_Init+0xac>)
 8003018:	22fa      	movs	r2, #250	; 0xfa
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301e:	4b1b      	ldr	r3, [pc, #108]	; (800308c <MX_TIM1_Init+0xac>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003024:	4b19      	ldr	r3, [pc, #100]	; (800308c <MX_TIM1_Init+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <MX_TIM1_Init+0xac>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003030:	4b16      	ldr	r3, [pc, #88]	; (800308c <MX_TIM1_Init+0xac>)
 8003032:	0018      	movs	r0, r3
 8003034:	f001 f99a 	bl	800436c <HAL_TIM_Base_Init>
 8003038:	1e03      	subs	r3, r0, #0
 800303a:	d001      	beq.n	8003040 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800303c:	f7ff f812 	bl	8002064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003040:	2110      	movs	r1, #16
 8003042:	187b      	adds	r3, r7, r1
 8003044:	2280      	movs	r2, #128	; 0x80
 8003046:	0152      	lsls	r2, r2, #5
 8003048:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800304a:	187a      	adds	r2, r7, r1
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <MX_TIM1_Init+0xac>)
 800304e:	0011      	movs	r1, r2
 8003050:	0018      	movs	r0, r3
 8003052:	f001 fc4d 	bl	80048f0 <HAL_TIM_ConfigClockSource>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800305a:	f7ff f803 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	2240      	movs	r2, #64	; 0x40
 8003062:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2200      	movs	r2, #0
 8003068:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800306a:	1d3b      	adds	r3, r7, #4
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003070:	1d3a      	adds	r2, r7, #4
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <MX_TIM1_Init+0xac>)
 8003074:	0011      	movs	r1, r2
 8003076:	0018      	movs	r0, r3
 8003078:	f002 f9b0 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 800307c:	1e03      	subs	r3, r0, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003080:	f7fe fff0 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003084:	46c0      	nop			; (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b008      	add	sp, #32
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000600 	.word	0x20000600
 8003090:	40012c00 	.word	0x40012c00

08003094 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b090      	sub	sp, #64	; 0x40
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800309a:	232c      	movs	r3, #44	; 0x2c
 800309c:	18fb      	adds	r3, r7, r3
 800309e:	0018      	movs	r0, r3
 80030a0:	2314      	movs	r3, #20
 80030a2:	001a      	movs	r2, r3
 80030a4:	2100      	movs	r1, #0
 80030a6:	f002 fad1 	bl	800564c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030aa:	2320      	movs	r3, #32
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	0018      	movs	r0, r3
 80030b0:	230c      	movs	r3, #12
 80030b2:	001a      	movs	r2, r3
 80030b4:	2100      	movs	r1, #0
 80030b6:	f002 fac9 	bl	800564c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	0018      	movs	r0, r3
 80030be:	231c      	movs	r3, #28
 80030c0:	001a      	movs	r2, r3
 80030c2:	2100      	movs	r1, #0
 80030c4:	f002 fac2 	bl	800564c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <MX_TIM3_Init+0x104>)
 80030ca:	4a34      	ldr	r2, [pc, #208]	; (800319c <MX_TIM3_Init+0x108>)
 80030cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <MX_TIM3_Init+0x104>)
 80030d0:	222f      	movs	r2, #47	; 0x2f
 80030d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b30      	ldr	r3, [pc, #192]	; (8003198 <MX_TIM3_Init+0x104>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <MX_TIM3_Init+0x104>)
 80030dc:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <MX_TIM3_Init+0x10c>)
 80030de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e0:	4b2d      	ldr	r3, [pc, #180]	; (8003198 <MX_TIM3_Init+0x104>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030e6:	4b2c      	ldr	r3, [pc, #176]	; (8003198 <MX_TIM3_Init+0x104>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ec:	4b2a      	ldr	r3, [pc, #168]	; (8003198 <MX_TIM3_Init+0x104>)
 80030ee:	0018      	movs	r0, r3
 80030f0:	f001 f93c 	bl	800436c <HAL_TIM_Base_Init>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80030f8:	f7fe ffb4 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <MX_TIM3_Init+0x104>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f001 f9da 	bl	80044b8 <HAL_TIM_OC_Init>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d001      	beq.n	800310c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003108:	f7fe ffac 	bl	8002064 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800310c:	4b22      	ldr	r3, [pc, #136]	; (8003198 <MX_TIM3_Init+0x104>)
 800310e:	2108      	movs	r1, #8
 8003110:	0018      	movs	r0, r3
 8003112:	f001 fa31 	bl	8004578 <HAL_TIM_OnePulse_Init>
 8003116:	1e03      	subs	r3, r0, #0
 8003118:	d001      	beq.n	800311e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800311a:	f7fe ffa3 	bl	8002064 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800311e:	212c      	movs	r1, #44	; 0x2c
 8003120:	187b      	adds	r3, r7, r1
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8003126:	187b      	adds	r3, r7, r1
 8003128:	2210      	movs	r2, #16
 800312a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800312c:	187a      	adds	r2, r7, r1
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <MX_TIM3_Init+0x104>)
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f001 fcb2 	bl	8004a9c <HAL_TIM_SlaveConfigSynchro>
 8003138:	1e03      	subs	r3, r0, #0
 800313a:	d001      	beq.n	8003140 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800313c:	f7fe ff92 	bl	8002064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003140:	2120      	movs	r1, #32
 8003142:	187b      	adds	r3, r7, r1
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003148:	187b      	adds	r3, r7, r1
 800314a:	2200      	movs	r2, #0
 800314c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800314e:	187a      	adds	r2, r7, r1
 8003150:	4b11      	ldr	r3, [pc, #68]	; (8003198 <MX_TIM3_Init+0x104>)
 8003152:	0011      	movs	r1, r2
 8003154:	0018      	movs	r0, r3
 8003156:	f002 f941 	bl	80053dc <HAL_TIMEx_MasterConfigSynchronization>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d001      	beq.n	8003162 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800315e:	f7fe ff81 	bl	8002064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003162:	1d3b      	adds	r3, r7, #4
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 130;
 8003168:	1d3b      	adds	r3, r7, #4
 800316a:	2282      	movs	r2, #130	; 0x82
 800316c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800317a:	1d39      	adds	r1, r7, #4
 800317c:	4b06      	ldr	r3, [pc, #24]	; (8003198 <MX_TIM3_Init+0x104>)
 800317e:	2200      	movs	r2, #0
 8003180:	0018      	movs	r0, r3
 8003182:	f001 fb55 	bl	8004830 <HAL_TIM_OC_ConfigChannel>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800318a:	f7fe ff6b 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	46bd      	mov	sp, r7
 8003192:	b010      	add	sp, #64	; 0x40
 8003194:	bd80      	pop	{r7, pc}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	2000064c 	.word	0x2000064c
 800319c:	40000400 	.word	0x40000400
 80031a0:	0000ffff 	.word	0x0000ffff

080031a4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031aa:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <MX_TIM14_Init+0x44>)
 80031ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80031ae:	4b0d      	ldr	r3, [pc, #52]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031b0:	222f      	movs	r2, #47	; 0x2f
 80031b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 145;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031bc:	2291      	movs	r2, #145	; 0x91
 80031be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <MX_TIM14_Init+0x40>)
 80031ce:	0018      	movs	r0, r3
 80031d0:	f001 f8cc 	bl	800436c <HAL_TIM_Base_Init>
 80031d4:	1e03      	subs	r3, r0, #0
 80031d6:	d001      	beq.n	80031dc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80031d8:	f7fe ff44 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80031dc:	46c0      	nop			; (mov r8, r8)
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	20000698 	.word	0x20000698
 80031e8:	40002000 	.word	0x40002000

080031ec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <MX_TIM16_Init+0x48>)
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <MX_TIM16_Init+0x4c>)
 80031f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_TIM16_Init+0x48>)
 80031f8:	222f      	movs	r2, #47	; 0x2f
 80031fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <MX_TIM16_Init+0x48>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_TIM16_Init+0x48>)
 8003204:	22fa      	movs	r2, #250	; 0xfa
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_TIM16_Init+0x48>)
 800320c:	2200      	movs	r2, #0
 800320e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <MX_TIM16_Init+0x48>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_TIM16_Init+0x48>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <MX_TIM16_Init+0x48>)
 800321e:	0018      	movs	r0, r3
 8003220:	f001 f8a4 	bl	800436c <HAL_TIM_Base_Init>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003228:	f7fe ff1c 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	200006e4 	.word	0x200006e4
 8003238:	40014400 	.word	0x40014400

0800323c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003240:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <MX_TIM17_Init+0x44>)
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <MX_TIM17_Init+0x48>)
 8003244:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <MX_TIM17_Init+0x44>)
 8003248:	222f      	movs	r2, #47	; 0x2f
 800324a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324c:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <MX_TIM17_Init+0x44>)
 800324e:	2200      	movs	r2, #0
 8003250:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 130;
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <MX_TIM17_Init+0x44>)
 8003254:	2282      	movs	r2, #130	; 0x82
 8003256:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <MX_TIM17_Init+0x44>)
 800325a:	2200      	movs	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800325e:	4b08      	ldr	r3, [pc, #32]	; (8003280 <MX_TIM17_Init+0x44>)
 8003260:	2200      	movs	r2, #0
 8003262:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <MX_TIM17_Init+0x44>)
 8003266:	2200      	movs	r2, #0
 8003268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <MX_TIM17_Init+0x44>)
 800326c:	0018      	movs	r0, r3
 800326e:	f001 f87d 	bl	800436c <HAL_TIM_Base_Init>
 8003272:	1e03      	subs	r3, r0, #0
 8003274:	d001      	beq.n	800327a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003276:	f7fe fef5 	bl	8002064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000730 	.word	0x20000730
 8003284:	40014800 	.word	0x40014800

08003288 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a45      	ldr	r2, [pc, #276]	; (80033ac <HAL_TIM_Base_MspInit+0x124>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d11e      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800329a:	4b45      	ldr	r3, [pc, #276]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 800329c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	0109      	lsls	r1, r1, #4
 80032a4:	430a      	orrs	r2, r1
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 80032aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4013      	ands	r3, r2
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	200d      	movs	r0, #13
 80032bc:	f000 fa2a 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80032c0:	200d      	movs	r0, #13
 80032c2:	f000 fa3c 	bl	800373e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	200e      	movs	r0, #14
 80032cc:	f000 fa22 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032d0:	200e      	movs	r0, #14
 80032d2:	f000 fa34 	bl	800373e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80032d6:	e064      	b.n	80033a2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a35      	ldr	r2, [pc, #212]	; (80033b4 <HAL_TIM_Base_MspInit+0x12c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10c      	bne.n	80032fc <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032e2:	4b33      	ldr	r3, [pc, #204]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 80032e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 80032e8:	2102      	movs	r1, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80032ee:	4b30      	ldr	r3, [pc, #192]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 80032f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f2:	2202      	movs	r2, #2
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]
}
 80032fa:	e052      	b.n	80033a2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM14)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2d      	ldr	r2, [pc, #180]	; (80033b8 <HAL_TIM_Base_MspInit+0x130>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d116      	bne.n	8003334 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	0209      	lsls	r1, r1, #8
 8003310:	430a      	orrs	r2, r1
 8003312:	641a      	str	r2, [r3, #64]	; 0x40
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003318:	2380      	movs	r3, #128	; 0x80
 800331a:	021b      	lsls	r3, r3, #8
 800331c:	4013      	ands	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
 8003320:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003322:	2200      	movs	r2, #0
 8003324:	2100      	movs	r1, #0
 8003326:	2013      	movs	r0, #19
 8003328:	f000 f9f4 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800332c:	2013      	movs	r0, #19
 800332e:	f000 fa06 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 8003332:	e036      	b.n	80033a2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM16)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_TIM_Base_MspInit+0x134>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d116      	bne.n	800336c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800333e:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003342:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	0289      	lsls	r1, r1, #10
 8003348:	430a      	orrs	r2, r1
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
 800334c:	4b18      	ldr	r3, [pc, #96]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 800334e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003350:	2380      	movs	r3, #128	; 0x80
 8003352:	029b      	lsls	r3, r3, #10
 8003354:	4013      	ands	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2100      	movs	r1, #0
 800335e:	2015      	movs	r0, #21
 8003360:	f000 f9d8 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003364:	2015      	movs	r0, #21
 8003366:	f000 f9ea 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 800336a:	e01a      	b.n	80033a2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM17)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_TIM_Base_MspInit+0x138>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d115      	bne.n	80033a2 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337a:	4b0d      	ldr	r3, [pc, #52]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	02c9      	lsls	r1, r1, #11
 8003380:	430a      	orrs	r2, r1
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
 8003384:	4b0a      	ldr	r3, [pc, #40]	; (80033b0 <HAL_TIM_Base_MspInit+0x128>)
 8003386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	02db      	lsls	r3, r3, #11
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8003392:	2200      	movs	r2, #0
 8003394:	2100      	movs	r1, #0
 8003396:	2016      	movs	r0, #22
 8003398:	f000 f9bc 	bl	8003714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800339c:	2016      	movs	r0, #22
 800339e:	f000 f9ce 	bl	800373e <HAL_NVIC_EnableIRQ>
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b008      	add	sp, #32
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40002000 	.word	0x40002000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033c8:	f7ff fdfe 	bl	8002fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033ce:	e003      	b.n	80033d8 <LoopCopyDataInit>

080033d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80033d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033d6:	3104      	adds	r1, #4

080033d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033d8:	480a      	ldr	r0, [pc, #40]	; (8003404 <LoopForever+0xa>)
  ldr r3, =_edata
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <LoopForever+0xe>)
  adds r2, r0, r1
 80033dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033e0:	d3f6      	bcc.n	80033d0 <CopyDataInit>
  ldr r2, =_sbss
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <LoopForever+0x12>)
  b LoopFillZerobss
 80033e4:	e002      	b.n	80033ec <LoopFillZerobss>

080033e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  str  r3, [r2]
 80033e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ea:	3204      	adds	r2, #4

080033ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80033ec:	4b08      	ldr	r3, [pc, #32]	; (8003410 <LoopForever+0x16>)
  cmp r2, r3
 80033ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80033f0:	d3f9      	bcc.n	80033e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80033f2:	f002 f94b 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033f6:	f7fd fe39 	bl	800106c <main>

080033fa <LoopForever>:

LoopForever:
    b LoopForever
 80033fa:	e7fe      	b.n	80033fa <LoopForever>
  ldr   r0, =_estack
 80033fc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8003400:	08005804 	.word	0x08005804
  ldr r0, =_sdata
 8003404:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003408:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 800340c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8003410:	200008c8 	.word	0x200008c8

08003414 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003414:	e7fe      	b.n	8003414 <ADC1_IRQHandler>

08003416 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800341c:	1dfb      	adds	r3, r7, #7
 800341e:	2200      	movs	r2, #0
 8003420:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003422:	2003      	movs	r0, #3
 8003424:	f000 f80e 	bl	8003444 <HAL_InitTick>
 8003428:	1e03      	subs	r3, r0, #0
 800342a:	d003      	beq.n	8003434 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800342c:	1dfb      	adds	r3, r7, #7
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	e001      	b.n	8003438 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003434:	f7ff fc34 	bl	8002ca0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003438:	1dfb      	adds	r3, r7, #7
 800343a:	781b      	ldrb	r3, [r3, #0]
}
 800343c:	0018      	movs	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003444:	b590      	push	{r4, r7, lr}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800344c:	230f      	movs	r3, #15
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003454:	4b1d      	ldr	r3, [pc, #116]	; (80034cc <HAL_InitTick+0x88>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02b      	beq.n	80034b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800345c:	4b1c      	ldr	r3, [pc, #112]	; (80034d0 <HAL_InitTick+0x8c>)
 800345e:	681c      	ldr	r4, [r3, #0]
 8003460:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_InitTick+0x88>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	0019      	movs	r1, r3
 8003466:	23fa      	movs	r3, #250	; 0xfa
 8003468:	0098      	lsls	r0, r3, #2
 800346a:	f7fc fe4d 	bl	8000108 <__udivsi3>
 800346e:	0003      	movs	r3, r0
 8003470:	0019      	movs	r1, r3
 8003472:	0020      	movs	r0, r4
 8003474:	f7fc fe48 	bl	8000108 <__udivsi3>
 8003478:	0003      	movs	r3, r0
 800347a:	0018      	movs	r0, r3
 800347c:	f000 f97f 	bl	800377e <HAL_SYSTICK_Config>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d112      	bne.n	80034aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b03      	cmp	r3, #3
 8003488:	d80a      	bhi.n	80034a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	2301      	movs	r3, #1
 800348e:	425b      	negs	r3, r3
 8003490:	2200      	movs	r2, #0
 8003492:	0018      	movs	r0, r3
 8003494:	f000 f93e 	bl	8003714 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003498:	4b0e      	ldr	r3, [pc, #56]	; (80034d4 <HAL_InitTick+0x90>)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	e00d      	b.n	80034bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034a0:	230f      	movs	r3, #15
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]
 80034a8:	e008      	b.n	80034bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034aa:	230f      	movs	r3, #15
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2201      	movs	r2, #1
 80034b0:	701a      	strb	r2, [r3, #0]
 80034b2:	e003      	b.n	80034bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034bc:	230f      	movs	r3, #15
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	781b      	ldrb	r3, [r3, #0]
}
 80034c2:	0018      	movs	r0, r3
 80034c4:	46bd      	mov	sp, r7
 80034c6:	b005      	add	sp, #20
 80034c8:	bd90      	pop	{r4, r7, pc}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	20000010 	.word	0x20000010
 80034d0:	20000008 	.word	0x20000008
 80034d4:	2000000c 	.word	0x2000000c

080034d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034dc:	4b05      	ldr	r3, [pc, #20]	; (80034f4 <HAL_IncTick+0x1c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	001a      	movs	r2, r3
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_IncTick+0x20>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	18d2      	adds	r2, r2, r3
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_IncTick+0x20>)
 80034ea:	601a      	str	r2, [r3, #0]
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	20000010 	.word	0x20000010
 80034f8:	2000077c 	.word	0x2000077c

080034fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003500:	4b02      	ldr	r3, [pc, #8]	; (800350c <HAL_GetTick+0x10>)
 8003502:	681b      	ldr	r3, [r3, #0]
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	2000077c 	.word	0x2000077c

08003510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff fff0 	bl	80034fc <HAL_GetTick>
 800351c:	0003      	movs	r3, r0
 800351e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3301      	adds	r3, #1
 8003528:	d005      	beq.n	8003536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_Delay+0x44>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	001a      	movs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	189b      	adds	r3, r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	f7ff ffe0 	bl	80034fc <HAL_GetTick>
 800353c:	0002      	movs	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	429a      	cmp	r2, r3
 8003546:	d8f7      	bhi.n	8003538 <HAL_Delay+0x28>
  {
  }
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	46bd      	mov	sp, r7
 800354e:	b004      	add	sp, #16
 8003550:	bd80      	pop	{r7, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	20000010 	.word	0x20000010

08003558 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8003560:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	430a      	orrs	r2, r1
 800356a:	601a      	str	r2, [r3, #0]
}
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	46bd      	mov	sp, r7
 8003570:	b002      	add	sp, #8
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40010000 	.word	0x40010000

08003578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	0002      	movs	r2, r0
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b7f      	cmp	r3, #127	; 0x7f
 800358a:	d809      	bhi.n	80035a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800358c:	1dfb      	adds	r3, r7, #7
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	001a      	movs	r2, r3
 8003592:	231f      	movs	r3, #31
 8003594:	401a      	ands	r2, r3
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <__NVIC_EnableIRQ+0x30>)
 8003598:	2101      	movs	r1, #1
 800359a:	4091      	lsls	r1, r2
 800359c:	000a      	movs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	46bd      	mov	sp, r7
 80035a4:	b002      	add	sp, #8
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	e000e100 	.word	0xe000e100

080035ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	0002      	movs	r2, r0
 80035b4:	1dfb      	adds	r3, r7, #7
 80035b6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035b8:	1dfb      	adds	r3, r7, #7
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b7f      	cmp	r3, #127	; 0x7f
 80035be:	d810      	bhi.n	80035e2 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	001a      	movs	r2, r3
 80035c6:	231f      	movs	r3, #31
 80035c8:	4013      	ands	r3, r2
 80035ca:	4908      	ldr	r1, [pc, #32]	; (80035ec <__NVIC_DisableIRQ+0x40>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035d6:	f3bf 8f4f 	dsb	sy
}
 80035da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80035dc:	f3bf 8f6f 	isb	sy
}
 80035e0:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	b002      	add	sp, #8
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	e000e100 	.word	0xe000e100

080035f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	0002      	movs	r2, r0
 80035f8:	6039      	str	r1, [r7, #0]
 80035fa:	1dfb      	adds	r3, r7, #7
 80035fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b7f      	cmp	r3, #127	; 0x7f
 8003604:	d828      	bhi.n	8003658 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003606:	4a2f      	ldr	r2, [pc, #188]	; (80036c4 <__NVIC_SetPriority+0xd4>)
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b25b      	sxtb	r3, r3
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	33c0      	adds	r3, #192	; 0xc0
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	589b      	ldr	r3, [r3, r2]
 8003616:	1dfa      	adds	r2, r7, #7
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	0011      	movs	r1, r2
 800361c:	2203      	movs	r2, #3
 800361e:	400a      	ands	r2, r1
 8003620:	00d2      	lsls	r2, r2, #3
 8003622:	21ff      	movs	r1, #255	; 0xff
 8003624:	4091      	lsls	r1, r2
 8003626:	000a      	movs	r2, r1
 8003628:	43d2      	mvns	r2, r2
 800362a:	401a      	ands	r2, r3
 800362c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	22ff      	movs	r2, #255	; 0xff
 8003634:	401a      	ands	r2, r3
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	2303      	movs	r3, #3
 800363e:	4003      	ands	r3, r0
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003644:	481f      	ldr	r0, [pc, #124]	; (80036c4 <__NVIC_SetPriority+0xd4>)
 8003646:	1dfb      	adds	r3, r7, #7
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	b25b      	sxtb	r3, r3
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	430a      	orrs	r2, r1
 8003650:	33c0      	adds	r3, #192	; 0xc0
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003656:	e031      	b.n	80036bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003658:	4a1b      	ldr	r2, [pc, #108]	; (80036c8 <__NVIC_SetPriority+0xd8>)
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	0019      	movs	r1, r3
 8003660:	230f      	movs	r3, #15
 8003662:	400b      	ands	r3, r1
 8003664:	3b08      	subs	r3, #8
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	3306      	adds	r3, #6
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	18d3      	adds	r3, r2, r3
 800366e:	3304      	adds	r3, #4
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	1dfa      	adds	r2, r7, #7
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	0011      	movs	r1, r2
 8003678:	2203      	movs	r2, #3
 800367a:	400a      	ands	r2, r1
 800367c:	00d2      	lsls	r2, r2, #3
 800367e:	21ff      	movs	r1, #255	; 0xff
 8003680:	4091      	lsls	r1, r2
 8003682:	000a      	movs	r2, r1
 8003684:	43d2      	mvns	r2, r2
 8003686:	401a      	ands	r2, r3
 8003688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	019b      	lsls	r3, r3, #6
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	401a      	ands	r2, r3
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	0018      	movs	r0, r3
 8003698:	2303      	movs	r3, #3
 800369a:	4003      	ands	r3, r0
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a0:	4809      	ldr	r0, [pc, #36]	; (80036c8 <__NVIC_SetPriority+0xd8>)
 80036a2:	1dfb      	adds	r3, r7, #7
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	001c      	movs	r4, r3
 80036a8:	230f      	movs	r3, #15
 80036aa:	4023      	ands	r3, r4
 80036ac:	3b08      	subs	r3, #8
 80036ae:	089b      	lsrs	r3, r3, #2
 80036b0:	430a      	orrs	r2, r1
 80036b2:	3306      	adds	r3, #6
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	18c3      	adds	r3, r0, r3
 80036b8:	3304      	adds	r3, #4
 80036ba:	601a      	str	r2, [r3, #0]
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b003      	add	sp, #12
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	1e5a      	subs	r2, r3, #1
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	045b      	lsls	r3, r3, #17
 80036dc:	429a      	cmp	r2, r3
 80036de:	d301      	bcc.n	80036e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e0:	2301      	movs	r3, #1
 80036e2:	e010      	b.n	8003706 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e4:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <SysTick_Config+0x44>)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	3a01      	subs	r2, #1
 80036ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ec:	2301      	movs	r3, #1
 80036ee:	425b      	negs	r3, r3
 80036f0:	2103      	movs	r1, #3
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff ff7c 	bl	80035f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <SysTick_Config+0x44>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036fe:	4b04      	ldr	r3, [pc, #16]	; (8003710 <SysTick_Config+0x44>)
 8003700:	2207      	movs	r2, #7
 8003702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003704:	2300      	movs	r3, #0
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b002      	add	sp, #8
 800370c:	bd80      	pop	{r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	e000e010 	.word	0xe000e010

08003714 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	210f      	movs	r1, #15
 8003720:	187b      	adds	r3, r7, r1
 8003722:	1c02      	adds	r2, r0, #0
 8003724:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	187b      	adds	r3, r7, r1
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	b25b      	sxtb	r3, r3
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff ff5d 	bl	80035f0 <__NVIC_SetPriority>
}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b004      	add	sp, #16
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	0002      	movs	r2, r0
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	b25b      	sxtb	r3, r3
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff ff11 	bl	8003578 <__NVIC_EnableIRQ>
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	0002      	movs	r2, r0
 8003766:	1dfb      	adds	r3, r7, #7
 8003768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b25b      	sxtb	r3, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f7ff ff1b 	bl	80035ac <__NVIC_DisableIRQ>
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff ff9f 	bl	80036cc <SysTick_Config>
 800378e:	0003      	movs	r3, r0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80037a6:	e14d      	b.n	8003a44 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4091      	lsls	r1, r2
 80037b2:	000a      	movs	r2, r1
 80037b4:	4013      	ands	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d100      	bne.n	80037c0 <HAL_GPIO_Init+0x28>
 80037be:	e13e      	b.n	8003a3e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d003      	beq.n	80037d0 <HAL_GPIO_Init+0x38>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b12      	cmp	r3, #18
 80037ce:	d125      	bne.n	800381c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	08da      	lsrs	r2, r3, #3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	3208      	adds	r2, #8
 80037d8:	0092      	lsls	r2, r2, #2
 80037da:	58d3      	ldr	r3, [r2, r3]
 80037dc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2207      	movs	r2, #7
 80037e2:	4013      	ands	r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	220f      	movs	r2, #15
 80037e8:	409a      	lsls	r2, r3
 80037ea:	0013      	movs	r3, r2
 80037ec:	43da      	mvns	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4013      	ands	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	220f      	movs	r2, #15
 80037fa:	401a      	ands	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2107      	movs	r1, #7
 8003800:	400b      	ands	r3, r1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	409a      	lsls	r2, r3
 8003806:	0013      	movs	r3, r2
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	4313      	orrs	r3, r2
 800380c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	0092      	lsls	r2, r2, #2
 8003818:	6979      	ldr	r1, [r7, #20]
 800381a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	409a      	lsls	r2, r3
 800382a:	0013      	movs	r3, r2
 800382c:	43da      	mvns	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	4013      	ands	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2203      	movs	r2, #3
 800383a:	401a      	ands	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	409a      	lsls	r2, r3
 8003842:	0013      	movs	r3, r2
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d00b      	beq.n	8003870 <HAL_GPIO_Init+0xd8>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d007      	beq.n	8003870 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003864:	2b11      	cmp	r3, #17
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b12      	cmp	r3, #18
 800386e:	d130      	bne.n	80038d2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	409a      	lsls	r2, r3
 800387e:	0013      	movs	r3, r2
 8003880:	43da      	mvns	r2, r3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	4013      	ands	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	409a      	lsls	r2, r3
 8003892:	0013      	movs	r3, r2
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038a6:	2201      	movs	r2, #1
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	409a      	lsls	r2, r3
 80038ac:	0013      	movs	r3, r2
 80038ae:	43da      	mvns	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4013      	ands	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	2201      	movs	r2, #1
 80038be:	401a      	ands	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	409a      	lsls	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d017      	beq.n	800390a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	43da      	mvns	r2, r3
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4013      	ands	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	2380      	movs	r3, #128	; 0x80
 8003910:	055b      	lsls	r3, r3, #21
 8003912:	4013      	ands	r3, r2
 8003914:	d100      	bne.n	8003918 <HAL_GPIO_Init+0x180>
 8003916:	e092      	b.n	8003a3e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003918:	4a50      	ldr	r2, [pc, #320]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3318      	adds	r3, #24
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	589b      	ldr	r3, [r3, r2]
 8003924:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2203      	movs	r2, #3
 800392a:	4013      	ands	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	220f      	movs	r2, #15
 8003930:	409a      	lsls	r2, r3
 8003932:	0013      	movs	r3, r2
 8003934:	43da      	mvns	r2, r3
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	4013      	ands	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	23a0      	movs	r3, #160	; 0xa0
 8003940:	05db      	lsls	r3, r3, #23
 8003942:	429a      	cmp	r2, r3
 8003944:	d013      	beq.n	800396e <HAL_GPIO_Init+0x1d6>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a45      	ldr	r2, [pc, #276]	; (8003a60 <HAL_GPIO_Init+0x2c8>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00d      	beq.n	800396a <HAL_GPIO_Init+0x1d2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a44      	ldr	r2, [pc, #272]	; (8003a64 <HAL_GPIO_Init+0x2cc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d007      	beq.n	8003966 <HAL_GPIO_Init+0x1ce>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a43      	ldr	r2, [pc, #268]	; (8003a68 <HAL_GPIO_Init+0x2d0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d101      	bne.n	8003962 <HAL_GPIO_Init+0x1ca>
 800395e:	2305      	movs	r3, #5
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x1d8>
 8003962:	2306      	movs	r3, #6
 8003964:	e004      	b.n	8003970 <HAL_GPIO_Init+0x1d8>
 8003966:	2302      	movs	r3, #2
 8003968:	e002      	b.n	8003970 <HAL_GPIO_Init+0x1d8>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x1d8>
 800396e:	2300      	movs	r3, #0
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	2103      	movs	r1, #3
 8003974:	400a      	ands	r2, r1
 8003976:	00d2      	lsls	r2, r2, #3
 8003978:	4093      	lsls	r3, r2
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003980:	4936      	ldr	r1, [pc, #216]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3318      	adds	r3, #24
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	58d3      	ldr	r3, [r2, r3]
 8003994:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	43da      	mvns	r2, r3
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	4013      	ands	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	4013      	ands	r3, r2
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80039b4:	4929      	ldr	r1, [pc, #164]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 80039b6:	2280      	movs	r2, #128	; 0x80
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80039bc:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 80039be:	2384      	movs	r3, #132	; 0x84
 80039c0:	58d3      	ldr	r3, [r2, r3]
 80039c2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43da      	mvns	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	4013      	ands	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	029b      	lsls	r3, r3, #10
 80039d6:	4013      	ands	r3, r2
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80039e2:	491e      	ldr	r1, [pc, #120]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 80039e4:	2284      	movs	r2, #132	; 0x84
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80039ea:	4b1c      	ldr	r3, [pc, #112]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	43da      	mvns	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	4013      	ands	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	2380      	movs	r3, #128	; 0x80
 8003a00:	035b      	lsls	r3, r3, #13
 8003a02:	4013      	ands	r3, r2
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003a0e:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003a14:	4b11      	ldr	r3, [pc, #68]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	43da      	mvns	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	4013      	ands	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	039b      	lsls	r3, r3, #14
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <HAL_GPIO_Init+0x2c4>)
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3301      	adds	r3, #1
 8003a42:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	40da      	lsrs	r2, r3
 8003a4c:	1e13      	subs	r3, r2, #0
 8003a4e:	d000      	beq.n	8003a52 <HAL_GPIO_Init+0x2ba>
 8003a50:	e6aa      	b.n	80037a8 <HAL_GPIO_Init+0x10>
  }
}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b006      	add	sp, #24
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021800 	.word	0x40021800
 8003a60:	50000400 	.word	0x50000400
 8003a64:	50000800 	.word	0x50000800
 8003a68:	50001400 	.word	0x50001400

08003a6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003a7a:	e0b4      	b.n	8003be6 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	409a      	lsls	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d100      	bne.n	8003a90 <HAL_GPIO_DeInit+0x24>
 8003a8e:	e0a7      	b.n	8003be0 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8003a90:	4a5a      	ldr	r2, [pc, #360]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3318      	adds	r3, #24
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	589b      	ldr	r3, [r3, r2]
 8003a9c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	220f      	movs	r2, #15
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	23a0      	movs	r3, #160	; 0xa0
 8003ab4:	05db      	lsls	r3, r3, #23
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d013      	beq.n	8003ae2 <HAL_GPIO_DeInit+0x76>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a50      	ldr	r2, [pc, #320]	; (8003c00 <HAL_GPIO_DeInit+0x194>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00d      	beq.n	8003ade <HAL_GPIO_DeInit+0x72>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4f      	ldr	r2, [pc, #316]	; (8003c04 <HAL_GPIO_DeInit+0x198>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <HAL_GPIO_DeInit+0x6e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <HAL_GPIO_DeInit+0x19c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d101      	bne.n	8003ad6 <HAL_GPIO_DeInit+0x6a>
 8003ad2:	2305      	movs	r3, #5
 8003ad4:	e006      	b.n	8003ae4 <HAL_GPIO_DeInit+0x78>
 8003ad6:	2306      	movs	r3, #6
 8003ad8:	e004      	b.n	8003ae4 <HAL_GPIO_DeInit+0x78>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e002      	b.n	8003ae4 <HAL_GPIO_DeInit+0x78>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <HAL_GPIO_DeInit+0x78>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	2103      	movs	r1, #3
 8003ae8:	400a      	ands	r2, r1
 8003aea:	00d2      	lsls	r2, r2, #3
 8003aec:	4093      	lsls	r3, r2
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d136      	bne.n	8003b62 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003af4:	4a41      	ldr	r2, [pc, #260]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	58d3      	ldr	r3, [r2, r3]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	43d2      	mvns	r2, r2
 8003afe:	493f      	ldr	r1, [pc, #252]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003b06:	4a3d      	ldr	r2, [pc, #244]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b08:	2384      	movs	r3, #132	; 0x84
 8003b0a:	58d3      	ldr	r3, [r2, r3]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	43d2      	mvns	r2, r2
 8003b10:	493a      	ldr	r1, [pc, #232]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	2284      	movs	r2, #132	; 0x84
 8003b16:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003b18:	4b38      	ldr	r3, [pc, #224]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	43d9      	mvns	r1, r3
 8003b20:	4b36      	ldr	r3, [pc, #216]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b22:	400a      	ands	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003b26:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	43d9      	mvns	r1, r3
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2203      	movs	r2, #3
 8003b38:	4013      	ands	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003b44:	4a2d      	ldr	r2, [pc, #180]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	589a      	ldr	r2, [r3, r2]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43d9      	mvns	r1, r3
 8003b54:	4829      	ldr	r0, [pc, #164]	; (8003bfc <HAL_GPIO_DeInit+0x190>)
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	089b      	lsrs	r3, r3, #2
 8003b5a:	400a      	ands	r2, r1
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	2103      	movs	r1, #3
 8003b6c:	4099      	lsls	r1, r3
 8003b6e:	000b      	movs	r3, r1
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	08da      	lsrs	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3208      	adds	r2, #8
 8003b7e:	0092      	lsls	r2, r2, #2
 8003b80:	58d3      	ldr	r3, [r2, r3]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	2107      	movs	r1, #7
 8003b86:	400a      	ands	r2, r1
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	210f      	movs	r1, #15
 8003b8c:	4091      	lsls	r1, r2
 8003b8e:	000a      	movs	r2, r1
 8003b90:	43d1      	mvns	r1, r2
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	08d2      	lsrs	r2, r2, #3
 8003b96:	4019      	ands	r1, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	0052      	lsls	r2, r2, #1
 8003ba8:	2103      	movs	r1, #3
 8003baa:	4091      	lsls	r1, r2
 8003bac:	000a      	movs	r2, r1
 8003bae:	43d2      	mvns	r2, r2
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2101      	movs	r1, #1
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4091      	lsls	r1, r2
 8003bc0:	000a      	movs	r2, r1
 8003bc2:	43d2      	mvns	r2, r2
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	0052      	lsls	r2, r2, #1
 8003bd2:	2103      	movs	r1, #3
 8003bd4:	4091      	lsls	r1, r2
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	43d2      	mvns	r2, r2
 8003bda:	401a      	ands	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3301      	adds	r3, #1
 8003be4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	40da      	lsrs	r2, r3
 8003bec:	1e13      	subs	r3, r2, #0
 8003bee:	d000      	beq.n	8003bf2 <HAL_GPIO_DeInit+0x186>
 8003bf0:	e744      	b.n	8003a7c <HAL_GPIO_DeInit+0x10>
  }
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b006      	add	sp, #24
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021800 	.word	0x40021800
 8003c00:	50000400 	.word	0x50000400
 8003c04:	50000800 	.word	0x50000800
 8003c08:	50001400 	.word	0x50001400

08003c0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	000a      	movs	r2, r1
 8003c16:	1cbb      	adds	r3, r7, #2
 8003c18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	1cba      	adds	r2, r7, #2
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	4013      	ands	r3, r2
 8003c24:	d004      	beq.n	8003c30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c26:	230f      	movs	r3, #15
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
 8003c2e:	e003      	b.n	8003c38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c30:	230f      	movs	r3, #15
 8003c32:	18fb      	adds	r3, r7, r3
 8003c34:	2200      	movs	r2, #0
 8003c36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c38:	230f      	movs	r3, #15
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	781b      	ldrb	r3, [r3, #0]
}
 8003c3e:	0018      	movs	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	b004      	add	sp, #16
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	0008      	movs	r0, r1
 8003c50:	0011      	movs	r1, r2
 8003c52:	1cbb      	adds	r3, r7, #2
 8003c54:	1c02      	adds	r2, r0, #0
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	1c7b      	adds	r3, r7, #1
 8003c5a:	1c0a      	adds	r2, r1, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c5e:	1c7b      	adds	r3, r7, #1
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c66:	1cbb      	adds	r3, r7, #2
 8003c68:	881a      	ldrh	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c6e:	e003      	b.n	8003c78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c70:	1cbb      	adds	r3, r7, #2
 8003c72:	881a      	ldrh	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	000a      	movs	r2, r1
 8003c8a:	1cbb      	adds	r3, r7, #2
 8003c8c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c94:	1cbb      	adds	r3, r7, #2
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	041a      	lsls	r2, r3, #16
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43db      	mvns	r3, r3
 8003ca2:	1cb9      	adds	r1, r7, #2
 8003ca4:	8809      	ldrh	r1, [r1, #0]
 8003ca6:	400b      	ands	r3, r1
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	619a      	str	r2, [r3, #24]
}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	1dbb      	adds	r3, r7, #6
 8003cc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	1dba      	adds	r2, r7, #6
 8003cca:	8812      	ldrh	r2, [r2, #0]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d008      	beq.n	8003ce2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cd2:	1dba      	adds	r2, r7, #6
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003cd8:	1dbb      	adds	r3, r7, #6
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f7fe f91d 	bl	8001f1c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003ce2:	4b09      	ldr	r3, [pc, #36]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	1dba      	adds	r2, r7, #6
 8003ce8:	8812      	ldrh	r2, [r2, #0]
 8003cea:	4013      	ands	r3, r2
 8003cec:	d008      	beq.n	8003d00 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cf0:	1dba      	adds	r2, r7, #6
 8003cf2:	8812      	ldrh	r2, [r2, #0]
 8003cf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003cf6:	1dbb      	adds	r3, r7, #6
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f7fe f96a 	bl	8001fd4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d00:	46c0      	nop			; (mov r8, r8)
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b002      	add	sp, #8
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021800 	.word	0x40021800

08003d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1d0      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	4013      	ands	r3, r2
 8003d26:	d100      	bne.n	8003d2a <HAL_RCC_OscConfig+0x1e>
 8003d28:	e069      	b.n	8003dfe <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2a:	4bc8      	ldr	r3, [pc, #800]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2238      	movs	r2, #56	; 0x38
 8003d30:	4013      	ands	r3, r2
 8003d32:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d105      	bne.n	8003d46 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d15d      	bne.n	8003dfe <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e1bc      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d107      	bne.n	8003d62 <HAL_RCC_OscConfig+0x56>
 8003d52:	4bbe      	ldr	r3, [pc, #760]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	4bbd      	ldr	r3, [pc, #756]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	0249      	lsls	r1, r1, #9
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	e020      	b.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	02db      	lsls	r3, r3, #11
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10e      	bne.n	8003d8c <HAL_RCC_OscConfig+0x80>
 8003d6e:	4bb7      	ldr	r3, [pc, #732]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4bb6      	ldr	r3, [pc, #728]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	02c9      	lsls	r1, r1, #11
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	4bb3      	ldr	r3, [pc, #716]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4bb2      	ldr	r3, [pc, #712]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d82:	2180      	movs	r1, #128	; 0x80
 8003d84:	0249      	lsls	r1, r1, #9
 8003d86:	430a      	orrs	r2, r1
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00b      	b.n	8003da4 <HAL_RCC_OscConfig+0x98>
 8003d8c:	4baf      	ldr	r3, [pc, #700]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4bae      	ldr	r3, [pc, #696]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d92:	49af      	ldr	r1, [pc, #700]	; (8004050 <HAL_RCC_OscConfig+0x344>)
 8003d94:	400a      	ands	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	4bac      	ldr	r3, [pc, #688]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4bab      	ldr	r3, [pc, #684]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003d9e:	49ad      	ldr	r1, [pc, #692]	; (8004054 <HAL_RCC_OscConfig+0x348>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d014      	beq.n	8003dd6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7ff fba6 	bl	80034fc <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003db6:	f7ff fba1 	bl	80034fc <HAL_GetTick>
 8003dba:	0002      	movs	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e17b      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc8:	4ba0      	ldr	r3, [pc, #640]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0xaa>
 8003dd4:	e013      	b.n	8003dfe <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7ff fb91 	bl	80034fc <HAL_GetTick>
 8003dda:	0003      	movs	r3, r0
 8003ddc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dde:	e008      	b.n	8003df2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003de0:	f7ff fb8c 	bl	80034fc <HAL_GetTick>
 8003de4:	0002      	movs	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e166      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df2:	4b96      	ldr	r3, [pc, #600]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d1f0      	bne.n	8003de0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	d100      	bne.n	8003e0a <HAL_RCC_OscConfig+0xfe>
 8003e08:	e086      	b.n	8003f18 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e0a:	4b90      	ldr	r3, [pc, #576]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2238      	movs	r2, #56	; 0x38
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d12f      	bne.n	8003e7a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e14c      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b89      	ldr	r3, [pc, #548]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	4a8b      	ldr	r2, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x34c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	021a      	lsls	r2, r3, #8
 8003e36:	4b85      	ldr	r3, [pc, #532]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d112      	bne.n	8003e68 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e42:	4b82      	ldr	r3, [pc, #520]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a85      	ldr	r2, [pc, #532]	; (800405c <HAL_RCC_OscConfig+0x350>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	0019      	movs	r1, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	4b7e      	ldr	r3, [pc, #504]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e56:	4b7d      	ldr	r3, [pc, #500]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	0adb      	lsrs	r3, r3, #11
 8003e5c:	2207      	movs	r2, #7
 8003e5e:	4013      	ands	r3, r2
 8003e60:	4a7f      	ldr	r2, [pc, #508]	; (8004060 <HAL_RCC_OscConfig+0x354>)
 8003e62:	40da      	lsrs	r2, r3
 8003e64:	4b7f      	ldr	r3, [pc, #508]	; (8004064 <HAL_RCC_OscConfig+0x358>)
 8003e66:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e68:	4b7f      	ldr	r3, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x35c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	0018      	movs	r0, r3
 8003e6e:	f7ff fae9 	bl	8003444 <HAL_InitTick>
 8003e72:	1e03      	subs	r3, r0, #0
 8003e74:	d050      	beq.n	8003f18 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e122      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d030      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e82:	4b72      	ldr	r3, [pc, #456]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a75      	ldr	r2, [pc, #468]	; (800405c <HAL_RCC_OscConfig+0x350>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b6e      	ldr	r3, [pc, #440]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003e96:	4b6d      	ldr	r3, [pc, #436]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b6c      	ldr	r3, [pc, #432]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	0049      	lsls	r1, r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7ff fb2a 	bl	80034fc <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003eae:	f7ff fb25 	bl	80034fc <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0ff      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec0:	4b62      	ldr	r3, [pc, #392]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	2380      	movs	r3, #128	; 0x80
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ecc:	4b5f      	ldr	r3, [pc, #380]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	4a61      	ldr	r2, [pc, #388]	; (8004058 <HAL_RCC_OscConfig+0x34c>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	4b5b      	ldr	r3, [pc, #364]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	e019      	b.n	8003f18 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b58      	ldr	r3, [pc, #352]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003eea:	4960      	ldr	r1, [pc, #384]	; (800406c <HAL_RCC_OscConfig+0x360>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7ff fb04 	bl	80034fc <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003efa:	f7ff faff 	bl	80034fc <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0d9      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f0c:	4b4f      	ldr	r3, [pc, #316]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4013      	ands	r3, r2
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d042      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003f22:	4b4a      	ldr	r3, [pc, #296]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2238      	movs	r2, #56	; 0x38
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b18      	cmp	r3, #24
 8003f2c:	d105      	bne.n	8003f3a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d138      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0c2      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d019      	beq.n	8003f76 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f42:	4b42      	ldr	r3, [pc, #264]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f46:	4b41      	ldr	r3, [pc, #260]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7ff fad5 	bl	80034fc <HAL_GetTick>
 8003f52:	0003      	movs	r3, r0
 8003f54:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f58:	f7ff fad0 	bl	80034fc <HAL_GetTick>
 8003f5c:	0002      	movs	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e0aa      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f6a:	4b38      	ldr	r3, [pc, #224]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f6e:	2202      	movs	r2, #2
 8003f70:	4013      	ands	r3, r2
 8003f72:	d0f1      	beq.n	8003f58 <HAL_RCC_OscConfig+0x24c>
 8003f74:	e018      	b.n	8003fa8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f76:	4b35      	ldr	r3, [pc, #212]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	438a      	bics	r2, r1
 8003f80:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7ff fabb 	bl	80034fc <HAL_GetTick>
 8003f86:	0003      	movs	r3, r0
 8003f88:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f8c:	f7ff fab6 	bl	80034fc <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e090      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d1f1      	bne.n	8003f8c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2204      	movs	r2, #4
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d100      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x2a8>
 8003fb2:	e084      	b.n	80040be <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003fbc:	4b23      	ldr	r3, [pc, #140]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2238      	movs	r2, #56	; 0x38
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d000      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2c6>
 8003fd0:	e075      	b.n	80040be <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e074      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x2e0>
 8003fde:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fea:	e01c      	b.n	8004026 <HAL_RCC_OscConfig+0x31a>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b05      	cmp	r3, #5
 8003ff2:	d10c      	bne.n	800400e <HAL_RCC_OscConfig+0x302>
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ff6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8003ffa:	2104      	movs	r1, #4
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	65da      	str	r2, [r3, #92]	; 0x5c
 8004000:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8004002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004004:	4b11      	ldr	r3, [pc, #68]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8004006:	2101      	movs	r1, #1
 8004008:	430a      	orrs	r2, r1
 800400a:	65da      	str	r2, [r3, #92]	; 0x5c
 800400c:	e00b      	b.n	8004026 <HAL_RCC_OscConfig+0x31a>
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8004010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004012:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8004014:	2101      	movs	r1, #1
 8004016:	438a      	bics	r2, r1
 8004018:	65da      	str	r2, [r3, #92]	; 0x5c
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <HAL_RCC_OscConfig+0x340>)
 800401c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_OscConfig+0x340>)
 8004020:	2104      	movs	r1, #4
 8004022:	438a      	bics	r2, r1
 8004024:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d028      	beq.n	8004080 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7ff fa65 	bl	80034fc <HAL_GetTick>
 8004032:	0003      	movs	r3, r0
 8004034:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004036:	e01d      	b.n	8004074 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004038:	f7ff fa60 	bl	80034fc <HAL_GetTick>
 800403c:	0002      	movs	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a0b      	ldr	r2, [pc, #44]	; (8004070 <HAL_RCC_OscConfig+0x364>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d915      	bls.n	8004074 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e039      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
 800404c:	40021000 	.word	0x40021000
 8004050:	fffeffff 	.word	0xfffeffff
 8004054:	fffbffff 	.word	0xfffbffff
 8004058:	ffff80ff 	.word	0xffff80ff
 800405c:	ffffc7ff 	.word	0xffffc7ff
 8004060:	02dc6c00 	.word	0x02dc6c00
 8004064:	20000008 	.word	0x20000008
 8004068:	2000000c 	.word	0x2000000c
 800406c:	fffffeff 	.word	0xfffffeff
 8004070:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004074:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <HAL_RCC_OscConfig+0x3bc>)
 8004076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004078:	2202      	movs	r2, #2
 800407a:	4013      	ands	r3, r2
 800407c:	d0dc      	beq.n	8004038 <HAL_RCC_OscConfig+0x32c>
 800407e:	e013      	b.n	80040a8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7ff fa3c 	bl	80034fc <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004088:	e009      	b.n	800409e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7ff fa37 	bl	80034fc <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <HAL_RCC_OscConfig+0x3c0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e010      	b.n	80040c0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800409e:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <HAL_RCC_OscConfig+0x3bc>)
 80040a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a2:	2202      	movs	r2, #2
 80040a4:	4013      	ands	r3, r2
 80040a6:	d1f0      	bne.n	800408a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040a8:	230f      	movs	r3, #15
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_OscConfig+0x3bc>)
 80040b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <HAL_RCC_OscConfig+0x3bc>)
 80040b8:	4905      	ldr	r1, [pc, #20]	; (80040d0 <HAL_RCC_OscConfig+0x3c4>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b006      	add	sp, #24
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	00001388 	.word	0x00001388
 80040d0:	efffffff 	.word	0xefffffff

080040d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e0e9      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e8:	4b76      	ldr	r3, [pc, #472]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2207      	movs	r2, #7
 80040ee:	4013      	ands	r3, r2
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d91e      	bls.n	8004134 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f6:	4b73      	ldr	r3, [pc, #460]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2207      	movs	r2, #7
 80040fc:	4393      	bics	r3, r2
 80040fe:	0019      	movs	r1, r3
 8004100:	4b70      	ldr	r3, [pc, #448]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004108:	f7ff f9f8 	bl	80034fc <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004110:	e009      	b.n	8004126 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004112:	f7ff f9f3 	bl	80034fc <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_RCC_ClockConfig+0x1f4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0ca      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004126:	4b67      	ldr	r3, [pc, #412]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2207      	movs	r2, #7
 800412c:	4013      	ands	r3, r2
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d1ee      	bne.n	8004112 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	4013      	ands	r3, r2
 800413c:	d017      	beq.n	800416e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2204      	movs	r2, #4
 8004144:	4013      	ands	r3, r2
 8004146:	d008      	beq.n	800415a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004148:	4b60      	ldr	r3, [pc, #384]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4a60      	ldr	r2, [pc, #384]	; (80042d0 <HAL_RCC_ClockConfig+0x1fc>)
 800414e:	401a      	ands	r2, r3
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	21b0      	movs	r1, #176	; 0xb0
 8004154:	0109      	lsls	r1, r1, #4
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415a:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCC_ClockConfig+0x200>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	4b58      	ldr	r3, [pc, #352]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d055      	beq.n	8004224 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004178:	4b54      	ldr	r3, [pc, #336]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	221c      	movs	r2, #28
 800417e:	4393      	bics	r3, r2
 8004180:	0019      	movs	r1, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	029b      	lsls	r3, r3, #10
 800419c:	4013      	ands	r3, r2
 800419e:	d11f      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e08b      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d107      	bne.n	80041bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	4013      	ands	r3, r2
 80041b6:	d113      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e07f      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b03      	cmp	r3, #3
 80041c2:	d106      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80041c4:	4b41      	ldr	r3, [pc, #260]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80041c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c8:	2202      	movs	r2, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d108      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e074      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80041d2:	4b3e      	ldr	r3, [pc, #248]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80041d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d6:	2202      	movs	r2, #2
 80041d8:	4013      	ands	r3, r2
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e06d      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e0:	4b3a      	ldr	r3, [pc, #232]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2207      	movs	r2, #7
 80041e6:	4393      	bics	r3, r2
 80041e8:	0019      	movs	r1, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	4b37      	ldr	r3, [pc, #220]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 80041f0:	430a      	orrs	r2, r1
 80041f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f4:	f7ff f982 	bl	80034fc <HAL_GetTick>
 80041f8:	0003      	movs	r3, r0
 80041fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fc:	e009      	b.n	8004212 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80041fe:	f7ff f97d 	bl	80034fc <HAL_GetTick>
 8004202:	0002      	movs	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	4a2f      	ldr	r2, [pc, #188]	; (80042c8 <HAL_RCC_ClockConfig+0x1f4>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e054      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2e      	ldr	r3, [pc, #184]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2238      	movs	r2, #56	; 0x38
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	429a      	cmp	r2, r3
 8004222:	d1ec      	bne.n	80041fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b27      	ldr	r3, [pc, #156]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2207      	movs	r2, #7
 800422a:	4013      	ands	r3, r2
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d21e      	bcs.n	8004270 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2207      	movs	r2, #7
 8004238:	4393      	bics	r3, r2
 800423a:	0019      	movs	r1, r3
 800423c:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004244:	f7ff f95a 	bl	80034fc <HAL_GetTick>
 8004248:	0003      	movs	r3, r0
 800424a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800424c:	e009      	b.n	8004262 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800424e:	f7ff f955 	bl	80034fc <HAL_GetTick>
 8004252:	0002      	movs	r2, r0
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_RCC_ClockConfig+0x1f4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e02c      	b.n	80042bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2207      	movs	r2, #7
 8004268:	4013      	ands	r3, r2
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d1ee      	bne.n	800424e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2204      	movs	r2, #4
 8004276:	4013      	ands	r3, r2
 8004278:	d009      	beq.n	800428e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800427a:	4b14      	ldr	r3, [pc, #80]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_RCC_ClockConfig+0x204>)
 8004280:	4013      	ands	r3, r2
 8004282:	0019      	movs	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800428e:	f000 f82b 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8004292:	0001      	movs	r1, r0
 8004294:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_RCC_ClockConfig+0x1f8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	220f      	movs	r2, #15
 800429c:	401a      	ands	r2, r3
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <HAL_RCC_ClockConfig+0x208>)
 80042a0:	0092      	lsls	r2, r2, #2
 80042a2:	58d3      	ldr	r3, [r2, r3]
 80042a4:	221f      	movs	r2, #31
 80042a6:	4013      	ands	r3, r2
 80042a8:	000a      	movs	r2, r1
 80042aa:	40da      	lsrs	r2, r3
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCC_ClockConfig+0x20c>)
 80042ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <HAL_RCC_ClockConfig+0x210>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7ff f8c5 	bl	8003444 <HAL_InitTick>
 80042ba:	0003      	movs	r3, r0
}
 80042bc:	0018      	movs	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	b004      	add	sp, #16
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40022000 	.word	0x40022000
 80042c8:	00001388 	.word	0x00001388
 80042cc:	40021000 	.word	0x40021000
 80042d0:	ffff84ff 	.word	0xffff84ff
 80042d4:	fffff0ff 	.word	0xfffff0ff
 80042d8:	ffff8fff 	.word	0xffff8fff
 80042dc:	08005768 	.word	0x08005768
 80042e0:	20000008 	.word	0x20000008
 80042e4:	2000000c 	.word	0x2000000c

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ee:	4b1c      	ldr	r3, [pc, #112]	; (8004360 <HAL_RCC_GetSysClockFreq+0x78>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2238      	movs	r2, #56	; 0x38
 80042f4:	4013      	ands	r3, r2
 80042f6:	d10f      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_GetSysClockFreq+0x78>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0adb      	lsrs	r3, r3, #11
 80042fe:	2207      	movs	r2, #7
 8004300:	4013      	ands	r3, r2
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4815      	ldr	r0, [pc, #84]	; (8004364 <HAL_RCC_GetSysClockFreq+0x7c>)
 800430e:	f7fb fefb 	bl	8000108 <__udivsi3>
 8004312:	0003      	movs	r3, r0
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	e01e      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <HAL_RCC_GetSysClockFreq+0x78>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2238      	movs	r2, #56	; 0x38
 800431e:	4013      	ands	r3, r2
 8004320:	2b08      	cmp	r3, #8
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <HAL_RCC_GetSysClockFreq+0x80>)
 8004326:	607b      	str	r3, [r7, #4]
 8004328:	e015      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_GetSysClockFreq+0x78>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2238      	movs	r2, #56	; 0x38
 8004330:	4013      	ands	r3, r2
 8004332:	2b20      	cmp	r3, #32
 8004334:	d103      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	e00b      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800433e:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_RCC_GetSysClockFreq+0x78>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2238      	movs	r2, #56	; 0x38
 8004344:	4013      	ands	r3, r2
 8004346:	2b18      	cmp	r3, #24
 8004348:	d103      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800434a:	23fa      	movs	r3, #250	; 0xfa
 800434c:	01db      	lsls	r3, r3, #7
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	e001      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004356:	687b      	ldr	r3, [r7, #4]
}
 8004358:	0018      	movs	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	b002      	add	sp, #8
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000
 8004364:	02dc6c00 	.word	0x02dc6c00
 8004368:	007a1200 	.word	0x007a1200

0800436c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e04a      	b.n	8004414 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	223d      	movs	r2, #61	; 0x3d
 8004382:	5c9b      	ldrb	r3, [r3, r2]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	223c      	movs	r2, #60	; 0x3c
 800438e:	2100      	movs	r1, #0
 8004390:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fe ff77 	bl	8003288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	223d      	movs	r2, #61	; 0x3d
 800439e:	2102      	movs	r1, #2
 80043a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	0019      	movs	r1, r3
 80043ac:	0010      	movs	r0, r2
 80043ae:	f000 fbdb 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2248      	movs	r2, #72	; 0x48
 80043b6:	2101      	movs	r1, #1
 80043b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	223e      	movs	r2, #62	; 0x3e
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223f      	movs	r2, #63	; 0x3f
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2240      	movs	r2, #64	; 0x40
 80043ce:	2101      	movs	r1, #1
 80043d0:	5499      	strb	r1, [r3, r2]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2241      	movs	r2, #65	; 0x41
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2242      	movs	r2, #66	; 0x42
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2243      	movs	r2, #67	; 0x43
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2244      	movs	r2, #68	; 0x44
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2245      	movs	r2, #69	; 0x45
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2246      	movs	r2, #70	; 0x46
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2247      	movs	r2, #71	; 0x47
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	223d      	movs	r2, #61	; 0x3d
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b002      	add	sp, #8
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	223d      	movs	r2, #61	; 0x3d
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e037      	b.n	80044a4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	223d      	movs	r2, #61	; 0x3d
 8004438:	2102      	movs	r1, #2
 800443a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68da      	ldr	r2, [r3, #12]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2101      	movs	r1, #1
 8004448:	430a      	orrs	r2, r1
 800444a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_TIM_Base_Start_IT+0x90>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d004      	beq.n	8004460 <HAL_TIM_Base_Start_IT+0x44>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <HAL_TIM_Base_Start_IT+0x94>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d116      	bne.n	800448e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_TIM_Base_Start_IT+0x98>)
 8004468:	4013      	ands	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b06      	cmp	r3, #6
 8004470:	d016      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x84>
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	025b      	lsls	r3, r3, #9
 8004478:	429a      	cmp	r2, r3
 800447a:	d011      	beq.n	80044a0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	e008      	b.n	80044a0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e000      	b.n	80044a2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b004      	add	sp, #16
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	40000400 	.word	0x40000400
 80044b4:	00010007 	.word	0x00010007

080044b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e04a      	b.n	8004560 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	223d      	movs	r2, #61	; 0x3d
 80044ce:	5c9b      	ldrb	r3, [r3, r2]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d107      	bne.n	80044e6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	223c      	movs	r2, #60	; 0x3c
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 f841 	bl	8004568 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	223d      	movs	r2, #61	; 0x3d
 80044ea:	2102      	movs	r1, #2
 80044ec:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	0019      	movs	r1, r3
 80044f8:	0010      	movs	r0, r2
 80044fa:	f000 fb35 	bl	8004b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2248      	movs	r2, #72	; 0x48
 8004502:	2101      	movs	r1, #1
 8004504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	223e      	movs	r2, #62	; 0x3e
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	223f      	movs	r2, #63	; 0x3f
 8004512:	2101      	movs	r1, #1
 8004514:	5499      	strb	r1, [r3, r2]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	2101      	movs	r1, #1
 800451c:	5499      	strb	r1, [r3, r2]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2241      	movs	r2, #65	; 0x41
 8004522:	2101      	movs	r1, #1
 8004524:	5499      	strb	r1, [r3, r2]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2242      	movs	r2, #66	; 0x42
 800452a:	2101      	movs	r1, #1
 800452c:	5499      	strb	r1, [r3, r2]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2243      	movs	r2, #67	; 0x43
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2244      	movs	r2, #68	; 0x44
 800453a:	2101      	movs	r1, #1
 800453c:	5499      	strb	r1, [r3, r2]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2245      	movs	r2, #69	; 0x45
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2246      	movs	r2, #70	; 0x46
 800454a:	2101      	movs	r1, #1
 800454c:	5499      	strb	r1, [r3, r2]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2247      	movs	r2, #71	; 0x47
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	223d      	movs	r2, #61	; 0x3d
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b002      	add	sp, #8
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e042      	b.n	8004612 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	223d      	movs	r2, #61	; 0x3d
 8004590:	5c9b      	ldrb	r3, [r3, r2]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d107      	bne.n	80045a8 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	223c      	movs	r2, #60	; 0x3c
 800459c:	2100      	movs	r1, #0
 800459e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f839 	bl	800461a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	223d      	movs	r2, #61	; 0x3d
 80045ac:	2102      	movs	r1, #2
 80045ae:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	0019      	movs	r1, r3
 80045ba:	0010      	movs	r0, r2
 80045bc:	f000 fad4 	bl	8004b68 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2108      	movs	r1, #8
 80045cc:	438a      	bics	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2248      	movs	r2, #72	; 0x48
 80045e4:	2101      	movs	r1, #1
 80045e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	223e      	movs	r2, #62	; 0x3e
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	223f      	movs	r2, #63	; 0x3f
 80045f4:	2101      	movs	r1, #1
 80045f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2244      	movs	r2, #68	; 0x44
 80045fc:	2101      	movs	r1, #1
 80045fe:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2245      	movs	r2, #69	; 0x45
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223d      	movs	r2, #61	; 0x3d
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b002      	add	sp, #8
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004622:	46c0      	nop			; (mov r8, r8)
 8004624:	46bd      	mov	sp, r7
 8004626:	b002      	add	sp, #8
 8004628:	bd80      	pop	{r7, pc}
	...

0800462c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	2202      	movs	r2, #2
 8004648:	4013      	ands	r3, r2
 800464a:	d021      	beq.n	8004690 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2202      	movs	r2, #2
 8004650:	4013      	ands	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2203      	movs	r2, #3
 800465a:	4252      	negs	r2, r2
 800465c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2203      	movs	r2, #3
 800466c:	4013      	ands	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f000 fa60 	bl	8004b38 <HAL_TIM_IC_CaptureCallback>
 8004678:	e007      	b.n	800468a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 fa53 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fa5f 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2204      	movs	r2, #4
 8004694:	4013      	ands	r3, r2
 8004696:	d022      	beq.n	80046de <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2204      	movs	r2, #4
 800469c:	4013      	ands	r3, r2
 800469e:	d01e      	beq.n	80046de <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2205      	movs	r2, #5
 80046a6:	4252      	negs	r2, r2
 80046a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	23c0      	movs	r3, #192	; 0xc0
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	0018      	movs	r0, r3
 80046c2:	f000 fa39 	bl	8004b38 <HAL_TIM_IC_CaptureCallback>
 80046c6:	e007      	b.n	80046d8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f000 fa2c 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 fa38 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	d021      	beq.n	800472a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d01d      	beq.n	800472a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2209      	movs	r2, #9
 80046f4:	4252      	negs	r2, r2
 80046f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2204      	movs	r2, #4
 80046fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2203      	movs	r2, #3
 8004706:	4013      	ands	r3, r2
 8004708:	d004      	beq.n	8004714 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fa13 	bl	8004b38 <HAL_TIM_IC_CaptureCallback>
 8004712:	e007      	b.n	8004724 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 fa06 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 fa12 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2210      	movs	r2, #16
 800472e:	4013      	ands	r3, r2
 8004730:	d022      	beq.n	8004778 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2210      	movs	r2, #16
 8004736:	4013      	ands	r3, r2
 8004738:	d01e      	beq.n	8004778 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2211      	movs	r2, #17
 8004740:	4252      	negs	r2, r2
 8004742:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2208      	movs	r2, #8
 8004748:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	69da      	ldr	r2, [r3, #28]
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4013      	ands	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	0018      	movs	r0, r3
 800475c:	f000 f9ec 	bl	8004b38 <HAL_TIM_IC_CaptureCallback>
 8004760:	e007      	b.n	8004772 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f9df 	bl	8004b28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	0018      	movs	r0, r3
 800476e:	f000 f9eb 	bl	8004b48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2201      	movs	r2, #1
 800477c:	4013      	ands	r3, r2
 800477e:	d00c      	beq.n	800479a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	4013      	ands	r3, r2
 8004786:	d008      	beq.n	800479a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2202      	movs	r2, #2
 800478e:	4252      	negs	r2, r2
 8004790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0018      	movs	r0, r3
 8004796:	f7fd fb5f 	bl	8001e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	4013      	ands	r3, r2
 80047a0:	d00c      	beq.n	80047bc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2280      	movs	r2, #128	; 0x80
 80047a6:	4013      	ands	r3, r2
 80047a8:	d008      	beq.n	80047bc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2281      	movs	r2, #129	; 0x81
 80047b0:	4252      	negs	r2, r2
 80047b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fe7a 	bl	80054b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2280      	movs	r2, #128	; 0x80
 80047ca:	4013      	ands	r3, r2
 80047cc:	d007      	beq.n	80047de <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a16      	ldr	r2, [pc, #88]	; (800482c <HAL_TIM_IRQHandler+0x200>)
 80047d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fe71 	bl	80054c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2240      	movs	r2, #64	; 0x40
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00c      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2240      	movs	r2, #64	; 0x40
 80047ea:	4013      	ands	r3, r2
 80047ec:	d008      	beq.n	8004800 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2241      	movs	r2, #65	; 0x41
 80047f4:	4252      	negs	r2, r2
 80047f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f9ac 	bl	8004b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2220      	movs	r2, #32
 8004804:	4013      	ands	r3, r2
 8004806:	d00c      	beq.n	8004822 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	4013      	ands	r3, r2
 800480e:	d008      	beq.n	8004822 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2221      	movs	r2, #33	; 0x21
 8004816:	4252      	negs	r2, r2
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fe3f 	bl	80054a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	fffffeff 	.word	0xfffffeff

08004830 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800483c:	2317      	movs	r3, #23
 800483e:	18fb      	adds	r3, r7, r3
 8004840:	2200      	movs	r2, #0
 8004842:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	223c      	movs	r2, #60	; 0x3c
 8004848:	5c9b      	ldrb	r3, [r3, r2]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d101      	bne.n	8004852 <HAL_TIM_OC_ConfigChannel+0x22>
 800484e:	2302      	movs	r3, #2
 8004850:	e048      	b.n	80048e4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	223c      	movs	r2, #60	; 0x3c
 8004856:	2101      	movs	r1, #1
 8004858:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b14      	cmp	r3, #20
 800485e:	d835      	bhi.n	80048cc <HAL_TIM_OC_ConfigChannel+0x9c>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	009a      	lsls	r2, r3, #2
 8004864:	4b21      	ldr	r3, [pc, #132]	; (80048ec <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004866:	18d3      	adds	r3, r2, r3
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	0011      	movs	r1, r2
 8004874:	0018      	movs	r0, r3
 8004876:	f000 f9e3 	bl	8004c40 <TIM_OC1_SetConfig>
      break;
 800487a:	e02c      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	0011      	movs	r1, r2
 8004884:	0018      	movs	r0, r3
 8004886:	f000 fa5b 	bl	8004d40 <TIM_OC2_SetConfig>
      break;
 800488a:	e024      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	0011      	movs	r1, r2
 8004894:	0018      	movs	r0, r3
 8004896:	f000 fad1 	bl	8004e3c <TIM_OC3_SetConfig>
      break;
 800489a:	e01c      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 fb4b 	bl	8004f40 <TIM_OC4_SetConfig>
      break;
 80048aa:	e014      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fba7 	bl	8005008 <TIM_OC5_SetConfig>
      break;
 80048ba:	e00c      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fbf9 	bl	80050bc <TIM_OC6_SetConfig>
      break;
 80048ca:	e004      	b.n	80048d6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80048cc:	2317      	movs	r3, #23
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]
      break;
 80048d4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	223c      	movs	r2, #60	; 0x3c
 80048da:	2100      	movs	r1, #0
 80048dc:	5499      	strb	r1, [r3, r2]

  return status;
 80048de:	2317      	movs	r3, #23
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	781b      	ldrb	r3, [r3, #0]
}
 80048e4:	0018      	movs	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b006      	add	sp, #24
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	080057a8 	.word	0x080057a8

080048f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fa:	230f      	movs	r3, #15
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	223c      	movs	r2, #60	; 0x3c
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIM_ConfigClockSource+0x20>
 800490c:	2302      	movs	r3, #2
 800490e:	e0bc      	b.n	8004a8a <HAL_TIM_ConfigClockSource+0x19a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	223c      	movs	r2, #60	; 0x3c
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	223d      	movs	r2, #61	; 0x3d
 800491c:	2102      	movs	r1, #2
 800491e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4a5a      	ldr	r2, [pc, #360]	; (8004a94 <HAL_TIM_ConfigClockSource+0x1a4>)
 800492c:	4013      	ands	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4a59      	ldr	r2, [pc, #356]	; (8004a98 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004934:	4013      	ands	r3, r2
 8004936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2280      	movs	r2, #128	; 0x80
 8004946:	0192      	lsls	r2, r2, #6
 8004948:	4293      	cmp	r3, r2
 800494a:	d040      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0xde>
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	0192      	lsls	r2, r2, #6
 8004950:	4293      	cmp	r3, r2
 8004952:	d900      	bls.n	8004956 <HAL_TIM_ConfigClockSource+0x66>
 8004954:	e088      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 8004956:	2280      	movs	r2, #128	; 0x80
 8004958:	0152      	lsls	r2, r2, #5
 800495a:	4293      	cmp	r3, r2
 800495c:	d100      	bne.n	8004960 <HAL_TIM_ConfigClockSource+0x70>
 800495e:	e088      	b.n	8004a72 <HAL_TIM_ConfigClockSource+0x182>
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0152      	lsls	r2, r2, #5
 8004964:	4293      	cmp	r3, r2
 8004966:	d900      	bls.n	800496a <HAL_TIM_ConfigClockSource+0x7a>
 8004968:	e07e      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 800496a:	2b70      	cmp	r3, #112	; 0x70
 800496c:	d018      	beq.n	80049a0 <HAL_TIM_ConfigClockSource+0xb0>
 800496e:	d900      	bls.n	8004972 <HAL_TIM_ConfigClockSource+0x82>
 8004970:	e07a      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 8004972:	2b60      	cmp	r3, #96	; 0x60
 8004974:	d04f      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x126>
 8004976:	d900      	bls.n	800497a <HAL_TIM_ConfigClockSource+0x8a>
 8004978:	e076      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 800497a:	2b50      	cmp	r3, #80	; 0x50
 800497c:	d03b      	beq.n	80049f6 <HAL_TIM_ConfigClockSource+0x106>
 800497e:	d900      	bls.n	8004982 <HAL_TIM_ConfigClockSource+0x92>
 8004980:	e072      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 8004982:	2b40      	cmp	r3, #64	; 0x40
 8004984:	d057      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x146>
 8004986:	d900      	bls.n	800498a <HAL_TIM_ConfigClockSource+0x9a>
 8004988:	e06e      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 800498a:	2b30      	cmp	r3, #48	; 0x30
 800498c:	d063      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x166>
 800498e:	d86b      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d060      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x166>
 8004994:	d868      	bhi.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d05d      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x166>
 800499a:	2b10      	cmp	r3, #16
 800499c:	d05b      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x166>
 800499e:	e063      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b0:	f000 fcf4 	bl	800539c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2277      	movs	r2, #119	; 0x77
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	609a      	str	r2, [r3, #8]
      break;
 80049cc:	e052      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049de:	f000 fcdd 	bl	800539c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2180      	movs	r1, #128	; 0x80
 80049ee:	01c9      	lsls	r1, r1, #7
 80049f0:	430a      	orrs	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
      break;
 80049f4:	e03e      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a02:	001a      	movs	r2, r3
 8004a04:	f000 fc4e 	bl	80052a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2150      	movs	r1, #80	; 0x50
 8004a0e:	0018      	movs	r0, r3
 8004a10:	f000 fca8 	bl	8005364 <TIM_ITRx_SetConfig>
      break;
 8004a14:	e02e      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a22:	001a      	movs	r2, r3
 8004a24:	f000 fc6c 	bl	8005300 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2160      	movs	r1, #96	; 0x60
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fc98 	bl	8005364 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e01e      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a42:	001a      	movs	r2, r3
 8004a44:	f000 fc2e 	bl	80052a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 fc88 	bl	8005364 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e00e      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	0019      	movs	r1, r3
 8004a60:	0010      	movs	r0, r2
 8004a62:	f000 fc7f 	bl	8005364 <TIM_ITRx_SetConfig>
      break;
 8004a66:	e005      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a68:	230f      	movs	r3, #15
 8004a6a:	18fb      	adds	r3, r7, r3
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a72:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	223d      	movs	r2, #61	; 0x3d
 8004a78:	2101      	movs	r1, #1
 8004a7a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	223c      	movs	r2, #60	; 0x3c
 8004a80:	2100      	movs	r1, #0
 8004a82:	5499      	strb	r1, [r3, r2]

  return status;
 8004a84:	230f      	movs	r3, #15
 8004a86:	18fb      	adds	r3, r7, r3
 8004a88:	781b      	ldrb	r3, [r3, #0]
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b004      	add	sp, #16
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			; (mov r8, r8)
 8004a94:	ffceff88 	.word	0xffceff88
 8004a98:	ffff00ff 	.word	0xffff00ff

08004a9c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	223c      	movs	r2, #60	; 0x3c
 8004aaa:	5c9b      	ldrb	r3, [r3, r2]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e032      	b.n	8004b1a <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	223c      	movs	r2, #60	; 0x3c
 8004ab8:	2101      	movs	r1, #1
 8004aba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	223d      	movs	r2, #61	; 0x3d
 8004ac0:	2102      	movs	r1, #2
 8004ac2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0011      	movs	r1, r2
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fb54 	bl	8005178 <TIM_SlaveTimer_SetConfig>
 8004ad0:	1e03      	subs	r3, r0, #0
 8004ad2:	d009      	beq.n	8004ae8 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223d      	movs	r2, #61	; 0x3d
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223c      	movs	r2, #60	; 0x3c
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e018      	b.n	8004b1a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2140      	movs	r1, #64	; 0x40
 8004af4:	438a      	bics	r2, r1
 8004af6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4908      	ldr	r1, [pc, #32]	; (8004b24 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	223d      	movs	r2, #61	; 0x3d
 8004b0c:	2101      	movs	r1, #1
 8004b0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	223c      	movs	r2, #60	; 0x3c
 8004b14:	2100      	movs	r1, #0
 8004b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	ffffbfff 	.word	0xffffbfff

08004b28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b002      	add	sp, #8
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <TIM_Base_SetConfig+0xc0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_Base_SetConfig+0x20>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <TIM_Base_SetConfig+0xc4>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d108      	bne.n	8004b9a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2270      	movs	r2, #112	; 0x70
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <TIM_Base_SetConfig+0xc0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00f      	beq.n	8004bc2 <TIM_Base_SetConfig+0x5a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <TIM_Base_SetConfig+0xc4>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d00b      	beq.n	8004bc2 <TIM_Base_SetConfig+0x5a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a20      	ldr	r2, [pc, #128]	; (8004c30 <TIM_Base_SetConfig+0xc8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d007      	beq.n	8004bc2 <TIM_Base_SetConfig+0x5a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <TIM_Base_SetConfig+0xcc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d003      	beq.n	8004bc2 <TIM_Base_SetConfig+0x5a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <TIM_Base_SetConfig+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d108      	bne.n	8004bd4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	; (8004c3c <TIM_Base_SetConfig+0xd4>)
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2280      	movs	r2, #128	; 0x80
 8004bd8:	4393      	bics	r3, r2
 8004bda:	001a      	movs	r2, r3
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a0a      	ldr	r2, [pc, #40]	; (8004c28 <TIM_Base_SetConfig+0xc0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <TIM_Base_SetConfig+0xaa>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <TIM_Base_SetConfig+0xcc>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d003      	beq.n	8004c12 <TIM_Base_SetConfig+0xaa>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <TIM_Base_SetConfig+0xd0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d103      	bne.n	8004c1a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	615a      	str	r2, [r3, #20]
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b004      	add	sp, #16
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40012c00 	.word	0x40012c00
 8004c2c:	40000400 	.word	0x40000400
 8004c30:	40002000 	.word	0x40002000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800
 8004c3c:	fffffcff 	.word	0xfffffcff

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	2201      	movs	r2, #1
 8004c56:	4393      	bics	r3, r2
 8004c58:	001a      	movs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4a2e      	ldr	r2, [pc, #184]	; (8004d28 <TIM_OC1_SetConfig+0xe8>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2203      	movs	r2, #3
 8004c76:	4393      	bics	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2202      	movs	r2, #2
 8004c88:	4393      	bics	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <TIM_OC1_SetConfig+0xec>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_OC1_SetConfig+0x6e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a23      	ldr	r2, [pc, #140]	; (8004d30 <TIM_OC1_SetConfig+0xf0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC1_SetConfig+0x6e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <TIM_OC1_SetConfig+0xf4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10c      	bne.n	8004cc8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2208      	movs	r2, #8
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	4393      	bics	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a18      	ldr	r2, [pc, #96]	; (8004d2c <TIM_OC1_SetConfig+0xec>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d007      	beq.n	8004ce0 <TIM_OC1_SetConfig+0xa0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a17      	ldr	r2, [pc, #92]	; (8004d30 <TIM_OC1_SetConfig+0xf0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d003      	beq.n	8004ce0 <TIM_OC1_SetConfig+0xa0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a16      	ldr	r2, [pc, #88]	; (8004d34 <TIM_OC1_SetConfig+0xf4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d111      	bne.n	8004d04 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4a15      	ldr	r2, [pc, #84]	; (8004d38 <TIM_OC1_SetConfig+0xf8>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <TIM_OC1_SetConfig+0xfc>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b006      	add	sp, #24
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	fffeff8f 	.word	0xfffeff8f
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40014400 	.word	0x40014400
 8004d34:	40014800 	.word	0x40014800
 8004d38:	fffffeff 	.word	0xfffffeff
 8004d3c:	fffffdff 	.word	0xfffffdff

08004d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	2210      	movs	r2, #16
 8004d56:	4393      	bics	r3, r2
 8004d58:	001a      	movs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <TIM_OC2_SetConfig+0xe0>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <TIM_OC2_SetConfig+0xe4>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	4393      	bics	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a22      	ldr	r2, [pc, #136]	; (8004e28 <TIM_OC2_SetConfig+0xe8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2280      	movs	r2, #128	; 0x80
 8004da6:	4393      	bics	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2240      	movs	r2, #64	; 0x40
 8004dba:	4393      	bics	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <TIM_OC2_SetConfig+0xe8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_OC2_SetConfig+0x96>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <TIM_OC2_SetConfig+0xec>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_OC2_SetConfig+0x96>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <TIM_OC2_SetConfig+0xf0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d113      	bne.n	8004dfe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <TIM_OC2_SetConfig+0xf4>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	4a15      	ldr	r2, [pc, #84]	; (8004e38 <TIM_OC2_SetConfig+0xf8>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	621a      	str	r2, [r3, #32]
}
 8004e18:	46c0      	nop			; (mov r8, r8)
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b006      	add	sp, #24
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	feff8fff 	.word	0xfeff8fff
 8004e24:	fffffcff 	.word	0xfffffcff
 8004e28:	40012c00 	.word	0x40012c00
 8004e2c:	40014400 	.word	0x40014400
 8004e30:	40014800 	.word	0x40014800
 8004e34:	fffffbff 	.word	0xfffffbff
 8004e38:	fffff7ff 	.word	0xfffff7ff

08004e3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	4a31      	ldr	r2, [pc, #196]	; (8004f18 <TIM_OC3_SetConfig+0xdc>)
 8004e52:	401a      	ands	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	69db      	ldr	r3, [r3, #28]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <TIM_OC3_SetConfig+0xe0>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	4393      	bics	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <TIM_OC3_SetConfig+0xe4>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	021b      	lsls	r3, r3, #8
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a23      	ldr	r2, [pc, #140]	; (8004f24 <TIM_OC3_SetConfig+0xe8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d10d      	bne.n	8004eb6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <TIM_OC3_SetConfig+0xec>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	021b      	lsls	r3, r3, #8
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4a1e      	ldr	r2, [pc, #120]	; (8004f2c <TIM_OC3_SetConfig+0xf0>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <TIM_OC3_SetConfig+0xe8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_OC3_SetConfig+0x92>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <TIM_OC3_SetConfig+0xf4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC3_SetConfig+0x92>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a1a      	ldr	r2, [pc, #104]	; (8004f34 <TIM_OC3_SetConfig+0xf8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d113      	bne.n	8004ef6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	; (8004f38 <TIM_OC3_SetConfig+0xfc>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	4a18      	ldr	r2, [pc, #96]	; (8004f3c <TIM_OC3_SetConfig+0x100>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b006      	add	sp, #24
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	fffffeff 	.word	0xfffffeff
 8004f1c:	fffeff8f 	.word	0xfffeff8f
 8004f20:	fffffdff 	.word	0xfffffdff
 8004f24:	40012c00 	.word	0x40012c00
 8004f28:	fffff7ff 	.word	0xfffff7ff
 8004f2c:	fffffbff 	.word	0xfffffbff
 8004f30:	40014400 	.word	0x40014400
 8004f34:	40014800 	.word	0x40014800
 8004f38:	ffffefff 	.word	0xffffefff
 8004f3c:	ffffdfff 	.word	0xffffdfff

08004f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a24      	ldr	r2, [pc, #144]	; (8004fe8 <TIM_OC4_SetConfig+0xa8>)
 8004f56:	401a      	ands	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4a20      	ldr	r2, [pc, #128]	; (8004fec <TIM_OC4_SetConfig+0xac>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <TIM_OC4_SetConfig+0xb0>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <TIM_OC4_SetConfig+0xb4>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	031b      	lsls	r3, r3, #12
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a17      	ldr	r2, [pc, #92]	; (8004ff8 <TIM_OC4_SetConfig+0xb8>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_OC4_SetConfig+0x70>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <TIM_OC4_SetConfig+0xbc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_OC4_SetConfig+0x70>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <TIM_OC4_SetConfig+0xc0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d109      	bne.n	8004fc4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4a14      	ldr	r2, [pc, #80]	; (8005004 <TIM_OC4_SetConfig+0xc4>)
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	019b      	lsls	r3, r3, #6
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b006      	add	sp, #24
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	ffffefff 	.word	0xffffefff
 8004fec:	feff8fff 	.word	0xfeff8fff
 8004ff0:	fffffcff 	.word	0xfffffcff
 8004ff4:	ffffdfff 	.word	0xffffdfff
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40014400 	.word	0x40014400
 8005000:	40014800 	.word	0x40014800
 8005004:	ffffbfff 	.word	0xffffbfff

08005008 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	4a21      	ldr	r2, [pc, #132]	; (80050a4 <TIM_OC5_SetConfig+0x9c>)
 800501e:	401a      	ands	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <TIM_OC5_SetConfig+0xa0>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_OC5_SetConfig+0xa4>)
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <TIM_OC5_SetConfig+0xa8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <TIM_OC5_SetConfig+0x66>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <TIM_OC5_SetConfig+0xac>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d003      	beq.n	800506e <TIM_OC5_SetConfig+0x66>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a13      	ldr	r2, [pc, #76]	; (80050b8 <TIM_OC5_SetConfig+0xb0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d109      	bne.n	8005082 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	4a0c      	ldr	r2, [pc, #48]	; (80050a4 <TIM_OC5_SetConfig+0x9c>)
 8005072:	4013      	ands	r3, r2
 8005074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	021b      	lsls	r3, r3, #8
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	621a      	str	r2, [r3, #32]
}
 800509c:	46c0      	nop			; (mov r8, r8)
 800509e:	46bd      	mov	sp, r7
 80050a0:	b006      	add	sp, #24
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	fffeffff 	.word	0xfffeffff
 80050a8:	fffeff8f 	.word	0xfffeff8f
 80050ac:	fffdffff 	.word	0xfffdffff
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40014400 	.word	0x40014400
 80050b8:	40014800 	.word	0x40014800

080050bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b086      	sub	sp, #24
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	4a22      	ldr	r2, [pc, #136]	; (800515c <TIM_OC6_SetConfig+0xa0>)
 80050d2:	401a      	ands	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4a1e      	ldr	r2, [pc, #120]	; (8005160 <TIM_OC6_SetConfig+0xa4>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	021b      	lsls	r3, r3, #8
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	4a1a      	ldr	r2, [pc, #104]	; (8005164 <TIM_OC6_SetConfig+0xa8>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	051b      	lsls	r3, r3, #20
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a16      	ldr	r2, [pc, #88]	; (8005168 <TIM_OC6_SetConfig+0xac>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d007      	beq.n	8005124 <TIM_OC6_SetConfig+0x68>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a15      	ldr	r2, [pc, #84]	; (800516c <TIM_OC6_SetConfig+0xb0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d003      	beq.n	8005124 <TIM_OC6_SetConfig+0x68>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a14      	ldr	r2, [pc, #80]	; (8005170 <TIM_OC6_SetConfig+0xb4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d109      	bne.n	8005138 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	4a13      	ldr	r2, [pc, #76]	; (8005174 <TIM_OC6_SetConfig+0xb8>)
 8005128:	4013      	ands	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	029b      	lsls	r3, r3, #10
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b006      	add	sp, #24
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	ffefffff 	.word	0xffefffff
 8005160:	feff8fff 	.word	0xfeff8fff
 8005164:	ffdfffff 	.word	0xffdfffff
 8005168:	40012c00 	.word	0x40012c00
 800516c:	40014400 	.word	0x40014400
 8005170:	40014800 	.word	0x40014800
 8005174:	fffbffff 	.word	0xfffbffff

08005178 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005182:	2317      	movs	r3, #23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4a41      	ldr	r2, [pc, #260]	; (800529c <TIM_SlaveTimer_SetConfig+0x124>)
 8005196:	4013      	ands	r3, r2
 8005198:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4a3e      	ldr	r2, [pc, #248]	; (80052a0 <TIM_SlaveTimer_SetConfig+0x128>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b70      	cmp	r3, #112	; 0x70
 80051c4:	d015      	beq.n	80051f2 <TIM_SlaveTimer_SetConfig+0x7a>
 80051c6:	d900      	bls.n	80051ca <TIM_SlaveTimer_SetConfig+0x52>
 80051c8:	e05b      	b.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051ca:	2b60      	cmp	r3, #96	; 0x60
 80051cc:	d04f      	beq.n	800526e <TIM_SlaveTimer_SetConfig+0xf6>
 80051ce:	d858      	bhi.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051d0:	2b50      	cmp	r3, #80	; 0x50
 80051d2:	d042      	beq.n	800525a <TIM_SlaveTimer_SetConfig+0xe2>
 80051d4:	d855      	bhi.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d016      	beq.n	8005208 <TIM_SlaveTimer_SetConfig+0x90>
 80051da:	d852      	bhi.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051dc:	2b30      	cmp	r3, #48	; 0x30
 80051de:	d055      	beq.n	800528c <TIM_SlaveTimer_SetConfig+0x114>
 80051e0:	d84f      	bhi.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d052      	beq.n	800528c <TIM_SlaveTimer_SetConfig+0x114>
 80051e6:	d84c      	bhi.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d04f      	beq.n	800528c <TIM_SlaveTimer_SetConfig+0x114>
 80051ec:	2b10      	cmp	r3, #16
 80051ee:	d04d      	beq.n	800528c <TIM_SlaveTimer_SetConfig+0x114>
 80051f0:	e047      	b.n	8005282 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005202:	f000 f8cb 	bl	800539c <TIM_ETR_SetConfig>
      break;
 8005206:	e042      	b.n	800528e <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b05      	cmp	r3, #5
 800520e:	d101      	bne.n	8005214 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e03f      	b.n	8005294 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6a1a      	ldr	r2, [r3, #32]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2101      	movs	r1, #1
 8005228:	438a      	bics	r2, r1
 800522a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	22f0      	movs	r2, #240	; 0xf0
 8005238:	4393      	bics	r3, r2
 800523a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	68ba      	ldr	r2, [r7, #8]
 8005244:	4313      	orrs	r3, r2
 8005246:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68ba      	ldr	r2, [r7, #8]
 800524e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	621a      	str	r2, [r3, #32]
      break;
 8005258:	e019      	b.n	800528e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	001a      	movs	r2, r3
 8005268:	f000 f81c 	bl	80052a4 <TIM_TI1_ConfigInputStage>
      break;
 800526c:	e00f      	b.n	800528e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	001a      	movs	r2, r3
 800527c:	f000 f840 	bl	8005300 <TIM_TI2_ConfigInputStage>
      break;
 8005280:	e005      	b.n	800528e <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005282:	2317      	movs	r3, #23
 8005284:	18fb      	adds	r3, r7, r3
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
      break;
 800528a:	e000      	b.n	800528e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 800528c:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800528e:	2317      	movs	r3, #23
 8005290:	18fb      	adds	r3, r7, r3
 8005292:	781b      	ldrb	r3, [r3, #0]
}
 8005294:	0018      	movs	r0, r3
 8005296:	46bd      	mov	sp, r7
 8005298:	b006      	add	sp, #24
 800529a:	bd80      	pop	{r7, pc}
 800529c:	ffcfff8f 	.word	0xffcfff8f
 80052a0:	fffefff8 	.word	0xfffefff8

080052a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	2201      	movs	r2, #1
 80052bc:	4393      	bics	r3, r2
 80052be:	001a      	movs	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	22f0      	movs	r2, #240	; 0xf0
 80052ce:	4393      	bics	r3, r2
 80052d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	220a      	movs	r2, #10
 80052e0:	4393      	bics	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	621a      	str	r2, [r3, #32]
}
 80052f8:	46c0      	nop			; (mov r8, r8)
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b006      	add	sp, #24
 80052fe:	bd80      	pop	{r7, pc}

08005300 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	2210      	movs	r2, #16
 8005318:	4393      	bics	r3, r2
 800531a:	001a      	movs	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4a0d      	ldr	r2, [pc, #52]	; (8005360 <TIM_TI2_ConfigInputStage+0x60>)
 800532a:	4013      	ands	r3, r2
 800532c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	031b      	lsls	r3, r3, #12
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	22a0      	movs	r2, #160	; 0xa0
 800533c:	4393      	bics	r3, r2
 800533e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	621a      	str	r2, [r3, #32]
}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	46bd      	mov	sp, r7
 800535a:	b006      	add	sp, #24
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			; (mov r8, r8)
 8005360:	ffff0fff 	.word	0xffff0fff

08005364 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a08      	ldr	r2, [pc, #32]	; (8005398 <TIM_ITRx_SetConfig+0x34>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	2207      	movs	r2, #7
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	609a      	str	r2, [r3, #8]
}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	46bd      	mov	sp, r7
 8005392:	b004      	add	sp, #16
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	ffcfff8f 	.word	0xffcfff8f

0800539c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <TIM_ETR_SetConfig+0x3c>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	431a      	orrs	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	46c0      	nop			; (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b006      	add	sp, #24
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	ffff00ff 	.word	0xffff00ff

080053dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	223c      	movs	r2, #60	; 0x3c
 80053ea:	5c9b      	ldrb	r3, [r3, r2]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e04a      	b.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	223c      	movs	r2, #60	; 0x3c
 80053f8:	2101      	movs	r1, #1
 80053fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	223d      	movs	r2, #61	; 0x3d
 8005400:	2102      	movs	r1, #2
 8005402:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a1e      	ldr	r2, [pc, #120]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d108      	bne.n	8005430 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a1d      	ldr	r2, [pc, #116]	; (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005422:	4013      	ands	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2270      	movs	r2, #112	; 0x70
 8005434:	4393      	bics	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a11      	ldr	r2, [pc, #68]	; (8005494 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a10      	ldr	r2, [pc, #64]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10c      	bne.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	4393      	bics	r3, r2
 8005464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4313      	orrs	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	223d      	movs	r2, #61	; 0x3d
 800547c:	2101      	movs	r1, #1
 800547e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	223c      	movs	r2, #60	; 0x3c
 8005484:	2100      	movs	r1, #0
 8005486:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b004      	add	sp, #16
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	40012c00 	.word	0x40012c00
 8005498:	ff0fffff 	.word	0xff0fffff
 800549c:	40000400 	.word	0x40000400

080054a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b002      	add	sp, #8
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <malloc>:
 80054d0:	b510      	push	{r4, lr}
 80054d2:	4b03      	ldr	r3, [pc, #12]	; (80054e0 <malloc+0x10>)
 80054d4:	0001      	movs	r1, r0
 80054d6:	6818      	ldr	r0, [r3, #0]
 80054d8:	f000 f826 	bl	8005528 <_malloc_r>
 80054dc:	bd10      	pop	{r4, pc}
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	20000060 	.word	0x20000060

080054e4 <sbrk_aligned>:
 80054e4:	b570      	push	{r4, r5, r6, lr}
 80054e6:	4e0f      	ldr	r6, [pc, #60]	; (8005524 <sbrk_aligned+0x40>)
 80054e8:	000d      	movs	r5, r1
 80054ea:	6831      	ldr	r1, [r6, #0]
 80054ec:	0004      	movs	r4, r0
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d102      	bne.n	80054f8 <sbrk_aligned+0x14>
 80054f2:	f000 f8b3 	bl	800565c <_sbrk_r>
 80054f6:	6030      	str	r0, [r6, #0]
 80054f8:	0029      	movs	r1, r5
 80054fa:	0020      	movs	r0, r4
 80054fc:	f000 f8ae 	bl	800565c <_sbrk_r>
 8005500:	1c43      	adds	r3, r0, #1
 8005502:	d00a      	beq.n	800551a <sbrk_aligned+0x36>
 8005504:	2303      	movs	r3, #3
 8005506:	1cc5      	adds	r5, r0, #3
 8005508:	439d      	bics	r5, r3
 800550a:	42a8      	cmp	r0, r5
 800550c:	d007      	beq.n	800551e <sbrk_aligned+0x3a>
 800550e:	1a29      	subs	r1, r5, r0
 8005510:	0020      	movs	r0, r4
 8005512:	f000 f8a3 	bl	800565c <_sbrk_r>
 8005516:	3001      	adds	r0, #1
 8005518:	d101      	bne.n	800551e <sbrk_aligned+0x3a>
 800551a:	2501      	movs	r5, #1
 800551c:	426d      	negs	r5, r5
 800551e:	0028      	movs	r0, r5
 8005520:	bd70      	pop	{r4, r5, r6, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	20000784 	.word	0x20000784

08005528 <_malloc_r>:
 8005528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800552a:	2203      	movs	r2, #3
 800552c:	1ccb      	adds	r3, r1, #3
 800552e:	4393      	bics	r3, r2
 8005530:	3308      	adds	r3, #8
 8005532:	0006      	movs	r6, r0
 8005534:	001f      	movs	r7, r3
 8005536:	2b0c      	cmp	r3, #12
 8005538:	d238      	bcs.n	80055ac <_malloc_r+0x84>
 800553a:	270c      	movs	r7, #12
 800553c:	42b9      	cmp	r1, r7
 800553e:	d837      	bhi.n	80055b0 <_malloc_r+0x88>
 8005540:	0030      	movs	r0, r6
 8005542:	f000 f873 	bl	800562c <__malloc_lock>
 8005546:	4b38      	ldr	r3, [pc, #224]	; (8005628 <_malloc_r+0x100>)
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	001c      	movs	r4, r3
 800554e:	2c00      	cmp	r4, #0
 8005550:	d133      	bne.n	80055ba <_malloc_r+0x92>
 8005552:	0039      	movs	r1, r7
 8005554:	0030      	movs	r0, r6
 8005556:	f7ff ffc5 	bl	80054e4 <sbrk_aligned>
 800555a:	0004      	movs	r4, r0
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d15e      	bne.n	800561e <_malloc_r+0xf6>
 8005560:	9b00      	ldr	r3, [sp, #0]
 8005562:	681c      	ldr	r4, [r3, #0]
 8005564:	0025      	movs	r5, r4
 8005566:	2d00      	cmp	r5, #0
 8005568:	d14e      	bne.n	8005608 <_malloc_r+0xe0>
 800556a:	2c00      	cmp	r4, #0
 800556c:	d051      	beq.n	8005612 <_malloc_r+0xea>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	0029      	movs	r1, r5
 8005572:	18e3      	adds	r3, r4, r3
 8005574:	0030      	movs	r0, r6
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	f000 f870 	bl	800565c <_sbrk_r>
 800557c:	9b01      	ldr	r3, [sp, #4]
 800557e:	4283      	cmp	r3, r0
 8005580:	d147      	bne.n	8005612 <_malloc_r+0xea>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	0030      	movs	r0, r6
 8005586:	1aff      	subs	r7, r7, r3
 8005588:	0039      	movs	r1, r7
 800558a:	f7ff ffab 	bl	80054e4 <sbrk_aligned>
 800558e:	3001      	adds	r0, #1
 8005590:	d03f      	beq.n	8005612 <_malloc_r+0xea>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	19db      	adds	r3, r3, r7
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	9b00      	ldr	r3, [sp, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d040      	beq.n	8005622 <_malloc_r+0xfa>
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	42a2      	cmp	r2, r4
 80055a4:	d133      	bne.n	800560e <_malloc_r+0xe6>
 80055a6:	2200      	movs	r2, #0
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	e014      	b.n	80055d6 <_malloc_r+0xae>
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dac5      	bge.n	800553c <_malloc_r+0x14>
 80055b0:	230c      	movs	r3, #12
 80055b2:	2500      	movs	r5, #0
 80055b4:	6033      	str	r3, [r6, #0]
 80055b6:	0028      	movs	r0, r5
 80055b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055ba:	6821      	ldr	r1, [r4, #0]
 80055bc:	1bc9      	subs	r1, r1, r7
 80055be:	d420      	bmi.n	8005602 <_malloc_r+0xda>
 80055c0:	290b      	cmp	r1, #11
 80055c2:	d918      	bls.n	80055f6 <_malloc_r+0xce>
 80055c4:	19e2      	adds	r2, r4, r7
 80055c6:	6027      	str	r7, [r4, #0]
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d112      	bne.n	80055f2 <_malloc_r+0xca>
 80055cc:	9b00      	ldr	r3, [sp, #0]
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	6863      	ldr	r3, [r4, #4]
 80055d2:	6011      	str	r1, [r2, #0]
 80055d4:	6053      	str	r3, [r2, #4]
 80055d6:	0030      	movs	r0, r6
 80055d8:	0025      	movs	r5, r4
 80055da:	f000 f82f 	bl	800563c <__malloc_unlock>
 80055de:	2207      	movs	r2, #7
 80055e0:	350b      	adds	r5, #11
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	4395      	bics	r5, r2
 80055e6:	1aea      	subs	r2, r5, r3
 80055e8:	429d      	cmp	r5, r3
 80055ea:	d0e4      	beq.n	80055b6 <_malloc_r+0x8e>
 80055ec:	1b5b      	subs	r3, r3, r5
 80055ee:	50a3      	str	r3, [r4, r2]
 80055f0:	e7e1      	b.n	80055b6 <_malloc_r+0x8e>
 80055f2:	605a      	str	r2, [r3, #4]
 80055f4:	e7ec      	b.n	80055d0 <_malloc_r+0xa8>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	d1d5      	bne.n	80055a8 <_malloc_r+0x80>
 80055fc:	9b00      	ldr	r3, [sp, #0]
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e7e9      	b.n	80055d6 <_malloc_r+0xae>
 8005602:	0023      	movs	r3, r4
 8005604:	6864      	ldr	r4, [r4, #4]
 8005606:	e7a2      	b.n	800554e <_malloc_r+0x26>
 8005608:	002c      	movs	r4, r5
 800560a:	686d      	ldr	r5, [r5, #4]
 800560c:	e7ab      	b.n	8005566 <_malloc_r+0x3e>
 800560e:	0013      	movs	r3, r2
 8005610:	e7c4      	b.n	800559c <_malloc_r+0x74>
 8005612:	230c      	movs	r3, #12
 8005614:	0030      	movs	r0, r6
 8005616:	6033      	str	r3, [r6, #0]
 8005618:	f000 f810 	bl	800563c <__malloc_unlock>
 800561c:	e7cb      	b.n	80055b6 <_malloc_r+0x8e>
 800561e:	6027      	str	r7, [r4, #0]
 8005620:	e7d9      	b.n	80055d6 <_malloc_r+0xae>
 8005622:	605b      	str	r3, [r3, #4]
 8005624:	deff      	udf	#255	; 0xff
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	20000780 	.word	0x20000780

0800562c <__malloc_lock>:
 800562c:	b510      	push	{r4, lr}
 800562e:	4802      	ldr	r0, [pc, #8]	; (8005638 <__malloc_lock+0xc>)
 8005630:	f000 f850 	bl	80056d4 <__retarget_lock_acquire_recursive>
 8005634:	bd10      	pop	{r4, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	200008c4 	.word	0x200008c4

0800563c <__malloc_unlock>:
 800563c:	b510      	push	{r4, lr}
 800563e:	4802      	ldr	r0, [pc, #8]	; (8005648 <__malloc_unlock+0xc>)
 8005640:	f000 f849 	bl	80056d6 <__retarget_lock_release_recursive>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	200008c4 	.word	0x200008c4

0800564c <memset>:
 800564c:	0003      	movs	r3, r0
 800564e:	1882      	adds	r2, r0, r2
 8005650:	4293      	cmp	r3, r2
 8005652:	d100      	bne.n	8005656 <memset+0xa>
 8005654:	4770      	bx	lr
 8005656:	7019      	strb	r1, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	e7f9      	b.n	8005650 <memset+0x4>

0800565c <_sbrk_r>:
 800565c:	2300      	movs	r3, #0
 800565e:	b570      	push	{r4, r5, r6, lr}
 8005660:	4d06      	ldr	r5, [pc, #24]	; (800567c <_sbrk_r+0x20>)
 8005662:	0004      	movs	r4, r0
 8005664:	0008      	movs	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fd fc78 	bl	8002f5c <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d103      	bne.n	8005678 <_sbrk_r+0x1c>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d000      	beq.n	8005678 <_sbrk_r+0x1c>
 8005676:	6023      	str	r3, [r4, #0]
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	200008c0 	.word	0x200008c0

08005680 <__errno>:
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <__errno+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	4770      	bx	lr
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	20000060 	.word	0x20000060

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2600      	movs	r6, #0
 8005690:	4c0c      	ldr	r4, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4d0d      	ldr	r5, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1b64      	subs	r4, r4, r5
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a6      	cmp	r6, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	2600      	movs	r6, #0
 800569e:	f000 f825 	bl	80056ec <_init>
 80056a2:	4c0a      	ldr	r4, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4d0a      	ldr	r5, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1b64      	subs	r4, r4, r5
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a6      	cmp	r6, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	00b3      	lsls	r3, r6, #2
 80056b2:	58eb      	ldr	r3, [r5, r3]
 80056b4:	4798      	blx	r3
 80056b6:	3601      	adds	r6, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	00b3      	lsls	r3, r6, #2
 80056bc:	58eb      	ldr	r3, [r5, r3]
 80056be:	4798      	blx	r3
 80056c0:	3601      	adds	r6, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	080057fc 	.word	0x080057fc
 80056c8:	080057fc 	.word	0x080057fc
 80056cc:	08005800 	.word	0x08005800
 80056d0:	080057fc 	.word	0x080057fc

080056d4 <__retarget_lock_acquire_recursive>:
 80056d4:	4770      	bx	lr

080056d6 <__retarget_lock_release_recursive>:
 80056d6:	4770      	bx	lr

080056d8 <memcpy>:
 80056d8:	2300      	movs	r3, #0
 80056da:	b510      	push	{r4, lr}
 80056dc:	429a      	cmp	r2, r3
 80056de:	d100      	bne.n	80056e2 <memcpy+0xa>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	5ccc      	ldrb	r4, [r1, r3]
 80056e4:	54c4      	strb	r4, [r0, r3]
 80056e6:	3301      	adds	r3, #1
 80056e8:	e7f8      	b.n	80056dc <memcpy+0x4>
	...

080056ec <_init>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr

080056f8 <_fini>:
 80056f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fe:	bc08      	pop	{r3}
 8005700:	469e      	mov	lr, r3
 8005702:	4770      	bx	lr
