
reynolds-switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bdc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e08  08003e08  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e08  08003e08  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e08  08003e08  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e08  08003e08  00004e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e0c  08003e0c  00004e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e10  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000068  08003e78  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  08003e78  00005a74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149f2  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e85  00000000  00000000  00019a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007b81  00000000  00000000  0001c907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e88  00000000  00000000  00024488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2d  00000000  00000000  00025310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014048  00000000  00000000  00025e3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001633d  00000000  00000000  00039e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ca23  00000000  00000000  000501c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ccbe5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000294c  00000000  00000000  000ccc28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000cf574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c84 	.word	0x08003c84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003c84 	.word	0x08003c84

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <nutone_app_config>:
							deadline_timer_t *timer_fsm_fan,
							deadline_timer_t *timer_fsm_white,
							deadline_timer_t *timer_fsm_vyv,
							deadline_timer_t *timer_fsm_vyv_timeout,
							deadline_timer_t *timer_fsm_vyv_safe)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
 8000224:	9804      	ldr	r0, [sp, #16]
	nutone_app_hand->motion_hand = motion_hand;
 8000226:	6062      	str	r2, [r4, #4]
	nutone_app_hand->nutone_dev = nutone_dev;
 8000228:	6021      	str	r1, [r4, #0]
	nutone_app_hand->button_white = button_white;
 800022a:	9a02      	ldr	r2, [sp, #8]
 800022c:	60e2      	str	r2, [r4, #12]
	nutone_app_hand->button_fan = button_fan;
 800022e:	60a3      	str	r3, [r4, #8]
	nutone_app_hand->button_vyv = button_vyv;
 8000230:	9b03      	ldr	r3, [sp, #12]
 8000232:	6123      	str	r3, [r4, #16]
	nutone_app_hand->led_signal_hand = led_signal_hand;
 8000234:	61e0      	str	r0, [r4, #28]
	led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 8000236:	6800      	ldr	r0, [r0, #0]
 8000238:	f000 fb58 	bl	80008ec <led_signal_start>
	nutone_app_hand->timer_fsm_white = timer_fsm_white;
 800023c:	9b06      	ldr	r3, [sp, #24]
 800023e:	6223      	str	r3, [r4, #32]
	nutone_app_hand->timer_fsm_vyv = timer_fsm_vyv;
 8000240:	9b07      	ldr	r3, [sp, #28]
 8000242:	6263      	str	r3, [r4, #36]	@ 0x24
	nutone_app_hand->timer_fsm_vyv_safe = timer_fsm_vyv_safe;
 8000244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000246:	62e3      	str	r3, [r4, #44]	@ 0x2c
	nutone_app_hand->timer_fsm_vyv_timeout = timer_fsm_vyv_timeout;
 8000248:	9b08      	ldr	r3, [sp, #32]
 800024a:	62a3      	str	r3, [r4, #40]	@ 0x28
	nutone_app_hand->timer_fsm_fan = timer_fsm_fan;
 800024c:	9b05      	ldr	r3, [sp, #20]
 800024e:	6323      	str	r3, [r4, #48]	@ 0x30


	nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 8000250:	2301      	movs	r3, #1
 8000252:	2236      	movs	r2, #54	@ 0x36
 8000254:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_FALSE;
 8000256:	3201      	adds	r2, #1
 8000258:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 800025a:	3201      	adds	r2, #1
 800025c:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800025e:	2200      	movs	r2, #0
 8000260:	2135      	movs	r1, #53	@ 0x35
 8000262:	5462      	strb	r2, [r4, r1]
	nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 8000264:	3901      	subs	r1, #1
 8000266:	5462      	strb	r2, [r4, r1]
	nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 8000268:	323a      	adds	r2, #58	@ 0x3a
 800026a:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 800026c:	3a01      	subs	r2, #1
 800026e:	54a3      	strb	r3, [r4, r2]
	return 0;
}
 8000270:	2000      	movs	r0, #0
 8000272:	bd10      	pop	{r4, pc}

08000274 <nutone_fan_fsm>:

	return 0;
}

uint8_t nutone_fan_fsm(nutone_app_t *nutone_app_hand)
{
 8000274:	b510      	push	{r4, lr}
 8000276:	0004      	movs	r4, r0
	if(nutone_app_hand->button_fan->button->edge_attended ==
 8000278:	6883      	ldr	r3, [r0, #8]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	791a      	ldrb	r2, [r3, #4]
 800027e:	2a02      	cmp	r2, #2
 8000280:	d001      	beq.n	8000286 <nutone_fan_fsm+0x12>
													NUTONE_CMD_FAN_TURN_OFF);
		}
		nutone_app_hand->button_fan->button->edge_attended = BUTTON_ISR_ATTENDED;
	}
	return 0;
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
		if(nutone_app_hand->button_fan->button->edge == BUTTON_EDGE_POSITIVE)
 8000286:	785b      	ldrb	r3, [r3, #1]
 8000288:	2b02      	cmp	r3, #2
 800028a:	d008      	beq.n	800029e <nutone_fan_fsm+0x2a>
			nutone_set_command(nutone_app_hand->nutone_dev,
 800028c:	6800      	ldr	r0, [r0, #0]
 800028e:	2102      	movs	r1, #2
 8000290:	f001 f882 	bl	8001398 <nutone_set_command>
		nutone_app_hand->button_fan->button->edge_attended = BUTTON_ISR_ATTENDED;
 8000294:	68a3      	ldr	r3, [r4, #8]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	2200      	movs	r2, #0
 800029a:	711a      	strb	r2, [r3, #4]
 800029c:	e7f1      	b.n	8000282 <nutone_fan_fsm+0xe>
			nutone_set_command(nutone_app_hand->nutone_dev,
 800029e:	6800      	ldr	r0, [r0, #0]
 80002a0:	2101      	movs	r1, #1
 80002a2:	f001 f879 	bl	8001398 <nutone_set_command>
 80002a6:	e7f5      	b.n	8000294 <nutone_fan_fsm+0x20>

080002a8 <nutone_white_fsm>:

uint8_t nutone_white_fsm(nutone_app_t *nutone_app_hand)
{
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	b089      	sub	sp, #36	@ 0x24
 80002ac:	0004      	movs	r4, r0
	button_isr_status_t button_isr_status;
	button_edge_t edge;
	deadline_timer_expired_t deadline_expired;


	button_check_isr_request(*nutone_app_hand->button_white->button,
 80002ae:	68c3      	ldr	r3, [r0, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	221e      	movs	r2, #30
 80002b4:	446a      	add	r2, sp
 80002b6:	9204      	str	r2, [sp, #16]
 80002b8:	251f      	movs	r5, #31
 80002ba:	446d      	add	r5, sp
 80002bc:	9503      	str	r5, [sp, #12]
 80002be:	001a      	movs	r2, r3
 80002c0:	3210      	adds	r2, #16
 80002c2:	4669      	mov	r1, sp
 80002c4:	cac1      	ldmia	r2!, {r0, r6, r7}
 80002c6:	c1c1      	stmia	r1!, {r0, r6, r7}
 80002c8:	6818      	ldr	r0, [r3, #0]
 80002ca:	6859      	ldr	r1, [r3, #4]
 80002cc:	689a      	ldr	r2, [r3, #8]
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	f000 faec 	bl	80008ac <button_check_isr_request>

	}
#endif //WHILE_TEST_SELECTION_IN_IDDLE

#ifndef WHILE_TEST_SELECTION_IN_IDDLE
	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80002d4:	782a      	ldrb	r2, [r5, #0]
 80002d6:	2a02      	cmp	r2, #2
 80002d8:	d008      	beq.n	80002ec <nutone_white_fsm+0x44>
		}
	}
#endif //WHILE_TEST_SELECTION_IN_IDDLE


	switch(nutone_app_hand->fsm_state_white)
 80002da:	233b      	movs	r3, #59	@ 0x3b
 80002dc:	5ce3      	ldrb	r3, [r4, r3]
 80002de:	2b05      	cmp	r3, #5
 80002e0:	d900      	bls.n	80002e4 <nutone_white_fsm+0x3c>
 80002e2:	e07d      	b.n	80003e0 <nutone_white_fsm+0x138>
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	4940      	ldr	r1, [pc, #256]	@ (80003e8 <nutone_white_fsm+0x140>)
 80002e8:	58cb      	ldr	r3, [r1, r3]
 80002ea:	469f      	mov	pc, r3
		if(edge == BUTTON_EDGE_NEGATIVE)
 80002ec:	231e      	movs	r3, #30
 80002ee:	446b      	add	r3, sp
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d1f1      	bne.n	80002da <nutone_white_fsm+0x32>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 80002f6:	333a      	adds	r3, #58	@ 0x3a
 80002f8:	2105      	movs	r1, #5
 80002fa:	54e1      	strb	r1, [r4, r3]
			nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 80002fc:	68e3      	ldr	r3, [r4, #12]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2100      	movs	r1, #0
 8000302:	7119      	strb	r1, [r3, #4]
 8000304:	e7e9      	b.n	80002da <nutone_white_fsm+0x32>
	{
		case MOTION_LIGHT_IDLE:

#ifndef WHILE_TEST_SELECTION_IN_IDDLE
			if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8000306:	2a02      	cmp	r2, #2
 8000308:	d00a      	beq.n	8000320 <nutone_white_fsm+0x78>
					nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
					nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
				}
			}

			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 800030a:	2334      	movs	r3, #52	@ 0x34
 800030c:	5ce3      	ldrb	r3, [r4, r3]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d136      	bne.n	8000380 <nutone_white_fsm+0xd8>
			{
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 8000312:	3339      	adds	r3, #57	@ 0x39
 8000314:	2201      	movs	r2, #1
 8000316:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 8000318:	3b07      	subs	r3, #7
 800031a:	2200      	movs	r2, #0
 800031c:	54e2      	strb	r2, [r4, r3]
 800031e:	e02f      	b.n	8000380 <nutone_white_fsm+0xd8>
				if(edge == BUTTON_EDGE_POSITIVE)
 8000320:	231e      	movs	r3, #30
 8000322:	446b      	add	r3, sp
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b02      	cmp	r3, #2
 8000328:	d1ef      	bne.n	800030a <nutone_white_fsm+0x62>
					nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 800032a:	3339      	adds	r3, #57	@ 0x39
 800032c:	3a01      	subs	r2, #1
 800032e:	54e2      	strb	r2, [r4, r3]
					nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 8000330:	68e3      	ldr	r3, [r4, #12]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2200      	movs	r2, #0
 8000336:	711a      	strb	r2, [r3, #4]
 8000338:	e7e7      	b.n	800030a <nutone_white_fsm+0x62>
#endif //WHILE_TEST_SELECTION_IN_IDDLE

			break;
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 800033a:	2300      	movs	r3, #0
 800033c:	466a      	mov	r2, sp
 800033e:	7713      	strb	r3, [r2, #28]
			button_get_status(nutone_app_hand->button_white->button,
 8000340:	68e3      	ldr	r3, [r4, #12]
 8000342:	6818      	ldr	r0, [r3, #0]
 8000344:	a907      	add	r1, sp, #28
 8000346:	f000 fa67 	bl	8000818 <button_get_status>
															&button_status);

			if(button_status == BUTTON_ON)
 800034a:	466b      	mov	r3, sp
 800034c:	7f1b      	ldrb	r3, [r3, #28]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d006      	beq.n	8000360 <nutone_white_fsm+0xb8>
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
			}
			else
			{
				 //if an edge where detected an error occurred in the button
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 8000352:	233b      	movs	r3, #59	@ 0x3b
 8000354:	2205      	movs	r2, #5
 8000356:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 8000358:	3b07      	subs	r3, #7
 800035a:	2200      	movs	r2, #0
 800035c:	54e2      	strb	r2, [r4, r3]
 800035e:	e00f      	b.n	8000380 <nutone_white_fsm+0xd8>
				nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_BUSY;
 8000360:	2300      	movs	r3, #0
 8000362:	2239      	movs	r2, #57	@ 0x39
 8000364:	54a3      	strb	r3, [r4, r2]
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_TURN_ON_LIGHT;
 8000366:	3202      	adds	r2, #2
 8000368:	2102      	movs	r1, #2
 800036a:	54a1      	strb	r1, [r4, r2]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 800036c:	3a07      	subs	r2, #7
 800036e:	54a3      	strb	r3, [r4, r2]
 8000370:	e006      	b.n	8000380 <nutone_white_fsm+0xd8>
			}

			break;
		case MOTION_LIGHT_TURN_ON_LIGHT:
			//this is done in another fsm
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000372:	6820      	ldr	r0, [r4, #0]
 8000374:	2103      	movs	r1, #3
 8000376:	f001 f80f 	bl	8001398 <nutone_set_command>
													NUTONE_CMD_WHITE_TURN_ON);

			nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 800037a:	233b      	movs	r3, #59	@ 0x3b
 800037c:	2203      	movs	r2, #3
 800037e:	54e2      	strb	r2, [r4, r3]

	return 0;



}
 8000380:	2000      	movs	r0, #0
 8000382:	b009      	add	sp, #36	@ 0x24
 8000384:	bdf0      	pop	{r4, r5, r6, r7, pc}
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_white);
 8000386:	6a20      	ldr	r0, [r4, #32]
 8000388:	f001 f9ab 	bl	80016e2 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_EXPIRATION;
 800038c:	233b      	movs	r3, #59	@ 0x3b
 800038e:	2204      	movs	r2, #4
 8000390:	54e2      	strb	r2, [r4, r3]
			break;
 8000392:	e7f5      	b.n	8000380 <nutone_white_fsm+0xd8>
			deadline_timer_check(nutone_app_hand->timer_fsm_white,
 8000394:	251d      	movs	r5, #29
 8000396:	446d      	add	r5, sp
 8000398:	6a20      	ldr	r0, [r4, #32]
 800039a:	0029      	movs	r1, r5
 800039c:	f001 fa12 	bl	80017c4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80003a0:	782b      	ldrb	r3, [r5, #0]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d00a      	beq.n	80003bc <nutone_white_fsm+0x114>
			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 80003a6:	2334      	movs	r3, #52	@ 0x34
 80003a8:	5ce3      	ldrb	r3, [r4, r3]
 80003aa:	2b02      	cmp	r3, #2
 80003ac:	d1e8      	bne.n	8000380 <nutone_white_fsm+0xd8>
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 80003ae:	3332      	adds	r3, #50	@ 0x32
 80003b0:	2200      	movs	r2, #0
 80003b2:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 80003b4:	3307      	adds	r3, #7
 80003b6:	3203      	adds	r2, #3
 80003b8:	54e2      	strb	r2, [r4, r3]
 80003ba:	e7e1      	b.n	8000380 <nutone_white_fsm+0xd8>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 80003bc:	333a      	adds	r3, #58	@ 0x3a
 80003be:	2205      	movs	r2, #5
 80003c0:	54e2      	strb	r2, [r4, r3]
 80003c2:	e7f0      	b.n	80003a6 <nutone_white_fsm+0xfe>
			nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 80003c4:	2339      	movs	r3, #57	@ 0x39
 80003c6:	2201      	movs	r2, #1
 80003c8:	54e2      	strb	r2, [r4, r3]
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_white);
 80003ca:	6a20      	ldr	r0, [r4, #32]
 80003cc:	f001 f984 	bl	80016d8 <deadline_timer_force_expiration>
			nutone_set_command(nutone_app_hand->nutone_dev,
 80003d0:	6820      	ldr	r0, [r4, #0]
 80003d2:	2104      	movs	r1, #4
 80003d4:	f000 ffe0 	bl	8001398 <nutone_set_command>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80003d8:	233b      	movs	r3, #59	@ 0x3b
 80003da:	2200      	movs	r2, #0
 80003dc:	54e2      	strb	r2, [r4, r3]
			break;
 80003de:	e7cf      	b.n	8000380 <nutone_white_fsm+0xd8>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80003e0:	233b      	movs	r3, #59	@ 0x3b
 80003e2:	2200      	movs	r2, #0
 80003e4:	54e2      	strb	r2, [r4, r3]
			break;
 80003e6:	e7cb      	b.n	8000380 <nutone_white_fsm+0xd8>
 80003e8:	08003c9c 	.word	0x08003c9c

080003ec <nutone_vyv_fsm>:


uint8_t nutone_vyv_fsm(nutone_app_t *nutone_app_hand)
{
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	b098      	sub	sp, #96	@ 0x60
 80003f0:	0004      	movs	r4, r0
	deadline_timer_expired_t deadline_timeout_expired;

//	button_check_isr_request(*nutone_app_hand->button_vyv->button, &button_isr_status, &edge);
//	pyd1598_check_isr_request(*nutone_app_hand->motion_hand->motion_sensor, &motion_isr_status);

	pyd1598_sensor_t *sensor = nutone_app_hand->motion_hand->motion_sensor;
 80003f2:	6843      	ldr	r3, [r0, #4]
 80003f4:	681d      	ldr	r5, [r3, #0]
	pyd1598_check_isr_request(*sensor, &motion_isr_status);
 80003f6:	235d      	movs	r3, #93	@ 0x5d
 80003f8:	446b      	add	r3, sp
 80003fa:	9314      	str	r3, [sp, #80]	@ 0x50
 80003fc:	0029      	movs	r1, r5
 80003fe:	3110      	adds	r1, #16
 8000400:	2250      	movs	r2, #80	@ 0x50
 8000402:	4668      	mov	r0, sp
 8000404:	f003 fc34 	bl	8003c70 <memcpy>
 8000408:	6828      	ldr	r0, [r5, #0]
 800040a:	6869      	ldr	r1, [r5, #4]
 800040c:	68aa      	ldr	r2, [r5, #8]
 800040e:	68eb      	ldr	r3, [r5, #12]
 8000410:	f000 fb35 	bl	8000a7e <pyd1598_check_isr_request>

	button_t *button = nutone_app_hand->button_vyv->button;
 8000414:	6923      	ldr	r3, [r4, #16]
 8000416:	681b      	ldr	r3, [r3, #0]
	button_check_isr_request(*button, &button_isr_status, &edge);
 8000418:	225e      	movs	r2, #94	@ 0x5e
 800041a:	446a      	add	r2, sp
 800041c:	9204      	str	r2, [sp, #16]
 800041e:	225f      	movs	r2, #95	@ 0x5f
 8000420:	446a      	add	r2, sp
 8000422:	9203      	str	r2, [sp, #12]
 8000424:	001a      	movs	r2, r3
 8000426:	3210      	adds	r2, #16
 8000428:	4669      	mov	r1, sp
 800042a:	ca61      	ldmia	r2!, {r0, r5, r6}
 800042c:	c161      	stmia	r1!, {r0, r5, r6}
 800042e:	6818      	ldr	r0, [r3, #0]
 8000430:	6859      	ldr	r1, [r3, #4]
 8000432:	689a      	ldr	r2, [r3, #8]
 8000434:	68db      	ldr	r3, [r3, #12]
 8000436:	f000 fa39 	bl	80008ac <button_check_isr_request>



	if(	nutone_app_hand->nutone_dev->current_light_mode ==
 800043a:	6823      	ldr	r3, [r4, #0]
 800043c:	7d9b      	ldrb	r3, [r3, #22]
 800043e:	2b01      	cmp	r3, #1
 8000440:	d024      	beq.n	800048c <nutone_vyv_fsm+0xa0>
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_TRUE;
	}
	else
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 8000442:	2338      	movs	r3, #56	@ 0x38
 8000444:	2201      	movs	r2, #1
 8000446:	54e2      	strb	r2, [r4, r3]
	}

	if(nutone_app_hand->signals.uv_abort == MOTION_ABORT_TRUE)
 8000448:	2336      	movs	r3, #54	@ 0x36
 800044a:	5ce3      	ldrb	r3, [r4, r3]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d105      	bne.n	800045c <nutone_vyv_fsm+0x70>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000450:	333c      	adds	r3, #60	@ 0x3c
 8000452:	220a      	movs	r2, #10
 8000454:	54e2      	strb	r2, [r4, r3]
		nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 8000456:	3b06      	subs	r3, #6
 8000458:	3a09      	subs	r2, #9
 800045a:	54e2      	strb	r2, [r4, r3]
	}

	if(nutone_app_hand->signals.uv_abort_white_button == MOTION_ABORT_TRUE)
 800045c:	2337      	movs	r3, #55	@ 0x37
 800045e:	5ce3      	ldrb	r3, [r4, r3]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d105      	bne.n	8000470 <nutone_vyv_fsm+0x84>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT_WHITE_BUTTON;
 8000464:	333c      	adds	r3, #60	@ 0x3c
 8000466:	220b      	movs	r2, #11
 8000468:	54e2      	strb	r2, [r4, r3]
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_FALSE;
 800046a:	3b05      	subs	r3, #5
 800046c:	3a0a      	subs	r2, #10
 800046e:	54e2      	strb	r2, [r4, r3]

#endif //WHILE_TEST_SELECTION_IN_IDDLE


#ifndef WHILE_TEST_SELECTION_IN_IDDLE
	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8000470:	235f      	movs	r3, #95	@ 0x5f
 8000472:	446b      	add	r3, sp
 8000474:	781a      	ldrb	r2, [r3, #0]
 8000476:	2a02      	cmp	r2, #2
 8000478:	d00c      	beq.n	8000494 <nutone_vyv_fsm+0xa8>
		}
	}
#endif //WHILE_TEST_SELECTION_IN_IDDLE


	switch(nutone_app_hand->fsm_state_uyu)
 800047a:	233c      	movs	r3, #60	@ 0x3c
 800047c:	5ce3      	ldrb	r3, [r4, r3]
 800047e:	2b0b      	cmp	r3, #11
 8000480:	d900      	bls.n	8000484 <nutone_vyv_fsm+0x98>
 8000482:	e0e2      	b.n	800064a <nutone_vyv_fsm+0x25e>
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4973      	ldr	r1, [pc, #460]	@ (8000654 <nutone_vyv_fsm+0x268>)
 8000488:	58cb      	ldr	r3, [r1, r3]
 800048a:	469f      	mov	pc, r3
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_TRUE;
 800048c:	3337      	adds	r3, #55	@ 0x37
 800048e:	2200      	movs	r2, #0
 8000490:	54e2      	strb	r2, [r4, r3]
 8000492:	e7d9      	b.n	8000448 <nutone_vyv_fsm+0x5c>
		if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_OFF)
 8000494:	6923      	ldr	r3, [r4, #16]
 8000496:	6819      	ldr	r1, [r3, #0]
 8000498:	78c9      	ldrb	r1, [r1, #3]
 800049a:	2900      	cmp	r1, #0
 800049c:	d1ed      	bne.n	800047a <nutone_vyv_fsm+0x8e>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 800049e:	313c      	adds	r1, #60	@ 0x3c
 80004a0:	200a      	movs	r0, #10
 80004a2:	5460      	strb	r0, [r4, r1]
			nutone_app_hand->button_vyv->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	2100      	movs	r1, #0
 80004a8:	7119      	strb	r1, [r3, #4]
 80004aa:	e7e6      	b.n	800047a <nutone_vyv_fsm+0x8e>
	{
		case MOTION_LIGHT_UV_IDLE:
#ifndef WHILE_TEST_SELECTION_IN_IDDLE
			if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80004ac:	2a02      	cmp	r2, #2
 80004ae:	d007      	beq.n	80004c0 <nutone_vyv_fsm+0xd4>
					nutone_app_hand->button_vyv->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
				}
			}
#endif //WHILE_TEST_SELECTION_IN_IDDLE

			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80004b0:	2335      	movs	r3, #53	@ 0x35
 80004b2:	5ce3      	ldrb	r3, [r4, r3]
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d00f      	beq.n	80004d8 <nutone_vyv_fsm+0xec>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
			}

			__NOP();//Do nothing
 80004b8:	46c0      	nop			@ (mov r8, r8)




	return 0;
}
 80004ba:	2000      	movs	r0, #0
 80004bc:	b018      	add	sp, #96	@ 0x60
 80004be:	bd70      	pop	{r4, r5, r6, pc}
				if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_ON)
 80004c0:	6923      	ldr	r3, [r4, #16]
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	78d2      	ldrb	r2, [r2, #3]
 80004c6:	2a01      	cmp	r2, #1
 80004c8:	d1f2      	bne.n	80004b0 <nutone_vyv_fsm+0xc4>
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 80004ca:	323b      	adds	r2, #59	@ 0x3b
 80004cc:	2101      	movs	r1, #1
 80004ce:	54a1      	strb	r1, [r4, r2]
					nutone_app_hand->button_vyv->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	711a      	strb	r2, [r3, #4]
 80004d6:	e7eb      	b.n	80004b0 <nutone_vyv_fsm+0xc4>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80004d8:	3333      	adds	r3, #51	@ 0x33
 80004da:	2200      	movs	r2, #0
 80004dc:	54e2      	strb	r2, [r4, r3]
 80004de:	e7eb      	b.n	80004b8 <nutone_vyv_fsm+0xcc>
			nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_BUSY;
 80004e0:	233a      	movs	r3, #58	@ 0x3a
 80004e2:	2200      	movs	r2, #0
 80004e4:	54e2      	strb	r2, [r4, r3]
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_timeout);
 80004e6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80004e8:	f001 f8fb 	bl	80016e2 <deadline_timer_set_initial_time>
			led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 80004ec:	69e3      	ldr	r3, [r4, #28]
 80004ee:	6818      	ldr	r0, [r3, #0]
 80004f0:	f000 f9fc 	bl	80008ec <led_signal_start>
			nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_BLINK;
 80004f4:	69e3      	ldr	r3, [r4, #28]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2202      	movs	r2, #2
 80004fa:	725a      	strb	r2, [r3, #9]
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 80004fc:	233c      	movs	r3, #60	@ 0x3c
 80004fe:	3201      	adds	r2, #1
 8000500:	54e2      	strb	r2, [r4, r3]
			break;
 8000502:	e7da      	b.n	80004ba <nutone_vyv_fsm+0xce>
			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 8000504:	2335      	movs	r3, #53	@ 0x35
 8000506:	5ce3      	ldrb	r3, [r4, r3]
 8000508:	2b02      	cmp	r3, #2
 800050a:	d013      	beq.n	8000534 <nutone_vyv_fsm+0x148>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_timeout,
 800050c:	255b      	movs	r5, #91	@ 0x5b
 800050e:	446d      	add	r5, sp
 8000510:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000512:	0029      	movs	r1, r5
 8000514:	f001 f956 	bl	80017c4 <deadline_timer_check>
			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000518:	782b      	ldrb	r3, [r5, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d1cd      	bne.n	80004ba <nutone_vyv_fsm+0xce>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800051e:	3334      	adds	r3, #52	@ 0x34
 8000520:	2200      	movs	r2, #0
 8000522:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8000524:	3307      	adds	r3, #7
 8000526:	3204      	adds	r2, #4
 8000528:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_SOLID;
 800052a:	69e3      	ldr	r3, [r4, #28]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3a03      	subs	r2, #3
 8000530:	725a      	strb	r2, [r3, #9]
 8000532:	e7c2      	b.n	80004ba <nutone_vyv_fsm+0xce>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000534:	3333      	adds	r3, #51	@ 0x33
 8000536:	2200      	movs	r2, #0
 8000538:	54e2      	strb	r2, [r4, r3]
 800053a:	e7e7      	b.n	800050c <nutone_vyv_fsm+0x120>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_safe);
 800053c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800053e:	f001 f8d0 	bl	80016e2 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8000542:	233c      	movs	r3, #60	@ 0x3c
 8000544:	2205      	movs	r2, #5
 8000546:	54e2      	strb	r2, [r4, r3]
			break;
 8000548:	e7b7      	b.n	80004ba <nutone_vyv_fsm+0xce>
			if(nutone_app_hand->signals.wait == MOTION_UV_WAIT_TRUE)
 800054a:	2338      	movs	r3, #56	@ 0x38
 800054c:	5ce3      	ldrb	r3, [r4, r3]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d103      	bne.n	800055a <nutone_vyv_fsm+0x16e>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8000552:	333c      	adds	r3, #60	@ 0x3c
 8000554:	2204      	movs	r2, #4
 8000556:	54e2      	strb	r2, [r4, r3]
 8000558:	e7af      	b.n	80004ba <nutone_vyv_fsm+0xce>
				deadline_timer_check(nutone_app_hand->timer_fsm_vyv_safe,
 800055a:	ad17      	add	r5, sp, #92	@ 0x5c
 800055c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800055e:	0029      	movs	r1, r5
 8000560:	f001 f930 	bl	80017c4 <deadline_timer_check>
				if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000564:	782b      	ldrb	r3, [r5, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d00a      	beq.n	8000580 <nutone_vyv_fsm+0x194>
					if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 800056a:	2335      	movs	r3, #53	@ 0x35
 800056c:	5ce3      	ldrb	r3, [r4, r3]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d1a3      	bne.n	80004ba <nutone_vyv_fsm+0xce>
						nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000572:	3333      	adds	r3, #51	@ 0x33
 8000574:	2200      	movs	r2, #0
 8000576:	54e2      	strb	r2, [r4, r3]
						nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000578:	3307      	adds	r3, #7
 800057a:	320a      	adds	r2, #10
 800057c:	54e2      	strb	r2, [r4, r3]
 800057e:	e79c      	b.n	80004ba <nutone_vyv_fsm+0xce>
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8000580:	333b      	adds	r3, #59	@ 0x3b
 8000582:	2206      	movs	r2, #6
 8000584:	54e2      	strb	r2, [r4, r3]
 8000586:	e798      	b.n	80004ba <nutone_vyv_fsm+0xce>
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000588:	6820      	ldr	r0, [r4, #0]
 800058a:	2105      	movs	r1, #5
 800058c:	f000 ff04 	bl	8001398 <nutone_set_command>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMER;
 8000590:	233c      	movs	r3, #60	@ 0x3c
 8000592:	2207      	movs	r2, #7
 8000594:	54e2      	strb	r2, [r4, r3]
			break;
 8000596:	e790      	b.n	80004ba <nutone_vyv_fsm+0xce>
			nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000598:	2335      	movs	r3, #53	@ 0x35
 800059a:	2200      	movs	r2, #0
 800059c:	54e2      	strb	r2, [r4, r3]
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv);
 800059e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005a0:	f001 f89f 	bl	80016e2 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 80005a4:	233c      	movs	r3, #60	@ 0x3c
 80005a6:	2208      	movs	r2, #8
 80005a8:	54e2      	strb	r2, [r4, r3]
			break;
 80005aa:	e786      	b.n	80004ba <nutone_vyv_fsm+0xce>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv,
 80005ac:	255a      	movs	r5, #90	@ 0x5a
 80005ae:	446d      	add	r5, sp
 80005b0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005b2:	0029      	movs	r1, r5
 80005b4:	f001 f906 	bl	80017c4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80005b8:	782b      	ldrb	r3, [r5, #0]
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d00b      	beq.n	80005d6 <nutone_vyv_fsm+0x1ea>
			if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 80005be:	2335      	movs	r3, #53	@ 0x35
 80005c0:	5ce3      	ldrb	r3, [r4, r3]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d000      	beq.n	80005c8 <nutone_vyv_fsm+0x1dc>
 80005c6:	e778      	b.n	80004ba <nutone_vyv_fsm+0xce>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80005c8:	3333      	adds	r3, #51	@ 0x33
 80005ca:	2200      	movs	r2, #0
 80005cc:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 80005ce:	3307      	adds	r3, #7
 80005d0:	320a      	adds	r2, #10
 80005d2:	54e2      	strb	r2, [r4, r3]
 80005d4:	e771      	b.n	80004ba <nutone_vyv_fsm+0xce>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80005d6:	333b      	adds	r3, #59	@ 0x3b
 80005d8:	2209      	movs	r2, #9
 80005da:	54e2      	strb	r2, [r4, r3]
 80005dc:	e7ef      	b.n	80005be <nutone_vyv_fsm+0x1d2>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80005de:	233c      	movs	r3, #60	@ 0x3c
 80005e0:	2209      	movs	r2, #9
 80005e2:	54e2      	strb	r2, [r4, r3]
			break;
 80005e4:	e769      	b.n	80004ba <nutone_vyv_fsm+0xce>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 80005e6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005e8:	f001 f876 	bl	80016d8 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 80005ec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80005ee:	f001 f873 	bl	80016d8 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 80005f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005f4:	f001 f870 	bl	80016d8 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005f8:	6923      	ldr	r3, [r4, #16]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2500      	movs	r5, #0
 80005fe:	70dd      	strb	r5, [r3, #3]
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000600:	6820      	ldr	r0, [r4, #0]
 8000602:	2106      	movs	r1, #6
 8000604:	f000 fec8 	bl	8001398 <nutone_set_command>
			nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 8000608:	233a      	movs	r3, #58	@ 0x3a
 800060a:	2201      	movs	r2, #1
 800060c:	54e2      	strb	r2, [r4, r3]
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 800060e:	69e3      	ldr	r3, [r4, #28]
 8000610:	6818      	ldr	r0, [r3, #0]
 8000612:	f000 f96f 	bl	80008f4 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 8000616:	233c      	movs	r3, #60	@ 0x3c
 8000618:	54e5      	strb	r5, [r4, r3]
			break;
 800061a:	e74e      	b.n	80004ba <nutone_vyv_fsm+0xce>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 800061c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800061e:	f001 f85b 	bl	80016d8 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 8000622:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000624:	f001 f858 	bl	80016d8 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 8000628:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800062a:	f001 f855 	bl	80016d8 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 800062e:	6923      	ldr	r3, [r4, #16]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2500      	movs	r5, #0
 8000634:	70dd      	strb	r5, [r3, #3]
			nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 8000636:	233a      	movs	r3, #58	@ 0x3a
 8000638:	2201      	movs	r2, #1
 800063a:	54e2      	strb	r2, [r4, r3]
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 800063c:	69e3      	ldr	r3, [r4, #28]
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	f000 f958 	bl	80008f4 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 8000644:	233c      	movs	r3, #60	@ 0x3c
 8000646:	54e5      	strb	r5, [r4, r3]
			break;
 8000648:	e737      	b.n	80004ba <nutone_vyv_fsm+0xce>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 800064a:	233c      	movs	r3, #60	@ 0x3c
 800064c:	2200      	movs	r2, #0
 800064e:	54e2      	strb	r2, [r4, r3]
			break;
 8000650:	e733      	b.n	80004ba <nutone_vyv_fsm+0xce>
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	08003cb4 	.word	0x08003cb4

08000658 <nutone_app_fsm>:
{
 8000658:	b510      	push	{r4, lr}
 800065a:	0004      	movs	r4, r0
	nutone_fan_fsm(nutone_app_hand);
 800065c:	f7ff fe0a 	bl	8000274 <nutone_fan_fsm>
	nutone_white_fsm(nutone_app_hand);
 8000660:	0020      	movs	r0, r4
 8000662:	f7ff fe21 	bl	80002a8 <nutone_white_fsm>
	nutone_vyv_fsm(nutone_app_hand);
 8000666:	0020      	movs	r0, r4
 8000668:	f7ff fec0 	bl	80003ec <nutone_vyv_fsm>
	nutone_fsm(nutone_app_hand->nutone_dev);
 800066c:	6820      	ldr	r0, [r4, #0]
 800066e:	f000 fecf 	bl	8001410 <nutone_fsm>
}
 8000672:	2000      	movs	r0, #0
 8000674:	bd10      	pop	{r4, pc}

08000676 <nutone_app_check_button_event>:


}

void nutone_app_check_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8000676:	b570      	push	{r4, r5, r6, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	0005      	movs	r5, r0
 800067c:	000c      	movs	r4, r1
	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 800067e:	7c8b      	ldrb	r3, [r1, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <nutone_app_check_button_event+0x12>
		{
			button_debounce_fsm(button);
			deadline_timer_set_initial_time(deadline_events);
		}
	}
}
 8000684:	b002      	add	sp, #8
 8000686:	bd70      	pop	{r4, r5, r6, pc}
		deadline_timer_check(deadline_events, &timer_expired);
 8000688:	466b      	mov	r3, sp
 800068a:	1dde      	adds	r6, r3, #7
 800068c:	0031      	movs	r1, r6
 800068e:	f001 f899 	bl	80017c4 <deadline_timer_check>
		if(timer_expired == TIMER_EXPIRED_TRUE)
 8000692:	7833      	ldrb	r3, [r6, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d1f5      	bne.n	8000684 <nutone_app_check_button_event+0xe>
			button_debounce_fsm(button);
 8000698:	0020      	movs	r0, r4
 800069a:	f000 f8d9 	bl	8000850 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 800069e:	0028      	movs	r0, r5
 80006a0:	f001 f81f 	bl	80016e2 <deadline_timer_set_initial_time>
}
 80006a4:	e7ee      	b.n	8000684 <nutone_app_check_button_event+0xe>

080006a6 <nutone_app_check_events>:
{
 80006a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006a8:	b089      	sub	sp, #36	@ 0x24
 80006aa:	0004      	movs	r4, r0
	pyd1598_read_wakeup_signal(nutone_app_hand->motion_hand->motion_sensor,
 80006ac:	6843      	ldr	r3, [r0, #4]
 80006ae:	251f      	movs	r5, #31
 80006b0:	446d      	add	r5, sp
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	0029      	movs	r1, r5
 80006b6:	f000 f9ef 	bl	8000a98 <pyd1598_read_wakeup_signal>
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 80006ba:	782b      	ldrb	r3, [r5, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d03c      	beq.n	800073a <nutone_app_check_events+0x94>
	nutone_app_check_button_event(nutone_app_hand->button_white->btn_timer,
 80006c0:	68e3      	ldr	r3, [r4, #12]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	6858      	ldr	r0, [r3, #4]
 80006c6:	f7ff ffd6 	bl	8000676 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_vyv->btn_timer,
 80006ca:	6923      	ldr	r3, [r4, #16]
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	6858      	ldr	r0, [r3, #4]
 80006d0:	f7ff ffd1 	bl	8000676 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_fan->btn_timer,
 80006d4:	68a3      	ldr	r3, [r4, #8]
 80006d6:	6819      	ldr	r1, [r3, #0]
 80006d8:	6858      	ldr	r0, [r3, #4]
 80006da:	f7ff ffcc 	bl	8000676 <nutone_app_check_button_event>
	button_check_isr_request(*nutone_app_hand->button_vyv->button,
 80006de:	6923      	ldr	r3, [r4, #16]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	221d      	movs	r2, #29
 80006e4:	446a      	add	r2, sp
 80006e6:	9204      	str	r2, [sp, #16]
 80006e8:	251e      	movs	r5, #30
 80006ea:	446d      	add	r5, sp
 80006ec:	9503      	str	r5, [sp, #12]
 80006ee:	001a      	movs	r2, r3
 80006f0:	3210      	adds	r2, #16
 80006f2:	4669      	mov	r1, sp
 80006f4:	cac1      	ldmia	r2!, {r0, r6, r7}
 80006f6:	c1c1      	stmia	r1!, {r0, r6, r7}
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	6859      	ldr	r1, [r3, #4]
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	f000 f8d4 	bl	80008ac <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8000704:	782b      	ldrb	r3, [r5, #0]
 8000706:	2b02      	cmp	r3, #2
 8000708:	d021      	beq.n	800074e <nutone_app_check_events+0xa8>
	button_t *button = nutone_app_hand->button_white->button;
 800070a:	68e3      	ldr	r3, [r4, #12]
 800070c:	681b      	ldr	r3, [r3, #0]
	button_check_isr_request(*button, &button_isr_stat, &check_edge);
 800070e:	221d      	movs	r2, #29
 8000710:	446a      	add	r2, sp
 8000712:	9204      	str	r2, [sp, #16]
 8000714:	251e      	movs	r5, #30
 8000716:	446d      	add	r5, sp
 8000718:	9503      	str	r5, [sp, #12]
 800071a:	001a      	movs	r2, r3
 800071c:	3210      	adds	r2, #16
 800071e:	4669      	mov	r1, sp
 8000720:	cac1      	ldmia	r2!, {r0, r6, r7}
 8000722:	c1c1      	stmia	r1!, {r0, r6, r7}
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	6859      	ldr	r1, [r3, #4]
 8000728:	689a      	ldr	r2, [r3, #8]
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	f000 f8be 	bl	80008ac <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8000730:	782b      	ldrb	r3, [r5, #0]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d016      	beq.n	8000764 <nutone_app_check_events+0xbe>
}
 8000736:	b009      	add	sp, #36	@ 0x24
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nutone_app_hand->signals.motion_light = MOTION_ISR_UNATTENDED;
 800073a:	2234      	movs	r2, #52	@ 0x34
 800073c:	54a3      	strb	r3, [r4, r2]
		nutone_app_hand->signals.motion_uv = MOTION_ISR_UNATTENDED;
 800073e:	3201      	adds	r2, #1
 8000740:	54a3      	strb	r3, [r4, r2]
		nutone_app_hand->motion_hand->motion_sensor->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8000742:	6863      	ldr	r3, [r4, #4]
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	2358      	movs	r3, #88	@ 0x58
 8000748:	2100      	movs	r1, #0
 800074a:	54d1      	strb	r1, [r2, r3]
 800074c:	e7b8      	b.n	80006c0 <nutone_app_check_events+0x1a>
		if(nutone_app_hand->button_vyv->button->push_status != BUTTON_PUSH_ON)
 800074e:	6923      	ldr	r3, [r4, #16]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	78da      	ldrb	r2, [r3, #3]
 8000754:	2a01      	cmp	r2, #1
 8000756:	d002      	beq.n	800075e <nutone_app_check_events+0xb8>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_ON;
 8000758:	2201      	movs	r2, #1
 800075a:	70da      	strb	r2, [r3, #3]
 800075c:	e7d5      	b.n	800070a <nutone_app_check_events+0x64>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 800075e:	2200      	movs	r2, #0
 8000760:	70da      	strb	r2, [r3, #3]
 8000762:	e7d2      	b.n	800070a <nutone_app_check_events+0x64>
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_TRUE;
 8000764:	3335      	adds	r3, #53	@ 0x35
 8000766:	2200      	movs	r2, #0
 8000768:	54e2      	strb	r2, [r4, r3]
}
 800076a:	e7e4      	b.n	8000736 <nutone_app_check_events+0x90>

0800076c <nutone_app_set_outputs>:


void nutone_app_set_outputs(nutone_app_t *nutone_app_hand)
{
 800076c:	b510      	push	{r4, lr}
 800076e:	0004      	movs	r4, r0
	output_fsm_ctrl(nutone_app_hand->nutone_dev->lights->relay,
 8000770:	6803      	ldr	r3, [r0, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	6859      	ldr	r1, [r3, #4]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	f001 f83e 	bl	80017f8 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->lights->deadline_timer);

	output_fsm_ctrl(nutone_app_hand->nutone_dev->fan->relay,
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	f001 f838 	bl	80017f8 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->fan->deadline_timer);

	output_led_indicator(nutone_app_hand->led_signal_hand->led_signal,
 8000788:	69e3      	ldr	r3, [r4, #28]
 800078a:	6859      	ldr	r1, [r3, #4]
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	f001 f899 	bl	80018c4 <output_led_indicator>
							nutone_app_hand->led_signal_hand->led_signal_timer);

}
 8000792:	bd10      	pop	{r4, pc}

08000794 <nutone_app_process>:
{
 8000794:	b510      	push	{r4, lr}
 8000796:	0004      	movs	r4, r0
	nutone_app_check_events(nutone_app_hand);
 8000798:	f7ff ff85 	bl	80006a6 <nutone_app_check_events>
	nutone_app_fsm(nutone_app_hand);
 800079c:	0020      	movs	r0, r4
 800079e:	f7ff ff5b 	bl	8000658 <nutone_app_fsm>
	nutone_app_set_outputs(nutone_app_hand);
 80007a2:	0020      	movs	r0, r4
 80007a4:	f7ff ffe2 	bl	800076c <nutone_app_set_outputs>
}
 80007a8:	2000      	movs	r0, #0
 80007aa:	bd10      	pop	{r4, pc}

080007ac <button_setup>:
#include "BoardSupport/button.h"

const button_logic_t INITIAL_LOGIC = BUTTON_LOGIC_POSITIVE;

uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 80007ac:	b510      	push	{r4, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	466b      	mov	r3, sp
 80007b2:	9100      	str	r1, [sp, #0]
 80007b4:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 80007b6:	0002      	movs	r2, r0
 80007b8:	3208      	adds	r2, #8
 80007ba:	cb12      	ldmia	r3!, {r1, r4}
 80007bc:	c212      	stmia	r2!, {r1, r4}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 80007be:	2300      	movs	r3, #0
 80007c0:	7043      	strb	r3, [r0, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 80007c2:	7103      	strb	r3, [r0, #4]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 80007c4:	7443      	strb	r3, [r0, #17]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80007c6:	2201      	movs	r2, #1
 80007c8:	7482      	strb	r2, [r0, #18]
	button->debounce_idx = 0;
 80007ca:	6143      	str	r3, [r0, #20]
	button->debounce_count_limit = 1;
 80007cc:	6182      	str	r2, [r0, #24]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 80007ce:	70c3      	strb	r3, [r0, #3]

	button->logic = BUTTON_LOGIC_POSITIVE;
 80007d0:	7082      	strb	r2, [r0, #2]
	button->type = BUTTON_TYPE_TOGGLE;
 80007d2:	7402      	strb	r2, [r0, #16]

	return 0;

}
 80007d4:	2000      	movs	r0, #0
 80007d6:	b002      	add	sp, #8
 80007d8:	bd10      	pop	{r4, pc}

080007da <button_positive_edge_detected>:


uint8_t button_positive_edge_detected(button_t *button)
{

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80007da:	7c83      	ldrb	r3, [r0, #18]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d001      	beq.n	80007e4 <button_positive_edge_detected+0xa>
			button->edge = BUTTON_EDGE_NEGATIVE;
		}
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
	}
	return 0;
}
 80007e0:	2000      	movs	r0, #0
 80007e2:	4770      	bx	lr
		if(button->logic == BUTTON_LOGIC_POSITIVE)
 80007e4:	7883      	ldrb	r3, [r0, #2]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d004      	beq.n	80007f4 <button_positive_edge_detected+0x1a>
			button->edge = BUTTON_EDGE_NEGATIVE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	7043      	strb	r3, [r0, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 80007ee:	2300      	movs	r3, #0
 80007f0:	7483      	strb	r3, [r0, #18]
 80007f2:	e7f5      	b.n	80007e0 <button_positive_edge_detected+0x6>
			button->edge = BUTTON_EDGE_POSITIVE;
 80007f4:	3301      	adds	r3, #1
 80007f6:	7043      	strb	r3, [r0, #1]
 80007f8:	e7f9      	b.n	80007ee <button_positive_edge_detected+0x14>

080007fa <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80007fa:	7c83      	ldrb	r3, [r0, #18]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d001      	beq.n	8000804 <button_negative_edge_detected+0xa>
			button->edge = BUTTON_EDGE_POSITIVE;
		}
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
	}
	return 0;
}
 8000800:	2000      	movs	r0, #0
 8000802:	4770      	bx	lr
		if(button->logic == BUTTON_LOGIC_POSITIVE)
 8000804:	7883      	ldrb	r3, [r0, #2]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d004      	beq.n	8000814 <button_negative_edge_detected+0x1a>
			button->edge = BUTTON_EDGE_POSITIVE;
 800080a:	2302      	movs	r3, #2
 800080c:	7043      	strb	r3, [r0, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 800080e:	2300      	movs	r3, #0
 8000810:	7483      	strb	r3, [r0, #18]
 8000812:	e7f5      	b.n	8000800 <button_negative_edge_detected+0x6>
			button->edge = BUTTON_EDGE_NEGATIVE;
 8000814:	7043      	strb	r3, [r0, #1]
 8000816:	e7fa      	b.n	800080e <button_negative_edge_detected+0x14>

08000818 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	0004      	movs	r4, r0
 800081c:	000d      	movs	r5, r1
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 800081e:	6880      	ldr	r0, [r0, #8]
 8000820:	89a1      	ldrh	r1, [r4, #12]
 8000822:	f002 f9bb 	bl	8002b9c <HAL_GPIO_ReadPin>
												button->hardware_input.pin);


	if(button->logic == BUTTON_LOGIC_POSITIVE)
 8000826:	78a3      	ldrb	r3, [r4, #2]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d007      	beq.n	800083c <button_get_status+0x24>
			button->status = BUTTON_OFF;
		}
	}
	else
	{
		if(pin_value == GPIO_PIN_SET)
 800082c:	2801      	cmp	r0, #1
 800082e:	d00c      	beq.n	800084a <button_get_status+0x32>
		{
			button->status = BUTTON_OFF;
		}
		else
		{
			button->status = BUTTON_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	7023      	strb	r3, [r4, #0]
//	if(button->type == BUTTON_TYPE_TOGGLE)
//	{
//		__NOPE();
//	}

	*status = button->status;
 8000834:	7823      	ldrb	r3, [r4, #0]
 8000836:	702b      	strb	r3, [r5, #0]

	return 0;
}
 8000838:	2000      	movs	r0, #0
 800083a:	bd70      	pop	{r4, r5, r6, pc}
		if(pin_value == GPIO_PIN_SET)
 800083c:	2801      	cmp	r0, #1
 800083e:	d002      	beq.n	8000846 <button_get_status+0x2e>
			button->status = BUTTON_OFF;
 8000840:	2300      	movs	r3, #0
 8000842:	7023      	strb	r3, [r4, #0]
 8000844:	e7f6      	b.n	8000834 <button_get_status+0x1c>
			button->status = BUTTON_ON;
 8000846:	7023      	strb	r3, [r4, #0]
 8000848:	e7f4      	b.n	8000834 <button_get_status+0x1c>
			button->status = BUTTON_OFF;
 800084a:	2300      	movs	r3, #0
 800084c:	7023      	strb	r3, [r4, #0]
 800084e:	e7f1      	b.n	8000834 <button_get_status+0x1c>

08000850 <button_debounce_fsm>:
{
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	0004      	movs	r4, r0
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 8000856:	7c43      	ldrb	r3, [r0, #17]
	button_edge_t edge = button->edge;
 8000858:	7846      	ldrb	r6, [r0, #1]
	uint32_t debounce_idx = button->debounce_idx;
 800085a:	6945      	ldr	r5, [r0, #20]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 800085c:	6982      	ldr	r2, [r0, #24]
	switch(debounce_fsm_state)
 800085e:	2b01      	cmp	r3, #1
 8000860:	d011      	beq.n	8000886 <button_debounce_fsm+0x36>
 8000862:	2b02      	cmp	r3, #2
 8000864:	d014      	beq.n	8000890 <button_debounce_fsm+0x40>
 8000866:	2b00      	cmp	r3, #0
 8000868:	d006      	beq.n	8000878 <button_debounce_fsm+0x28>
 800086a:	2300      	movs	r3, #0
	button->debounce_fsm_state = debounce_fsm_state;
 800086c:	7463      	strb	r3, [r4, #17]
	button->edge = edge;
 800086e:	7066      	strb	r6, [r4, #1]
	button->debounce_idx = debounce_idx;
 8000870:	6165      	str	r5, [r4, #20]
}
 8000872:	2000      	movs	r0, #0
 8000874:	b002      	add	sp, #8
 8000876:	bd70      	pop	{r4, r5, r6, pc}
			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8000878:	7c81      	ldrb	r1, [r0, #18]
 800087a:	2900      	cmp	r1, #0
 800087c:	d1f6      	bne.n	800086c <button_debounce_fsm+0x1c>
				if(debounce_count_limit == 0)
 800087e:	2a00      	cmp	r2, #0
 8000880:	d112      	bne.n	80008a8 <button_debounce_fsm+0x58>
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 8000882:	3302      	adds	r3, #2
 8000884:	e7f2      	b.n	800086c <button_debounce_fsm+0x1c>
			if(debounce_idx >= debounce_count_limit)
 8000886:	4295      	cmp	r5, r2
 8000888:	d300      	bcc.n	800088c <button_debounce_fsm+0x3c>
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 800088a:	2302      	movs	r3, #2
			debounce_idx++;
 800088c:	3501      	adds	r5, #1
			break;
 800088e:	e7ed      	b.n	800086c <button_debounce_fsm+0x1c>
			button->edge_attended = BUTTON_ISR_UNATTENDED;
 8000890:	2302      	movs	r3, #2
 8000892:	7103      	strb	r3, [r0, #4]
			button->debounce_idx = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	6143      	str	r3, [r0, #20]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000898:	3301      	adds	r3, #1
 800089a:	7483      	strb	r3, [r0, #18]
			button_get_status(button, &button_status);
 800089c:	466b      	mov	r3, sp
 800089e:	1dd9      	adds	r1, r3, #7
 80008a0:	f7ff ffba 	bl	8000818 <button_get_status>
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 80008a4:	2300      	movs	r3, #0
			break;
 80008a6:	e7e1      	b.n	800086c <button_debounce_fsm+0x1c>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e7df      	b.n	800086c <button_debounce_fsm+0x1c>

080008ac <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 80008ac:	b084      	sub	sp, #16
 80008ae:	9000      	str	r0, [sp, #0]
 80008b0:	9101      	str	r1, [sp, #4]
 80008b2:	9202      	str	r2, [sp, #8]
 80008b4:	9303      	str	r3, [sp, #12]
	*button_isr_status = button.edge_attended;
 80008b6:	466b      	mov	r3, sp
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	9a07      	ldr	r2, [sp, #28]
 80008bc:	7013      	strb	r3, [r2, #0]
	*edge = button.edge;
 80008be:	466b      	mov	r3, sp
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	9a08      	ldr	r2, [sp, #32]
 80008c4:	7013      	strb	r3, [r2, #0]
	return 0;
}
 80008c6:	2000      	movs	r0, #0
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <led_signal_setup>:
 */

#include "BoardSupport/led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 80008cc:	b510      	push	{r4, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	466b      	mov	r3, sp
 80008d2:	9100      	str	r1, [sp, #0]
 80008d4:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 80008d6:	0002      	movs	r2, r0
 80008d8:	cb12      	ldmia	r3!, {r1, r4}
 80008da:	c212      	stmia	r2!, {r1, r4}
	led_signal->type = LED_SIGNAL_OFF;
 80008dc:	2300      	movs	r3, #0
 80008de:	7243      	strb	r3, [r0, #9]

	return 0;
}
 80008e0:	2000      	movs	r0, #0
 80008e2:	b002      	add	sp, #8
 80008e4:	bd10      	pop	{r4, pc}

080008e6 <led_signal_type_selector>:


uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
	led_signal->type = type;
 80008e6:	7241      	strb	r1, [r0, #9]
	return 0;
}
 80008e8:	2000      	movs	r0, #0
 80008ea:	4770      	bx	lr

080008ec <led_signal_start>:
}


uint8_t led_signal_start(led_signal_t *led_signal)
{
	led_signal->control = LED_SIGNAL_CTRL_START;
 80008ec:	2300      	movs	r3, #0
 80008ee:	7203      	strb	r3, [r0, #8]

	return 0;
}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	7203      	strb	r3, [r0, #8]

	return 0;
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	4770      	bx	lr

080008fc <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 80008fc:	b500      	push	{lr}
 80008fe:	b085      	sub	sp, #20
 8000900:	ab01      	add	r3, sp, #4
 8000902:	9001      	str	r0, [sp, #4]
 8000904:	9102      	str	r1, [sp, #8]
 8000906:	9203      	str	r2, [sp, #12]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000908:	8899      	ldrh	r1, [r3, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	f002 f94d 	bl	8002baa <HAL_GPIO_WritePin>
	return 0;
}
 8000910:	2000      	movs	r0, #0
 8000912:	b005      	add	sp, #20
 8000914:	bd00      	pop	{pc}

08000916 <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000916:	b500      	push	{lr}
 8000918:	b085      	sub	sp, #20
 800091a:	ab01      	add	r3, sp, #4
 800091c:	9001      	str	r0, [sp, #4]
 800091e:	9102      	str	r1, [sp, #8]
 8000920:	9203      	str	r2, [sp, #12]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000922:	8899      	ldrh	r1, [r3, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	f002 f940 	bl	8002baa <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
}
 800092a:	2000      	movs	r0, #0
 800092c:	b005      	add	sp, #20
 800092e:	bd00      	pop	{pc}

08000930 <led_signal_solid_fsm>:
{
 8000930:	b510      	push	{r4, lr}
 8000932:	0004      	movs	r4, r0
	led_signal_fsm_state_t state = led_signal->state;
 8000934:	7a83      	ldrb	r3, [r0, #10]
	led_signal_ctrl_t control = led_signal->control;
 8000936:	7a02      	ldrb	r2, [r0, #8]
	switch(state)
 8000938:	2b02      	cmp	r3, #2
 800093a:	d01a      	beq.n	8000972 <led_signal_solid_fsm+0x42>
 800093c:	d80c      	bhi.n	8000958 <led_signal_solid_fsm+0x28>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d013      	beq.n	800096a <led_signal_solid_fsm+0x3a>
 8000942:	2b01      	cmp	r3, #1
 8000944:	d119      	bne.n	800097a <led_signal_solid_fsm+0x4a>
			led_signal_turn_on(*led_signal);
 8000946:	6800      	ldr	r0, [r0, #0]
 8000948:	6861      	ldr	r1, [r4, #4]
 800094a:	68a2      	ldr	r2, [r4, #8]
 800094c:	f7ff ffd6 	bl	80008fc <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000950:	2302      	movs	r3, #2
	led_signal->state = state;
 8000952:	72a3      	strb	r3, [r4, #10]
}
 8000954:	2000      	movs	r0, #0
 8000956:	bd10      	pop	{r4, pc}
	switch(state)
 8000958:	2b04      	cmp	r3, #4
 800095a:	d10e      	bne.n	800097a <led_signal_solid_fsm+0x4a>
			led_signal_turn_off(*led_signal);
 800095c:	6800      	ldr	r0, [r0, #0]
 800095e:	6861      	ldr	r1, [r4, #4]
 8000960:	68a2      	ldr	r2, [r4, #8]
 8000962:	f7ff ffd8 	bl	8000916 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000966:	2300      	movs	r3, #0
			break;
 8000968:	e7f3      	b.n	8000952 <led_signal_solid_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_START)
 800096a:	2a00      	cmp	r2, #0
 800096c:	d1f1      	bne.n	8000952 <led_signal_solid_fsm+0x22>
				state = LED_SIGNAL_STATE_ON;
 800096e:	2301      	movs	r3, #1
 8000970:	e7ef      	b.n	8000952 <led_signal_solid_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_STOP)
 8000972:	2a01      	cmp	r2, #1
 8000974:	d1ed      	bne.n	8000952 <led_signal_solid_fsm+0x22>
				state = LED_SIGNAL_STATE_END;
 8000976:	2304      	movs	r3, #4
 8000978:	e7eb      	b.n	8000952 <led_signal_solid_fsm+0x22>
			led_signal_turn_off(*led_signal);
 800097a:	6820      	ldr	r0, [r4, #0]
 800097c:	6861      	ldr	r1, [r4, #4]
 800097e:	68a2      	ldr	r2, [r4, #8]
 8000980:	f7ff ffc9 	bl	8000916 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000984:	2300      	movs	r3, #0
			break;
 8000986:	e7e4      	b.n	8000952 <led_signal_solid_fsm+0x22>

08000988 <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000988:	b500      	push	{lr}
 800098a:	b085      	sub	sp, #20
 800098c:	ab01      	add	r3, sp, #4
 800098e:	9001      	str	r0, [sp, #4]
 8000990:	9102      	str	r1, [sp, #8]
 8000992:	9203      	str	r2, [sp, #12]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000994:	8899      	ldrh	r1, [r3, #4]
 8000996:	f002 f90e 	bl	8002bb6 <HAL_GPIO_TogglePin>
	return 0;
}
 800099a:	2000      	movs	r0, #0
 800099c:	b005      	add	sp, #20
 800099e:	bd00      	pop	{pc}

080009a0 <led_signal_togle_fsm>:
{
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	0004      	movs	r4, r0
	led_signal_fsm_state_t state = led_signal->state;
 80009a4:	7a85      	ldrb	r5, [r0, #10]
	led_signal_ctrl_t control = led_signal->control;
 80009a6:	7a06      	ldrb	r6, [r0, #8]
	switch(state)
 80009a8:	2d03      	cmp	r5, #3
 80009aa:	d01a      	beq.n	80009e2 <led_signal_togle_fsm+0x42>
 80009ac:	d80c      	bhi.n	80009c8 <led_signal_togle_fsm+0x28>
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d013      	beq.n	80009da <led_signal_togle_fsm+0x3a>
 80009b2:	2d01      	cmp	r5, #1
 80009b4:	d11e      	bne.n	80009f4 <led_signal_togle_fsm+0x54>
			led_signal_turn_on(*led_signal);
 80009b6:	6800      	ldr	r0, [r0, #0]
 80009b8:	6861      	ldr	r1, [r4, #4]
 80009ba:	68a2      	ldr	r2, [r4, #8]
 80009bc:	f7ff ff9e 	bl	80008fc <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 80009c0:	2503      	movs	r5, #3
	led_signal->state = state;
 80009c2:	72a5      	strb	r5, [r4, #10]
}
 80009c4:	2000      	movs	r0, #0
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
	switch(state)
 80009c8:	2d04      	cmp	r5, #4
 80009ca:	d113      	bne.n	80009f4 <led_signal_togle_fsm+0x54>
			led_signal_turn_off(*led_signal);
 80009cc:	6800      	ldr	r0, [r0, #0]
 80009ce:	6861      	ldr	r1, [r4, #4]
 80009d0:	68a2      	ldr	r2, [r4, #8]
 80009d2:	f7ff ffa0 	bl	8000916 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 80009d6:	2500      	movs	r5, #0
			break;
 80009d8:	e7f3      	b.n	80009c2 <led_signal_togle_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_START)
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d1f1      	bne.n	80009c2 <led_signal_togle_fsm+0x22>
				state = LED_SIGNAL_STATE_ON;
 80009de:	2501      	movs	r5, #1
 80009e0:	e7ef      	b.n	80009c2 <led_signal_togle_fsm+0x22>
			led_signal_toggle(*led_signal);
 80009e2:	6800      	ldr	r0, [r0, #0]
 80009e4:	6861      	ldr	r1, [r4, #4]
 80009e6:	68a2      	ldr	r2, [r4, #8]
 80009e8:	f7ff ffce 	bl	8000988 <led_signal_toggle>
			if(control == LED_SIGNAL_CTRL_STOP)
 80009ec:	2e01      	cmp	r6, #1
 80009ee:	d1e8      	bne.n	80009c2 <led_signal_togle_fsm+0x22>
				state = LED_SIGNAL_STATE_END;
 80009f0:	2504      	movs	r5, #4
 80009f2:	e7e6      	b.n	80009c2 <led_signal_togle_fsm+0x22>
			led_signal_turn_off(*led_signal);
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	6861      	ldr	r1, [r4, #4]
 80009f8:	68a2      	ldr	r2, [r4, #8]
 80009fa:	f7ff ff8c 	bl	8000916 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 80009fe:	2500      	movs	r5, #0
			break;
 8000a00:	e7df      	b.n	80009c2 <led_signal_togle_fsm+0x22>

08000a02 <led_signal_fsm>:
{
 8000a02:	b510      	push	{r4, lr}
 8000a04:	0004      	movs	r4, r0
	led_signal_type_t type = led_signal->type;
 8000a06:	7a43      	ldrb	r3, [r0, #9]
	switch(type)
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d00d      	beq.n	8000a28 <led_signal_fsm+0x26>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d00e      	beq.n	8000a2e <led_signal_fsm+0x2c>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <led_signal_fsm+0x16>
}
 8000a14:	2000      	movs	r0, #0
 8000a16:	bd10      	pop	{r4, pc}
			led_signal_turn_off(*led_signal);
 8000a18:	6800      	ldr	r0, [r0, #0]
 8000a1a:	6861      	ldr	r1, [r4, #4]
 8000a1c:	68a2      	ldr	r2, [r4, #8]
 8000a1e:	f7ff ff7a 	bl	8000916 <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	72a3      	strb	r3, [r4, #10]
			break;
 8000a26:	e7f5      	b.n	8000a14 <led_signal_fsm+0x12>
			led_signal_solid_fsm(led_signal);
 8000a28:	f7ff ff82 	bl	8000930 <led_signal_solid_fsm>
			break;
 8000a2c:	e7f2      	b.n	8000a14 <led_signal_fsm+0x12>
			led_signal_togle_fsm(led_signal);
 8000a2e:	f7ff ffb7 	bl	80009a0 <led_signal_togle_fsm>
			break;
 8000a32:	e7ef      	b.n	8000a14 <led_signal_fsm+0x12>

08000a34 <pyd1598_direct_link_setup>:

}

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000a34:	b530      	push	{r4, r5, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	466b      	mov	r3, sp
 8000a3a:	9100      	str	r1, [sp, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 8000a3e:	0002      	movs	r2, r0
 8000a40:	3224      	adds	r2, #36	@ 0x24
 8000a42:	cb12      	ldmia	r3!, {r1, r4}
 8000a44:	c212      	stmia	r2!, {r1, r4}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	7043      	strb	r3, [r0, #1]
	direct_link->config.count_mode = 0;
 8000a4a:	71c3      	strb	r3, [r0, #7]
	direct_link->config.hpf_cutoff = 0;
 8000a4c:	7183      	strb	r3, [r0, #6]
	direct_link->config.op_mode = 0;
 8000a4e:	7103      	strb	r3, [r0, #4]
	direct_link->config.pulse_counter = 0;
 8000a50:	7083      	strb	r3, [r0, #2]
	direct_link->config.signal_source = 0;
 8000a52:	7143      	strb	r3, [r0, #5]
	direct_link->config.threshold = 0;
 8000a54:	7003      	strb	r3, [r0, #0]
	direct_link->config.window_time = 0;
 8000a56:	70c3      	strb	r3, [r0, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 8000a58:	7383      	strb	r3, [r0, #14]
	direct_link->source_value.pir_bpf = 0;
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	8103      	strh	r3, [r0, #8]
	direct_link->source_value.pir_lpf = 0;
 8000a5e:	8143      	strh	r3, [r0, #10]
	direct_link->source_value.temperature = 0;
 8000a60:	8183      	strh	r3, [r0, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 8000a62:	7702      	strb	r2, [r0, #28]
	direct_link->datagram_bufffer = 0;
 8000a64:	2400      	movs	r4, #0
 8000a66:	2500      	movs	r5, #0
 8000a68:	6104      	str	r4, [r0, #16]
 8000a6a:	6145      	str	r5, [r0, #20]
	direct_link->start_fsm = 0;
 8000a6c:	3321      	adds	r3, #33	@ 0x21
 8000a6e:	54c2      	strb	r2, [r0, r3]
	direct_link->time_update_idx = 0;
 8000a70:	3301      	adds	r3, #1
 8000a72:	54c2      	strb	r2, [r0, r3]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 8000a74:	b003      	add	sp, #12
 8000a76:	bd30      	pop	{r4, r5, pc}

08000a78 <pyd1598_request_write>:

/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
	sensor->serin.start_fsm = true;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	7543      	strb	r3, [r0, #21]
}
 8000a7c:	4770      	bx	lr

08000a7e <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8000a7e:	b084      	sub	sp, #16
 8000a80:	9000      	str	r0, [sp, #0]
 8000a82:	9101      	str	r1, [sp, #4]
 8000a84:	9202      	str	r2, [sp, #8]
 8000a86:	9303      	str	r3, [sp, #12]
	*motion_isr_status = sensor.motion_sensed;
 8000a88:	466a      	mov	r2, sp
 8000a8a:	2358      	movs	r3, #88	@ 0x58
 8000a8c:	5cd3      	ldrb	r3, [r2, r3]
 8000a8e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8000a90:	7013      	strb	r3, [r2, #0]
	return 0;
}
 8000a92:	2000      	movs	r0, #0
 8000a94:	b004      	add	sp, #16
 8000a96:	4770      	bx	lr

08000a98 <pyd1598_read_wakeup_signal>:
//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 8000a98:	2343      	movs	r3, #67	@ 0x43
 8000a9a:	5cc3      	ldrb	r3, [r0, r3]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d001      	beq.n	8000aa4 <pyd1598_read_wakeup_signal+0xc>
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
	}

	return 0;
}
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	4770      	bx	lr
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8000aa4:	3341      	adds	r3, #65	@ 0x41
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	54c2      	strb	r2, [r0, r3]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 8000aaa:	3b41      	subs	r3, #65	@ 0x41
 8000aac:	700b      	strb	r3, [r1, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 8000aae:	3258      	adds	r2, #88	@ 0x58
 8000ab0:	5483      	strb	r3, [r0, r2]
 8000ab2:	e7f5      	b.n	8000aa0 <pyd1598_read_wakeup_signal+0x8>

08000ab4 <pyd1598_serin_add_to_datagram>:
	return status;
}

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 8000ab4:	b510      	push	{r4, lr}
	uint32_t old_config = 0;
	uint32_t new_config = 0;

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8000ab6:	680c      	ldr	r4, [r1, #0]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8000ab8:	4022      	ands	r2, r4

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 8000aba:	4098      	lsls	r0, r3

	//Adding data to the datagram copy
	new_config |= old_config;
 8000abc:	4310      	orrs	r0, r2

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8000abe:	6008      	str	r0, [r1, #0]

	return 0;
}
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	bd10      	pop	{r4, pc}

08000ac4 <pyd1598_serin_add_threshold>:
{
 8000ac4:	b510      	push	{r4, lr}
	serin->config.threshold = new_threshold;
 8000ac6:	7008      	strb	r0, [r1, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 8000ac8:	3108      	adds	r1, #8
 8000aca:	2311      	movs	r3, #17
 8000acc:	4a01      	ldr	r2, [pc, #4]	@ (8000ad4 <pyd1598_serin_add_threshold+0x10>)
 8000ace:	f7ff fff1 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000ad2:	bd10      	pop	{r4, pc}
 8000ad4:	0001ffff 	.word	0x0001ffff

08000ad8 <pyd1598_serin_add_blind_time>:
{
 8000ad8:	b510      	push	{r4, lr}
	new_blind_time &= 0x0F;
 8000ada:	230f      	movs	r3, #15
 8000adc:	4018      	ands	r0, r3
	serin->config.blind_time = new_blind_time;
 8000ade:	7048      	strb	r0, [r1, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 8000ae0:	3108      	adds	r1, #8
 8000ae2:	3b02      	subs	r3, #2
 8000ae4:	4a01      	ldr	r2, [pc, #4]	@ (8000aec <pyd1598_serin_add_blind_time+0x14>)
 8000ae6:	f7ff ffe5 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000aea:	bd10      	pop	{r4, pc}
 8000aec:	01fe1fff 	.word	0x01fe1fff

08000af0 <pyd1598_serin_add_pulse_counter>:
{
 8000af0:	b510      	push	{r4, lr}
	pulse_counter &= 0x03;
 8000af2:	2303      	movs	r3, #3
 8000af4:	4018      	ands	r0, r3
	serin->config.pulse_counter = pulse_counter;
 8000af6:	7088      	strb	r0, [r1, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 8000af8:	3108      	adds	r1, #8
 8000afa:	3308      	adds	r3, #8
 8000afc:	4a01      	ldr	r2, [pc, #4]	@ (8000b04 <pyd1598_serin_add_pulse_counter+0x14>)
 8000afe:	f7ff ffd9 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b02:	bd10      	pop	{r4, pc}
 8000b04:	01ffe7ff 	.word	0x01ffe7ff

08000b08 <pyd1598_serin_add_window_time>:
{
 8000b08:	b510      	push	{r4, lr}
	window_time &= 0x03;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	4018      	ands	r0, r3
	serin->config.window_time = window_time;
 8000b0e:	70c8      	strb	r0, [r1, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8000b10:	3108      	adds	r1, #8
 8000b12:	3306      	adds	r3, #6
 8000b14:	4a01      	ldr	r2, [pc, #4]	@ (8000b1c <pyd1598_serin_add_window_time+0x14>)
 8000b16:	f7ff ffcd 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b1a:	bd10      	pop	{r4, pc}
 8000b1c:	01fff9ff 	.word	0x01fff9ff

08000b20 <pyd1598_serin_add_operation_mode>:
{
 8000b20:	b510      	push	{r4, lr}
	serin->config.op_mode = new_op_mode;
 8000b22:	7108      	strb	r0, [r1, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 8000b24:	3108      	adds	r1, #8
 8000b26:	2307      	movs	r3, #7
 8000b28:	4a01      	ldr	r2, [pc, #4]	@ (8000b30 <pyd1598_serin_add_operation_mode+0x10>)
 8000b2a:	f7ff ffc3 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b2e:	bd10      	pop	{r4, pc}
 8000b30:	01fffe7f 	.word	0x01fffe7f

08000b34 <pyd1598_serin_add_signal_source>:
{
 8000b34:	b510      	push	{r4, lr}
	signal_source &= 0x03;
 8000b36:	2303      	movs	r3, #3
 8000b38:	4018      	ands	r0, r3
	serin->config.signal_source = signal_source;
 8000b3a:	7148      	strb	r0, [r1, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 8000b3c:	3108      	adds	r1, #8
 8000b3e:	3302      	adds	r3, #2
 8000b40:	4a01      	ldr	r2, [pc, #4]	@ (8000b48 <pyd1598_serin_add_signal_source+0x14>)
 8000b42:	f7ff ffb7 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b46:	bd10      	pop	{r4, pc}
 8000b48:	01ffff9f 	.word	0x01ffff9f

08000b4c <pyd1598_serin_add_hpf_cutoff>:
{
 8000b4c:	b510      	push	{r4, lr}
	new_hpf_cutoff &= 0x03;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	4018      	ands	r0, r3
	serin->config.hpf_cutoff = new_hpf_cutoff;
 8000b52:	7188      	strb	r0, [r1, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8000b54:	3108      	adds	r1, #8
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4a01      	ldr	r2, [pc, #4]	@ (8000b60 <pyd1598_serin_add_hpf_cutoff+0x14>)
 8000b5a:	f7ff ffab 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	01fffffb 	.word	0x01fffffb

08000b64 <pyd1598_serin_add_count_mode>:
{
 8000b64:	b510      	push	{r4, lr}
	new_count_mode &= 0x03;
 8000b66:	2303      	movs	r3, #3
 8000b68:	4018      	ands	r0, r3
	serin->config.count_mode = new_count_mode;
 8000b6a:	71c8      	strb	r0, [r1, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 8000b6c:	3108      	adds	r1, #8
 8000b6e:	2300      	movs	r3, #0
 8000b70:	4a01      	ldr	r2, [pc, #4]	@ (8000b78 <pyd1598_serin_add_count_mode+0x14>)
 8000b72:	f7ff ff9f 	bl	8000ab4 <pyd1598_serin_add_to_datagram>
}
 8000b76:	bd10      	pop	{r4, pc}
 8000b78:	01fffffd 	.word	0x01fffffd

08000b7c <pyd1598_serin_add_all_conf>:
{
 8000b7c:	b510      	push	{r4, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	9000      	str	r0, [sp, #0]
 8000b82:	9101      	str	r1, [sp, #4]
 8000b84:	0014      	movs	r4, r2
	pyd1598_serin_add_threshold(config.threshold, serin);
 8000b86:	466b      	mov	r3, sp
 8000b88:	7818      	ldrb	r0, [r3, #0]
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	f7ff ff9a 	bl	8000ac4 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 8000b90:	466b      	mov	r3, sp
 8000b92:	7858      	ldrb	r0, [r3, #1]
 8000b94:	0021      	movs	r1, r4
 8000b96:	f7ff ff9f 	bl	8000ad8 <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 8000b9a:	466b      	mov	r3, sp
 8000b9c:	7898      	ldrb	r0, [r3, #2]
 8000b9e:	0021      	movs	r1, r4
 8000ba0:	f7ff ffa6 	bl	8000af0 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8000ba4:	466b      	mov	r3, sp
 8000ba6:	78d8      	ldrb	r0, [r3, #3]
 8000ba8:	0021      	movs	r1, r4
 8000baa:	f7ff ffad 	bl	8000b08 <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8000bae:	466b      	mov	r3, sp
 8000bb0:	7918      	ldrb	r0, [r3, #4]
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	f7ff ffb4 	bl	8000b20 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8000bb8:	466b      	mov	r3, sp
 8000bba:	7958      	ldrb	r0, [r3, #5]
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	f7ff ffb9 	bl	8000b34 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8000bc2:	466b      	mov	r3, sp
 8000bc4:	7998      	ldrb	r0, [r3, #6]
 8000bc6:	0021      	movs	r1, r4
 8000bc8:	f7ff ffc0 	bl	8000b4c <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8000bcc:	466b      	mov	r3, sp
 8000bce:	79d8      	ldrb	r0, [r3, #7]
 8000bd0:	0021      	movs	r1, r4
 8000bd2:	f7ff ffc7 	bl	8000b64 <pyd1598_serin_add_count_mode>
}
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd10      	pop	{r4, pc}

08000bdc <pyd1598_serin_setup>:
{
 8000bdc:	b082      	sub	sp, #8
 8000bde:	b530      	push	{r4, r5, lr}
 8000be0:	b083      	sub	sp, #12
 8000be2:	0004      	movs	r4, r0
 8000be4:	4668      	mov	r0, sp
 8000be6:	9100      	str	r1, [sp, #0]
 8000be8:	6042      	str	r2, [r0, #4]
 8000bea:	ad07      	add	r5, sp, #28
 8000bec:	9307      	str	r3, [sp, #28]
	serin->config = initial_config;
 8000bee:	0023      	movs	r3, r4
 8000bf0:	c806      	ldmia	r0!, {r1, r2}
 8000bf2:	c306      	stmia	r3!, {r1, r2}
	pyd1598_serin_add_all_conf(serin->config, serin);
 8000bf4:	0022      	movs	r2, r4
 8000bf6:	6820      	ldr	r0, [r4, #0]
 8000bf8:	6861      	ldr	r1, [r4, #4]
 8000bfa:	f7ff ffbf 	bl	8000b7c <pyd1598_serin_add_all_conf>
	serin->hardware_inteface = hardware_inteface;
 8000bfe:	0023      	movs	r3, r4
 8000c00:	3318      	adds	r3, #24
 8000c02:	cd06      	ldmia	r5!, {r1, r2}
 8000c04:	c306      	stmia	r3!, {r1, r2}
	serin->data_idx = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	6123      	str	r3, [r4, #16]
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8000c0a:	2280      	movs	r2, #128	@ 0x80
 8000c0c:	0452      	lsls	r2, r2, #17
 8000c0e:	60e2      	str	r2, [r4, #12]
	serin->state = PYD1598_SERIN_IDLE;
 8000c10:	7523      	strb	r3, [r4, #20]
	serin->start_fsm = false;
 8000c12:	7563      	strb	r3, [r4, #21]
}
 8000c14:	b003      	add	sp, #12
 8000c16:	bc30      	pop	{r4, r5}
 8000c18:	bc08      	pop	{r3}
 8000c1a:	b002      	add	sp, #8
 8000c1c:	4718      	bx	r3

08000c1e <pyd1598_setup>:
{
 8000c1e:	b082      	sub	sp, #8
 8000c20:	b510      	push	{r4, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	0004      	movs	r4, r0
 8000c26:	9102      	str	r1, [sp, #8]
 8000c28:	9203      	str	r2, [sp, #12]
 8000c2a:	9307      	str	r3, [sp, #28]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8000c2c:	9b08      	ldr	r3, [sp, #32]
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	9b07      	ldr	r3, [sp, #28]
 8000c32:	f7ff ffd3 	bl	8000bdc <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 8000c36:	0020      	movs	r0, r4
 8000c38:	3020      	adds	r0, #32
 8000c3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000c3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000c3e:	f7ff fef9 	bl	8000a34 <pyd1598_direct_link_setup>
	sensor->current_config.blind_time = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	2251      	movs	r2, #81	@ 0x51
 8000c46:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.count_mode = 0;
 8000c48:	3206      	adds	r2, #6
 8000c4a:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.hpf_cutoff = 0;
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.op_mode = 0;
 8000c50:	3a02      	subs	r2, #2
 8000c52:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.pulse_counter = 0;
 8000c54:	3a02      	subs	r2, #2
 8000c56:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.signal_source = 0;
 8000c58:	3203      	adds	r2, #3
 8000c5a:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.threshold = 0;
 8000c5c:	3a05      	subs	r2, #5
 8000c5e:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.window_time = 0;
 8000c60:	3203      	adds	r2, #3
 8000c62:	54a3      	strb	r3, [r4, r2]
}
 8000c64:	b004      	add	sp, #16
 8000c66:	bc10      	pop	{r4}
 8000c68:	bc08      	pop	{r3}
 8000c6a:	b002      	add	sp, #8
 8000c6c:	4718      	bx	r3

08000c6e <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8000c6e:	b530      	push	{r4, r5, lr}
 8000c70:	b083      	sub	sp, #12
 8000c72:	9000      	str	r0, [sp, #0]
 8000c74:	9101      	str	r1, [sp, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000c76:	0004      	movs	r4, r0
 8000c78:	466b      	mov	r3, sp
 8000c7a:	889d      	ldrh	r5, [r3, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0029      	movs	r1, r5
 8000c80:	f001 ff93 	bl	8002baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	0029      	movs	r1, r5
 8000c88:	0020      	movs	r0, r4
 8000c8a:	f001 ff8e 	bl	8002baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	0029      	movs	r1, r5
 8000c92:	0020      	movs	r0, r4
 8000c94:	f001 ff89 	bl	8002baa <HAL_GPIO_WritePin>
}
 8000c98:	b003      	add	sp, #12
 8000c9a:	bd30      	pop	{r4, r5, pc}

08000c9c <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8000c9c:	b530      	push	{r4, r5, lr}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	9000      	str	r0, [sp, #0]
 8000ca2:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000ca4:	0004      	movs	r4, r0
 8000ca6:	466b      	mov	r3, sp
 8000ca8:	889d      	ldrh	r5, [r3, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	0029      	movs	r1, r5
 8000cae:	f001 ff7c 	bl	8002baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	0029      	movs	r1, r5
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f001 ff77 	bl	8002baa <HAL_GPIO_WritePin>
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	bd30      	pop	{r4, r5, pc}

08000cc0 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8000cc0:	b500      	push	{lr}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	9000      	str	r0, [sp, #0]
 8000cc6:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8000cc8:	466b      	mov	r3, sp
 8000cca:	2206      	movs	r2, #6
 8000ccc:	569a      	ldrsb	r2, [r3, r2]
 8000cce:	8899      	ldrh	r1, [r3, #4]
 8000cd0:	f000 fe4c 	bl	800196c <HAL_DIRECT_LINK_conf_as_output>
}
 8000cd4:	b003      	add	sp, #12
 8000cd6:	bd00      	pop	{pc}

08000cd8 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8000cd8:	b500      	push	{lr}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	9000      	str	r0, [sp, #0]
 8000cde:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8000ce0:	466b      	mov	r3, sp
 8000ce2:	2206      	movs	r2, #6
 8000ce4:	569a      	ldrsb	r2, [r3, r2]
 8000ce6:	8899      	ldrh	r1, [r3, #4]
 8000ce8:	f000 fe02 	bl	80018f0 <HAL_DIRECT_LINK_conf_as_input>
}
 8000cec:	b003      	add	sp, #12
 8000cee:	bd00      	pop	{pc}

08000cf0 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8000cf0:	b500      	push	{lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	9000      	str	r0, [sp, #0]
 8000cf6:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8000cf8:	466b      	mov	r3, sp
 8000cfa:	2206      	movs	r2, #6
 8000cfc:	569a      	ldrsb	r2, [r3, r2]
 8000cfe:	8899      	ldrh	r1, [r3, #4]
 8000d00:	f000 fe10 	bl	8001924 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8000d04:	b003      	add	sp, #12
 8000d06:	bd00      	pop	{pc}

08000d08 <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8000d08:	b530      	push	{r4, r5, lr}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	9000      	str	r0, [sp, #0]
 8000d0e:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000d10:	0004      	movs	r4, r0
 8000d12:	466b      	mov	r3, sp
 8000d14:	889d      	ldrh	r5, [r3, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	0029      	movs	r1, r5
 8000d1a:	f001 ff46 	bl	8002baa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	0029      	movs	r1, r5
 8000d22:	0020      	movs	r0, r4
 8000d24:	f001 ff41 	bl	8002baa <HAL_GPIO_WritePin>
}
 8000d28:	b003      	add	sp, #12
 8000d2a:	bd30      	pop	{r4, r5, pc}

08000d2c <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8000d2c:	b500      	push	{lr}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	9000      	str	r0, [sp, #0]
 8000d32:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000d34:	466b      	mov	r3, sp
 8000d36:	8899      	ldrh	r1, [r3, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f001 ff36 	bl	8002baa <HAL_GPIO_WritePin>
}
 8000d3e:	b003      	add	sp, #12
 8000d40:	bd00      	pop	{pc}
	...

08000d44 <pyd1598_serin_send_datagram_fsm>:
{
 8000d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d46:	46ce      	mov	lr, r9
 8000d48:	4647      	mov	r7, r8
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b087      	sub	sp, #28
 8000d4e:	0004      	movs	r4, r0
 8000d50:	9100      	str	r1, [sp, #0]
 8000d52:	9201      	str	r2, [sp, #4]
	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8000d54:	7d05      	ldrb	r5, [r0, #20]
	uint32_t data_idx = serin->data_idx;
 8000d56:	6907      	ldr	r7, [r0, #16]
	bool start_fsm = serin->start_fsm;
 8000d58:	7d43      	ldrb	r3, [r0, #21]
 8000d5a:	4698      	mov	r8, r3
	pyd1598_config_t config = serin->config;
 8000d5c:	ab04      	add	r3, sp, #16
 8000d5e:	0002      	movs	r2, r0
 8000d60:	ca41      	ldmia	r2!, {r0, r6}
 8000d62:	c341      	stmia	r3!, {r0, r6}
	uint32_t mask = serin->mask;
 8000d64:	68e6      	ldr	r6, [r4, #12]
	uint32_t conf_datagram = serin->conf_datagram;
 8000d66:	68a3      	ldr	r3, [r4, #8]
 8000d68:	469c      	mov	ip, r3
	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8000d6a:	aa02      	add	r2, sp, #8
 8000d6c:	0023      	movs	r3, r4
 8000d6e:	3318      	adds	r3, #24
 8000d70:	cb03      	ldmia	r3!, {r0, r1}
 8000d72:	c203      	stmia	r2!, {r0, r1}
	switch(state)
 8000d74:	2d05      	cmp	r5, #5
 8000d76:	d855      	bhi.n	8000e24 <pyd1598_serin_send_datagram_fsm+0xe0>
 8000d78:	00ab      	lsls	r3, r5, #2
 8000d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8000e30 <pyd1598_serin_send_datagram_fsm+0xec>)
 8000d7c:	58d3      	ldr	r3, [r2, r3]
 8000d7e:	469f      	mov	pc, r3
 8000d80:	2680      	movs	r6, #128	@ 0x80
 8000d82:	0476      	lsls	r6, r6, #17
 8000d84:	2700      	movs	r7, #0
 8000d86:	2502      	movs	r5, #2
	serin->state = state;
 8000d88:	7525      	strb	r5, [r4, #20]
	serin->data_idx = data_idx;
 8000d8a:	6127      	str	r7, [r4, #16]
	serin->start_fsm = false;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	7563      	strb	r3, [r4, #21]
	serin->mask = mask;
 8000d90:	60e6      	str	r6, [r4, #12]
	serin->start_fsm = start_fsm;
 8000d92:	4643      	mov	r3, r8
 8000d94:	7563      	strb	r3, [r4, #21]
}
 8000d96:	b007      	add	sp, #28
 8000d98:	bcc0      	pop	{r6, r7}
 8000d9a:	46b9      	mov	r9, r7
 8000d9c:	46b0      	mov	r8, r6
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(start_fsm == true)
 8000da0:	4643      	mov	r3, r8
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f0      	beq.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_output(data_link_pin);
 8000da6:	9800      	ldr	r0, [sp, #0]
 8000da8:	9901      	ldr	r1, [sp, #4]
 8000daa:	f7ff ff89 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000dae:	9800      	ldr	r0, [sp, #0]
 8000db0:	9901      	ldr	r1, [sp, #4]
 8000db2:	f7ff ffbb 	bl	8000d2c <pyd1598_direct_link_set_negative_edge>
				start_fsm = false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	4698      	mov	r8, r3
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 8000dba:	2501      	movs	r5, #1
 8000dbc:	e7e4      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
			if((conf_datagram & mask) == 0)
 8000dbe:	4663      	mov	r3, ip
 8000dc0:	4233      	tst	r3, r6
 8000dc2:	d107      	bne.n	8000dd4 <pyd1598_serin_send_datagram_fsm+0x90>
				pyd1598_serin_set_zero_pulse(output);
 8000dc4:	9802      	ldr	r0, [sp, #8]
 8000dc6:	9903      	ldr	r1, [sp, #12]
 8000dc8:	f7ff ff51 	bl	8000c6e <pyd1598_serin_set_zero_pulse>
			mask >>= 1;
 8000dcc:	0876      	lsrs	r6, r6, #1
			if(mask == 0)
 8000dce:	d02b      	beq.n	8000e28 <pyd1598_serin_send_datagram_fsm+0xe4>
				data_idx++;
 8000dd0:	3701      	adds	r7, #1
 8000dd2:	e7d9      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_serin_set_one_pulse(output);
 8000dd4:	9802      	ldr	r0, [sp, #8]
 8000dd6:	9903      	ldr	r1, [sp, #12]
 8000dd8:	f7ff ff60 	bl	8000c9c <pyd1598_serin_set_one_pulse>
 8000ddc:	e7f6      	b.n	8000dcc <pyd1598_serin_send_datagram_fsm+0x88>
			pyd1598_direct_link_set_as_output(data_link_pin);
 8000dde:	9800      	ldr	r0, [sp, #0]
 8000de0:	9901      	ldr	r1, [sp, #4]
 8000de2:	f7ff ff6d 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000de6:	9800      	ldr	r0, [sp, #0]
 8000de8:	9901      	ldr	r1, [sp, #4]
 8000dea:	f7ff ff9f 	bl	8000d2c <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 8000dee:	2504      	movs	r5, #4
			break;
 8000df0:	e7ca      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8000df2:	2f22      	cmp	r7, #34	@ 0x22
 8000df4:	d81a      	bhi.n	8000e2c <pyd1598_serin_send_datagram_fsm+0xe8>
				data_idx++;
 8000df6:	3701      	adds	r7, #1
 8000df8:	e7c6      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
			if(config.op_mode == PYD1598_FORCE_READOUT)
 8000dfa:	ab04      	add	r3, sp, #16
 8000dfc:	791d      	ldrb	r5, [r3, #4]
 8000dfe:	2d00      	cmp	r5, #0
 8000e00:	d005      	beq.n	8000e0e <pyd1598_serin_send_datagram_fsm+0xca>
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000e02:	3d01      	subs	r5, #1
 8000e04:	b2ed      	uxtb	r5, r5
 8000e06:	2d01      	cmp	r5, #1
 8000e08:	d906      	bls.n	8000e18 <pyd1598_serin_send_datagram_fsm+0xd4>
			state = PYD1598_SERIN_IDLE;
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	e7bc      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_input(data_link_pin);
 8000e0e:	9800      	ldr	r0, [sp, #0]
 8000e10:	9901      	ldr	r1, [sp, #4]
 8000e12:	f7ff ff61 	bl	8000cd8 <pyd1598_direct_link_set_as_input>
 8000e16:	e7b7      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8000e18:	9800      	ldr	r0, [sp, #0]
 8000e1a:	9901      	ldr	r1, [sp, #4]
 8000e1c:	f7ff ff68 	bl	8000cf0 <pyd1598_direct_link_set_as_interrupt_input>
			state = PYD1598_SERIN_IDLE;
 8000e20:	2500      	movs	r5, #0
 8000e22:	e7b1      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
			state = PYD1598_SERIN_IDLE;
 8000e24:	2500      	movs	r5, #0
 8000e26:	e7af      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				state = PYD1598_SERIN_SEND_DOWN;
 8000e28:	2503      	movs	r5, #3
 8000e2a:	e7ad      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
				state = PYD1598_SERIN_END_COM;
 8000e2c:	2505      	movs	r5, #5
 8000e2e:	e7ab      	b.n	8000d88 <pyd1598_serin_send_datagram_fsm+0x44>
 8000e30:	08003ce4 	.word	0x08003ce4

08000e34 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8000e34:	b510      	push	{r4, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	9000      	str	r0, [sp, #0]
 8000e3a:	9101      	str	r1, [sp, #4]
 8000e3c:	0014      	movs	r4, r2
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8000e3e:	466b      	mov	r3, sp
 8000e40:	8899      	ldrh	r1, [r3, #4]
 8000e42:	f001 feab 	bl	8002b9c <HAL_GPIO_ReadPin>

	if(pin_value == GPIO_PIN_SET)
 8000e46:	2801      	cmp	r0, #1
 8000e48:	d00b      	beq.n	8000e62 <pyd1598_direct_link_read_pin+0x2e>
	{
		*buffer  |= readout_mask;
	}
	else if(pin_value == GPIO_PIN_RESET)
 8000e4a:	2800      	cmp	r0, #0
 8000e4c:	d125      	bne.n	8000e9a <pyd1598_direct_link_read_pin+0x66>
	{
		*buffer  &= ~readout_mask;
 8000e4e:	6822      	ldr	r2, [r4, #0]
 8000e50:	6863      	ldr	r3, [r4, #4]
 8000e52:	4913      	ldr	r1, [pc, #76]	@ (8000ea0 <pyd1598_direct_link_read_pin+0x6c>)
 8000e54:	6808      	ldr	r0, [r1, #0]
 8000e56:	6849      	ldr	r1, [r1, #4]
 8000e58:	4382      	bics	r2, r0
 8000e5a:	6022      	str	r2, [r4, #0]
 8000e5c:	438b      	bics	r3, r1
 8000e5e:	6063      	str	r3, [r4, #4]
 8000e60:	e008      	b.n	8000e74 <pyd1598_direct_link_read_pin+0x40>
		*buffer  |= readout_mask;
 8000e62:	6820      	ldr	r0, [r4, #0]
 8000e64:	6861      	ldr	r1, [r4, #4]
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <pyd1598_direct_link_read_pin+0x6c>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4302      	orrs	r2, r0
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	430b      	orrs	r3, r1
 8000e70:	6022      	str	r2, [r4, #0]
 8000e72:	6063      	str	r3, [r4, #4]
	else
	{
		__NOP();
	}

	readout_mask = (readout_mask >> 1);
 8000e74:	490a      	ldr	r1, [pc, #40]	@ (8000ea0 <pyd1598_direct_link_read_pin+0x6c>)
 8000e76:	684a      	ldr	r2, [r1, #4]
 8000e78:	07d0      	lsls	r0, r2, #31
 8000e7a:	680b      	ldr	r3, [r1, #0]
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	4303      	orrs	r3, r0
 8000e80:	0852      	lsrs	r2, r2, #1
 8000e82:	600b      	str	r3, [r1, #0]
 8000e84:	604a      	str	r2, [r1, #4]

	if(readout_mask == ((uint64_t) 0))
 8000e86:	4313      	orrs	r3, r2
 8000e88:	d104      	bne.n	8000e94 <pyd1598_direct_link_read_pin+0x60>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8000e8a:	000b      	movs	r3, r1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	6018      	str	r0, [r3, #0]
 8000e92:	6059      	str	r1, [r3, #4]
	}
	return 0;

}
 8000e94:	2000      	movs	r0, #0
 8000e96:	b002      	add	sp, #8
 8000e98:	bd10      	pop	{r4, pc}
		__NOP();
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	e7ea      	b.n	8000e74 <pyd1598_direct_link_read_pin+0x40>
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	20000000 	.word	0x20000000

08000ea4 <pyd1598_dl_readout_fsm>:
{
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	46d6      	mov	lr, sl
 8000ea8:	464f      	mov	r7, r9
 8000eaa:	4646      	mov	r6, r8
 8000eac:	b5c0      	push	{r6, r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	0004      	movs	r4, r0
 8000eb2:	000d      	movs	r5, r1
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000eb4:	6902      	ldr	r2, [r0, #16]
 8000eb6:	6943      	ldr	r3, [r0, #20]
 8000eb8:	9200      	str	r2, [sp, #0]
 8000eba:	9301      	str	r3, [sp, #4]
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8000ebc:	7f43      	ldrb	r3, [r0, #29]
 8000ebe:	469a      	mov	sl, r3
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000ec0:	7fc1      	ldrb	r1, [r0, #31]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	5cc6      	ldrb	r6, [r0, r3]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8000ec6:	3302      	adds	r3, #2
 8000ec8:	5cc7      	ldrb	r7, [r0, r3]
	bool start_fsm = direct_link->start_fsm;
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	5cc3      	ldrb	r3, [r0, r3]
 8000ece:	4698      	mov	r8, r3
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8000ed0:	2323      	movs	r3, #35	@ 0x23
 8000ed2:	5cc3      	ldrb	r3, [r0, r3]
 8000ed4:	4699      	mov	r9, r3
	switch(readout_state)
 8000ed6:	2e04      	cmp	r6, #4
 8000ed8:	d900      	bls.n	8000edc <pyd1598_dl_readout_fsm+0x38>
 8000eda:	e0a5      	b.n	8001028 <pyd1598_dl_readout_fsm+0x184>
 8000edc:	00b3      	lsls	r3, r6, #2
 8000ede:	4a5e      	ldr	r2, [pc, #376]	@ (8001058 <pyd1598_dl_readout_fsm+0x1b4>)
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	469f      	mov	pc, r3
			if(start_fsm == true)
 8000ee4:	4643      	mov	r3, r8
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d100      	bne.n	8000eec <pyd1598_dl_readout_fsm+0x48>
 8000eea:	e0a0      	b.n	800102e <pyd1598_dl_readout_fsm+0x18a>
				if(op_mode == PYD1598_FORCE_READOUT)
 8000eec:	2d00      	cmp	r5, #0
 8000eee:	d008      	beq.n	8000f02 <pyd1598_dl_readout_fsm+0x5e>
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000ef0:	1e6b      	subs	r3, r5, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d911      	bls.n	8000f1c <pyd1598_dl_readout_fsm+0x78>
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000ef8:	0035      	movs	r5, r6
				start_fsm = false;
 8000efa:	2300      	movs	r3, #0
 8000efc:	4698      	mov	r8, r3
				readout_status = READOUT_BUSY;
 8000efe:	2601      	movs	r6, #1
 8000f00:	e041      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000f02:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000f04:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f06:	f7ff fedb 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000f0a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f0c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f0e:	f7ff fefb 	bl	8000d08 <pyd1598_direct_link_set_one_pulse>
				start_fsm = false;
 8000f12:	2300      	movs	r3, #0
 8000f14:	4698      	mov	r8, r3
					readout_state = PYD1598_READOUT_GET_MSG;
 8000f16:	3501      	adds	r5, #1
				readout_status = READOUT_BUSY;
 8000f18:	2601      	movs	r6, #1
 8000f1a:	e034      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000f1c:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000f1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f20:	f7ff fece 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000f24:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f26:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f28:	f7ff ff00 	bl	8000d2c <pyd1598_direct_link_set_negative_edge>
					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8000f2c:	2d01      	cmp	r5, #1
 8000f2e:	d100      	bne.n	8000f32 <pyd1598_dl_readout_fsm+0x8e>
 8000f30:	e080      	b.n	8001034 <pyd1598_dl_readout_fsm+0x190>
 8000f32:	4653      	mov	r3, sl
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d100      	bne.n	8000f3a <pyd1598_dl_readout_fsm+0x96>
 8000f38:	e081      	b.n	800103e <pyd1598_dl_readout_fsm+0x19a>
				start_fsm = false;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_GET_MSG;
 8000f3e:	2501      	movs	r5, #1
				readout_status = READOUT_BUSY;
 8000f40:	2601      	movs	r6, #1
 8000f42:	e020      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
			datagram_bufffer = 0;
 8000f44:	2200      	movs	r2, #0
 8000f46:	2300      	movs	r3, #0
 8000f48:	9200      	str	r2, [sp, #0]
 8000f4a:	9301      	str	r3, [sp, #4]
			for(idx = 0; idx < 40; idx++)
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	e016      	b.n	8000f7e <pyd1598_dl_readout_fsm+0xda>
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000f50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f52:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f54:	f7ff fed8 	bl	8000d08 <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000f58:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f5a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f5c:	f7ff febc 	bl	8000cd8 <pyd1598_direct_link_set_as_input>
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8000f60:	002b      	movs	r3, r5
 8000f62:	466a      	mov	r2, sp
 8000f64:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f66:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f68:	f7ff ff64 	bl	8000e34 <pyd1598_direct_link_read_pin>
				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000f6c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f6e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f70:	f7ff fedc 	bl	8000d2c <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000f74:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f76:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f78:	f7ff fea2 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	2d27      	cmp	r5, #39	@ 0x27
 8000f80:	d9e6      	bls.n	8000f50 <pyd1598_dl_readout_fsm+0xac>
			time_update_idx = 0;
 8000f82:	2700      	movs	r7, #0
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8000f84:	2503      	movs	r5, #3
	direct_link->readout_state = readout_state;
 8000f86:	2320      	movs	r3, #32
 8000f88:	54e5      	strb	r5, [r4, r3]
	direct_link->readout_status = readout_status;
 8000f8a:	77e6      	strb	r6, [r4, #31]
	direct_link->time_update_idx = time_update_idx;
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	54e7      	strb	r7, [r4, r3]
	direct_link->start_fsm = start_fsm;
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4642      	mov	r2, r8
 8000f94:	54e2      	strb	r2, [r4, r3]
	direct_link->datagram_bufffer = datagram_bufffer;
 8000f96:	9a00      	ldr	r2, [sp, #0]
 8000f98:	9b01      	ldr	r3, [sp, #4]
 8000f9a:	6122      	str	r2, [r4, #16]
 8000f9c:	6163      	str	r3, [r4, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 8000f9e:	2323      	movs	r3, #35	@ 0x23
 8000fa0:	464a      	mov	r2, r9
 8000fa2:	54e2      	strb	r2, [r4, r3]
}
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bce0      	pop	{r5, r6, r7}
 8000fa8:	46ba      	mov	sl, r7
 8000faa:	46b1      	mov	r9, r6
 8000fac:	46a8      	mov	r8, r5
 8000fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000fb0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000fb2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000fb4:	f7ff fe84 	bl	8000cc0 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000fb8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000fba:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000fbc:	f7ff feb6 	bl	8000d2c <pyd1598_direct_link_set_negative_edge>
			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000fc0:	1e6b      	subs	r3, r5, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d908      	bls.n	8000fda <pyd1598_dl_readout_fsm+0x136>
				readout_state = PYD1598_READOUT_UPDATE;
 8000fc8:	2602      	movs	r6, #2
				readout_status = READOUT_BUSY;
 8000fca:	2101      	movs	r1, #1
			time_update_idx++;
 8000fcc:	3701      	adds	r7, #1
 8000fce:	b2ff      	uxtb	r7, r7
			if(time_update_idx >= 11)
 8000fd0:	2f0a      	cmp	r7, #10
 8000fd2:	d839      	bhi.n	8001048 <pyd1598_dl_readout_fsm+0x1a4>
 8000fd4:	0035      	movs	r5, r6
 8000fd6:	000e      	movs	r6, r1
 8000fd8:	e7d5      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000fda:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000fdc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000fde:	f7ff fe87 	bl	8000cf0 <pyd1598_direct_link_set_as_interrupt_input>
				if(op_mode == PYD1598_WAKE_UP)
 8000fe2:	2d02      	cmp	r5, #2
 8000fe4:	d003      	beq.n	8000fee <pyd1598_dl_readout_fsm+0x14a>
				time_update_idx = 0;
 8000fe6:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_IDLE;
 8000fe8:	2600      	movs	r6, #0
				readout_status = READOUT_READY;
 8000fea:	2100      	movs	r1, #0
 8000fec:	e7ee      	b.n	8000fcc <pyd1598_dl_readout_fsm+0x128>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000fee:	46a9      	mov	r9, r5
				time_update_idx = 0;
 8000ff0:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_IDLE;
 8000ff2:	2600      	movs	r6, #0
				readout_status = READOUT_READY;
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	e7e9      	b.n	8000fcc <pyd1598_dl_readout_fsm+0x128>
			if(op_mode == PYD1598_FORCE_READOUT)
 8000ff8:	2d00      	cmp	r5, #0
 8000ffa:	d006      	beq.n	800100a <pyd1598_dl_readout_fsm+0x166>
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000ffc:	1e6b      	subs	r3, r5, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d908      	bls.n	8001016 <pyd1598_dl_readout_fsm+0x172>
			readout_state = PYD1598_READOUT_IDLE;
 8001004:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8001006:	2600      	movs	r6, #0
 8001008:	e7bd      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 800100a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800100c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800100e:	f7ff fe63 	bl	8000cd8 <pyd1598_direct_link_set_as_input>
			readout_status = READOUT_READY;
 8001012:	002e      	movs	r6, r5
 8001014:	e7b7      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8001016:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001018:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800101a:	f7ff fe69 	bl	8000cf0 <pyd1598_direct_link_set_as_interrupt_input>
				if(op_mode == PYD1598_WAKE_UP)
 800101e:	2d02      	cmp	r5, #2
 8001020:	d016      	beq.n	8001050 <pyd1598_dl_readout_fsm+0x1ac>
			readout_state = PYD1598_READOUT_IDLE;
 8001022:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8001024:	2600      	movs	r6, #0
 8001026:	e7ae      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
	switch(readout_state)
 8001028:	2500      	movs	r5, #0
 800102a:	002e      	movs	r6, r5
 800102c:	e7ab      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 800102e:	0035      	movs	r5, r6
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8001030:	000e      	movs	r6, r1
 8001032:	e7a8      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
				start_fsm = false;
 8001034:	2300      	movs	r3, #0
 8001036:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_GET_MSG;
 8001038:	2501      	movs	r5, #1
				readout_status = READOUT_BUSY;
 800103a:	2601      	movs	r6, #1
 800103c:	e7a3      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
 800103e:	4656      	mov	r6, sl
				start_fsm = false;
 8001040:	2300      	movs	r3, #0
 8001042:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_END_COM;
 8001044:	2504      	movs	r5, #4
 8001046:	e79e      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
				time_update_idx = 0;
 8001048:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_END_COM;
 800104a:	2504      	movs	r5, #4
				readout_status = READOUT_BUSY;
 800104c:	2601      	movs	r6, #1
 800104e:	e79a      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8001050:	46a9      	mov	r9, r5
			readout_state = PYD1598_READOUT_IDLE;
 8001052:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8001054:	2600      	movs	r6, #0
 8001056:	e796      	b.n	8000f86 <pyd1598_dl_readout_fsm+0xe2>
 8001058:	08003cfc 	.word	0x08003cfc

0800105c <relay_ask_off_pulse_fsm>:

uint8_t relay_ask_off_pulse_fsm(relay_t *relay)
{
	uint8_t status = 0;

	if(relay->fsm_run_off == RELAY_RUN_FALSE)
 800105c:	2322      	movs	r3, #34	@ 0x22
 800105e:	5cc3      	ldrb	r3, [r0, r3]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d001      	beq.n	8001068 <relay_ask_off_pulse_fsm+0xc>
		relay->fsm_state = RELAY_STATE_IDLE;
		status = 0;
	}

	return status;
}
 8001064:	2000      	movs	r0, #0
 8001066:	4770      	bx	lr
		relay->fsm_run_on = RELAY_RUN_FALSE;
 8001068:	3320      	adds	r3, #32
 800106a:	2201      	movs	r2, #1
 800106c:	54c2      	strb	r2, [r0, r3]
		relay->fsm_run_off = RELAY_RUN_TRUE;
 800106e:	2300      	movs	r3, #0
 8001070:	3221      	adds	r2, #33	@ 0x21
 8001072:	5483      	strb	r3, [r0, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8001074:	3201      	adds	r2, #1
 8001076:	5483      	strb	r3, [r0, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 8001078:	3a03      	subs	r2, #3
 800107a:	5483      	strb	r3, [r0, r2]
		status = 0;
 800107c:	e7f2      	b.n	8001064 <relay_ask_off_pulse_fsm+0x8>

0800107e <relay_ask_on_pulse_fsm>:
{
	uint8_t status = 0;


	//TODO: (high) Test this change (conditional) intensively
	if(relay->fsm_run_on == RELAY_RUN_FALSE)
 800107e:	2321      	movs	r3, #33	@ 0x21
 8001080:	5cc3      	ldrb	r3, [r0, r3]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d001      	beq.n	800108a <relay_ask_on_pulse_fsm+0xc>
		relay->fsm_run_off = RELAY_RUN_FALSE;
		relay->fsm_init = RELAY_INIT_TRUE;
		relay->fsm_state = RELAY_STATE_IDLE;
	}
	return status;
}
 8001086:	2000      	movs	r0, #0
 8001088:	4770      	bx	lr
		relay->fsm_run_on = RELAY_RUN_TRUE;
 800108a:	2300      	movs	r3, #0
 800108c:	2221      	movs	r2, #33	@ 0x21
 800108e:	5483      	strb	r3, [r0, r2]
		relay->fsm_run_off = RELAY_RUN_FALSE;
 8001090:	3201      	adds	r2, #1
 8001092:	2101      	movs	r1, #1
 8001094:	5481      	strb	r1, [r0, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8001096:	3201      	adds	r2, #1
 8001098:	5483      	strb	r3, [r0, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 800109a:	3a03      	subs	r2, #3
 800109c:	5483      	strb	r3, [r0, r2]
 800109e:	e7f2      	b.n	8001086 <relay_ask_on_pulse_fsm+0x8>

080010a0 <relay_check_init_fsm>:
uint8_t relay_check_init_fsm(relay_t relay, relay_fsm_init_t *init)
{
 80010a0:	b084      	sub	sp, #16
 80010a2:	9000      	str	r0, [sp, #0]
 80010a4:	9101      	str	r1, [sp, #4]
 80010a6:	9202      	str	r2, [sp, #8]
 80010a8:	9303      	str	r3, [sp, #12]
	*init = relay.fsm_init;
 80010aa:	466a      	mov	r2, sp
 80010ac:	2323      	movs	r3, #35	@ 0x23
 80010ae:	5cd3      	ldrb	r3, [r2, r3]
 80010b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80010b2:	7013      	strb	r3, [r2, #0]
	return 0;
}
 80010b4:	2000      	movs	r0, #0
 80010b6:	b004      	add	sp, #16
 80010b8:	4770      	bx	lr

080010ba <relay_acknowledge_init_fsm>:

uint8_t relay_acknowledge_init_fsm(relay_t *relay)
{
	relay->fsm_init = RELAY_INIT_FALSE;
 80010ba:	2323      	movs	r3, #35	@ 0x23
 80010bc:	2201      	movs	r2, #1
 80010be:	54c2      	strb	r2, [r0, r3]
	return 0;
}
 80010c0:	2000      	movs	r0, #0
 80010c2:	4770      	bx	lr

080010c4 <relay_on>:

	return 0;
}

uint8_t relay_on(relay_t *relay)
{
 80010c4:	b510      	push	{r4, lr}
 80010c6:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 80010c8:	8901      	ldrh	r1, [r0, #8]
 80010ca:	6840      	ldr	r0, [r0, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f001 fd6c 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 80010d2:	8a21      	ldrh	r1, [r4, #16]
 80010d4:	68e0      	ldr	r0, [r4, #12]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f001 fd67 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_SET);

	relay->relay_status = RELAY_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	7023      	strb	r3, [r4, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_ON;
 80010e0:	7063      	strb	r3, [r4, #1]
	return 0;
}
 80010e2:	2000      	movs	r0, #0
 80010e4:	bd10      	pop	{r4, pc}

080010e6 <relay_off>:

uint8_t relay_off(relay_t *relay)
{
 80010e6:	b510      	push	{r4, lr}
 80010e8:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 80010ea:	8901      	ldrh	r1, [r0, #8]
 80010ec:	6840      	ldr	r0, [r0, #4]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f001 fd5b 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 80010f4:	8a21      	ldrh	r1, [r4, #16]
 80010f6:	68e0      	ldr	r0, [r4, #12]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f001 fd56 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->relay_status = RELAY_OFF;
 80010fe:	2300      	movs	r3, #0
 8001100:	7023      	strb	r3, [r4, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_OFF;
 8001102:	7063      	strb	r3, [r4, #1]
	return 0;
}
 8001104:	2000      	movs	r0, #0
 8001106:	bd10      	pop	{r4, pc}

08001108 <relay_deenergize>:


uint8_t relay_deenergize(relay_t *relay)
{
 8001108:	b510      	push	{r4, lr}
 800110a:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 800110c:	8901      	ldrh	r1, [r0, #8]
 800110e:	6840      	ldr	r0, [r0, #4]
 8001110:	2200      	movs	r2, #0
 8001112:	f001 fd4a 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001116:	8a21      	ldrh	r1, [r4, #16]
 8001118:	68e0      	ldr	r0, [r4, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f001 fd45 	bl	8002baa <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->power_status = RELAY_POWER_STATUS_DEENERGIZED;
 8001120:	2302      	movs	r3, #2
 8001122:	7063      	strb	r3, [r4, #1]
	return 0;
}
 8001124:	2000      	movs	r0, #0
 8001126:	bd10      	pop	{r4, pc}

08001128 <relay_setup>:
{
 8001128:	b082      	sub	sp, #8
 800112a:	b530      	push	{r4, r5, lr}
 800112c:	b083      	sub	sp, #12
 800112e:	0004      	movs	r4, r0
 8001130:	4668      	mov	r0, sp
 8001132:	9100      	str	r1, [sp, #0]
 8001134:	6042      	str	r2, [r0, #4]
 8001136:	aa07      	add	r2, sp, #28
 8001138:	9307      	str	r3, [sp, #28]
	relay->hardware_output_1 = hardware_output_1;
 800113a:	1d23      	adds	r3, r4, #4
 800113c:	c822      	ldmia	r0!, {r1, r5}
 800113e:	c322      	stmia	r3!, {r1, r5}
	relay->hardware_output_2 = hardware_output_2;
 8001140:	ca03      	ldmia	r2!, {r0, r1}
 8001142:	c303      	stmia	r3!, {r0, r1}
	relay_deenergize(relay);
 8001144:	0020      	movs	r0, r4
 8001146:	f7ff ffdf 	bl	8001108 <relay_deenergize>
	relay->relay_status = RELAY_OFF;
 800114a:	2300      	movs	r3, #0
 800114c:	7023      	strb	r3, [r4, #0]
	relay->fsm_run_on = RELAY_RUN_FALSE;
 800114e:	3301      	adds	r3, #1
 8001150:	2221      	movs	r2, #33	@ 0x21
 8001152:	54a3      	strb	r3, [r4, r2]
	relay->fsm_run_off = RELAY_RUN_FALSE;
 8001154:	3201      	adds	r2, #1
 8001156:	54a3      	strb	r3, [r4, r2]
	relay->fsm_pulse_counts = 1;
 8001158:	61a3      	str	r3, [r4, #24]
}
 800115a:	2000      	movs	r0, #0
 800115c:	b003      	add	sp, #12
 800115e:	bc30      	pop	{r4, r5}
 8001160:	bc08      	pop	{r3}
 8001162:	b002      	add	sp, #8
 8001164:	4718      	bx	r3

08001166 <relay_pulse_fsm>:
{
 8001166:	b510      	push	{r4, lr}
 8001168:	b084      	sub	sp, #16
 800116a:	0004      	movs	r4, r0
	volatile relay_fsm_state_t state = relay->fsm_state;
 800116c:	2320      	movs	r3, #32
 800116e:	5cc2      	ldrb	r2, [r0, r3]
 8001170:	3b11      	subs	r3, #17
 8001172:	446b      	add	r3, sp
 8001174:	701a      	strb	r2, [r3, #0]
	volatile uint32_t fsm_pulse_counts = relay->fsm_pulse_counts;
 8001176:	6982      	ldr	r2, [r0, #24]
 8001178:	9202      	str	r2, [sp, #8]
	volatile uint32_t fsm_pulse_idx = relay->fsm_pulse_idx;
 800117a:	69c2      	ldr	r2, [r0, #28]
 800117c:	9201      	str	r2, [sp, #4]
	volatile relay_fsm_status_t fsm_status = relay->fsm_status;
 800117e:	7d00      	ldrb	r0, [r0, #20]
 8001180:	466a      	mov	r2, sp
 8001182:	70d0      	strb	r0, [r2, #3]
	volatile relay_fsm_init_t fsm_init = relay->fsm_init;
 8001184:	2223      	movs	r2, #35	@ 0x23
 8001186:	5ca0      	ldrb	r0, [r4, r2]
 8001188:	466a      	mov	r2, sp
 800118a:	7090      	strb	r0, [r2, #2]
	switch(state)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	b2d3      	uxtb	r3, r2
 8001190:	2a02      	cmp	r2, #2
 8001192:	d02e      	beq.n	80011f2 <relay_pulse_fsm+0x8c>
 8001194:	2b03      	cmp	r3, #3
 8001196:	d03d      	beq.n	8001214 <relay_pulse_fsm+0xae>
 8001198:	2b00      	cmp	r3, #0
 800119a:	d011      	beq.n	80011c0 <relay_pulse_fsm+0x5a>
	relay->fsm_state = state;
 800119c:	230f      	movs	r3, #15
 800119e:	446b      	add	r3, sp
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	2320      	movs	r3, #32
 80011a4:	54e2      	strb	r2, [r4, r3]
	relay->fsm_init = fsm_init;
 80011a6:	466b      	mov	r3, sp
 80011a8:	789a      	ldrb	r2, [r3, #2]
 80011aa:	2323      	movs	r3, #35	@ 0x23
 80011ac:	54e2      	strb	r2, [r4, r3]
	relay->fsm_pulse_idx = fsm_pulse_idx;
 80011ae:	9b01      	ldr	r3, [sp, #4]
 80011b0:	61e3      	str	r3, [r4, #28]
	relay->fsm_status = fsm_status;
 80011b2:	466b      	mov	r3, sp
 80011b4:	3303      	adds	r3, #3
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	7523      	strb	r3, [r4, #20]
}
 80011ba:	2000      	movs	r0, #0
 80011bc:	b004      	add	sp, #16
 80011be:	bd10      	pop	{r4, pc}
			fsm_status = RELAY_STATE_STATUS_BUSY;
 80011c0:	466b      	mov	r3, sp
 80011c2:	2201      	movs	r2, #1
 80011c4:	70da      	strb	r2, [r3, #3]
			if(new_status == RELAY_ON)
 80011c6:	2901      	cmp	r1, #1
 80011c8:	d00a      	beq.n	80011e0 <relay_pulse_fsm+0x7a>
				relay_off(relay);
 80011ca:	0020      	movs	r0, r4
 80011cc:	f7ff ff8b 	bl	80010e6 <relay_off>
			if(fsm_pulse_counts == 0)
 80011d0:	9b02      	ldr	r3, [sp, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d108      	bne.n	80011e8 <relay_pulse_fsm+0x82>
				state = RELAY_STATE_DEENERGIZING;
 80011d6:	330f      	adds	r3, #15
 80011d8:	446b      	add	r3, sp
 80011da:	2203      	movs	r2, #3
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	e7dd      	b.n	800119c <relay_pulse_fsm+0x36>
				relay_on(relay);
 80011e0:	0020      	movs	r0, r4
 80011e2:	f7ff ff6f 	bl	80010c4 <relay_on>
 80011e6:	e7f3      	b.n	80011d0 <relay_pulse_fsm+0x6a>
				state = RELAY_STATE_WAIT;
 80011e8:	230f      	movs	r3, #15
 80011ea:	446b      	add	r3, sp
 80011ec:	2202      	movs	r2, #2
 80011ee:	701a      	strb	r2, [r3, #0]
 80011f0:	e7d4      	b.n	800119c <relay_pulse_fsm+0x36>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 80011f2:	466b      	mov	r3, sp
 80011f4:	2201      	movs	r2, #1
 80011f6:	70da      	strb	r2, [r3, #3]
			fsm_pulse_idx++;
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	3301      	adds	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
			if(fsm_pulse_idx > fsm_pulse_counts)
 80011fe:	9a01      	ldr	r2, [sp, #4]
 8001200:	9b02      	ldr	r3, [sp, #8]
 8001202:	429a      	cmp	r2, r3
 8001204:	d9ca      	bls.n	800119c <relay_pulse_fsm+0x36>
				state = RELAY_STATE_DEENERGIZING;
 8001206:	230f      	movs	r3, #15
 8001208:	446b      	add	r3, sp
 800120a:	2203      	movs	r2, #3
 800120c:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	e7c3      	b.n	800119c <relay_pulse_fsm+0x36>
			relay_deenergize(relay);
 8001214:	0020      	movs	r0, r4
 8001216:	f7ff ff77 	bl	8001108 <relay_deenergize>
			fsm_status = RELAY_STATE_STATUS_READY;
 800121a:	2300      	movs	r3, #0
 800121c:	466a      	mov	r2, sp
 800121e:	70d3      	strb	r3, [r2, #3]
			state = RELAY_STATE_IDLE;
 8001220:	220f      	movs	r2, #15
 8001222:	446a      	add	r2, sp
 8001224:	7013      	strb	r3, [r2, #0]
			break;
 8001226:	e7b9      	b.n	800119c <relay_pulse_fsm+0x36>

08001228 <relay_on_pulse_fsm>:
{
 8001228:	b510      	push	{r4, lr}
 800122a:	0004      	movs	r4, r0
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 800122c:	2321      	movs	r3, #33	@ 0x21
 800122e:	5cc3      	ldrb	r3, [r0, r3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d103      	bne.n	800123c <relay_on_pulse_fsm+0x14>
		(relay->fsm_run_off != RELAY_RUN_TRUE) )
 8001234:	3322      	adds	r3, #34	@ 0x22
 8001236:	5cc3      	ldrb	r3, [r0, r3]
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <relay_on_pulse_fsm+0x18>
}
 800123c:	2000      	movs	r0, #0
 800123e:	bd10      	pop	{r4, pc}
		relay_pulse_fsm(relay, RELAY_ON);
 8001240:	2101      	movs	r1, #1
 8001242:	f7ff ff90 	bl	8001166 <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 8001246:	7d23      	ldrb	r3, [r4, #20]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f7      	bne.n	800123c <relay_on_pulse_fsm+0x14>
			relay->fsm_run_on = RELAY_RUN_FALSE;
 800124c:	3321      	adds	r3, #33	@ 0x21
 800124e:	2201      	movs	r2, #1
 8001250:	54e2      	strb	r2, [r4, r3]
 8001252:	e7f3      	b.n	800123c <relay_on_pulse_fsm+0x14>

08001254 <relay_off_pulse_fsm>:
{
 8001254:	b510      	push	{r4, lr}
 8001256:	0004      	movs	r4, r0
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 8001258:	2322      	movs	r3, #34	@ 0x22
 800125a:	5cc3      	ldrb	r3, [r0, r3]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d103      	bne.n	8001268 <relay_off_pulse_fsm+0x14>
			(relay->fsm_run_on != RELAY_RUN_TRUE) )
 8001260:	3321      	adds	r3, #33	@ 0x21
 8001262:	5cc3      	ldrb	r3, [r0, r3]
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <relay_off_pulse_fsm+0x18>
}
 8001268:	2000      	movs	r0, #0
 800126a:	bd10      	pop	{r4, pc}
		relay_pulse_fsm(relay, RELAY_OFF);
 800126c:	2100      	movs	r1, #0
 800126e:	f7ff ff7a 	bl	8001166 <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 8001272:	7d23      	ldrb	r3, [r4, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1f7      	bne.n	8001268 <relay_off_pulse_fsm+0x14>
			relay->fsm_run_off = RELAY_RUN_FALSE;
 8001278:	3322      	adds	r3, #34	@ 0x22
 800127a:	2201      	movs	r2, #1
 800127c:	54e2      	strb	r2, [r4, r3]
 800127e:	e7f3      	b.n	8001268 <relay_off_pulse_fsm+0x14>

08001280 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	46c6      	mov	lr, r8
 8001284:	b500      	push	{lr}
 8001286:	0004      	movs	r4, r0
 8001288:	0017      	movs	r7, r2
 800128a:	001e      	movs	r6, r3
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;

	switch_mask <<= pin;
 800128c:	2301      	movs	r3, #1
 800128e:	408b      	lsls	r3, r1
 8001290:	4698      	mov	r8, r3

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001292:	6800      	ldr	r0, [r0, #0]
 8001294:	00cd      	lsls	r5, r1, #3
 8001296:	1941      	adds	r1, r0, r5
 8001298:	6808      	ldr	r0, [r1, #0]
 800129a:	8889      	ldrh	r1, [r1, #4]
 800129c:	f001 fc7e 	bl	8002b9c <HAL_GPIO_ReadPin>
							(switch_selector->switch_selector_gpio + pin)->pin);

	if(pin_value == GPIO_PIN_SET)
 80012a0:	2801      	cmp	r0, #1
 80012a2:	d011      	beq.n	80012c8 <switch_selector_read_bit+0x48>

		switch_selector->value |= switch_mask;
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	195b      	adds	r3, r3, r5
 80012a8:	2200      	movs	r2, #0
 80012aa:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 80012ac:	68a3      	ldr	r3, [r4, #8]
 80012ae:	4642      	mov	r2, r8
 80012b0:	4393      	bics	r3, r2
 80012b2:	60a3      	str	r3, [r4, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 80012b4:	6823      	ldr	r3, [r4, #0]
 80012b6:	195b      	adds	r3, r3, r5
 80012b8:	799b      	ldrb	r3, [r3, #6]
 80012ba:	703b      	strb	r3, [r7, #0]

	*value = switch_selector->value;
 80012bc:	68a3      	ldr	r3, [r4, #8]
 80012be:	6033      	str	r3, [r6, #0]

	return 0;
}
 80012c0:	2000      	movs	r0, #0
 80012c2:	bc80      	pop	{r7}
 80012c4:	46b8      	mov	r8, r7
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 80012c8:	6823      	ldr	r3, [r4, #0]
 80012ca:	195b      	adds	r3, r3, r5
 80012cc:	2201      	movs	r2, #1
 80012ce:	719a      	strb	r2, [r3, #6]
		switch_selector->value |= switch_mask;
 80012d0:	68a3      	ldr	r3, [r4, #8]
 80012d2:	4642      	mov	r2, r8
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60a3      	str	r3, [r4, #8]
 80012d8:	e7ec      	b.n	80012b4 <switch_selector_read_bit+0x34>

080012da <switch_selector_setup>:
{
 80012da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012dc:	46c6      	mov	lr, r8
 80012de:	b500      	push	{lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	0006      	movs	r6, r0
 80012e4:	4688      	mov	r8, r1
 80012e6:	0017      	movs	r7, r2
	if(switch_size > 32)
 80012e8:	2a20      	cmp	r2, #32
 80012ea:	d81e      	bhi.n	800132a <switch_selector_setup+0x50>
	switch_selector->value = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	6083      	str	r3, [r0, #8]
	switch_selector->switch_size = switch_size;
 80012f0:	7102      	strb	r2, [r0, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 80012f2:	00d0      	lsls	r0, r2, #3
 80012f4:	f002 fbba 	bl	8003a6c <malloc>
 80012f8:	6030      	str	r0, [r6, #0]
	for(idx = 0; idx < switch_size; idx++)
 80012fa:	2400      	movs	r4, #0
 80012fc:	42bc      	cmp	r4, r7
 80012fe:	d212      	bcs.n	8001326 <switch_selector_setup+0x4c>
		if((switch_selector_gpio + idx) != NULL)
 8001300:	00e2      	lsls	r2, r4, #3
 8001302:	4643      	mov	r3, r8
 8001304:	189b      	adds	r3, r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d014      	beq.n	8001334 <switch_selector_setup+0x5a>
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 800130a:	6835      	ldr	r5, [r6, #0]
 800130c:	18ad      	adds	r5, r5, r2
 800130e:	cb03      	ldmia	r3!, {r0, r1}
 8001310:	c503      	stmia	r5!, {r0, r1}
		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8001312:	ab01      	add	r3, sp, #4
 8001314:	466a      	mov	r2, sp
 8001316:	3203      	adds	r2, #3
 8001318:	0021      	movs	r1, r4
 800131a:	0030      	movs	r0, r6
 800131c:	f7ff ffb0 	bl	8001280 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8001320:	3401      	adds	r4, #1
 8001322:	b2e4      	uxtb	r4, r4
 8001324:	e7ea      	b.n	80012fc <switch_selector_setup+0x22>
 8001326:	2000      	movs	r0, #0
 8001328:	e000      	b.n	800132c <switch_selector_setup+0x52>
		return 2;
 800132a:	2002      	movs	r0, #2
}
 800132c:	b002      	add	sp, #8
 800132e:	bc80      	pop	{r7}
 8001330:	46b8      	mov	r8, r7
 8001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = 1;
 8001334:	2001      	movs	r0, #1
 8001336:	e7f9      	b.n	800132c <switch_selector_setup+0x52>

08001338 <nutone_setup>:

void nutone_setup(nutone_t *exhaust_fan, nutone_relay_handler_t *lights,
											nutone_relay_handler_t *fan,
											deadline_timer_t *ctrl_timer,
											deadline_timer_t *vyv_timeoff)
{
 8001338:	b530      	push	{r4, r5, lr}
 800133a:	b08b      	sub	sp, #44	@ 0x2c
 800133c:	0004      	movs	r4, r0
 800133e:	001d      	movs	r5, r3

	timer_clock_t deadline;


	exhaust_fan->lights = lights;
 8001340:	6001      	str	r1, [r0, #0]
	exhaust_fan->fan = fan;
 8001342:	6042      	str	r2, [r0, #4]

	exhaust_fan->ctrl_timer = ctrl_timer;
 8001344:	6083      	str	r3, [r0, #8]
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 8001346:	23fa      	movs	r3, #250	@ 0xfa
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 800134c:	2210      	movs	r2, #16
 800134e:	a906      	add	r1, sp, #24
 8001350:	4668      	mov	r0, sp
 8001352:	f002 fc8d 	bl	8003c70 <memcpy>
 8001356:	9a04      	ldr	r2, [sp, #16]
 8001358:	9b05      	ldr	r3, [sp, #20]
 800135a:	0028      	movs	r0, r5
 800135c:	f000 f9dc 	bl	8001718 <deadline_timer_setup>
//	exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;

	exhaust_fan->vyv_timeoff = vyv_timeoff;
 8001360:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001362:	60e3      	str	r3, [r4, #12]
	deadline.msec = NUTONE_VYV_TIMEOUT;
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <nutone_setup+0x5c>)
 8001366:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 8001368:	2210      	movs	r2, #16
 800136a:	a906      	add	r1, sp, #24
 800136c:	4668      	mov	r0, sp
 800136e:	f002 fc7f 	bl	8003c70 <memcpy>
 8001372:	9a04      	ldr	r2, [sp, #16]
 8001374:	9b05      	ldr	r3, [sp, #20]
 8001376:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001378:	f000 f9ce 	bl	8001718 <deadline_timer_setup>
//	exhaust_fan->vyv_timeoff->deadline.msec = NUTONE_VYV_TIMEOUT;



	exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 800137c:	2302      	movs	r3, #2
 800137e:	75e3      	strb	r3, [r4, #23]
	exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001380:	2300      	movs	r3, #0
 8001382:	75a3      	strb	r3, [r4, #22]

	exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 8001384:	2203      	movs	r2, #3
 8001386:	7562      	strb	r2, [r4, #21]
	exhaust_fan->light_on_pulses_idx = 0;
 8001388:	7523      	strb	r3, [r4, #20]

	exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800138a:	74e3      	strb	r3, [r4, #19]
	exhaust_fan->command = NUTONE_CMD_NONE;
 800138c:	74a3      	strb	r3, [r4, #18]


}
 800138e:	b00b      	add	sp, #44	@ 0x2c
 8001390:	bd30      	pop	{r4, r5, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	00002710 	.word	0x00002710

08001398 <nutone_set_command>:

}

uint8_t nutone_set_command(nutone_t *exhaust_fan, nutone_command_e command)
{
	exhaust_fan->command = command;
 8001398:	7481      	strb	r1, [r0, #18]
	return 0;
}
 800139a:	2000      	movs	r0, #0
 800139c:	4770      	bx	lr
	...

080013a0 <nutone_select_state>:


//#define NO_MEMORY

uint8_t nutone_select_state(nutone_t *exhaust_fan)
{
 80013a0:	0003      	movs	r3, r0
	if(exhaust_fan->cmd_state != NUTONE_CMD_STE_READY)
 80013a2:	7cc0      	ldrb	r0, [r0, #19]
 80013a4:	2800      	cmp	r0, #0
 80013a6:	d12f      	bne.n	8001408 <nutone_select_state+0x68>
	{
		return 1;
	}
	switch(exhaust_fan->command)
 80013a8:	7c9a      	ldrb	r2, [r3, #18]
 80013aa:	2a06      	cmp	r2, #6
 80013ac:	d82d      	bhi.n	800140a <nutone_select_state+0x6a>
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4916      	ldr	r1, [pc, #88]	@ (800140c <nutone_select_state+0x6c>)
 80013b2:	588a      	ldr	r2, [r1, r2]
 80013b4:	4697      	mov	pc, r2
	{
		case NUTONE_CMD_FAN_TURN_ON:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_ON;
 80013b6:	2201      	movs	r2, #1
 80013b8:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013ba:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80013bc:	2200      	movs	r2, #0
 80013be:	749a      	strb	r2, [r3, #18]
			break;
 80013c0:	e023      	b.n	800140a <nutone_select_state+0x6a>
		case NUTONE_CMD_FAN_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_OFF;
 80013c2:	2203      	movs	r2, #3
 80013c4:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013c6:	3a02      	subs	r2, #2
 80013c8:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80013ca:	2200      	movs	r2, #0
 80013cc:	749a      	strb	r2, [r3, #18]
			break;
 80013ce:	e01c      	b.n	800140a <nutone_select_state+0x6a>
		case NUTONE_CMD_WHITE_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_L_SET_ON;
 80013d0:	220d      	movs	r2, #13
 80013d2:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013d4:	3a0c      	subs	r2, #12
 80013d6:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80013d8:	2200      	movs	r2, #0
 80013da:	749a      	strb	r2, [r3, #18]
			break;
 80013dc:	e015      	b.n	800140a <nutone_select_state+0x6a>
		case NUTONE_CMD_WHITE_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 80013de:	220f      	movs	r2, #15
 80013e0:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013e2:	3a0e      	subs	r2, #14
 80013e4:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80013e6:	2200      	movs	r2, #0
 80013e8:	749a      	strb	r2, [r3, #18]
			break;
 80013ea:	e00e      	b.n	800140a <nutone_select_state+0x6a>
		case NUTONE_CMD_VYV_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_L_SET_ON;
 80013ec:	220e      	movs	r2, #14
 80013ee:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013f0:	3a0d      	subs	r2, #13
 80013f2:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80013f4:	2200      	movs	r2, #0
 80013f6:	749a      	strb	r2, [r3, #18]
			break;
 80013f8:	e007      	b.n	800140a <nutone_select_state+0x6a>
		case NUTONE_CMD_VYV_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 80013fa:	220f      	movs	r2, #15
 80013fc:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80013fe:	3a0e      	subs	r2, #14
 8001400:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8001402:	2200      	movs	r2, #0
 8001404:	749a      	strb	r2, [r3, #18]
			break;
 8001406:	e000      	b.n	800140a <nutone_select_state+0x6a>
		return 1;
 8001408:	2001      	movs	r0, #1
			break;
	}


	return 0;
}
 800140a:	4770      	bx	lr
 800140c:	08003d10 	.word	0x08003d10

08001410 <nutone_fsm>:
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	0004      	movs	r4, r0
	deadline_timer_expired_t is_expired = TIMER_EXPIRED_FALSE;
 8001416:	2300      	movs	r3, #0
 8001418:	466a      	mov	r2, sp
 800141a:	71d3      	strb	r3, [r2, #7]
	deadline_timer_expired_t is_expired_vyv = TIMER_EXPIRED_FALSE;
 800141c:	466a      	mov	r2, sp
 800141e:	7193      	strb	r3, [r2, #6]
	switch(exhaust_fan->fsm_state)
 8001420:	7c03      	ldrb	r3, [r0, #16]
 8001422:	2b11      	cmp	r3, #17
 8001424:	d805      	bhi.n	8001432 <nutone_fsm+0x22>
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4aaa      	ldr	r2, [pc, #680]	@ (80016d4 <nutone_fsm+0x2c4>)
 800142a:	58d3      	ldr	r3, [r2, r3]
 800142c:	469f      	mov	pc, r3
			nutone_select_state(exhaust_fan);
 800142e:	f7ff ffb7 	bl	80013a0 <nutone_select_state>
}
 8001432:	2000      	movs	r0, #0
 8001434:	b002      	add	sp, #8
 8001436:	bd70      	pop	{r4, r5, r6, pc}
			relay_ask_on_pulse_fsm(exhaust_fan->fan->relay);
 8001438:	6843      	ldr	r3, [r0, #4]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f7ff fe1f 	bl	800107e <relay_ask_on_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_ON;
 8001440:	2302      	movs	r3, #2
 8001442:	7423      	strb	r3, [r4, #16]
			break;
 8001444:	e7f5      	b.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->fan->relay->fsm_run_on == RELAY_RUN_FALSE)
 8001446:	6843      	ldr	r3, [r0, #4]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2321      	movs	r3, #33	@ 0x21
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d1ef      	bne.n	8001432 <nutone_fsm+0x22>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001452:	2300      	movs	r3, #0
 8001454:	74c3      	strb	r3, [r0, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001456:	7403      	strb	r3, [r0, #16]
 8001458:	e7eb      	b.n	8001432 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->fan->relay);
 800145a:	6843      	ldr	r3, [r0, #4]
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f7ff fdfd 	bl	800105c <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_OFF;
 8001462:	2304      	movs	r3, #4
 8001464:	7423      	strb	r3, [r4, #16]
			break;
 8001466:	e7e4      	b.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->fan->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001468:	6843      	ldr	r3, [r0, #4]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	2322      	movs	r3, #34	@ 0x22
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d1de      	bne.n	8001432 <nutone_fsm+0x22>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001474:	2300      	movs	r3, #0
 8001476:	74c3      	strb	r3, [r0, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001478:	7403      	strb	r3, [r0, #16]
 800147a:	e7da      	b.n	8001432 <nutone_fsm+0x22>
			exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 800147c:	2303      	movs	r3, #3
 800147e:	7543      	strb	r3, [r0, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	7503      	strb	r3, [r0, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8001484:	6880      	ldr	r0, [r0, #8]
 8001486:	f000 f92c 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 800148a:	2301      	movs	r3, #1
 800148c:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 800148e:	3301      	adds	r3, #1
 8001490:	75e3      	strb	r3, [r4, #23]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 8001492:	68a3      	ldr	r3, [r4, #8]
 8001494:	22fa      	movs	r2, #250	@ 0xfa
 8001496:	0052      	lsls	r2, r2, #1
 8001498:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 800149a:	2306      	movs	r3, #6
 800149c:	7423      	strb	r3, [r4, #16]
			break;
 800149e:	e7c8      	b.n	8001432 <nutone_fsm+0x22>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	f7ff fdeb 	bl	800107e <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80014a8:	68a0      	ldr	r0, [r4, #8]
 80014aa:	f000 f91a 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 80014ae:	2308      	movs	r3, #8
 80014b0:	7423      	strb	r3, [r4, #16]
			break;
 80014b2:	e7be      	b.n	8001432 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 80014b4:	6803      	ldr	r3, [r0, #0]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	f7ff fdd0 	bl	800105c <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80014bc:	68a0      	ldr	r0, [r4, #8]
 80014be:	f000 f910 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 80014c2:	2308      	movs	r3, #8
 80014c4:	7423      	strb	r3, [r4, #16]
			break;
 80014c6:	e7b4      	b.n	8001432 <nutone_fsm+0x22>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired);
 80014c8:	466b      	mov	r3, sp
 80014ca:	1ddd      	adds	r5, r3, #7
 80014cc:	6880      	ldr	r0, [r0, #8]
 80014ce:	0029      	movs	r1, r5
 80014d0:	f000 f978 	bl	80017c4 <deadline_timer_check>
			if(is_expired != TIMER_EXPIRED_TRUE)
 80014d4:	782b      	ldrb	r3, [r5, #0]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d1ab      	bne.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	781a      	ldrb	r2, [r3, #0]
 80014e0:	2a01      	cmp	r2, #1
 80014e2:	d006      	beq.n	80014f2 <nutone_fsm+0xe2>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 80014e4:	2222      	movs	r2, #34	@ 0x22
 80014e6:	5c9b      	ldrb	r3, [r3, r2]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d1a2      	bne.n	8001432 <nutone_fsm+0x22>
					exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 80014ec:	3305      	adds	r3, #5
 80014ee:	7423      	strb	r3, [r4, #16]
 80014f0:	e79f      	b.n	8001432 <nutone_fsm+0x22>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 80014f2:	3220      	adds	r2, #32
 80014f4:	5c9b      	ldrb	r3, [r3, r2]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d19b      	bne.n	8001432 <nutone_fsm+0x22>
					if((exhaust_fan->light_on_pulses_idx) >=
 80014fa:	7d23      	ldrb	r3, [r4, #20]
												exhaust_fan->light_on_pulses)
 80014fc:	7d62      	ldrb	r2, [r4, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 80014fe:	4293      	cmp	r3, r2
 8001500:	d305      	bcc.n	800150e <nutone_fsm+0xfe>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001502:	2200      	movs	r2, #0
 8001504:	74e2      	strb	r2, [r4, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001506:	7422      	strb	r2, [r4, #16]
					exhaust_fan->light_on_pulses_idx++;
 8001508:	3301      	adds	r3, #1
 800150a:	7523      	strb	r3, [r4, #20]
 800150c:	e791      	b.n	8001432 <nutone_fsm+0x22>
						exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 800150e:	2207      	movs	r2, #7
 8001510:	7422      	strb	r2, [r4, #16]
 8001512:	e7f9      	b.n	8001508 <nutone_fsm+0xf8>
			exhaust_fan->light_on_pulses = NUTONE_VYV_ON_PULSES;
 8001514:	2502      	movs	r5, #2
 8001516:	7545      	strb	r5, [r0, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 8001518:	2600      	movs	r6, #0
 800151a:	7506      	strb	r6, [r0, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800151c:	6880      	ldr	r0, [r0, #8]
 800151e:	f000 f8e0 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001522:	75a6      	strb	r6, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001524:	75e5      	strb	r5, [r4, #23]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8001526:	68a3      	ldr	r3, [r4, #8]
 8001528:	22fa      	movs	r2, #250	@ 0xfa
 800152a:	0052      	lsls	r2, r2, #1
 800152c:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 800152e:	230b      	movs	r3, #11
 8001530:	7423      	strb	r3, [r4, #16]
			break;
 8001532:	e77e      	b.n	8001432 <nutone_fsm+0x22>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 8001534:	6803      	ldr	r3, [r0, #0]
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	f7ff fda1 	bl	800107e <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800153c:	68a0      	ldr	r0, [r4, #8]
 800153e:	f000 f8d0 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 8001542:	230c      	movs	r3, #12
 8001544:	7423      	strb	r3, [r4, #16]
			break;
 8001546:	e774      	b.n	8001432 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	f7ff fd86 	bl	800105c <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8001550:	68a0      	ldr	r0, [r4, #8]
 8001552:	f000 f8c6 	bl	80016e2 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 8001556:	230c      	movs	r3, #12
 8001558:	7423      	strb	r3, [r4, #16]
			break;
 800155a:	e76a      	b.n	8001432 <nutone_fsm+0x22>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired_vyv);
 800155c:	466b      	mov	r3, sp
 800155e:	1d9d      	adds	r5, r3, #6
 8001560:	6880      	ldr	r0, [r0, #8]
 8001562:	0029      	movs	r1, r5
 8001564:	f000 f92e 	bl	80017c4 <deadline_timer_check>
			if(is_expired_vyv != TIMER_EXPIRED_TRUE)
 8001568:	782b      	ldrb	r3, [r5, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d000      	beq.n	8001570 <nutone_fsm+0x160>
 800156e:	e760      	b.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	2a01      	cmp	r2, #1
 8001578:	d007      	beq.n	800158a <nutone_fsm+0x17a>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 800157a:	2222      	movs	r2, #34	@ 0x22
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d000      	beq.n	8001584 <nutone_fsm+0x174>
 8001582:	e756      	b.n	8001432 <nutone_fsm+0x22>
					exhaust_fan->fsm_state = NUTONE_STE_VYV_ON;
 8001584:	3309      	adds	r3, #9
 8001586:	7423      	strb	r3, [r4, #16]
 8001588:	e753      	b.n	8001432 <nutone_fsm+0x22>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 800158a:	3220      	adds	r2, #32
 800158c:	5c9b      	ldrb	r3, [r3, r2]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d000      	beq.n	8001594 <nutone_fsm+0x184>
 8001592:	e74e      	b.n	8001432 <nutone_fsm+0x22>
					if((exhaust_fan->light_on_pulses_idx) >=
 8001594:	7d22      	ldrb	r2, [r4, #20]
												exhaust_fan->light_on_pulses)
 8001596:	7d63      	ldrb	r3, [r4, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 8001598:	429a      	cmp	r2, r3
 800159a:	d307      	bcc.n	80015ac <nutone_fsm+0x19c>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800159c:	2300      	movs	r3, #0
 800159e:	74e3      	strb	r3, [r4, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80015a0:	7423      	strb	r3, [r4, #16]
						exhaust_fan->light_on_pulses_idx = 0;
 80015a2:	7523      	strb	r3, [r4, #20]
					exhaust_fan->light_on_pulses_idx++;
 80015a4:	7d23      	ldrb	r3, [r4, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	7523      	strb	r3, [r4, #20]
 80015aa:	e742      	b.n	8001432 <nutone_fsm+0x22>
						exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 80015ac:	230b      	movs	r3, #11
 80015ae:	7423      	strb	r3, [r4, #16]
 80015b0:	e7f8      	b.n	80015a4 <nutone_fsm+0x194>
			exhaust_fan->ctrl_timer->deadline.msec =
 80015b2:	6883      	ldr	r3, [r0, #8]
 80015b4:	22fa      	movs	r2, #250	@ 0xfa
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	7503      	strb	r3, [r0, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80015be:	7d83      	ldrb	r3, [r0, #22]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <nutone_fsm+0x1c0>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10b      	bne.n	80015e0 <nutone_fsm+0x1d0>
				exhaust_fan->light_on_pulses = 0;
 80015c8:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 80015ca:	3307      	adds	r3, #7
 80015cc:	7403      	strb	r3, [r0, #16]
 80015ce:	e002      	b.n	80015d6 <nutone_fsm+0x1c6>
				exhaust_fan->light_on_pulses = 1;
 80015d0:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 80015d2:	3306      	adds	r3, #6
 80015d4:	7403      	strb	r3, [r0, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 80015d6:	2301      	movs	r3, #1
 80015d8:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 80015da:	3301      	adds	r3, #1
 80015dc:	75e3      	strb	r3, [r4, #23]
			break;
 80015de:	e728      	b.n	8001432 <nutone_fsm+0x22>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 80015e0:	7dc3      	ldrb	r3, [r0, #23]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d104      	bne.n	80015f0 <nutone_fsm+0x1e0>
					exhaust_fan->light_on_pulses = 1;
 80015e6:	3301      	adds	r3, #1
 80015e8:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 80015ea:	2306      	movs	r3, #6
 80015ec:	7423      	strb	r3, [r4, #16]
 80015ee:	e7f2      	b.n	80015d6 <nutone_fsm+0x1c6>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d1fa      	bne.n	80015ea <nutone_fsm+0x1da>
					exhaust_fan->light_on_pulses = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	7543      	strb	r3, [r0, #21]
 80015f8:	e7f7      	b.n	80015ea <nutone_fsm+0x1da>
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 80015fa:	6883      	ldr	r3, [r0, #8]
 80015fc:	22fa      	movs	r2, #250	@ 0xfa
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	7503      	strb	r3, [r0, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001606:	7d83      	ldrb	r3, [r0, #22]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d006      	beq.n	800161a <nutone_fsm+0x20a>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10d      	bne.n	800162c <nutone_fsm+0x21c>
				exhaust_fan->light_on_pulses = 1;
 8001610:	3301      	adds	r3, #1
 8001612:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001614:	3306      	adds	r3, #6
 8001616:	7403      	strb	r3, [r0, #16]
 8001618:	e003      	b.n	8001622 <nutone_fsm+0x212>
				exhaust_fan->light_on_pulses = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 800161e:	3307      	adds	r3, #7
 8001620:	7403      	strb	r3, [r0, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001622:	2300      	movs	r3, #0
 8001624:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001626:	3302      	adds	r3, #2
 8001628:	75e3      	strb	r3, [r4, #23]
			break;
 800162a:	e702      	b.n	8001432 <nutone_fsm+0x22>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 800162c:	7dc3      	ldrb	r3, [r0, #23]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d103      	bne.n	800163a <nutone_fsm+0x22a>
					exhaust_fan->light_on_pulses = 0;
 8001632:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8001634:	2306      	movs	r3, #6
 8001636:	7423      	strb	r3, [r4, #16]
 8001638:	e7f3      	b.n	8001622 <nutone_fsm+0x212>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 800163a:	2b01      	cmp	r3, #1
 800163c:	d1fa      	bne.n	8001634 <nutone_fsm+0x224>
					exhaust_fan->light_on_pulses = 1;
 800163e:	7543      	strb	r3, [r0, #21]
 8001640:	e7f8      	b.n	8001634 <nutone_fsm+0x224>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8001642:	6803      	ldr	r3, [r0, #0]
 8001644:	6818      	ldr	r0, [r3, #0]
 8001646:	f7ff fd09 	bl	800105c <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNING_OFF;
 800164a:	2310      	movs	r3, #16
 800164c:	7423      	strb	r3, [r4, #16]
			break;
 800164e:	e6f0      	b.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001650:	6803      	ldr	r3, [r0, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2322      	movs	r3, #34	@ 0x22
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d000      	beq.n	800165e <nutone_fsm+0x24e>
 800165c:	e6e9      	b.n	8001432 <nutone_fsm+0x22>
				deadline_timer_set_initial_time(exhaust_fan->vyv_timeoff);
 800165e:	68c0      	ldr	r0, [r0, #12]
 8001660:	f000 f83f 	bl	80016e2 <deadline_timer_set_initial_time>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001664:	2300      	movs	r3, #0
 8001666:	74e3      	strb	r3, [r4, #19]
				exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNED_OFF;
 8001668:	3311      	adds	r3, #17
 800166a:	7423      	strb	r3, [r4, #16]
 800166c:	e6e1      	b.n	8001432 <nutone_fsm+0x22>
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 800166e:	7d83      	ldrb	r3, [r0, #22]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d107      	bne.n	8001684 <nutone_fsm+0x274>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001674:	3302      	adds	r3, #2
 8001676:	7583      	strb	r3, [r0, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8001678:	3b01      	subs	r3, #1
 800167a:	75c3      	strb	r3, [r0, #23]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 800167c:	2300      	movs	r3, #0
 800167e:	7403      	strb	r3, [r0, #16]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001680:	74c3      	strb	r3, [r0, #19]
 8001682:	e6d6      	b.n	8001432 <nutone_fsm+0x22>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001684:	2b01      	cmp	r3, #1
 8001686:	d105      	bne.n	8001694 <nutone_fsm+0x284>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001688:	3301      	adds	r3, #1
 800168a:	7583      	strb	r3, [r0, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_VYV;
 800168c:	2300      	movs	r3, #0
 800168e:	75c3      	strb	r3, [r0, #23]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001690:	74c3      	strb	r3, [r0, #19]
 8001692:	e6ce      	b.n	8001432 <nutone_fsm+0x22>
				nutone_select_state(exhaust_fan);
 8001694:	f7ff fe84 	bl	80013a0 <nutone_select_state>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001698:	7de3      	ldrb	r3, [r4, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <nutone_fsm+0x296>
					exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800169e:	2300      	movs	r3, #0
 80016a0:	74e3      	strb	r3, [r4, #19]
					exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80016a2:	7423      	strb	r3, [r4, #16]
 80016a4:	e6c5      	b.n	8001432 <nutone_fsm+0x22>
					deadline_timer_check(exhaust_fan->vyv_timeoff,
 80016a6:	466b      	mov	r3, sp
 80016a8:	1d5d      	adds	r5, r3, #5
 80016aa:	68e0      	ldr	r0, [r4, #12]
 80016ac:	0029      	movs	r1, r5
 80016ae:	f000 f889 	bl	80017c4 <deadline_timer_check>
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 80016b2:	782b      	ldrb	r3, [r5, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d000      	beq.n	80016ba <nutone_fsm+0x2aa>
 80016b8:	e6bb      	b.n	8001432 <nutone_fsm+0x22>
						(exhaust_fan->cmd_state == NUTONE_CMD_STE_READY))
 80016ba:	7ce3      	ldrb	r3, [r4, #19]
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d000      	beq.n	80016c2 <nutone_fsm+0x2b2>
 80016c0:	e6b7      	b.n	8001432 <nutone_fsm+0x22>
						exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80016c2:	3302      	adds	r3, #2
 80016c4:	75a3      	strb	r3, [r4, #22]
						exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 80016c6:	3b01      	subs	r3, #1
 80016c8:	75e3      	strb	r3, [r4, #23]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	7423      	strb	r3, [r4, #16]
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80016ce:	74e3      	strb	r3, [r4, #19]
 80016d0:	e6af      	b.n	8001432 <nutone_fsm+0x22>
 80016d2:	46c0      	nop			@ (mov r8, r8)
 80016d4:	08003d2c 	.word	0x08003d2c

080016d8 <deadline_timer_force_expiration>:
}


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 80016d8:	2360      	movs	r3, #96	@ 0x60
 80016da:	2201      	movs	r2, #1
 80016dc:	54c2      	strb	r2, [r0, r3]
	return 0;
}
 80016de:	2000      	movs	r0, #0
 80016e0:	4770      	bx	lr

080016e2 <deadline_timer_set_initial_time>:

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
	//memcpy fails after several assignations.
	//copy uint32_t variables directly to avoid a race condition
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 80016e2:	6802      	ldr	r2, [r0, #0]
 80016e4:	6843      	ldr	r3, [r0, #4]
 80016e6:	6302      	str	r2, [r0, #48]	@ 0x30
 80016e8:	6343      	str	r3, [r0, #52]	@ 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 80016ea:	6883      	ldr	r3, [r0, #8]
 80016ec:	6383      	str	r3, [r0, #56]	@ 0x38


	return 0;
}
 80016ee:	2000      	movs	r0, #0
 80016f0:	4770      	bx	lr

080016f2 <timer_clock_clear>:
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
	timer->counts = 0;
 80016f2:	2200      	movs	r2, #0
 80016f4:	2300      	movs	r3, #0
 80016f6:	6002      	str	r2, [r0, #0]
 80016f8:	6043      	str	r3, [r0, #4]
	timer->msec = 0;
 80016fa:	2300      	movs	r3, #0
 80016fc:	6083      	str	r3, [r0, #8]
	timer->sec = 0;
 80016fe:	60c3      	str	r3, [r0, #12]
	return 0;
}
 8001700:	2000      	movs	r0, #0
 8001702:	4770      	bx	lr

08001704 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8001704:	b082      	sub	sp, #8
 8001706:	9200      	str	r2, [sp, #0]
 8001708:	9301      	str	r3, [sp, #4]
	timer->msec = new_time.msec;
 800170a:	9b02      	ldr	r3, [sp, #8]
 800170c:	6083      	str	r3, [r0, #8]
	timer->sec = new_time.sec;
 800170e:	9b03      	ldr	r3, [sp, #12]
 8001710:	60c3      	str	r3, [r0, #12]
	return 0;
}
 8001712:	2000      	movs	r0, #0
 8001714:	b002      	add	sp, #8
 8001716:	4770      	bx	lr

08001718 <deadline_timer_setup>:
{
 8001718:	b082      	sub	sp, #8
 800171a:	b510      	push	{r4, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	0004      	movs	r4, r0
 8001720:	9206      	str	r2, [sp, #24]
 8001722:	9307      	str	r3, [sp, #28]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 8001724:	2360      	movs	r3, #96	@ 0x60
 8001726:	2200      	movs	r2, #0
 8001728:	54c2      	strb	r2, [r0, r3]
	timer_clock_clear(&deadline_timer->time_current);
 800172a:	f7ff ffe2 	bl	80016f2 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 800172e:	0020      	movs	r0, r4
 8001730:	3030      	adds	r0, #48	@ 0x30
 8001732:	f7ff ffde 	bl	80016f2 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 8001736:	0020      	movs	r0, r4
 8001738:	3048      	adds	r0, #72	@ 0x48
 800173a:	f7ff ffda 	bl	80016f2 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 800173e:	3418      	adds	r4, #24
 8001740:	2210      	movs	r2, #16
 8001742:	a908      	add	r1, sp, #32
 8001744:	4668      	mov	r0, sp
 8001746:	f002 fa93 	bl	8003c70 <memcpy>
 800174a:	9a06      	ldr	r2, [sp, #24]
 800174c:	9b07      	ldr	r3, [sp, #28]
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff ffd8 	bl	8001704 <timer_clock_set_time>
}
 8001754:	2000      	movs	r0, #0
 8001756:	b004      	add	sp, #16
 8001758:	bc10      	pop	{r4}
 800175a:	bc08      	pop	{r3}
 800175c:	b002      	add	sp, #8
 800175e:	4718      	bx	r3

08001760 <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 8001760:	b530      	push	{r4, r5, lr}

	timer->msec++;
 8001762:	6881      	ldr	r1, [r0, #8]
 8001764:	3101      	adds	r1, #1
 8001766:	6081      	str	r1, [r0, #8]
	timer->counts++;
 8001768:	6802      	ldr	r2, [r0, #0]
 800176a:	6843      	ldr	r3, [r0, #4]
 800176c:	2401      	movs	r4, #1
 800176e:	2500      	movs	r5, #0
 8001770:	1912      	adds	r2, r2, r4
 8001772:	416b      	adcs	r3, r5
 8001774:	6002      	str	r2, [r0, #0]
 8001776:	6043      	str	r3, [r0, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <deadline_timer_increment+0x28>)
 800177a:	4299      	cmp	r1, r3
 800177c:	d901      	bls.n	8001782 <deadline_timer_increment+0x22>
	{
//		timer->sec++;
		timer->msec = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	6083      	str	r3, [r0, #8]
//	{
//		timer->counts = 0;
//	}

	return 0;
}
 8001782:	2000      	movs	r0, #0
 8001784:	bd30      	pop	{r4, r5, pc}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	3b9ac9ff 	.word	0x3b9ac9ff

0800178c <deadline_timer_count>:
{
 800178c:	b510      	push	{r4, lr}
	deadline_timer_increment(&deadline_timer->time_current);
 800178e:	f7ff ffe7 	bl	8001760 <deadline_timer_increment>
}
 8001792:	2000      	movs	r0, #0
 8001794:	bd10      	pop	{r4, pc}

08001796 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 8001796:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status = 0;
	int64_t remaining = 0;
	int32_t deadline_difference = 0;

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 8001798:	0004      	movs	r4, r0
 800179a:	2500      	movs	r5, #0
 800179c:	0016      	movs	r6, r2
 800179e:	2700      	movs	r7, #0
 80017a0:	1ba4      	subs	r4, r4, r6
 80017a2:	41bd      	sbcs	r5, r7

	if(remaining < 0)
 80017a4:	2d00      	cmp	r5, #0
 80017a6:	db06      	blt.n	80017b6 <deadline_timer_compare_check+0x20>
		remaining = (max_time - time_initial) + time_current;

	}
	deadline_difference = (uint32_t) remaining;

	if(deadline_difference >= deadline)
 80017a8:	42a1      	cmp	r1, r4
 80017aa:	d807      	bhi.n	80017bc <deadline_timer_compare_check+0x26>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 80017ac:	2301      	movs	r3, #1
 80017ae:	9a05      	ldr	r2, [sp, #20]
 80017b0:	7013      	strb	r3, [r2, #0]
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
	}

	return status;
}
 80017b2:	2000      	movs	r0, #0
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		remaining = (max_time - time_initial) + time_current;
 80017b6:	1a9b      	subs	r3, r3, r2
 80017b8:	181c      	adds	r4, r3, r0
 80017ba:	e7f5      	b.n	80017a8 <deadline_timer_compare_check+0x12>
		*deadline_expired = TIMER_EXPIRED_FALSE;
 80017bc:	2300      	movs	r3, #0
 80017be:	9a05      	ldr	r2, [sp, #20]
 80017c0:	7013      	strb	r3, [r2, #0]
 80017c2:	e7f6      	b.n	80017b2 <deadline_timer_compare_check+0x1c>

080017c4 <deadline_timer_check>:
{
 80017c4:	b570      	push	{r4, r5, r6, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	0004      	movs	r4, r0
 80017ca:	000d      	movs	r5, r1
	*deadline_expired = TIMER_EXPIRED_FALSE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	700b      	strb	r3, [r1, #0]
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 80017d0:	260f      	movs	r6, #15
 80017d2:	446e      	add	r6, sp
 80017d4:	7033      	strb	r3, [r6, #0]
	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80017d6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80017d8:	6a01      	ldr	r1, [r0, #32]
 80017da:	6880      	ldr	r0, [r0, #8]
 80017dc:	9600      	str	r6, [sp, #0]
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <deadline_timer_check+0x30>)
 80017e0:	f7ff ffd9 	bl	8001796 <deadline_timer_compare_check>
	*deadline_expired = deadline_expired_msec;
 80017e4:	7833      	ldrb	r3, [r6, #0]
 80017e6:	702b      	strb	r3, [r5, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 80017e8:	2260      	movs	r2, #96	@ 0x60
 80017ea:	54a3      	strb	r3, [r4, r2]
}
 80017ec:	2000      	movs	r0, #0
 80017ee:	b004      	add	sp, #16
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	3b9aca00 	.word	0x3b9aca00

080017f8 <output_fsm_ctrl>:




void output_fsm_ctrl(relay_t *actuator, deadline_timer_t *deadline_timer)
{
 80017f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fa:	b089      	sub	sp, #36	@ 0x24
 80017fc:	0004      	movs	r4, r0
 80017fe:	000d      	movs	r5, r1
	relay_fsm_init_t init = RELAY_INIT_FALSE;
 8001800:	231f      	movs	r3, #31
 8001802:	446b      	add	r3, sp
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == RELAY_RUN_TRUE)
 8001808:	2321      	movs	r3, #33	@ 0x21
 800180a:	5cc3      	ldrb	r3, [r0, r3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d005      	beq.n	800181c <output_fsm_ctrl+0x24>
			relay_on_pulse_fsm(actuator);
			deadline_timer_set_initial_time(deadline_timer);
		}
	}

	if(actuator->fsm_run_off == RELAY_RUN_TRUE)
 8001810:	2322      	movs	r3, #34	@ 0x22
 8001812:	5ce3      	ldrb	r3, [r4, r3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02b      	beq.n	8001870 <output_fsm_ctrl+0x78>
	  {
		  relay_off_pulse_fsm(actuator);
		  deadline_timer_set_initial_time(deadline_timer);
	  }
	}
}
 8001818:	b009      	add	sp, #36	@ 0x24
 800181a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		relay_check_init_fsm(*actuator, &init);
 800181c:	261f      	movs	r6, #31
 800181e:	446e      	add	r6, sp
 8001820:	9605      	str	r6, [sp, #20]
 8001822:	0003      	movs	r3, r0
 8001824:	3310      	adds	r3, #16
 8001826:	466a      	mov	r2, sp
 8001828:	cb83      	ldmia	r3!, {r0, r1, r7}
 800182a:	c283      	stmia	r2!, {r0, r1, r7}
 800182c:	cb03      	ldmia	r3!, {r0, r1}
 800182e:	c203      	stmia	r2!, {r0, r1}
 8001830:	6820      	ldr	r0, [r4, #0]
 8001832:	6861      	ldr	r1, [r4, #4]
 8001834:	68a2      	ldr	r2, [r4, #8]
 8001836:	68e3      	ldr	r3, [r4, #12]
 8001838:	f7ff fc32 	bl	80010a0 <relay_check_init_fsm>
		if(init == RELAY_INIT_TRUE)
 800183c:	7833      	ldrb	r3, [r6, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00f      	beq.n	8001862 <output_fsm_ctrl+0x6a>
		deadline_timer_check(deadline_timer, &expired);
 8001842:	261e      	movs	r6, #30
 8001844:	446e      	add	r6, sp
 8001846:	0031      	movs	r1, r6
 8001848:	0028      	movs	r0, r5
 800184a:	f7ff ffbb 	bl	80017c4 <deadline_timer_check>
		if(expired == TIMER_EXPIRED_TRUE)
 800184e:	7833      	ldrb	r3, [r6, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1dd      	bne.n	8001810 <output_fsm_ctrl+0x18>
			relay_on_pulse_fsm(actuator);
 8001854:	0020      	movs	r0, r4
 8001856:	f7ff fce7 	bl	8001228 <relay_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 800185a:	0028      	movs	r0, r5
 800185c:	f7ff ff41 	bl	80016e2 <deadline_timer_set_initial_time>
 8001860:	e7d6      	b.n	8001810 <output_fsm_ctrl+0x18>
			deadline_timer_set_initial_time(deadline_timer);
 8001862:	0028      	movs	r0, r5
 8001864:	f7ff ff3d 	bl	80016e2 <deadline_timer_set_initial_time>
			relay_acknowledge_init_fsm(actuator);
 8001868:	0020      	movs	r0, r4
 800186a:	f7ff fc26 	bl	80010ba <relay_acknowledge_init_fsm>
 800186e:	e7e8      	b.n	8001842 <output_fsm_ctrl+0x4a>
	  relay_check_init_fsm(*actuator, &init);
 8001870:	261f      	movs	r6, #31
 8001872:	446e      	add	r6, sp
 8001874:	9605      	str	r6, [sp, #20]
 8001876:	0023      	movs	r3, r4
 8001878:	3310      	adds	r3, #16
 800187a:	466a      	mov	r2, sp
 800187c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800187e:	c283      	stmia	r2!, {r0, r1, r7}
 8001880:	cb03      	ldmia	r3!, {r0, r1}
 8001882:	c203      	stmia	r2!, {r0, r1}
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	6861      	ldr	r1, [r4, #4]
 8001888:	68a2      	ldr	r2, [r4, #8]
 800188a:	68e3      	ldr	r3, [r4, #12]
 800188c:	f7ff fc08 	bl	80010a0 <relay_check_init_fsm>
	  if(init == RELAY_INIT_TRUE)
 8001890:	7833      	ldrb	r3, [r6, #0]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00f      	beq.n	80018b6 <output_fsm_ctrl+0xbe>
	  deadline_timer_check(deadline_timer, &expired);
 8001896:	261e      	movs	r6, #30
 8001898:	446e      	add	r6, sp
 800189a:	0031      	movs	r1, r6
 800189c:	0028      	movs	r0, r5
 800189e:	f7ff ff91 	bl	80017c4 <deadline_timer_check>
	  if(expired == TIMER_EXPIRED_TRUE)
 80018a2:	7833      	ldrb	r3, [r6, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d1b7      	bne.n	8001818 <output_fsm_ctrl+0x20>
		  relay_off_pulse_fsm(actuator);
 80018a8:	0020      	movs	r0, r4
 80018aa:	f7ff fcd3 	bl	8001254 <relay_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 80018ae:	0028      	movs	r0, r5
 80018b0:	f7ff ff17 	bl	80016e2 <deadline_timer_set_initial_time>
}
 80018b4:	e7b0      	b.n	8001818 <output_fsm_ctrl+0x20>
		  deadline_timer_set_initial_time(deadline_timer);
 80018b6:	0028      	movs	r0, r5
 80018b8:	f7ff ff13 	bl	80016e2 <deadline_timer_set_initial_time>
		  relay_acknowledge_init_fsm(actuator);
 80018bc:	0020      	movs	r0, r4
 80018be:	f7ff fbfc 	bl	80010ba <relay_acknowledge_init_fsm>
 80018c2:	e7e8      	b.n	8001896 <output_fsm_ctrl+0x9e>

080018c4 <output_led_indicator>:


void output_led_indicator(led_signal_t *led_signal,
								deadline_timer_t *deadline_timer)
{
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	0005      	movs	r5, r0
 80018ca:	000c      	movs	r4, r1
	deadline_timer_expired_t indicator_timer_expired;
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 80018cc:	466b      	mov	r3, sp
 80018ce:	1dde      	adds	r6, r3, #7
 80018d0:	0031      	movs	r1, r6
 80018d2:	0020      	movs	r0, r4
 80018d4:	f7ff ff76 	bl	80017c4 <deadline_timer_check>

	if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 80018d8:	7833      	ldrb	r3, [r6, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d001      	beq.n	80018e2 <output_led_indicator+0x1e>
	{
		led_signal_fsm(led_signal);
		deadline_timer_set_initial_time(deadline_timer);
	}
}
 80018de:	b002      	add	sp, #8
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
		led_signal_fsm(led_signal);
 80018e2:	0028      	movs	r0, r5
 80018e4:	f7ff f88d 	bl	8000a02 <led_signal_fsm>
		deadline_timer_set_initial_time(deadline_timer);
 80018e8:	0020      	movs	r0, r4
 80018ea:	f7ff fefa 	bl	80016e2 <deadline_timer_set_initial_time>
}
 80018ee:	e7f6      	b.n	80018de <output_led_indicator+0x1a>

080018f0 <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80018f0:	b530      	push	{r4, r5, lr}
 80018f2:	b087      	sub	sp, #28
 80018f4:	0004      	movs	r4, r0
 80018f6:	000d      	movs	r5, r1
 80018f8:	0010      	movs	r0, r2
	HAL_NVIC_DisableIRQ(irq_type);
 80018fa:	f000 ffe3 	bl	80028c4 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	2214      	movs	r2, #20
 8001900:	2100      	movs	r1, #0
 8001902:	a801      	add	r0, sp, #4
 8001904:	f002 f96e 	bl	8003be4 <memset>

	HAL_GPIO_DeInit(port, pin);
 8001908:	0029      	movs	r1, r5
 800190a:	0020      	movs	r0, r4
 800190c:	f001 f8c6 	bl	8002a9c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8001910:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001912:	2300      	movs	r3, #0
 8001914:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001918:	a901      	add	r1, sp, #4
 800191a:	0020      	movs	r0, r4
 800191c:	f000 ffe6 	bl	80028ec <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 8001920:	b007      	add	sp, #28
 8001922:	bd30      	pop	{r4, r5, pc}

08001924 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001924:	b570      	push	{r4, r5, r6, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	0005      	movs	r5, r0
 800192a:	000e      	movs	r6, r1
 800192c:	0014      	movs	r4, r2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	2214      	movs	r2, #20
 8001930:	2100      	movs	r1, #0
 8001932:	a801      	add	r0, sp, #4
 8001934:	f002 f956 	bl	8003be4 <memset>
	HAL_GPIO_DeInit(port, pin);
 8001938:	0031      	movs	r1, r6
 800193a:	0028      	movs	r0, r5
 800193c:	f001 f8ae 	bl	8002a9c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8001940:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x44>)
 8001944:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800194a:	a901      	add	r1, sp, #4
 800194c:	0028      	movs	r0, r5
 800194e:	f000 ffcd 	bl	80028ec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 8001952:	2203      	movs	r2, #3
 8001954:	2100      	movs	r1, #0
 8001956:	0020      	movs	r0, r4
 8001958:	f000 ffa4 	bl	80028a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 800195c:	0020      	movs	r0, r4
 800195e:	f000 ffa5 	bl	80028ac <HAL_NVIC_EnableIRQ>


}
 8001962:	b006      	add	sp, #24
 8001964:	bd70      	pop	{r4, r5, r6, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	10110000 	.word	0x10110000

0800196c <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 800196c:	b570      	push	{r4, r5, r6, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	0004      	movs	r4, r0
 8001972:	000d      	movs	r5, r1
 8001974:	0016      	movs	r6, r2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001976:	2214      	movs	r2, #20
 8001978:	2100      	movs	r1, #0
 800197a:	a801      	add	r0, sp, #4
 800197c:	f002 f932 	bl	8003be4 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 8001980:	0030      	movs	r0, r6
 8001982:	f000 ff9f 	bl	80028c4 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 8001986:	0029      	movs	r1, r5
 8001988:	0020      	movs	r0, r4
 800198a:	f001 f887 	bl	8002a9c <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800198e:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	3303      	adds	r3, #3
 800199a:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800199c:	a901      	add	r1, sp, #4
 800199e:	0020      	movs	r0, r4
 80019a0:	f000 ffa4 	bl	80028ec <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80019a4:	4a03      	ldr	r2, [pc, #12]	@ (80019b4 <HAL_DIRECT_LINK_conf_as_output+0x48>)
 80019a6:	6811      	ldr	r1, [r2, #0]
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	029b      	lsls	r3, r3, #10
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6013      	str	r3, [r2, #0]

}
 80019b0:	b006      	add	sp, #24
 80019b2:	bd70      	pop	{r4, r5, r6, pc}
 80019b4:	40010000 	.word	0x40010000

080019b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	46d6      	mov	lr, sl
 80019bc:	464f      	mov	r7, r9
 80019be:	4646      	mov	r6, r8
 80019c0:	b5c0      	push	{r6, r7, lr}
 80019c2:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	2214      	movs	r2, #20
 80019c6:	2100      	movs	r1, #0
 80019c8:	a805      	add	r0, sp, #20
 80019ca:	f002 f90b 	bl	8003be4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <MX_GPIO_Init+0x14c>)
 80019d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019d2:	2704      	movs	r7, #4
 80019d4:	433a      	orrs	r2, r7
 80019d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019da:	403a      	ands	r2, r7
 80019dc:	9201      	str	r2, [sp, #4]
 80019de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019e2:	2220      	movs	r2, #32
 80019e4:	4311      	orrs	r1, r2
 80019e6:	6359      	str	r1, [r3, #52]	@ 0x34
 80019e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80019ea:	400a      	ands	r2, r1
 80019ec:	9202      	str	r2, [sp, #8]
 80019ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019f2:	2501      	movs	r5, #1
 80019f4:	432a      	orrs	r2, r5
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80019f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019fa:	402a      	ands	r2, r5
 80019fc:	9203      	str	r2, [sp, #12]
 80019fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a02:	2202      	movs	r2, #2
 8001a04:	4311      	orrs	r1, r2
 8001a06:	6359      	str	r1, [r3, #52]	@ 0x34
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	9204      	str	r2, [sp, #16]
 8001a0e:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 8001a10:	24c0      	movs	r4, #192	@ 0xc0
 8001a12:	0224      	lsls	r4, r4, #8
 8001a14:	4b3c      	ldr	r3, [pc, #240]	@ (8001b08 <MX_GPIO_Init+0x150>)
 8001a16:	469a      	mov	sl, r3
 8001a18:	2200      	movs	r2, #0
 8001a1a:	0021      	movs	r1, r4
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f001 f8c4 	bl	8002baa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8001a22:	4b3a      	ldr	r3, [pc, #232]	@ (8001b0c <MX_GPIO_Init+0x154>)
 8001a24:	4699      	mov	r9, r3
 8001a26:	26a0      	movs	r6, #160	@ 0xa0
 8001a28:	05f6      	lsls	r6, r6, #23
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	0019      	movs	r1, r3
 8001a2e:	0030      	movs	r0, r6
 8001a30:	f001 f8bb 	bl	8002baa <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <MX_GPIO_Init+0x158>)
 8001a36:	4698      	mov	r8, r3
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2140      	movs	r1, #64	@ 0x40
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f001 f8b4 	bl	8002baa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 8001a42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2400      	movs	r4, #0
 8001a48:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	a905      	add	r1, sp, #20
 8001a4e:	4650      	mov	r0, sl
 8001a50:	f000 ff4c 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001a54:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a56:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001a5a:	a905      	add	r1, sp, #20
 8001a5c:	482d      	ldr	r0, [pc, #180]	@ (8001b14 <MX_GPIO_Init+0x15c>)
 8001a5e:	f000 ff45 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8001a62:	464b      	mov	r3, r9
 8001a64:	9305      	str	r3, [sp, #20]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	a905      	add	r1, sp, #20
 8001a6e:	0030      	movs	r0, r6
 8001a70:	f000 ff3c 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8001a74:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a76:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <MX_GPIO_Init+0x160>)
 8001a78:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 8001a7c:	a905      	add	r1, sp, #20
 8001a7e:	0030      	movs	r0, r6
 8001a80:	f000 ff34 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 8001a84:	2382      	movs	r3, #130	@ 0x82
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <MX_GPIO_Init+0x164>)
 8001a8c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	a905      	add	r1, sp, #20
 8001a92:	0030      	movs	r0, r6
 8001a94:	f000 ff2a 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8001a98:	2360      	movs	r3, #96	@ 0x60
 8001a9a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	a905      	add	r1, sp, #20
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	f000 ff22 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8001aa8:	2340      	movs	r3, #64	@ 0x40
 8001aaa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	a905      	add	r1, sp, #20
 8001ab4:	4640      	mov	r0, r8
 8001ab6:	f000 ff19 	bl	80028ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001abe:	4b18      	ldr	r3, [pc, #96]	@ (8001b20 <MX_GPIO_Init+0x168>)
 8001ac0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	a905      	add	r1, sp, #20
 8001ac6:	4640      	mov	r0, r8
 8001ac8:	f000 ff10 	bl	80028ec <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8001acc:	4a15      	ldr	r2, [pc, #84]	@ (8001b24 <MX_GPIO_Init+0x16c>)
 8001ace:	6811      	ldr	r1, [r2, #0]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	045b      	lsls	r3, r3, #17
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2006      	movs	r0, #6
 8001ade:	f000 fee1 	bl	80028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001ae2:	2006      	movs	r0, #6
 8001ae4:	f000 fee2 	bl	80028ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	2007      	movs	r0, #7
 8001aee:	f000 fed9 	bl	80028a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001af2:	2007      	movs	r0, #7
 8001af4:	f000 feda 	bl	80028ac <HAL_NVIC_EnableIRQ>

}
 8001af8:	b00a      	add	sp, #40	@ 0x28
 8001afa:	bce0      	pop	{r5, r6, r7}
 8001afc:	46ba      	mov	sl, r7
 8001afe:	46b1      	mov	r9, r6
 8001b00:	46a8      	mov	r8, r5
 8001b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b04:	40021000 	.word	0x40021000
 8001b08:	50000800 	.word	0x50000800
 8001b0c:	00000583 	.word	0x00000583
 8001b10:	50000400 	.word	0x50000400
 8001b14:	50001400 	.word	0x50001400
 8001b18:	10210000 	.word	0x10210000
 8001b1c:	10310000 	.word	0x10310000
 8001b20:	10110000 	.word	0x10110000
 8001b24:	40010000 	.word	0x40010000

08001b28 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b28:	b510      	push	{r4, lr}
 8001b2a:	0004      	movs	r4, r0

	if (htim == &htim17)
 8001b2c:	4b20      	ldr	r3, [pc, #128]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001b2e:	4298      	cmp	r0, r3
 8001b30:	d006      	beq.n	8001b40 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8001b32:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001b34:	429c      	cmp	r4, r3
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_PeriodElapsedCallback+0x24>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8001b38:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	d00c      	beq.n	8001b58 <HAL_TIM_PeriodElapsedCallback+0x30>

	}



}
 8001b3e:	bd10      	pop	{r4, pc}
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8001b40:	481e      	ldr	r0, [pc, #120]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b42:	7901      	ldrb	r1, [r0, #4]
 8001b44:	3020      	adds	r0, #32
 8001b46:	f7ff f9ad 	bl	8000ea4 <pyd1598_dl_readout_fsm>
 8001b4a:	e7f2      	b.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0xa>
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8001b4c:	481b      	ldr	r0, [pc, #108]	@ (8001bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001b4e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001b50:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8001b52:	f7ff f8f7 	bl	8000d44 <pyd1598_serin_send_datagram_fsm>
 8001b56:	e7ef      	b.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x10>
		deadline_timer_count(&deadline_timer_light_1);
 8001b58:	4819      	ldr	r0, [pc, #100]	@ (8001bc0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001b5a:	f7ff fe17 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8001b5e:	4819      	ldr	r0, [pc, #100]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b60:	f7ff fe14 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8001b64:	4818      	ldr	r0, [pc, #96]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001b66:	f7ff fe11 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8001b6a:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001b6c:	f7ff fe0e 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_1);
 8001b70:	4817      	ldr	r0, [pc, #92]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001b72:	f7ff fe0b 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8001b76:	4817      	ldr	r0, [pc, #92]	@ (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001b78:	f7ff fe08 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8001b7c:	4816      	ldr	r0, [pc, #88]	@ (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001b7e:	f7ff fe05 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8001b82:	4816      	ldr	r0, [pc, #88]	@ (8001bdc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001b84:	f7ff fe02 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_led_indicator);
 8001b88:	4815      	ldr	r0, [pc, #84]	@ (8001be0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001b8a:	f7ff fdff 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_timeout);
 8001b8e:	4815      	ldr	r0, [pc, #84]	@ (8001be4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001b90:	f7ff fdfc 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 8001b94:	4814      	ldr	r0, [pc, #80]	@ (8001be8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001b96:	f7ff fdf9 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&ctrl_timer);
 8001b9a:	4814      	ldr	r0, [pc, #80]	@ (8001bec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001b9c:	f7ff fdf6 	bl	800178c <deadline_timer_count>
		deadline_timer_count(&vyv_timeoff);
 8001ba0:	4813      	ldr	r0, [pc, #76]	@ (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ba2:	f7ff fdf3 	bl	800178c <deadline_timer_count>
		deadline_timer_increment(&general_clock);
 8001ba6:	4813      	ldr	r0, [pc, #76]	@ (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ba8:	f7ff fdda 	bl	8001760 <deadline_timer_increment>
}
 8001bac:	e7c7      	b.n	8001b3e <HAL_TIM_PeriodElapsedCallback+0x16>
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	200007ac 	.word	0x200007ac
 8001bb4:	20000844 	.word	0x20000844
 8001bb8:	200007f8 	.word	0x200007f8
 8001bbc:	20000748 	.word	0x20000748
 8001bc0:	200006c0 	.word	0x200006c0
 8001bc4:	20000658 	.word	0x20000658
 8001bc8:	200005f0 	.word	0x200005f0
 8001bcc:	20000570 	.word	0x20000570
 8001bd0:	20000430 	.word	0x20000430
 8001bd4:	200003a8 	.word	0x200003a8
 8001bd8:	20000320 	.word	0x20000320
 8001bdc:	200002a0 	.word	0x200002a0
 8001be0:	20000498 	.word	0x20000498
 8001be4:	20000220 	.word	0x20000220
 8001be8:	200001a0 	.word	0x200001a0
 8001bec:	20000130 	.word	0x20000130
 8001bf0:	200000c8 	.word	0x200000c8
 8001bf4:	200005d8 	.word	0x200005d8

08001bf8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	0004      	movs	r4, r0


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c74 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001bfe:	2248      	movs	r2, #72	@ 0x48
 8001c00:	5a9b      	ldrh	r3, [r3, r2]
 8001c02:	4283      	cmp	r3, r0
 8001c04:	d00d      	beq.n	8001c22 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		motion_sensor.direct_link.start_fsm = true;
		TIM17->CNT = 0;
	}
	else
	{
		__NOP();
 8001c06:	46c0      	nop			@ (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001c0a:	899b      	ldrh	r3, [r3, #12]
 8001c0c:	42a3      	cmp	r3, r4
 8001c0e:	d010      	beq.n	8001c32 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
			button_positive_edge_detected(&button_light_1);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001c12:	899b      	ldrh	r3, [r3, #12]
 8001c14:	42a3      	cmp	r3, r4
 8001c16:	d017      	beq.n	8001c48 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_2);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001c18:	4b19      	ldr	r3, [pc, #100]	@ (8001c80 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001c1a:	899b      	ldrh	r3, [r3, #12]
 8001c1c:	42a3      	cmp	r3, r4
 8001c1e:	d01e      	beq.n	8001c5e <HAL_GPIO_EXTI_Rising_Callback+0x66>
		{
			button_positive_edge_detected(&button_uv);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
}
 8001c20:	bd10      	pop	{r4, pc}
		motion_sensor.direct_link.start_fsm = true;
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001c24:	3a07      	subs	r2, #7
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001c30:	e7ea      	b.n	8001c08 <HAL_GPIO_EXTI_Rising_Callback+0x10>
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c32:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001c34:	7c9b      	ldrb	r3, [r3, #18]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d1ea      	bne.n	8001c10 <HAL_GPIO_EXTI_Rising_Callback+0x18>
			button_positive_edge_detected(&button_light_1);
 8001c3a:	480f      	ldr	r0, [pc, #60]	@ (8001c78 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001c3c:	f7fe fdcd 	bl	80007da <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001c40:	4811      	ldr	r0, [pc, #68]	@ (8001c88 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001c42:	f7ff fd4e 	bl	80016e2 <deadline_timer_set_initial_time>
 8001c46:	e7e3      	b.n	8001c10 <HAL_GPIO_EXTI_Rising_Callback+0x18>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c48:	4b0c      	ldr	r3, [pc, #48]	@ (8001c7c <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001c4a:	7c9b      	ldrb	r3, [r3, #18]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d1e3      	bne.n	8001c18 <HAL_GPIO_EXTI_Rising_Callback+0x20>
			button_positive_edge_detected(&button_light_2);
 8001c50:	480a      	ldr	r0, [pc, #40]	@ (8001c7c <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001c52:	f7fe fdc2 	bl	80007da <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001c56:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001c58:	f7ff fd43 	bl	80016e2 <deadline_timer_set_initial_time>
 8001c5c:	e7dc      	b.n	8001c18 <HAL_GPIO_EXTI_Rising_Callback+0x20>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c5e:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001c60:	7c9b      	ldrb	r3, [r3, #18]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d1dc      	bne.n	8001c20 <HAL_GPIO_EXTI_Rising_Callback+0x28>
			button_positive_edge_detected(&button_uv);
 8001c66:	4806      	ldr	r0, [pc, #24]	@ (8001c80 <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001c68:	f7fe fdb7 	bl	80007da <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001c6c:	4806      	ldr	r0, [pc, #24]	@ (8001c88 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001c6e:	f7ff fd38 	bl	80016e2 <deadline_timer_set_initial_time>
}
 8001c72:	e7d5      	b.n	8001c20 <HAL_GPIO_EXTI_Rising_Callback+0x28>
 8001c74:	20000748 	.word	0x20000748
 8001c78:	2000053c 	.word	0x2000053c
 8001c7c:	20000520 	.word	0x20000520
 8001c80:	20000504 	.word	0x20000504
 8001c84:	40014800 	.word	0x40014800
 8001c88:	20000570 	.word	0x20000570

08001c8c <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	0004      	movs	r4, r0


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c92:	899b      	ldrh	r3, [r3, #12]
 8001c94:	4283      	cmp	r3, r0
 8001c96:	d008      	beq.n	8001caa <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		{
			button_negative_edge_detected(&button_light_1);
			deadline_timer_set_initial_time(&deadline_buttons);
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001c9a:	899b      	ldrh	r3, [r3, #12]
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	d00f      	beq.n	8001cc0 <HAL_GPIO_EXTI_Falling_Callback+0x34>
			button_negative_edge_detected(&button_light_2);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001ca2:	899b      	ldrh	r3, [r3, #12]
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d016      	beq.n	8001cd6 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
		{
			button_negative_edge_detected(&button_uv);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
}
 8001ca8:	bd10      	pop	{r4, pc}
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001cac:	7c9b      	ldrb	r3, [r3, #18]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d1f2      	bne.n	8001c98 <HAL_GPIO_EXTI_Falling_Callback+0xc>
			button_negative_edge_detected(&button_light_1);
 8001cb2:	480e      	ldr	r0, [pc, #56]	@ (8001cec <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001cb4:	f7fe fda1 	bl	80007fa <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 8001cb8:	480f      	ldr	r0, [pc, #60]	@ (8001cf8 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001cba:	f7ff fd12 	bl	80016e2 <deadline_timer_set_initial_time>
 8001cbe:	e7eb      	b.n	8001c98 <HAL_GPIO_EXTI_Falling_Callback+0xc>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001cc2:	7c9b      	ldrb	r3, [r3, #18]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d1eb      	bne.n	8001ca0 <HAL_GPIO_EXTI_Falling_Callback+0x14>
			button_negative_edge_detected(&button_light_2);
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001cca:	f7fe fd96 	bl	80007fa <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001cce:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001cd0:	f7ff fd07 	bl	80016e2 <deadline_timer_set_initial_time>
 8001cd4:	e7e4      	b.n	8001ca0 <HAL_GPIO_EXTI_Falling_Callback+0x14>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001cd6:	4b07      	ldr	r3, [pc, #28]	@ (8001cf4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001cd8:	7c9b      	ldrb	r3, [r3, #18]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d1e4      	bne.n	8001ca8 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
			button_negative_edge_detected(&button_uv);
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001ce0:	f7fe fd8b 	bl	80007fa <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001ce4:	4804      	ldr	r0, [pc, #16]	@ (8001cf8 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001ce6:	f7ff fcfc 	bl	80016e2 <deadline_timer_set_initial_time>
}
 8001cea:	e7dd      	b.n	8001ca8 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
 8001cec:	2000053c 	.word	0x2000053c
 8001cf0:	20000520 	.word	0x20000520
 8001cf4:	20000504 	.word	0x20000504
 8001cf8:	20000570 	.word	0x20000570

08001cfc <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cfe:	e7fe      	b.n	8001cfe <Error_Handler+0x2>

08001d00 <SystemClock_Config>:
{
 8001d00:	b500      	push	{lr}
 8001d02:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d04:	221c      	movs	r2, #28
 8001d06:	2100      	movs	r1, #0
 8001d08:	a805      	add	r0, sp, #20
 8001d0a:	f001 ff6b 	bl	8003be4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0e:	2214      	movs	r2, #20
 8001d10:	2100      	movs	r1, #0
 8001d12:	4668      	mov	r0, sp
 8001d14:	f001 ff66 	bl	8003be4 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d1c:	33fe      	adds	r3, #254	@ 0xfe
 8001d1e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d20:	3bc0      	subs	r3, #192	@ 0xc0
 8001d22:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d24:	a805      	add	r0, sp, #20
 8001d26:	f000 ff67 	bl	8002bf8 <HAL_RCC_OscConfig>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d10e      	bne.n	8001d4c <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2e:	2307      	movs	r3, #7
 8001d30:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d32:	2300      	movs	r3, #0
 8001d34:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d36:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d38:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d3a:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	4668      	mov	r0, sp
 8001d40:	f001 f8f0 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d103      	bne.n	8001d50 <SystemClock_Config+0x50>
}
 8001d48:	b00d      	add	sp, #52	@ 0x34
 8001d4a:	bd00      	pop	{pc}
    Error_Handler();
 8001d4c:	f7ff ffd6 	bl	8001cfc <Error_Handler>
    Error_Handler();
 8001d50:	f7ff ffd4 	bl	8001cfc <Error_Handler>

08001d54 <main>:
{
 8001d54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d56:	46de      	mov	lr, fp
 8001d58:	4657      	mov	r7, sl
 8001d5a:	464e      	mov	r6, r9
 8001d5c:	4645      	mov	r5, r8
 8001d5e:	b5e0      	push	{r5, r6, r7, lr}
 8001d60:	b0d9      	sub	sp, #356	@ 0x164
  HAL_Init();
 8001d62:	f000 fd1b 	bl	800279c <HAL_Init>
  SystemClock_Config();
 8001d66:	f7ff ffcb 	bl	8001d00 <SystemClock_Config>
  MX_GPIO_Init();
 8001d6a:	f7ff fe25 	bl	80019b8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001d6e:	f000 fb4f 	bl	8002410 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001d72:	f000 fbf3 	bl	800255c <MX_TIM14_Init>
  MX_TIM3_Init();
 8001d76:	f000 fb8b 	bl	8002490 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001d7a:	f000 fc21 	bl	80025c0 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001d7e:	f000 fc05 	bl	800258c <MX_TIM16_Init>
  general_clock.counts = 0;
 8001d82:	4ba1      	ldr	r3, [pc, #644]	@ (8002008 <main+0x2b4>)
 8001d84:	2000      	movs	r0, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	6018      	str	r0, [r3, #0]
 8001d8a:	6059      	str	r1, [r3, #4]
  general_clock.msec = 0;
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001d90:	23a0      	movs	r3, #160	@ 0xa0
 8001d92:	05db      	lsls	r3, r3, #23
 8001d94:	9351      	str	r3, [sp, #324]	@ 0x144
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001d96:	3220      	adds	r2, #32
 8001d98:	a902      	add	r1, sp, #8
 8001d9a:	3041      	adds	r0, #65	@ 0x41
 8001d9c:	30ff      	adds	r0, #255	@ 0xff
 8001d9e:	1809      	adds	r1, r1, r0
 8001da0:	800a      	strh	r2, [r1, #0]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 8001da2:	9353      	str	r3, [sp, #332]	@ 0x14c
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001da4:	2340      	movs	r3, #64	@ 0x40
 8001da6:	aa02      	add	r2, sp, #8
 8001da8:	21a4      	movs	r1, #164	@ 0xa4
 8001daa:	0049      	lsls	r1, r1, #1
 8001dac:	1852      	adds	r2, r2, r1
 8001dae:	8013      	strh	r3, [r2, #0]
  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8001db0:	2202      	movs	r2, #2
 8001db2:	a951      	add	r1, sp, #324	@ 0x144
 8001db4:	a855      	add	r0, sp, #340	@ 0x154
 8001db6:	f7ff fa90 	bl	80012da <switch_selector_setup>
  switch(switch_selector.value)
 8001dba:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d100      	bne.n	8001dc2 <main+0x6e>
 8001dc0:	e104      	b.n	8001fcc <main+0x278>
 8001dc2:	d80a      	bhi.n	8001dda <main+0x86>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d012      	beq.n	8001dee <main+0x9a>
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d000      	beq.n	8001dce <main+0x7a>
 8001dcc:	e105      	b.n	8001fda <main+0x286>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001dce:	4b8f      	ldr	r3, [pc, #572]	@ (800200c <main+0x2b8>)
 8001dd0:	2232      	movs	r2, #50	@ 0x32
 8001dd2:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001dd4:	3a2f      	subs	r2, #47	@ 0x2f
 8001dd6:	70da      	strb	r2, [r3, #3]
	  break;
 8001dd8:	e00e      	b.n	8001df8 <main+0xa4>
  switch(switch_selector.value)
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d000      	beq.n	8001de0 <main+0x8c>
 8001dde:	e0fc      	b.n	8001fda <main+0x286>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001de0:	4b8a      	ldr	r3, [pc, #552]	@ (800200c <main+0x2b8>)
 8001de2:	2232      	movs	r2, #50	@ 0x32
 8001de4:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001de6:	3a2f      	subs	r2, #47	@ 0x2f
 8001de8:	70da      	strb	r2, [r3, #3]
		__NOP();
 8001dea:	46c0      	nop			@ (mov r8, r8)
		break;
 8001dec:	e004      	b.n	8001df8 <main+0xa4>
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001dee:	4b87      	ldr	r3, [pc, #540]	@ (800200c <main+0x2b8>)
 8001df0:	225a      	movs	r2, #90	@ 0x5a
 8001df2:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = OFFICE_MOTION_SENSOR_WINDOW;
 8001df4:	2200      	movs	r2, #0
 8001df6:	70da      	strb	r2, [r3, #3]
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001df8:	4a84      	ldr	r2, [pc, #528]	@ (800200c <main+0x2b8>)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	7053      	strb	r3, [r2, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8001dfe:	71d3      	strb	r3, [r2, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8001e00:	2501      	movs	r5, #1
 8001e02:	7195      	strb	r5, [r2, #6]
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001e04:	2102      	movs	r1, #2
 8001e06:	7111      	strb	r1, [r2, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_2_PULSES;
 8001e08:	7095      	strb	r5, [r2, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001e0a:	7153      	strb	r3, [r2, #5]
  setin_pin.pin = SERIN_Pin;
 8001e0c:	a94f      	add	r1, sp, #316	@ 0x13c
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	808b      	strh	r3, [r1, #4]
  setin_pin.port = SERIN_GPIO_Port;
 8001e14:	487e      	ldr	r0, [pc, #504]	@ (8002010 <main+0x2bc>)
 8001e16:	904f      	str	r0, [sp, #316]	@ 0x13c
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001e18:	2007      	movs	r0, #7
 8001e1a:	7188      	strb	r0, [r1, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001e1c:	ab4d      	add	r3, sp, #308	@ 0x134
 8001e1e:	2480      	movs	r4, #128	@ 0x80
 8001e20:	46a1      	mov	r9, r4
 8001e22:	809c      	strh	r4, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001e24:	4f7b      	ldr	r7, [pc, #492]	@ (8002014 <main+0x2c0>)
 8001e26:	974d      	str	r7, [sp, #308]	@ 0x134
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001e28:	7198      	strb	r0, [r3, #6]
  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001e2a:	487b      	ldr	r0, [pc, #492]	@ (8002018 <main+0x2c4>)
 8001e2c:	9009      	str	r0, [sp, #36]	@ 0x24
 8001e2e:	a801      	add	r0, sp, #4
 8001e30:	cb50      	ldmia	r3!, {r4, r6}
 8001e32:	c050      	stmia	r0!, {r4, r6}
 8001e34:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	4b75      	ldr	r3, [pc, #468]	@ (8002010 <main+0x2bc>)
 8001e3a:	6811      	ldr	r1, [r2, #0]
 8001e3c:	6852      	ldr	r2, [r2, #4]
 8001e3e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001e40:	0020      	movs	r0, r4
 8001e42:	f7fe feec 	bl	8000c1e <pyd1598_setup>
  HAL_Delay(1000);
 8001e46:	20fa      	movs	r0, #250	@ 0xfa
 8001e48:	0080      	lsls	r0, r0, #2
 8001e4a:	f000 fcc5 	bl	80027d8 <HAL_Delay>
  pyd1598_request_write(&motion_sensor);
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f7fe fe12 	bl	8000a78 <pyd1598_request_write>
  deadline.msec = 80;
 8001e54:	4c71      	ldr	r4, [pc, #452]	@ (800201c <main+0x2c8>)
 8001e56:	2350      	movs	r3, #80	@ 0x50
 8001e58:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001e5a:	0026      	movs	r6, r4
 8001e5c:	3608      	adds	r6, #8
 8001e5e:	2210      	movs	r2, #16
 8001e60:	0031      	movs	r1, r6
 8001e62:	4668      	mov	r0, sp
 8001e64:	f001 ff04 	bl	8003c70 <memcpy>
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	486c      	ldr	r0, [pc, #432]	@ (8002020 <main+0x2cc>)
 8001e6e:	f7ff fc53 	bl	8001718 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8001e72:	2210      	movs	r2, #16
 8001e74:	0031      	movs	r1, r6
 8001e76:	4668      	mov	r0, sp
 8001e78:	f001 fefa 	bl	8003c70 <memcpy>
 8001e7c:	6822      	ldr	r2, [r4, #0]
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	4868      	ldr	r0, [pc, #416]	@ (8002024 <main+0x2d0>)
 8001e82:	f7ff fc49 	bl	8001718 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8001e86:	2210      	movs	r2, #16
 8001e88:	0031      	movs	r1, r6
 8001e8a:	4668      	mov	r0, sp
 8001e8c:	f001 fef0 	bl	8003c70 <memcpy>
 8001e90:	6822      	ldr	r2, [r4, #0]
 8001e92:	6863      	ldr	r3, [r4, #4]
 8001e94:	4864      	ldr	r0, [pc, #400]	@ (8002028 <main+0x2d4>)
 8001e96:	f7ff fc3f 	bl	8001718 <deadline_timer_setup>
  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8001e9a:	aa30      	add	r2, sp, #192	@ 0xc0
 8001e9c:	2340      	movs	r3, #64	@ 0x40
 8001e9e:	8093      	strh	r3, [r2, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001ea0:	a92c      	add	r1, sp, #176	@ 0xb0
 8001ea2:	468a      	mov	sl, r1
 8001ea4:	33c0      	adds	r3, #192	@ 0xc0
 8001ea6:	808b      	strh	r3, [r1, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8001ea8:	a928      	add	r1, sp, #160	@ 0xa0
 8001eaa:	4688      	mov	r8, r1
 8001eac:	808d      	strh	r5, [r1, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001eae:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001eb0:	2180      	movs	r1, #128	@ 0x80
 8001eb2:	00c9      	lsls	r1, r1, #3
 8001eb4:	8099      	strh	r1, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8001eb6:	ad2a      	add	r5, sp, #168	@ 0xa8
 8001eb8:	46ab      	mov	fp, r5
 8001eba:	4649      	mov	r1, r9
 8001ebc:	80a9      	strh	r1, [r5, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001ebe:	ad26      	add	r5, sp, #152	@ 0x98
 8001ec0:	46a9      	mov	r9, r5
 8001ec2:	495a      	ldr	r1, [pc, #360]	@ (800202c <main+0x2d8>)
 8001ec4:	80a9      	strh	r1, [r5, #4]
  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8001ec6:	9730      	str	r7, [sp, #192]	@ 0xc0
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001ec8:	25a0      	movs	r5, #160	@ 0xa0
 8001eca:	05ed      	lsls	r5, r5, #23
 8001ecc:	952c      	str	r5, [sp, #176]	@ 0xb0
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8001ece:	9528      	str	r5, [sp, #160]	@ 0xa0
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8001ed0:	952e      	str	r5, [sp, #184]	@ 0xb8
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001ed2:	952a      	str	r5, [sp, #168]	@ 0xa8
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001ed4:	484e      	ldr	r0, [pc, #312]	@ (8002010 <main+0x2bc>)
 8001ed6:	9026      	str	r0, [sp, #152]	@ 0x98
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001ed8:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	002b      	movs	r3, r5
 8001ede:	0039      	movs	r1, r7
 8001ee0:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8001ee2:	a844      	add	r0, sp, #272	@ 0x110
 8001ee4:	f7ff f920 	bl	8001128 <relay_setup>
  relay_setup(&light_2, light_2_output_a, light_2_output_b);
 8001ee8:	465a      	mov	r2, fp
 8001eea:	6853      	ldr	r3, [r2, #4]
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8001ef0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8001ef2:	4652      	mov	r2, sl
 8001ef4:	6852      	ldr	r2, [r2, #4]
 8001ef6:	a83b      	add	r0, sp, #236	@ 0xec
 8001ef8:	f7ff f916 	bl	8001128 <relay_setup>
  relay_setup(&light_uv, light_uv_output_a, light_uv_output_b);
 8001efc:	464a      	mov	r2, r9
 8001efe:	6853      	ldr	r3, [r2, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001f04:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8001f06:	4642      	mov	r2, r8
 8001f08:	6852      	ldr	r2, [r2, #4]
 8001f0a:	a832      	add	r0, sp, #200	@ 0xc8
 8001f0c:	f7ff f90c 	bl	8001128 <relay_setup>
  timer_buttons.msec = 100;
 8001f10:	4a47      	ldr	r2, [pc, #284]	@ (8002030 <main+0x2dc>)
 8001f12:	2364      	movs	r3, #100	@ 0x64
 8001f14:	0017      	movs	r7, r2
 8001f16:	6093      	str	r3, [r2, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001f18:	3208      	adds	r2, #8
 8001f1a:	0011      	movs	r1, r2
 8001f1c:	2210      	movs	r2, #16
 8001f1e:	4668      	mov	r0, sp
 8001f20:	f001 fea6 	bl	8003c70 <memcpy>
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4842      	ldr	r0, [pc, #264]	@ (8002034 <main+0x2e0>)
 8001f2a:	f7ff fbf5 	bl	8001718 <deadline_timer_setup>
  button_input.pin = LAMP1_IN_Pin;
 8001f2e:	af24      	add	r7, sp, #144	@ 0x90
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	80bb      	strh	r3, [r7, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 8001f36:	9524      	str	r5, [sp, #144]	@ 0x90
  button_setup(&button_light_1, button_input);
 8001f38:	483f      	ldr	r0, [pc, #252]	@ (8002038 <main+0x2e4>)
 8001f3a:	0029      	movs	r1, r5
 8001f3c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001f3e:	f7fe fc35 	bl	80007ac <button_setup>
  button_input.pin = LAMP2_IN_Pin;
 8001f42:	2308      	movs	r3, #8
 8001f44:	80bb      	strh	r3, [r7, #4]
  button_setup(&button_light_2, button_input);
 8001f46:	483d      	ldr	r0, [pc, #244]	@ (800203c <main+0x2e8>)
 8001f48:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8001f4a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001f4c:	f7fe fc2e 	bl	80007ac <button_setup>
  button_input.pin = UV_IN_Pin;
 8001f50:	2304      	movs	r3, #4
 8001f52:	80bb      	strh	r3, [r7, #4]
  button_setup(&button_uv, button_input);
 8001f54:	483a      	ldr	r0, [pc, #232]	@ (8002040 <main+0x2ec>)
 8001f56:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8001f58:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001f5a:	f7fe fc27 	bl	80007ac <button_setup>
  signal_led_gpio.pin = LED_Pin;
 8001f5e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001f60:	2102      	movs	r1, #2
 8001f62:	8099      	strh	r1, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 8001f64:	951f      	str	r5, [sp, #124]	@ 0x7c
  led_signal_setup(&signal_led, signal_led_gpio);
 8001f66:	0029      	movs	r1, r5
 8001f68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001f6a:	a821      	add	r0, sp, #132	@ 0x84
 8001f6c:	f7fe fcae 	bl	80008cc <led_signal_setup>
  deadline.msec = 500;
 8001f70:	23fa      	movs	r3, #250	@ 0xfa
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	60a3      	str	r3, [r4, #8]
  deadline.sec = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60e3      	str	r3, [r4, #12]
  deadline_timer_setup(&deadline_led_indicator, deadline);
 8001f7a:	4d32      	ldr	r5, [pc, #200]	@ (8002044 <main+0x2f0>)
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	0031      	movs	r1, r6
 8001f80:	4668      	mov	r0, sp
 8001f82:	f001 fe75 	bl	8003c70 <memcpy>
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	6863      	ldr	r3, [r4, #4]
 8001f8a:	0028      	movs	r0, r5
 8001f8c:	f7ff fbc4 	bl	8001718 <deadline_timer_setup>
  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 8001f90:	2101      	movs	r1, #1
 8001f92:	a821      	add	r0, sp, #132	@ 0x84
 8001f94:	f7fe fca7 	bl	80008e6 <led_signal_type_selector>
    switch(switch_selector.value)
 8001f98:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d100      	bne.n	8001fa0 <main+0x24c>
 8001f9e:	e104      	b.n	80021aa <main+0x456>
 8001fa0:	d81d      	bhi.n	8001fde <main+0x28a>
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d05e      	beq.n	8002064 <main+0x310>
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d000      	beq.n	8001fac <main+0x258>
 8001faa:	e10e      	b.n	80021ca <main+0x476>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <main+0x2f4>)
 8001fae:	4a27      	ldr	r2, [pc, #156]	@ (800204c <main+0x2f8>)
 8001fb0:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <main+0x2fc>)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	6099      	str	r1, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001fb8:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <main+0x300>)
 8001fba:	21e1      	movs	r1, #225	@ 0xe1
 8001fbc:	0089      	lsls	r1, r1, #2
 8001fbe:	6099      	str	r1, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	@ (8002058 <main+0x304>)
 8001fc2:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8001fc4:	4b25      	ldr	r3, [pc, #148]	@ (800205c <main+0x308>)
 8001fc6:	4a26      	ldr	r2, [pc, #152]	@ (8002060 <main+0x30c>)
 8001fc8:	609a      	str	r2, [r3, #8]
    	  break;
 8001fca:	e05a      	b.n	8002082 <main+0x32e>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <main+0x2b8>)
 8001fce:	2232      	movs	r2, #50	@ 0x32
 8001fd0:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001fd2:	3a2f      	subs	r2, #47	@ 0x2f
 8001fd4:	70da      	strb	r2, [r3, #3]
		__NOP();
 8001fd6:	46c0      	nop			@ (mov r8, r8)
		break;
 8001fd8:	e70e      	b.n	8001df8 <main+0xa4>
		__NOP();
 8001fda:	46c0      	nop			@ (mov r8, r8)
	  break;
 8001fdc:	e70c      	b.n	8001df8 <main+0xa4>
    switch(switch_selector.value)
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d000      	beq.n	8001fe4 <main+0x290>
 8001fe2:	e0f2      	b.n	80021ca <main+0x476>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <main+0x2f4>)
 8001fe6:	4a19      	ldr	r2, [pc, #100]	@ (800204c <main+0x2f8>)
 8001fe8:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <main+0x2fc>)
 8001fec:	2100      	movs	r1, #0
 8001fee:	6099      	str	r1, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <main+0x300>)
 8001ff2:	21e1      	movs	r1, #225	@ 0xe1
 8001ff4:	0089      	lsls	r1, r1, #2
 8001ff6:	6099      	str	r1, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <main+0x304>)
 8001ffa:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8001ffc:	4b17      	ldr	r3, [pc, #92]	@ (800205c <main+0x308>)
 8001ffe:	4a18      	ldr	r2, [pc, #96]	@ (8002060 <main+0x30c>)
 8002000:	609a      	str	r2, [r3, #8]
    	  __NOP();
 8002002:	46c0      	nop			@ (mov r8, r8)
    	  break;
 8002004:	e03d      	b.n	8002082 <main+0x32e>
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	200005d8 	.word	0x200005d8
 800200c:	20000740 	.word	0x20000740
 8002010:	50000800 	.word	0x50000800
 8002014:	50000400 	.word	0x50000400
 8002018:	20000748 	.word	0x20000748
 800201c:	20000728 	.word	0x20000728
 8002020:	200006c0 	.word	0x200006c0
 8002024:	20000658 	.word	0x20000658
 8002028:	200005f0 	.word	0x200005f0
 800202c:	ffff8000 	.word	0xffff8000
 8002030:	20000558 	.word	0x20000558
 8002034:	20000570 	.word	0x20000570
 8002038:	2000053c 	.word	0x2000053c
 800203c:	20000520 	.word	0x20000520
 8002040:	20000504 	.word	0x20000504
 8002044:	20000498 	.word	0x20000498
 8002048:	20000418 	.word	0x20000418
 800204c:	00002710 	.word	0x00002710
 8002050:	20000390 	.word	0x20000390
 8002054:	20000288 	.word	0x20000288
 8002058:	20000308 	.word	0x20000308
 800205c:	20000208 	.word	0x20000208
 8002060:	00001388 	.word	0x00001388
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 8002064:	4b7e      	ldr	r3, [pc, #504]	@ (8002260 <main+0x50c>)
 8002066:	4a7f      	ldr	r2, [pc, #508]	@ (8002264 <main+0x510>)
 8002068:	609a      	str	r2, [r3, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 800206a:	4b7f      	ldr	r3, [pc, #508]	@ (8002268 <main+0x514>)
 800206c:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 800206e:	4b7f      	ldr	r3, [pc, #508]	@ (800226c <main+0x518>)
 8002070:	22e1      	movs	r2, #225	@ 0xe1
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 8002076:	4b7e      	ldr	r3, [pc, #504]	@ (8002270 <main+0x51c>)
 8002078:	4a7e      	ldr	r2, [pc, #504]	@ (8002274 <main+0x520>)
 800207a:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_timeout.msec = OFFICE_LAMP_UV_TIMEOUT_MS;
 800207c:	4b7e      	ldr	r3, [pc, #504]	@ (8002278 <main+0x524>)
 800207e:	4a7f      	ldr	r2, [pc, #508]	@ (800227c <main+0x528>)
 8002080:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8002082:	4c77      	ldr	r4, [pc, #476]	@ (8002260 <main+0x50c>)
 8002084:	4d7e      	ldr	r5, [pc, #504]	@ (8002280 <main+0x52c>)
 8002086:	0027      	movs	r7, r4
 8002088:	3708      	adds	r7, #8
 800208a:	2210      	movs	r2, #16
 800208c:	0039      	movs	r1, r7
 800208e:	4668      	mov	r0, sp
 8002090:	f001 fdee 	bl	8003c70 <memcpy>
 8002094:	6822      	ldr	r2, [r4, #0]
 8002096:	6863      	ldr	r3, [r4, #4]
 8002098:	0028      	movs	r0, r5
 800209a:	f7ff fb3d 	bl	8001718 <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 800209e:	4b79      	ldr	r3, [pc, #484]	@ (8002284 <main+0x530>)
 80020a0:	2600      	movs	r6, #0
 80020a2:	701e      	strb	r6, [r3, #0]
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 80020a4:	4d78      	ldr	r5, [pc, #480]	@ (8002288 <main+0x534>)
 80020a6:	2210      	movs	r2, #16
 80020a8:	0039      	movs	r1, r7
 80020aa:	4668      	mov	r0, sp
 80020ac:	f001 fde0 	bl	8003c70 <memcpy>
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	0028      	movs	r0, r5
 80020b6:	f7ff fb2f 	bl	8001718 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 80020ba:	4b74      	ldr	r3, [pc, #464]	@ (800228c <main+0x538>)
 80020bc:	701e      	strb	r6, [r3, #0]
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 80020be:	4c6c      	ldr	r4, [pc, #432]	@ (8002270 <main+0x51c>)
 80020c0:	4d73      	ldr	r5, [pc, #460]	@ (8002290 <main+0x53c>)
 80020c2:	0021      	movs	r1, r4
 80020c4:	3108      	adds	r1, #8
 80020c6:	2210      	movs	r2, #16
 80020c8:	4668      	mov	r0, sp
 80020ca:	f001 fdd1 	bl	8003c70 <memcpy>
 80020ce:	6822      	ldr	r2, [r4, #0]
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	0028      	movs	r0, r5
 80020d4:	f7ff fb20 	bl	8001718 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 80020d8:	4c64      	ldr	r4, [pc, #400]	@ (800226c <main+0x518>)
 80020da:	4d6e      	ldr	r5, [pc, #440]	@ (8002294 <main+0x540>)
 80020dc:	0021      	movs	r1, r4
 80020de:	3108      	adds	r1, #8
 80020e0:	2210      	movs	r2, #16
 80020e2:	4668      	mov	r0, sp
 80020e4:	f001 fdc4 	bl	8003c70 <memcpy>
 80020e8:	6822      	ldr	r2, [r4, #0]
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	0028      	movs	r0, r5
 80020ee:	f7ff fb13 	bl	8001718 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 80020f2:	4c61      	ldr	r4, [pc, #388]	@ (8002278 <main+0x524>)
 80020f4:	4d68      	ldr	r5, [pc, #416]	@ (8002298 <main+0x544>)
 80020f6:	0021      	movs	r1, r4
 80020f8:	3108      	adds	r1, #8
 80020fa:	2210      	movs	r2, #16
 80020fc:	4668      	mov	r0, sp
 80020fe:	f001 fdb7 	bl	8003c70 <memcpy>
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	6863      	ldr	r3, [r4, #4]
 8002106:	0028      	movs	r0, r5
 8002108:	f7ff fb06 	bl	8001718 <deadline_timer_setup>
  deadline.msec = 5000;
 800210c:	4c63      	ldr	r4, [pc, #396]	@ (800229c <main+0x548>)
 800210e:	4b64      	ldr	r3, [pc, #400]	@ (80022a0 <main+0x54c>)
 8002110:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8002112:	4d64      	ldr	r5, [pc, #400]	@ (80022a4 <main+0x550>)
 8002114:	0021      	movs	r1, r4
 8002116:	3108      	adds	r1, #8
 8002118:	2210      	movs	r2, #16
 800211a:	4668      	mov	r0, sp
 800211c:	f001 fda8 	bl	8003c70 <memcpy>
 8002120:	6822      	ldr	r2, [r4, #0]
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	0028      	movs	r0, r5
 8002126:	f7ff faf7 	bl	8001718 <deadline_timer_setup>
  if(switch_selector.value == MOTION_SWITCH_MODE_3)
 800212a:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 800212c:	2b03      	cmp	r3, #3
 800212e:	d04e      	beq.n	80021ce <main+0x47a>
	HAL_TIM_Base_Start_IT(&htim1);
 8002130:	485d      	ldr	r0, [pc, #372]	@ (80022a8 <main+0x554>)
 8002132:	f001 f90b 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 8002136:	485d      	ldr	r0, [pc, #372]	@ (80022ac <main+0x558>)
 8002138:	f001 f908 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 800213c:	485c      	ldr	r0, [pc, #368]	@ (80022b0 <main+0x55c>)
 800213e:	f001 f905 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002142:	2200      	movs	r2, #0
 8002144:	2100      	movs	r1, #0
 8002146:	2016      	movs	r0, #22
 8002148:	f000 fbac 	bl	80028a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800214c:	2016      	movs	r0, #22
 800214e:	f000 fbad 	bl	80028ac <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim17);
 8002152:	4858      	ldr	r0, [pc, #352]	@ (80022b4 <main+0x560>)
 8002154:	f001 f8fa 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 8002158:	2201      	movs	r2, #1
 800215a:	2100      	movs	r1, #0
 800215c:	2007      	movs	r0, #7
 800215e:	f000 fba1 	bl	80028a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002162:	2007      	movs	r0, #7
 8002164:	f000 fba2 	bl	80028ac <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2103      	movs	r1, #3
 800216c:	2006      	movs	r0, #6
 800216e:	f000 fb99 	bl	80028a4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002172:	2006      	movs	r0, #6
 8002174:	f000 fb9a 	bl	80028ac <HAL_NVIC_EnableIRQ>
  relay_ask_off_pulse_fsm(&light_1);
 8002178:	a844      	add	r0, sp, #272	@ 0x110
 800217a:	f7fe ff6f 	bl	800105c <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_2);
 800217e:	a83b      	add	r0, sp, #236	@ 0xec
 8002180:	f7fe ff6c 	bl	800105c <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_uv);
 8002184:	a832      	add	r0, sp, #200	@ 0xc8
 8002186:	f7fe ff69 	bl	800105c <relay_ask_off_pulse_fsm>
  uv_state = MOTION_LIGHT_UV_IDLE;
 800218a:	4a4b      	ldr	r2, [pc, #300]	@ (80022b8 <main+0x564>)
 800218c:	2300      	movs	r3, #0
 800218e:	7013      	strb	r3, [r2, #0]
  abort_uv = MOTION_ABORT_FALSE;
 8002190:	4a4a      	ldr	r2, [pc, #296]	@ (80022bc <main+0x568>)
 8002192:	2101      	movs	r1, #1
 8002194:	7011      	strb	r1, [r2, #0]
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 8002196:	4a4a      	ldr	r2, [pc, #296]	@ (80022c0 <main+0x56c>)
 8002198:	7013      	strb	r3, [r2, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 800219a:	4a4a      	ldr	r2, [pc, #296]	@ (80022c4 <main+0x570>)
 800219c:	7013      	strb	r3, [r2, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 800219e:	4a4a      	ldr	r2, [pc, #296]	@ (80022c8 <main+0x574>)
 80021a0:	7013      	strb	r3, [r2, #0]
  led_signal_stop(&signal_led);
 80021a2:	a821      	add	r0, sp, #132	@ 0x84
 80021a4:	f7fe fba6 	bl	80008f4 <led_signal_stop>
 80021a8:	e04a      	b.n	8002240 <main+0x4ec>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002260 <main+0x50c>)
 80021ac:	4a33      	ldr	r2, [pc, #204]	@ (800227c <main+0x528>)
 80021ae:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <main+0x514>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	6099      	str	r1, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <main+0x518>)
 80021b8:	21e1      	movs	r1, #225	@ 0xe1
 80021ba:	0089      	lsls	r1, r1, #2
 80021bc:	6099      	str	r1, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 80021be:	4b2c      	ldr	r3, [pc, #176]	@ (8002270 <main+0x51c>)
 80021c0:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002278 <main+0x524>)
 80021c4:	4a36      	ldr	r2, [pc, #216]	@ (80022a0 <main+0x54c>)
 80021c6:	609a      	str	r2, [r3, #8]
    	  break;
 80021c8:	e75b      	b.n	8002082 <main+0x32e>
    	  __NOP();
 80021ca:	46c0      	nop			@ (mov r8, r8)
    	  break;
 80021cc:	e759      	b.n	8002082 <main+0x32e>
	  lights.relay = &light_2;
 80021ce:	ab3b      	add	r3, sp, #236	@ 0xec
 80021d0:	930d      	str	r3, [sp, #52]	@ 0x34
	  lights.deadline_timer = &deadline_timer_light_1;
 80021d2:	4b3e      	ldr	r3, [pc, #248]	@ (80022cc <main+0x578>)
 80021d4:	930e      	str	r3, [sp, #56]	@ 0x38
	  fan.relay = &light_uv;
 80021d6:	ab32      	add	r3, sp, #200	@ 0xc8
 80021d8:	930b      	str	r3, [sp, #44]	@ 0x2c
	  fan.deadline_timer = &deadline_timer_light_2;
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <main+0x57c>)
 80021dc:	930c      	str	r3, [sp, #48]	@ 0x30
	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <main+0x580>)
 80021e0:	4a3d      	ldr	r2, [pc, #244]	@ (80022d8 <main+0x584>)
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	aa0b      	add	r2, sp, #44	@ 0x2c
 80021e6:	a90d      	add	r1, sp, #52	@ 0x34
 80021e8:	a819      	add	r0, sp, #100	@ 0x64
 80021ea:	f7ff f8a5 	bl	8001338 <nutone_setup>
	  button_white.button = &button_light_1;
 80021ee:	4b3b      	ldr	r3, [pc, #236]	@ (80022dc <main+0x588>)
 80021f0:	9315      	str	r3, [sp, #84]	@ 0x54
	  button_white.btn_timer = &deadline_buttons;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <main+0x58c>)
 80021f4:	9316      	str	r3, [sp, #88]	@ 0x58
	  button_fan.button = &button_light_2;
 80021f6:	4a3b      	ldr	r2, [pc, #236]	@ (80022e4 <main+0x590>)
 80021f8:	9217      	str	r2, [sp, #92]	@ 0x5c
	  button_fan.btn_timer = &deadline_buttons;
 80021fa:	9318      	str	r3, [sp, #96]	@ 0x60
	  button_vyv.button = &button_uv;
 80021fc:	4a3a      	ldr	r2, [pc, #232]	@ (80022e8 <main+0x594>)
 80021fe:	9213      	str	r2, [sp, #76]	@ 0x4c
	  button_vyv.btn_timer = &deadline_buttons;
 8002200:	9314      	str	r3, [sp, #80]	@ 0x50
	  motion_sensor_hand.motion_sensor = &motion_sensor;
 8002202:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <main+0x598>)
 8002204:	9311      	str	r3, [sp, #68]	@ 0x44
	  led_signal_hand.led_signal = &signal_led;
 8002206:	ab21      	add	r3, sp, #132	@ 0x84
 8002208:	930f      	str	r3, [sp, #60]	@ 0x3c
	  led_signal_hand.led_signal_timer = &deadline_led_indicator;
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <main+0x59c>)
 800220c:	9310      	str	r3, [sp, #64]	@ 0x40
	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 800220e:	4839      	ldr	r0, [pc, #228]	@ (80022f4 <main+0x5a0>)
 8002210:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <main+0x540>)
 8002212:	9307      	str	r3, [sp, #28]
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <main+0x544>)
 8002216:	9306      	str	r3, [sp, #24]
 8002218:	4b1d      	ldr	r3, [pc, #116]	@ (8002290 <main+0x53c>)
 800221a:	9305      	str	r3, [sp, #20]
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <main+0x52c>)
 800221e:	9304      	str	r3, [sp, #16]
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <main+0x534>)
 8002222:	9303      	str	r3, [sp, #12]
 8002224:	ab0f      	add	r3, sp, #60	@ 0x3c
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	ab13      	add	r3, sp, #76	@ 0x4c
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	ab15      	add	r3, sp, #84	@ 0x54
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	ab17      	add	r3, sp, #92	@ 0x5c
 8002232:	aa11      	add	r2, sp, #68	@ 0x44
 8002234:	a919      	add	r1, sp, #100	@ 0x64
 8002236:	f7fd fff3 	bl	8000220 <nutone_app_config>
 800223a:	e779      	b.n	8002130 <main+0x3dc>
	  switch(switch_selector.value)
 800223c:	2b01      	cmp	r3, #1
 800223e:	d80d      	bhi.n	800225c <main+0x508>
 8002240:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8002242:	2b02      	cmp	r3, #2
 8002244:	d006      	beq.n	8002254 <main+0x500>
 8002246:	d9f9      	bls.n	800223c <main+0x4e8>
 8002248:	2b03      	cmp	r3, #3
 800224a:	d107      	bne.n	800225c <main+0x508>
			  nutone_app_process(&nutone_app_hand);
 800224c:	4829      	ldr	r0, [pc, #164]	@ (80022f4 <main+0x5a0>)
 800224e:	f7fe faa1 	bl	8000794 <nutone_app_process>
			  break;
 8002252:	e7f5      	b.n	8002240 <main+0x4ec>
			  signal_led.type = LED_SIGNAL_BLINK;
 8002254:	ab21      	add	r3, sp, #132	@ 0x84
 8002256:	2202      	movs	r2, #2
 8002258:	725a      	strb	r2, [r3, #9]
			  break;
 800225a:	e7f1      	b.n	8002240 <main+0x4ec>
			  __NOP();
 800225c:	46c0      	nop			@ (mov r8, r8)
			  break;
 800225e:	e7ef      	b.n	8002240 <main+0x4ec>
 8002260:	20000418 	.word	0x20000418
 8002264:	0000ea60 	.word	0x0000ea60
 8002268:	20000390 	.word	0x20000390
 800226c:	20000288 	.word	0x20000288
 8002270:	20000308 	.word	0x20000308
 8002274:	0001d4c0 	.word	0x0001d4c0
 8002278:	20000208 	.word	0x20000208
 800227c:	00002710 	.word	0x00002710
 8002280:	20000430 	.word	0x20000430
 8002284:	20000410 	.word	0x20000410
 8002288:	200003a8 	.word	0x200003a8
 800228c:	20000388 	.word	0x20000388
 8002290:	20000320 	.word	0x20000320
 8002294:	200002a0 	.word	0x200002a0
 8002298:	20000220 	.word	0x20000220
 800229c:	20000728 	.word	0x20000728
 80022a0:	00001388 	.word	0x00001388
 80022a4:	200001a0 	.word	0x200001a0
 80022a8:	200008dc 	.word	0x200008dc
 80022ac:	20000844 	.word	0x20000844
 80022b0:	200007f8 	.word	0x200007f8
 80022b4:	200007ac 	.word	0x200007ac
 80022b8:	20000198 	.word	0x20000198
 80022bc:	20000008 	.word	0x20000008
 80022c0:	20000502 	.word	0x20000502
 80022c4:	20000501 	.word	0x20000501
 80022c8:	20000500 	.word	0x20000500
 80022cc:	200006c0 	.word	0x200006c0
 80022d0:	20000658 	.word	0x20000658
 80022d4:	20000130 	.word	0x20000130
 80022d8:	200000c8 	.word	0x200000c8
 80022dc:	2000053c 	.word	0x2000053c
 80022e0:	20000570 	.word	0x20000570
 80022e4:	20000520 	.word	0x20000520
 80022e8:	20000504 	.word	0x20000504
 80022ec:	20000748 	.word	0x20000748
 80022f0:	20000498 	.word	0x20000498
 80022f4:	20000084 	.word	0x20000084

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b500      	push	{lr}
 80022fa:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <HAL_MspInit+0x38>)
 80022fe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002300:	2201      	movs	r2, #1
 8002302:	4311      	orrs	r1, r2
 8002304:	6419      	str	r1, [r3, #64]	@ 0x40
 8002306:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002308:	400a      	ands	r2, r1
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002310:	2180      	movs	r1, #128	@ 0x80
 8002312:	0549      	lsls	r1, r1, #21
 8002314:	430a      	orrs	r2, r1
 8002316:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	400b      	ands	r3, r1
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002320:	2008      	movs	r0, #8
 8002322:	f000 fa6b 	bl	80027fc <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002326:	2010      	movs	r0, #16
 8002328:	f000 fa68 	bl	80027fc <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232c:	b003      	add	sp, #12
 800232e:	bd00      	pop	{pc}
 8002330:	40021000 	.word	0x40021000

08002334 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002334:	e7fe      	b.n	8002334 <NMI_Handler>

08002336 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002336:	e7fe      	b.n	8002336 <HardFault_Handler>

08002338 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002338:	4770      	bx	lr

0800233a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800233a:	4770      	bx	lr

0800233c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233e:	f000 fa39 	bl	80027b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002342:	bd10      	pop	{r4, pc}

08002344 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002344:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 8002346:	2004      	movs	r0, #4
 8002348:	f000 fc3e 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 800234c:	2008      	movs	r0, #8
 800234e:	f000 fc3b 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002352:	bd10      	pop	{r4, pc}

08002354 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002354:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 8002356:	2080      	movs	r0, #128	@ 0x80
 8002358:	f000 fc36 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 800235c:	2080      	movs	r0, #128	@ 0x80
 800235e:	0080      	lsls	r0, r0, #2
 8002360:	f000 fc32 	bl	8002bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002364:	bd10      	pop	{r4, pc}
	...

08002368 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002368:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800236a:	4802      	ldr	r0, [pc, #8]	@ (8002374 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 800236c:	f001 f828 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002370:	bd10      	pop	{r4, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	200008dc 	.word	0x200008dc

08002378 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002378:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800237a:	4802      	ldr	r0, [pc, #8]	@ (8002384 <TIM1_CC_IRQHandler+0xc>)
 800237c:	f001 f820 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002380:	bd10      	pop	{r4, pc}
 8002382:	46c0      	nop			@ (mov r8, r8)
 8002384:	200008dc 	.word	0x200008dc

08002388 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002388:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800238a:	4802      	ldr	r0, [pc, #8]	@ (8002394 <TIM14_IRQHandler+0xc>)
 800238c:	f001 f818 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002390:	bd10      	pop	{r4, pc}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	20000844 	.word	0x20000844

08002398 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002398:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800239a:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <TIM16_IRQHandler+0xc>)
 800239c:	f001 f810 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	200007f8 	.word	0x200007f8

080023a8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80023a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80023aa:	4802      	ldr	r0, [pc, #8]	@ (80023b4 <TIM17_IRQHandler+0xc>)
 80023ac:	f001 f808 	bl	80033c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80023b0:	bd10      	pop	{r4, pc}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	200007ac 	.word	0x200007ac

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b510      	push	{r4, lr}
 80023ba:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023bc:	4a0c      	ldr	r2, [pc, #48]	@ (80023f0 <_sbrk+0x38>)
 80023be:	490d      	ldr	r1, [pc, #52]	@ (80023f4 <_sbrk+0x3c>)
 80023c0:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c2:	490d      	ldr	r1, [pc, #52]	@ (80023f8 <_sbrk+0x40>)
 80023c4:	6809      	ldr	r1, [r1, #0]
 80023c6:	2900      	cmp	r1, #0
 80023c8:	d007      	beq.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	490b      	ldr	r1, [pc, #44]	@ (80023f8 <_sbrk+0x40>)
 80023cc:	6808      	ldr	r0, [r1, #0]
 80023ce:	18c3      	adds	r3, r0, r3
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d806      	bhi.n	80023e2 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80023d4:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <_sbrk+0x40>)
 80023d6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80023d8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80023da:	4907      	ldr	r1, [pc, #28]	@ (80023f8 <_sbrk+0x40>)
 80023dc:	4807      	ldr	r0, [pc, #28]	@ (80023fc <_sbrk+0x44>)
 80023de:	6008      	str	r0, [r1, #0]
 80023e0:	e7f3      	b.n	80023ca <_sbrk+0x12>
    errno = ENOMEM;
 80023e2:	f001 fc19 	bl	8003c18 <__errno>
 80023e6:	230c      	movs	r3, #12
 80023e8:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80023ea:	2001      	movs	r0, #1
 80023ec:	4240      	negs	r0, r0
 80023ee:	e7f3      	b.n	80023d8 <_sbrk+0x20>
 80023f0:	20001800 	.word	0x20001800
 80023f4:	00000400 	.word	0x00000400
 80023f8:	200007a8 	.word	0x200007a8
 80023fc:	20000a78 	.word	0x20000a78

08002400 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002400:	4b02      	ldr	r3, [pc, #8]	@ (800240c <SystemInit+0xc>)
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	0512      	lsls	r2, r2, #20
 8002406:	609a      	str	r2, [r3, #8]
#endif
}
 8002408:	4770      	bx	lr
 800240a:	46c0      	nop			@ (mov r8, r8)
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002410:	b500      	push	{lr}
 8002412:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002414:	2210      	movs	r2, #16
 8002416:	2100      	movs	r1, #0
 8002418:	a804      	add	r0, sp, #16
 800241a:	f001 fbe3 	bl	8003be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241e:	220c      	movs	r2, #12
 8002420:	2100      	movs	r1, #0
 8002422:	a801      	add	r0, sp, #4
 8002424:	f001 fbde 	bl	8003be4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002428:	4817      	ldr	r0, [pc, #92]	@ (8002488 <MX_TIM1_Init+0x78>)
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <MX_TIM1_Init+0x7c>)
 800242c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 48-1;
 800242e:	232f      	movs	r3, #47	@ 0x2f
 8002430:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	2300      	movs	r3, #0
 8002434:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000;
 8002436:	22fa      	movs	r2, #250	@ 0xfa
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243c:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800243e:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002442:	f001 f8b5 	bl	80035b0 <HAL_TIM_Base_Init>
 8002446:	2800      	cmp	r0, #0
 8002448:	d115      	bne.n	8002476 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002450:	480d      	ldr	r0, [pc, #52]	@ (8002488 <MX_TIM1_Init+0x78>)
 8002452:	a904      	add	r1, sp, #16
 8002454:	f001 f9ba 	bl	80037cc <HAL_TIM_ConfigClockSource>
 8002458:	2800      	cmp	r0, #0
 800245a:	d10f      	bne.n	800247c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800245c:	2340      	movs	r3, #64	@ 0x40
 800245e:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002460:	2300      	movs	r3, #0
 8002462:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002464:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002466:	4808      	ldr	r0, [pc, #32]	@ (8002488 <MX_TIM1_Init+0x78>)
 8002468:	a901      	add	r1, sp, #4
 800246a:	f001 fac3 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 800246e:	2800      	cmp	r0, #0
 8002470:	d107      	bne.n	8002482 <MX_TIM1_Init+0x72>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002472:	b009      	add	sp, #36	@ 0x24
 8002474:	bd00      	pop	{pc}
    Error_Handler();
 8002476:	f7ff fc41 	bl	8001cfc <Error_Handler>
 800247a:	e7e6      	b.n	800244a <MX_TIM1_Init+0x3a>
    Error_Handler();
 800247c:	f7ff fc3e 	bl	8001cfc <Error_Handler>
 8002480:	e7ec      	b.n	800245c <MX_TIM1_Init+0x4c>
    Error_Handler();
 8002482:	f7ff fc3b 	bl	8001cfc <Error_Handler>
}
 8002486:	e7f4      	b.n	8002472 <MX_TIM1_Init+0x62>
 8002488:	200008dc 	.word	0x200008dc
 800248c:	40012c00 	.word	0x40012c00

08002490 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002490:	b500      	push	{lr}
 8002492:	b091      	sub	sp, #68	@ 0x44

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002494:	2214      	movs	r2, #20
 8002496:	2100      	movs	r1, #0
 8002498:	a80b      	add	r0, sp, #44	@ 0x2c
 800249a:	f001 fba3 	bl	8003be4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800249e:	220c      	movs	r2, #12
 80024a0:	2100      	movs	r1, #0
 80024a2:	a808      	add	r0, sp, #32
 80024a4:	f001 fb9e 	bl	8003be4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024a8:	221c      	movs	r2, #28
 80024aa:	2100      	movs	r1, #0
 80024ac:	a801      	add	r0, sp, #4
 80024ae:	f001 fb99 	bl	8003be4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024b2:	4827      	ldr	r0, [pc, #156]	@ (8002550 <MX_TIM3_Init+0xc0>)
 80024b4:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <MX_TIM3_Init+0xc4>)
 80024b6:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 47;
 80024b8:	232f      	movs	r3, #47	@ 0x2f
 80024ba:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024bc:	2300      	movs	r3, #0
 80024be:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 80024c0:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <MX_TIM3_Init+0xc8>)
 80024c2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c8:	f001 f872 	bl	80035b0 <HAL_TIM_Base_Init>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	d12c      	bne.n	800252a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80024d0:	481f      	ldr	r0, [pc, #124]	@ (8002550 <MX_TIM3_Init+0xc0>)
 80024d2:	f001 f89d 	bl	8003610 <HAL_TIM_OC_Init>
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d12a      	bne.n	8002530 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80024da:	481d      	ldr	r0, [pc, #116]	@ (8002550 <MX_TIM3_Init+0xc0>)
 80024dc:	2108      	movs	r1, #8
 80024de:	f001 f8c7 	bl	8003670 <HAL_TIM_OnePulse_Init>
 80024e2:	2800      	cmp	r0, #0
 80024e4:	d127      	bne.n	8002536 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80024e6:	2300      	movs	r3, #0
 80024e8:	930b      	str	r3, [sp, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80024ea:	3310      	adds	r3, #16
 80024ec:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80024ee:	4818      	ldr	r0, [pc, #96]	@ (8002550 <MX_TIM3_Init+0xc0>)
 80024f0:	a90b      	add	r1, sp, #44	@ 0x2c
 80024f2:	f001 fa51 	bl	8003998 <HAL_TIM_SlaveConfigSynchro>
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d120      	bne.n	800253c <MX_TIM3_Init+0xac>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fe:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002500:	4813      	ldr	r0, [pc, #76]	@ (8002550 <MX_TIM3_Init+0xc0>)
 8002502:	a908      	add	r1, sp, #32
 8002504:	f001 fa76 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002508:	2800      	cmp	r0, #0
 800250a:	d11a      	bne.n	8002542 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800250c:	2300      	movs	r3, #0
 800250e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 130;
 8002510:	2282      	movs	r2, #130	@ 0x82
 8002512:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002514:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002516:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002518:	480d      	ldr	r0, [pc, #52]	@ (8002550 <MX_TIM3_Init+0xc0>)
 800251a:	2200      	movs	r2, #0
 800251c:	a901      	add	r1, sp, #4
 800251e:	f001 f913 	bl	8003748 <HAL_TIM_OC_ConfigChannel>
 8002522:	2800      	cmp	r0, #0
 8002524:	d110      	bne.n	8002548 <MX_TIM3_Init+0xb8>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002526:	b011      	add	sp, #68	@ 0x44
 8002528:	bd00      	pop	{pc}
    Error_Handler();
 800252a:	f7ff fbe7 	bl	8001cfc <Error_Handler>
 800252e:	e7cf      	b.n	80024d0 <MX_TIM3_Init+0x40>
    Error_Handler();
 8002530:	f7ff fbe4 	bl	8001cfc <Error_Handler>
 8002534:	e7d1      	b.n	80024da <MX_TIM3_Init+0x4a>
    Error_Handler();
 8002536:	f7ff fbe1 	bl	8001cfc <Error_Handler>
 800253a:	e7d4      	b.n	80024e6 <MX_TIM3_Init+0x56>
    Error_Handler();
 800253c:	f7ff fbde 	bl	8001cfc <Error_Handler>
 8002540:	e7db      	b.n	80024fa <MX_TIM3_Init+0x6a>
    Error_Handler();
 8002542:	f7ff fbdb 	bl	8001cfc <Error_Handler>
 8002546:	e7e1      	b.n	800250c <MX_TIM3_Init+0x7c>
    Error_Handler();
 8002548:	f7ff fbd8 	bl	8001cfc <Error_Handler>
}
 800254c:	e7eb      	b.n	8002526 <MX_TIM3_Init+0x96>
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	20000890 	.word	0x20000890
 8002554:	40000400 	.word	0x40000400
 8002558:	0000ffff 	.word	0x0000ffff

0800255c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800255c:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800255e:	4809      	ldr	r0, [pc, #36]	@ (8002584 <MX_TIM14_Init+0x28>)
 8002560:	4b09      	ldr	r3, [pc, #36]	@ (8002588 <MX_TIM14_Init+0x2c>)
 8002562:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 48-1;
 8002564:	232f      	movs	r3, #47	@ 0x2f
 8002566:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002568:	2300      	movs	r3, #0
 800256a:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 145;
 800256c:	2291      	movs	r2, #145	@ 0x91
 800256e:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002570:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002572:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002574:	f001 f81c 	bl	80035b0 <HAL_TIM_Base_Init>
 8002578:	2800      	cmp	r0, #0
 800257a:	d100      	bne.n	800257e <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800257c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800257e:	f7ff fbbd 	bl	8001cfc <Error_Handler>
}
 8002582:	e7fb      	b.n	800257c <MX_TIM14_Init+0x20>
 8002584:	20000844 	.word	0x20000844
 8002588:	40002000 	.word	0x40002000

0800258c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800258c:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800258e:	480a      	ldr	r0, [pc, #40]	@ (80025b8 <MX_TIM16_Init+0x2c>)
 8002590:	4b0a      	ldr	r3, [pc, #40]	@ (80025bc <MX_TIM16_Init+0x30>)
 8002592:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48-1;
 8002594:	232f      	movs	r3, #47	@ 0x2f
 8002596:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002598:	2300      	movs	r3, #0
 800259a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 1000;
 800259c:	22fa      	movs	r2, #250	@ 0xfa
 800259e:	0092      	lsls	r2, r2, #2
 80025a0:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 80025a4:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025a8:	f001 f802 	bl	80035b0 <HAL_TIM_Base_Init>
 80025ac:	2800      	cmp	r0, #0
 80025ae:	d100      	bne.n	80025b2 <MX_TIM16_Init+0x26>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025b0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80025b2:	f7ff fba3 	bl	8001cfc <Error_Handler>
}
 80025b6:	e7fb      	b.n	80025b0 <MX_TIM16_Init+0x24>
 80025b8:	200007f8 	.word	0x200007f8
 80025bc:	40014400 	.word	0x40014400

080025c0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80025c0:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025c2:	480a      	ldr	r0, [pc, #40]	@ (80025ec <MX_TIM17_Init+0x2c>)
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <MX_TIM17_Init+0x30>)
 80025c6:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 48-1;
 80025c8:	232f      	movs	r3, #47	@ 0x2f
 80025ca:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025cc:	2300      	movs	r3, #0
 80025ce:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 130;
 80025d0:	2282      	movs	r2, #130	@ 0x82
 80025d2:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 80025d6:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025d8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80025da:	f000 ffe9 	bl	80035b0 <HAL_TIM_Base_Init>
 80025de:	2800      	cmp	r0, #0
 80025e0:	d100      	bne.n	80025e4 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80025e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80025e4:	f7ff fb8a 	bl	8001cfc <Error_Handler>
}
 80025e8:	e7fb      	b.n	80025e2 <MX_TIM17_Init+0x22>
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	200007ac 	.word	0x200007ac
 80025f0:	40014800 	.word	0x40014800

080025f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025f4:	b500      	push	{lr}
 80025f6:	b087      	sub	sp, #28

  if(tim_baseHandle->Instance==TIM1)
 80025f8:	6803      	ldr	r3, [r0, #0]
 80025fa:	4a37      	ldr	r2, [pc, #220]	@ (80026d8 <HAL_TIM_Base_MspInit+0xe4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8002600:	4a36      	ldr	r2, [pc, #216]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8002606:	4a36      	ldr	r2, [pc, #216]	@ (80026e0 <HAL_TIM_Base_MspInit+0xec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d02c      	beq.n	8002666 <HAL_TIM_Base_MspInit+0x72>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 800260c:	4a35      	ldr	r2, [pc, #212]	@ (80026e4 <HAL_TIM_Base_MspInit+0xf0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d03c      	beq.n	800268c <HAL_TIM_Base_MspInit+0x98>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 8002612:	4a35      	ldr	r2, [pc, #212]	@ (80026e8 <HAL_TIM_Base_MspInit+0xf4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d04c      	beq.n	80026b2 <HAL_TIM_Base_MspInit+0xbe>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002618:	b007      	add	sp, #28
 800261a:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800261c:	4b33      	ldr	r3, [pc, #204]	@ (80026ec <HAL_TIM_Base_MspInit+0xf8>)
 800261e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002620:	2180      	movs	r1, #128	@ 0x80
 8002622:	0109      	lsls	r1, r1, #4
 8002624:	430a      	orrs	r2, r1
 8002626:	641a      	str	r2, [r3, #64]	@ 0x40
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	400b      	ands	r3, r1
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	200d      	movs	r0, #13
 8002636:	f000 f935 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 800263a:	200d      	movs	r0, #13
 800263c:	f000 f936 	bl	80028ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	200e      	movs	r0, #14
 8002646:	f000 f92d 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800264a:	200e      	movs	r0, #14
 800264c:	f000 f92e 	bl	80028ac <HAL_NVIC_EnableIRQ>
 8002650:	e7e2      	b.n	8002618 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002652:	4a26      	ldr	r2, [pc, #152]	@ (80026ec <HAL_TIM_Base_MspInit+0xf8>)
 8002654:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002656:	2302      	movs	r3, #2
 8002658:	4319      	orrs	r1, r3
 800265a:	63d1      	str	r1, [r2, #60]	@ 0x3c
 800265c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800265e:	4013      	ands	r3, r2
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	9b02      	ldr	r3, [sp, #8]
 8002664:	e7d8      	b.n	8002618 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002666:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_TIM_Base_MspInit+0xf8>)
 8002668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800266a:	2180      	movs	r1, #128	@ 0x80
 800266c:	0209      	lsls	r1, r1, #8
 800266e:	430a      	orrs	r2, r1
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
 8002672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002674:	400b      	ands	r3, r1
 8002676:	9303      	str	r3, [sp, #12]
 8002678:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2013      	movs	r0, #19
 8002680:	f000 f910 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002684:	2013      	movs	r0, #19
 8002686:	f000 f911 	bl	80028ac <HAL_NVIC_EnableIRQ>
 800268a:	e7c5      	b.n	8002618 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800268c:	4b17      	ldr	r3, [pc, #92]	@ (80026ec <HAL_TIM_Base_MspInit+0xf8>)
 800268e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002690:	2180      	movs	r1, #128	@ 0x80
 8002692:	0289      	lsls	r1, r1, #10
 8002694:	430a      	orrs	r2, r1
 8002696:	641a      	str	r2, [r3, #64]	@ 0x40
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	400b      	ands	r3, r1
 800269c:	9304      	str	r3, [sp, #16]
 800269e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2015      	movs	r0, #21
 80026a6:	f000 f8fd 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80026aa:	2015      	movs	r0, #21
 80026ac:	f000 f8fe 	bl	80028ac <HAL_NVIC_EnableIRQ>
 80026b0:	e7b2      	b.n	8002618 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026b2:	4b0e      	ldr	r3, [pc, #56]	@ (80026ec <HAL_TIM_Base_MspInit+0xf8>)
 80026b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026b6:	2180      	movs	r1, #128	@ 0x80
 80026b8:	02c9      	lsls	r1, r1, #11
 80026ba:	430a      	orrs	r2, r1
 80026bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	400b      	ands	r3, r1
 80026c2:	9305      	str	r3, [sp, #20]
 80026c4:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2100      	movs	r1, #0
 80026ca:	2016      	movs	r0, #22
 80026cc:	f000 f8ea 	bl	80028a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80026d0:	2016      	movs	r0, #22
 80026d2:	f000 f8eb 	bl	80028ac <HAL_NVIC_EnableIRQ>
}
 80026d6:	e79f      	b.n	8002618 <HAL_TIM_Base_MspInit+0x24>
 80026d8:	40012c00 	.word	0x40012c00
 80026dc:	40000400 	.word	0x40000400
 80026e0:	40002000 	.word	0x40002000
 80026e4:	40014400 	.word	0x40014400
 80026e8:	40014800 	.word	0x40014800
 80026ec:	40021000 	.word	0x40021000

080026f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026f0:	480d      	ldr	r0, [pc, #52]	@ (8002728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026f4:	f7ff fe84 	bl	8002400 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026fa:	e003      	b.n	8002704 <LoopCopyDataInit>

080026fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80026fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002700:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002702:	3104      	adds	r1, #4

08002704 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002704:	480a      	ldr	r0, [pc, #40]	@ (8002730 <LoopForever+0xa>)
  ldr r3, =_edata
 8002706:	4b0b      	ldr	r3, [pc, #44]	@ (8002734 <LoopForever+0xe>)
  adds r2, r0, r1
 8002708:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800270a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800270c:	d3f6      	bcc.n	80026fc <CopyDataInit>
  ldr r2, =_sbss
 800270e:	4a0a      	ldr	r2, [pc, #40]	@ (8002738 <LoopForever+0x12>)
  b LoopFillZerobss
 8002710:	e002      	b.n	8002718 <LoopFillZerobss>

08002712 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  str  r3, [r2]
 8002714:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002716:	3204      	adds	r2, #4

08002718 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002718:	4b08      	ldr	r3, [pc, #32]	@ (800273c <LoopForever+0x16>)
  cmp r2, r3
 800271a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800271c:	d3f9      	bcc.n	8002712 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800271e:	f001 fa81 	bl	8003c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002722:	f7ff fb17 	bl	8001d54 <main>

08002726 <LoopForever>:

LoopForever:
    b LoopForever
 8002726:	e7fe      	b.n	8002726 <LoopForever>
  ldr   r0, =_estack
 8002728:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800272c:	08003e10 	.word	0x08003e10
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002734:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8002738:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 800273c:	20000a74 	.word	0x20000a74

08002740 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <ADC1_IRQHandler>
	...

08002744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002744:	b510      	push	{r4, lr}
 8002746:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_InitTick+0x4c>)
 800274a:	7819      	ldrb	r1, [r3, #0]
 800274c:	2900      	cmp	r1, #0
 800274e:	d101      	bne.n	8002754 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002750:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002752:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002754:	20fa      	movs	r0, #250	@ 0xfa
 8002756:	0080      	lsls	r0, r0, #2
 8002758:	f7fd fcd6 	bl	8000108 <__udivsi3>
 800275c:	0001      	movs	r1, r0
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_InitTick+0x50>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	f7fd fcd1 	bl	8000108 <__udivsi3>
 8002766:	f000 f8bd 	bl	80028e4 <HAL_SYSTICK_Config>
 800276a:	2800      	cmp	r0, #0
 800276c:	d10d      	bne.n	800278a <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800276e:	2c03      	cmp	r4, #3
 8002770:	d901      	bls.n	8002776 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8002772:	2001      	movs	r0, #1
 8002774:	e7ed      	b.n	8002752 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002776:	3001      	adds	r0, #1
 8002778:	2200      	movs	r2, #0
 800277a:	0021      	movs	r1, r4
 800277c:	4240      	negs	r0, r0
 800277e:	f000 f891 	bl	80028a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002782:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <HAL_InitTick+0x54>)
 8002784:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002786:	2000      	movs	r0, #0
 8002788:	e7e3      	b.n	8002752 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 800278a:	2001      	movs	r0, #1
 800278c:	e7e1      	b.n	8002752 <HAL_InitTick+0xe>
 800278e:	46c0      	nop			@ (mov r8, r8)
 8002790:	20000010 	.word	0x20000010
 8002794:	2000000c 	.word	0x2000000c
 8002798:	20000014 	.word	0x20000014

0800279c <HAL_Init>:
{
 800279c:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800279e:	2003      	movs	r0, #3
 80027a0:	f7ff ffd0 	bl	8002744 <HAL_InitTick>
 80027a4:	1e04      	subs	r4, r0, #0
 80027a6:	d002      	beq.n	80027ae <HAL_Init+0x12>
    status = HAL_ERROR;
 80027a8:	2401      	movs	r4, #1
}
 80027aa:	0020      	movs	r0, r4
 80027ac:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80027ae:	f7ff fda3 	bl	80022f8 <HAL_MspInit>
 80027b2:	e7fa      	b.n	80027aa <HAL_Init+0xe>

080027b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <HAL_IncTick+0x10>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4a03      	ldr	r2, [pc, #12]	@ (80027c8 <HAL_IncTick+0x14>)
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	185b      	adds	r3, r3, r1
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	4770      	bx	lr
 80027c2:	46c0      	nop			@ (mov r8, r8)
 80027c4:	20000010 	.word	0x20000010
 80027c8:	20000928 	.word	0x20000928

080027cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027cc:	4b01      	ldr	r3, [pc, #4]	@ (80027d4 <HAL_GetTick+0x8>)
 80027ce:	6818      	ldr	r0, [r3, #0]
}
 80027d0:	4770      	bx	lr
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	20000928 	.word	0x20000928

080027d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff fff6 	bl	80027cc <HAL_GetTick>
 80027e0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e2:	1c63      	adds	r3, r4, #1
 80027e4:	d002      	beq.n	80027ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <HAL_Delay+0x20>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027ec:	f7ff ffee 	bl	80027cc <HAL_GetTick>
 80027f0:	1b40      	subs	r0, r0, r5
 80027f2:	42a0      	cmp	r0, r4
 80027f4:	d3fa      	bcc.n	80027ec <HAL_Delay+0x14>
  {
  }
}
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	20000010 	.word	0x20000010

080027fc <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80027fc:	4a02      	ldr	r2, [pc, #8]	@ (8002808 <HAL_SYSCFG_EnableRemap+0xc>)
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	4303      	orrs	r3, r0
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	4770      	bx	lr
 8002806:	46c0      	nop			@ (mov r8, r8)
 8002808:	40010000 	.word	0x40010000

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800280e:	2800      	cmp	r0, #0
 8002810:	db11      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002812:	0883      	lsrs	r3, r0, #2
 8002814:	4d13      	ldr	r5, [pc, #76]	@ (8002864 <__NVIC_SetPriority+0x58>)
 8002816:	33c0      	adds	r3, #192	@ 0xc0
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	595c      	ldr	r4, [r3, r5]
 800281c:	2203      	movs	r2, #3
 800281e:	4010      	ands	r0, r2
 8002820:	00c0      	lsls	r0, r0, #3
 8002822:	32fc      	adds	r2, #252	@ 0xfc
 8002824:	0016      	movs	r6, r2
 8002826:	4086      	lsls	r6, r0
 8002828:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800282a:	0189      	lsls	r1, r1, #6
 800282c:	400a      	ands	r2, r1
 800282e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002830:	4322      	orrs	r2, r4
 8002832:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002834:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002836:	230f      	movs	r3, #15
 8002838:	4003      	ands	r3, r0
 800283a:	3b08      	subs	r3, #8
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3306      	adds	r3, #6
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <__NVIC_SetPriority+0x5c>)
 8002844:	4694      	mov	ip, r2
 8002846:	4463      	add	r3, ip
 8002848:	685c      	ldr	r4, [r3, #4]
 800284a:	2203      	movs	r2, #3
 800284c:	4010      	ands	r0, r2
 800284e:	00c0      	lsls	r0, r0, #3
 8002850:	32fc      	adds	r2, #252	@ 0xfc
 8002852:	0015      	movs	r5, r2
 8002854:	4085      	lsls	r5, r0
 8002856:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002858:	0189      	lsls	r1, r1, #6
 800285a:	400a      	ands	r2, r1
 800285c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800285e:	4322      	orrs	r2, r4
 8002860:	605a      	str	r2, [r3, #4]
}
 8002862:	e7e7      	b.n	8002834 <__NVIC_SetPriority+0x28>
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	3801      	subs	r0, #1
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	045b      	lsls	r3, r3, #17
 8002872:	4298      	cmp	r0, r3
 8002874:	d20f      	bcs.n	8002896 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <SysTick_Config+0x30>)
 8002878:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800287a:	4809      	ldr	r0, [pc, #36]	@ (80028a0 <SysTick_Config+0x34>)
 800287c:	6a03      	ldr	r3, [r0, #32]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	21c0      	movs	r1, #192	@ 0xc0
 8002884:	0609      	lsls	r1, r1, #24
 8002886:	430b      	orrs	r3, r1
 8002888:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288a:	2300      	movs	r3, #0
 800288c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	3307      	adds	r3, #7
 8002890:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002892:	2000      	movs	r0, #0
}
 8002894:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002896:	2001      	movs	r0, #1
 8002898:	e7fc      	b.n	8002894 <SysTick_Config+0x28>
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	e000e010 	.word	0xe000e010
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028a6:	f7ff ffb1 	bl	800280c <__NVIC_SetPriority>
}
 80028aa:	bd10      	pop	{r4, pc}

080028ac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028ac:	2800      	cmp	r0, #0
 80028ae:	db05      	blt.n	80028bc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028b0:	221f      	movs	r2, #31
 80028b2:	4002      	ands	r2, r0
 80028b4:	2301      	movs	r3, #1
 80028b6:	4093      	lsls	r3, r2
 80028b8:	4a01      	ldr	r2, [pc, #4]	@ (80028c0 <HAL_NVIC_EnableIRQ+0x14>)
 80028ba:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028bc:	4770      	bx	lr
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	e000e100 	.word	0xe000e100

080028c4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028c4:	2800      	cmp	r0, #0
 80028c6:	db0a      	blt.n	80028de <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c8:	221f      	movs	r2, #31
 80028ca:	4002      	ands	r2, r0
 80028cc:	2301      	movs	r3, #1
 80028ce:	4093      	lsls	r3, r2
 80028d0:	4903      	ldr	r1, [pc, #12]	@ (80028e0 <HAL_NVIC_DisableIRQ+0x1c>)
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80028d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80028da:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80028de:	4770      	bx	lr
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e4:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 80028e6:	f7ff ffc1 	bl	800286c <SysTick_Config>
}
 80028ea:	bd10      	pop	{r4, pc}

080028ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ee:	46d6      	mov	lr, sl
 80028f0:	464f      	mov	r7, r9
 80028f2:	4646      	mov	r6, r8
 80028f4:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80028f6:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028f8:	e03b      	b.n	8002972 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80028fa:	2505      	movs	r5, #5
 80028fc:	e000      	b.n	8002900 <HAL_GPIO_Init+0x14>
 80028fe:	2500      	movs	r5, #0
 8002900:	40a5      	lsls	r5, r4
 8002902:	002c      	movs	r4, r5
 8002904:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002906:	4d61      	ldr	r5, [pc, #388]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 8002908:	3218      	adds	r2, #24
 800290a:	0092      	lsls	r2, r2, #2
 800290c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800290e:	2280      	movs	r2, #128	@ 0x80
 8002910:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002912:	464a      	mov	r2, r9
 8002914:	43d2      	mvns	r2, r2
 8002916:	003d      	movs	r5, r7
 8002918:	464c      	mov	r4, r9
 800291a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800291c:	684c      	ldr	r4, [r1, #4]
 800291e:	03e4      	lsls	r4, r4, #15
 8002920:	d502      	bpl.n	8002928 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002922:	003d      	movs	r5, r7
 8002924:	464c      	mov	r4, r9
 8002926:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002928:	4c58      	ldr	r4, [pc, #352]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 800292a:	2780      	movs	r7, #128	@ 0x80
 800292c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 800292e:	2584      	movs	r5, #132	@ 0x84
 8002930:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 8002932:	003d      	movs	r5, r7
 8002934:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002936:	684c      	ldr	r4, [r1, #4]
 8002938:	03a4      	lsls	r4, r4, #14
 800293a:	d502      	bpl.n	8002942 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 800293c:	003d      	movs	r5, r7
 800293e:	464c      	mov	r4, r9
 8002940:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 8002942:	4c52      	ldr	r4, [pc, #328]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 8002944:	2784      	movs	r7, #132	@ 0x84
 8002946:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002948:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 800294a:	003d      	movs	r5, r7
 800294c:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800294e:	684c      	ldr	r4, [r1, #4]
 8002950:	02e4      	lsls	r4, r4, #11
 8002952:	d502      	bpl.n	800295a <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 8002954:	003d      	movs	r5, r7
 8002956:	464c      	mov	r4, r9
 8002958:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 800295a:	4c4c      	ldr	r4, [pc, #304]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 800295c:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 800295e:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002960:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002962:	684c      	ldr	r4, [r1, #4]
 8002964:	02a4      	lsls	r4, r4, #10
 8002966:	d501      	bpl.n	800296c <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 8002968:	464a      	mov	r2, r9
 800296a:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 800296c:	4c47      	ldr	r4, [pc, #284]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 800296e:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 8002970:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002972:	680c      	ldr	r4, [r1, #0]
 8002974:	0022      	movs	r2, r4
 8002976:	40da      	lsrs	r2, r3
 8002978:	d100      	bne.n	800297c <HAL_GPIO_Init+0x90>
 800297a:	e081      	b.n	8002a80 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800297c:	2201      	movs	r2, #1
 800297e:	409a      	lsls	r2, r3
 8002980:	0026      	movs	r6, r4
 8002982:	4016      	ands	r6, r2
 8002984:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 8002986:	4214      	tst	r4, r2
 8002988:	d0f2      	beq.n	8002970 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800298a:	684c      	ldr	r4, [r1, #4]
 800298c:	2c02      	cmp	r4, #2
 800298e:	d001      	beq.n	8002994 <HAL_GPIO_Init+0xa8>
 8002990:	2c12      	cmp	r4, #18
 8002992:	d118      	bne.n	80029c6 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002994:	08dd      	lsrs	r5, r3, #3
 8002996:	3508      	adds	r5, #8
 8002998:	00ad      	lsls	r5, r5, #2
 800299a:	582c      	ldr	r4, [r5, r0]
 800299c:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800299e:	2707      	movs	r7, #7
 80029a0:	401f      	ands	r7, r3
 80029a2:	00bf      	lsls	r7, r7, #2
 80029a4:	240f      	movs	r4, #15
 80029a6:	46a2      	mov	sl, r4
 80029a8:	0026      	movs	r6, r4
 80029aa:	40be      	lsls	r6, r7
 80029ac:	46b0      	mov	r8, r6
 80029ae:	4666      	mov	r6, ip
 80029b0:	4644      	mov	r4, r8
 80029b2:	43a6      	bics	r6, r4
 80029b4:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80029b6:	690c      	ldr	r4, [r1, #16]
 80029b8:	4656      	mov	r6, sl
 80029ba:	4026      	ands	r6, r4
 80029bc:	0034      	movs	r4, r6
 80029be:	40bc      	lsls	r4, r7
 80029c0:	4666      	mov	r6, ip
 80029c2:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 80029c4:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 80029c6:	6804      	ldr	r4, [r0, #0]
 80029c8:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80029ca:	005d      	lsls	r5, r3, #1
 80029cc:	2403      	movs	r4, #3
 80029ce:	46a2      	mov	sl, r4
 80029d0:	0027      	movs	r7, r4
 80029d2:	40af      	lsls	r7, r5
 80029d4:	46b8      	mov	r8, r7
 80029d6:	43ff      	mvns	r7, r7
 80029d8:	4666      	mov	r6, ip
 80029da:	4644      	mov	r4, r8
 80029dc:	43a6      	bics	r6, r4
 80029de:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80029e0:	684c      	ldr	r4, [r1, #4]
 80029e2:	4656      	mov	r6, sl
 80029e4:	4026      	ands	r6, r4
 80029e6:	0034      	movs	r4, r6
 80029e8:	40ac      	lsls	r4, r5
 80029ea:	4666      	mov	r6, ip
 80029ec:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 80029ee:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029f0:	684c      	ldr	r4, [r1, #4]
 80029f2:	1e66      	subs	r6, r4, #1
 80029f4:	2e01      	cmp	r6, #1
 80029f6:	d903      	bls.n	8002a00 <HAL_GPIO_Init+0x114>
 80029f8:	2c11      	cmp	r4, #17
 80029fa:	d001      	beq.n	8002a00 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fc:	2c12      	cmp	r4, #18
 80029fe:	d112      	bne.n	8002a26 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002a00:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a02:	403c      	ands	r4, r7
 8002a04:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a06:	68cc      	ldr	r4, [r1, #12]
 8002a08:	40ac      	lsls	r4, r5
 8002a0a:	4666      	mov	r6, ip
 8002a0c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 8002a0e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002a10:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a12:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	0912      	lsrs	r2, r2, #4
 8002a18:	4694      	mov	ip, r2
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4666      	mov	r6, ip
 8002a1e:	4032      	ands	r2, r6
 8002a20:	409a      	lsls	r2, r3
 8002a22:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002a24:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002a26:	684a      	ldr	r2, [r1, #4]
 8002a28:	2a03      	cmp	r2, #3
 8002a2a:	d005      	beq.n	8002a38 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 8002a2c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a2e:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a30:	688a      	ldr	r2, [r1, #8]
 8002a32:	40aa      	lsls	r2, r5
 8002a34:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 8002a36:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a38:	684a      	ldr	r2, [r1, #4]
 8002a3a:	00d2      	lsls	r2, r2, #3
 8002a3c:	d598      	bpl.n	8002970 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 8002a3e:	089a      	lsrs	r2, r3, #2
 8002a40:	0014      	movs	r4, r2
 8002a42:	3418      	adds	r4, #24
 8002a44:	00a4      	lsls	r4, r4, #2
 8002a46:	4d11      	ldr	r5, [pc, #68]	@ (8002a8c <HAL_GPIO_Init+0x1a0>)
 8002a48:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a4a:	2403      	movs	r4, #3
 8002a4c:	401c      	ands	r4, r3
 8002a4e:	00e4      	lsls	r4, r4, #3
 8002a50:	250f      	movs	r5, #15
 8002a52:	40a5      	lsls	r5, r4
 8002a54:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a56:	25a0      	movs	r5, #160	@ 0xa0
 8002a58:	05ed      	lsls	r5, r5, #23
 8002a5a:	42a8      	cmp	r0, r5
 8002a5c:	d100      	bne.n	8002a60 <HAL_GPIO_Init+0x174>
 8002a5e:	e74e      	b.n	80028fe <HAL_GPIO_Init+0x12>
 8002a60:	4d0b      	ldr	r5, [pc, #44]	@ (8002a90 <HAL_GPIO_Init+0x1a4>)
 8002a62:	42a8      	cmp	r0, r5
 8002a64:	d008      	beq.n	8002a78 <HAL_GPIO_Init+0x18c>
 8002a66:	4d0b      	ldr	r5, [pc, #44]	@ (8002a94 <HAL_GPIO_Init+0x1a8>)
 8002a68:	42a8      	cmp	r0, r5
 8002a6a:	d007      	beq.n	8002a7c <HAL_GPIO_Init+0x190>
 8002a6c:	4d0a      	ldr	r5, [pc, #40]	@ (8002a98 <HAL_GPIO_Init+0x1ac>)
 8002a6e:	42a8      	cmp	r0, r5
 8002a70:	d100      	bne.n	8002a74 <HAL_GPIO_Init+0x188>
 8002a72:	e742      	b.n	80028fa <HAL_GPIO_Init+0xe>
 8002a74:	2506      	movs	r5, #6
 8002a76:	e743      	b.n	8002900 <HAL_GPIO_Init+0x14>
 8002a78:	2501      	movs	r5, #1
 8002a7a:	e741      	b.n	8002900 <HAL_GPIO_Init+0x14>
 8002a7c:	2502      	movs	r5, #2
 8002a7e:	e73f      	b.n	8002900 <HAL_GPIO_Init+0x14>
  }
}
 8002a80:	bce0      	pop	{r5, r6, r7}
 8002a82:	46ba      	mov	sl, r7
 8002a84:	46b1      	mov	r9, r6
 8002a86:	46a8      	mov	r8, r5
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	40021800 	.word	0x40021800
 8002a90:	50000400 	.word	0x50000400
 8002a94:	50000800 	.word	0x50000800
 8002a98:	50001400 	.word	0x50001400

08002a9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a9e:	46ce      	mov	lr, r9
 8002aa0:	4647      	mov	r7, r8
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	4689      	mov	r9, r1
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002aa6:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002aa8:	e023      	b.n	8002af2 <HAL_GPIO_DeInit+0x56>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002aaa:	2105      	movs	r1, #5
 8002aac:	4688      	mov	r8, r1
 8002aae:	e001      	b.n	8002ab4 <HAL_GPIO_DeInit+0x18>
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4688      	mov	r8, r1
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	40a1      	lsls	r1, r4
 8002ab8:	42a9      	cmp	r1, r5
 8002aba:	d047      	beq.n	8002b4c <HAL_GPIO_DeInit+0xb0>
        EXTI->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002abc:	6804      	ldr	r4, [r0, #0]
 8002abe:	005e      	lsls	r6, r3, #1
 8002ac0:	2503      	movs	r5, #3
 8002ac2:	40b5      	lsls	r5, r6
 8002ac4:	432c      	orrs	r4, r5
 8002ac6:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002ac8:	08dc      	lsrs	r4, r3, #3
 8002aca:	3408      	adds	r4, #8
 8002acc:	00a4      	lsls	r4, r4, #2
 8002ace:	5827      	ldr	r7, [r4, r0]
 8002ad0:	2607      	movs	r6, #7
 8002ad2:	401e      	ands	r6, r3
 8002ad4:	00b6      	lsls	r6, r6, #2
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	40b1      	lsls	r1, r6
 8002ada:	438f      	bics	r7, r1
 8002adc:	5027      	str	r7, [r4, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ade:	6884      	ldr	r4, [r0, #8]
 8002ae0:	43ac      	bics	r4, r5
 8002ae2:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002ae4:	6844      	ldr	r4, [r0, #4]
 8002ae6:	4394      	bics	r4, r2
 8002ae8:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002aea:	68c2      	ldr	r2, [r0, #12]
 8002aec:	43aa      	bics	r2, r5
 8002aee:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8002af0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8002af2:	464a      	mov	r2, r9
 8002af4:	40da      	lsrs	r2, r3
 8002af6:	d045      	beq.n	8002b84 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	464c      	mov	r4, r9
 8002afe:	4014      	ands	r4, r2
 8002b00:	46a4      	mov	ip, r4
    if (iocurrent != 0U)
 8002b02:	4649      	mov	r1, r9
 8002b04:	4211      	tst	r1, r2
 8002b06:	d0f3      	beq.n	8002af0 <HAL_GPIO_DeInit+0x54>
      tmp = EXTI->EXTICR[position >> 2U];
 8002b08:	089f      	lsrs	r7, r3, #2
 8002b0a:	003c      	movs	r4, r7
 8002b0c:	3418      	adds	r4, #24
 8002b0e:	00a4      	lsls	r4, r4, #2
 8002b10:	4d1e      	ldr	r5, [pc, #120]	@ (8002b8c <HAL_GPIO_DeInit+0xf0>)
 8002b12:	5965      	ldr	r5, [r4, r5]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b14:	2603      	movs	r6, #3
 8002b16:	401e      	ands	r6, r3
 8002b18:	00f4      	lsls	r4, r6, #3
 8002b1a:	260f      	movs	r6, #15
 8002b1c:	40a6      	lsls	r6, r4
 8002b1e:	4035      	ands	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002b20:	21a0      	movs	r1, #160	@ 0xa0
 8002b22:	05c9      	lsls	r1, r1, #23
 8002b24:	4288      	cmp	r0, r1
 8002b26:	d0c3      	beq.n	8002ab0 <HAL_GPIO_DeInit+0x14>
 8002b28:	4919      	ldr	r1, [pc, #100]	@ (8002b90 <HAL_GPIO_DeInit+0xf4>)
 8002b2a:	4288      	cmp	r0, r1
 8002b2c:	d008      	beq.n	8002b40 <HAL_GPIO_DeInit+0xa4>
 8002b2e:	4919      	ldr	r1, [pc, #100]	@ (8002b94 <HAL_GPIO_DeInit+0xf8>)
 8002b30:	4288      	cmp	r0, r1
 8002b32:	d008      	beq.n	8002b46 <HAL_GPIO_DeInit+0xaa>
 8002b34:	4918      	ldr	r1, [pc, #96]	@ (8002b98 <HAL_GPIO_DeInit+0xfc>)
 8002b36:	4288      	cmp	r0, r1
 8002b38:	d0b7      	beq.n	8002aaa <HAL_GPIO_DeInit+0xe>
 8002b3a:	2106      	movs	r1, #6
 8002b3c:	4688      	mov	r8, r1
 8002b3e:	e7b9      	b.n	8002ab4 <HAL_GPIO_DeInit+0x18>
 8002b40:	2101      	movs	r1, #1
 8002b42:	4688      	mov	r8, r1
 8002b44:	e7b6      	b.n	8002ab4 <HAL_GPIO_DeInit+0x18>
 8002b46:	2102      	movs	r1, #2
 8002b48:	4688      	mov	r8, r1
 8002b4a:	e7b3      	b.n	8002ab4 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 8002b4c:	4d0f      	ldr	r5, [pc, #60]	@ (8002b8c <HAL_GPIO_DeInit+0xf0>)
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	4688      	mov	r8, r1
 8002b52:	586c      	ldr	r4, [r5, r1]
 8002b54:	4661      	mov	r1, ip
 8002b56:	438c      	bics	r4, r1
 8002b58:	4641      	mov	r1, r8
 8002b5a:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8002b5c:	3104      	adds	r1, #4
 8002b5e:	4688      	mov	r8, r1
 8002b60:	586c      	ldr	r4, [r5, r1]
 8002b62:	4661      	mov	r1, ip
 8002b64:	438c      	bics	r4, r1
 8002b66:	4641      	mov	r1, r8
 8002b68:	506c      	str	r4, [r5, r1]
        EXTI->RTSR1 &= ~(iocurrent);
 8002b6a:	682c      	ldr	r4, [r5, #0]
 8002b6c:	4661      	mov	r1, ip
 8002b6e:	438c      	bics	r4, r1
 8002b70:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002b72:	686c      	ldr	r4, [r5, #4]
 8002b74:	438c      	bics	r4, r1
 8002b76:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002b78:	3718      	adds	r7, #24
 8002b7a:	00bc      	lsls	r4, r7, #2
 8002b7c:	5967      	ldr	r7, [r4, r5]
 8002b7e:	43b7      	bics	r7, r6
 8002b80:	5167      	str	r7, [r4, r5]
 8002b82:	e79b      	b.n	8002abc <HAL_GPIO_DeInit+0x20>
  }
}
 8002b84:	bcc0      	pop	{r6, r7}
 8002b86:	46b9      	mov	r9, r7
 8002b88:	46b0      	mov	r8, r6
 8002b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8c:	40021800 	.word	0x40021800
 8002b90:	50000400 	.word	0x50000400
 8002b94:	50000800 	.word	0x50000800
 8002b98:	50001400 	.word	0x50001400

08002b9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002b9c:	6903      	ldr	r3, [r0, #16]
 8002b9e:	420b      	tst	r3, r1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002ba2:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ba4:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e7fc      	b.n	8002ba4 <HAL_GPIO_ReadPin+0x8>

08002baa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002baa:	2a00      	cmp	r2, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bae:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bb0:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bb2:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002bb4:	e7fc      	b.n	8002bb0 <HAL_GPIO_WritePin+0x6>

08002bb6 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb6:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bb8:	0013      	movs	r3, r2
 8002bba:	400b      	ands	r3, r1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	4391      	bics	r1, r2
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6183      	str	r3, [r0, #24]
}
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bc8:	b510      	push	{r4, lr}
 8002bca:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4218      	tst	r0, r3
 8002bd2:	d104      	bne.n	8002bde <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4223      	tst	r3, r4
 8002bda:	d105      	bne.n	8002be8 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8002bdc:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002bde:	4b05      	ldr	r3, [pc, #20]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002be0:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002be2:	f7ff f809 	bl	8001bf8 <HAL_GPIO_EXTI_Rising_Callback>
 8002be6:	e7f5      	b.n	8002bd4 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bea:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002bec:	0020      	movs	r0, r4
 8002bee:	f7ff f84d 	bl	8001c8c <HAL_GPIO_EXTI_Falling_Callback>
}
 8002bf2:	e7f3      	b.n	8002bdc <HAL_GPIO_EXTI_IRQHandler+0x14>
 8002bf4:	40021800 	.word	0x40021800

08002bf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bfc:	d100      	bne.n	8002c00 <HAL_RCC_OscConfig+0x8>
 8002bfe:	e139      	b.n	8002e74 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c00:	6803      	ldr	r3, [r0, #0]
 8002c02:	07db      	lsls	r3, r3, #31
 8002c04:	d52c      	bpl.n	8002c60 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4ba1      	ldr	r3, [pc, #644]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	2338      	movs	r3, #56	@ 0x38
 8002c0c:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d022      	beq.n	8002c58 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	6843      	ldr	r3, [r0, #4]
 8002c14:	2280      	movs	r2, #128	@ 0x80
 8002c16:	0252      	lsls	r2, r2, #9
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d02e      	beq.n	8002c7a <HAL_RCC_OscConfig+0x82>
 8002c1c:	22a0      	movs	r2, #160	@ 0xa0
 8002c1e:	02d2      	lsls	r2, r2, #11
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d031      	beq.n	8002c88 <HAL_RCC_OscConfig+0x90>
 8002c24:	4b99      	ldr	r3, [pc, #612]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4999      	ldr	r1, [pc, #612]	@ (8002e90 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4998      	ldr	r1, [pc, #608]	@ (8002e94 <HAL_RCC_OscConfig+0x29c>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c36:	6863      	ldr	r3, [r4, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d031      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff fdc6 	bl	80027cc <HAL_GetTick>
 8002c40:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c42:	4b92      	ldr	r3, [pc, #584]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	039b      	lsls	r3, r3, #14
 8002c48:	d40a      	bmi.n	8002c60 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c4a:	f7ff fdbf 	bl	80027cc <HAL_GetTick>
 8002c4e:	1b40      	subs	r0, r0, r5
 8002c50:	2864      	cmp	r0, #100	@ 0x64
 8002c52:	d9f6      	bls.n	8002c42 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8002c54:	2003      	movs	r0, #3
 8002c56:	e10e      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002c58:	6843      	ldr	r3, [r0, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d100      	bne.n	8002c60 <HAL_RCC_OscConfig+0x68>
 8002c5e:	e10b      	b.n	8002e78 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	079b      	lsls	r3, r3, #30
 8002c64:	d547      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b89      	ldr	r3, [pc, #548]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002c6c:	421a      	tst	r2, r3
 8002c6e:	d161      	bne.n	8002d34 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002c70:	68e3      	ldr	r3, [r4, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d122      	bne.n	8002cbc <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8002c76:	2001      	movs	r0, #1
 8002c78:	e0fd      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7a:	4a84      	ldr	r2, [pc, #528]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c7c:	6811      	ldr	r1, [r2, #0]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	025b      	lsls	r3, r3, #9
 8002c82:	430b      	orrs	r3, r1
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e7d6      	b.n	8002c36 <HAL_RCC_OscConfig+0x3e>
 8002c88:	4b80      	ldr	r3, [pc, #512]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	2280      	movs	r2, #128	@ 0x80
 8002c8e:	02d2      	lsls	r2, r2, #11
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	2280      	movs	r2, #128	@ 0x80
 8002c98:	0252      	lsls	r2, r2, #9
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e7ca      	b.n	8002c36 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fd94 	bl	80027cc <HAL_GetTick>
 8002ca4:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ca6:	4b79      	ldr	r3, [pc, #484]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	039b      	lsls	r3, r3, #14
 8002cac:	d5d8      	bpl.n	8002c60 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002cae:	f7ff fd8d 	bl	80027cc <HAL_GetTick>
 8002cb2:	1b40      	subs	r0, r0, r5
 8002cb4:	2864      	cmp	r0, #100	@ 0x64
 8002cb6:	d9f6      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8002cb8:	2003      	movs	r0, #3
 8002cba:	e0dc      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbc:	4b73      	ldr	r3, [pc, #460]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4975      	ldr	r1, [pc, #468]	@ (8002e98 <HAL_RCC_OscConfig+0x2a0>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	6961      	ldr	r1, [r4, #20]
 8002cc6:	0209      	lsls	r1, r1, #8
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4973      	ldr	r1, [pc, #460]	@ (8002e9c <HAL_RCC_OscConfig+0x2a4>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	6921      	ldr	r1, [r4, #16]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	0adb      	lsrs	r3, r3, #11
 8002cdc:	2207      	movs	r2, #7
 8002cde:	401a      	ands	r2, r3
 8002ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea0 <HAL_RCC_OscConfig+0x2a8>)
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a6f      	ldr	r2, [pc, #444]	@ (8002ea4 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea8 <HAL_RCC_OscConfig+0x2b0>)
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	f7ff fd2a 	bl	8002744 <HAL_InitTick>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	d000      	beq.n	8002cf6 <HAL_RCC_OscConfig+0xfe>
 8002cf4:	e0c2      	b.n	8002e7c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	071b      	lsls	r3, r3, #28
 8002cfa:	d557      	bpl.n	8002dac <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cfc:	4b63      	ldr	r3, [pc, #396]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	2338      	movs	r3, #56	@ 0x38
 8002d02:	4013      	ands	r3, r2
 8002d04:	2b18      	cmp	r3, #24
 8002d06:	d04e      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d08:	69a3      	ldr	r3, [r4, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d077      	beq.n	8002dfe <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d10:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002d12:	2101      	movs	r1, #1
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff fd58 	bl	80027cc <HAL_GetTick>
 8002d1c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d22:	079b      	lsls	r3, r3, #30
 8002d24:	d442      	bmi.n	8002dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d26:	f7ff fd51 	bl	80027cc <HAL_GetTick>
 8002d2a:	1b40      	subs	r0, r0, r5
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d9f6      	bls.n	8002d1e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002d30:	2003      	movs	r0, #3
 8002d32:	e0a0      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d34:	68e3      	ldr	r3, [r4, #12]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d022      	beq.n	8002d80 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002d3a:	4a54      	ldr	r2, [pc, #336]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d3c:	6813      	ldr	r3, [r2, #0]
 8002d3e:	4957      	ldr	r1, [pc, #348]	@ (8002e9c <HAL_RCC_OscConfig+0x2a4>)
 8002d40:	400b      	ands	r3, r1
 8002d42:	6921      	ldr	r1, [r4, #16]
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002d48:	6811      	ldr	r1, [r2, #0]
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d52:	f7ff fd3b 	bl	80027cc <HAL_GetTick>
 8002d56:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d58:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	d406      	bmi.n	8002d6e <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d60:	f7ff fd34 	bl	80027cc <HAL_GetTick>
 8002d64:	1b40      	subs	r0, r0, r5
 8002d66:	2802      	cmp	r0, #2
 8002d68:	d9f6      	bls.n	8002d58 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e083      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4947      	ldr	r1, [pc, #284]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d70:	684b      	ldr	r3, [r1, #4]
 8002d72:	4a49      	ldr	r2, [pc, #292]	@ (8002e98 <HAL_RCC_OscConfig+0x2a0>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	6962      	ldr	r2, [r4, #20]
 8002d78:	0212      	lsls	r2, r2, #8
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	604b      	str	r3, [r1, #4]
 8002d7e:	e7ba      	b.n	8002cf6 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8002d80:	4a42      	ldr	r2, [pc, #264]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d82:	6813      	ldr	r3, [r2, #0]
 8002d84:	4949      	ldr	r1, [pc, #292]	@ (8002eac <HAL_RCC_OscConfig+0x2b4>)
 8002d86:	400b      	ands	r3, r1
 8002d88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fd1f 	bl	80027cc <HAL_GetTick>
 8002d8e:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d90:	4b3e      	ldr	r3, [pc, #248]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	055b      	lsls	r3, r3, #21
 8002d96:	d5ae      	bpl.n	8002cf6 <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d98:	f7ff fd18 	bl	80027cc <HAL_GetTick>
 8002d9c:	1b40      	subs	r0, r0, r5
 8002d9e:	2802      	cmp	r0, #2
 8002da0:	d9f6      	bls.n	8002d90 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002da2:	2003      	movs	r0, #3
 8002da4:	e067      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002da6:	69a3      	ldr	r3, [r4, #24]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d069      	beq.n	8002e80 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dac:	6823      	ldr	r3, [r4, #0]
 8002dae:	075b      	lsls	r3, r3, #29
 8002db0:	d568      	bpl.n	8002e84 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002db2:	4b36      	ldr	r3, [pc, #216]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	2338      	movs	r3, #56	@ 0x38
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d032      	beq.n	8002e24 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	68a3      	ldr	r3, [r4, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d034      	beq.n	8002e2e <HAL_RCC_OscConfig+0x236>
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d038      	beq.n	8002e3a <HAL_RCC_OscConfig+0x242>
 8002dc8:	4b30      	ldr	r3, [pc, #192]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002dca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dcc:	2101      	movs	r1, #1
 8002dce:	438a      	bics	r2, r1
 8002dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dd2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dd4:	3103      	adds	r1, #3
 8002dd6:	438a      	bics	r2, r1
 8002dd8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dda:	68a3      	ldr	r3, [r4, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d038      	beq.n	8002e52 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff fcf4 	bl	80027cc <HAL_GetTick>
 8002de4:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002de6:	4b29      	ldr	r3, [pc, #164]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dea:	079b      	lsls	r3, r3, #30
 8002dec:	d42f      	bmi.n	8002e4e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7ff fced 	bl	80027cc <HAL_GetTick>
 8002df2:	1b00      	subs	r0, r0, r4
 8002df4:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb0 <HAL_RCC_OscConfig+0x2b8>)
 8002df6:	4298      	cmp	r0, r3
 8002df8:	d9f5      	bls.n	8002de6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002dfa:	2003      	movs	r0, #3
 8002dfc:	e03b      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8002dfe:	4a23      	ldr	r2, [pc, #140]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002e00:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002e02:	2101      	movs	r1, #1
 8002e04:	438b      	bics	r3, r1
 8002e06:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002e08:	f7ff fce0 	bl	80027cc <HAL_GetTick>
 8002e0c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e12:	079b      	lsls	r3, r3, #30
 8002e14:	d5ca      	bpl.n	8002dac <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e16:	f7ff fcd9 	bl	80027cc <HAL_GetTick>
 8002e1a:	1b40      	subs	r0, r0, r5
 8002e1c:	2802      	cmp	r0, #2
 8002e1e:	d9f6      	bls.n	8002e0e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002e20:	2003      	movs	r0, #3
 8002e22:	e028      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002e24:	68a3      	ldr	r3, [r4, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02e      	beq.n	8002e88 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	e023      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002e30:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002e32:	2101      	movs	r1, #1
 8002e34:	430b      	orrs	r3, r1
 8002e36:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e38:	e7cf      	b.n	8002dda <HAL_RCC_OscConfig+0x1e2>
 8002e3a:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002e3c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e3e:	2104      	movs	r1, #4
 8002e40:	430a      	orrs	r2, r1
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002e46:	3903      	subs	r1, #3
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e4c:	e7c5      	b.n	8002dda <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8002e4e:	2000      	movs	r0, #0
 8002e50:	e011      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002e52:	f7ff fcbb 	bl	80027cc <HAL_GetTick>
 8002e56:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	@ (8002e8c <HAL_RCC_OscConfig+0x294>)
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5c:	079b      	lsls	r3, r3, #30
 8002e5e:	d507      	bpl.n	8002e70 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7ff fcb4 	bl	80027cc <HAL_GetTick>
 8002e64:	1b00      	subs	r0, r0, r4
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	4298      	cmp	r0, r3
 8002e6a:	d9f5      	bls.n	8002e58 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	e002      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8002e70:	2000      	movs	r0, #0
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
}
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002e78:	2001      	movs	r0, #1
 8002e7a:	e7fc      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	e7fa      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8002e80:	2001      	movs	r0, #1
 8002e82:	e7f8      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8002e84:	2000      	movs	r0, #0
 8002e86:	e7f6      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8002e88:	2001      	movs	r0, #1
 8002e8a:	e7f4      	b.n	8002e76 <HAL_RCC_OscConfig+0x27e>
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	fffeffff 	.word	0xfffeffff
 8002e94:	fffbffff 	.word	0xfffbffff
 8002e98:	ffff80ff 	.word	0xffff80ff
 8002e9c:	ffffc7ff 	.word	0xffffc7ff
 8002ea0:	02dc6c00 	.word	0x02dc6c00
 8002ea4:	2000000c 	.word	0x2000000c
 8002ea8:	20000014 	.word	0x20000014
 8002eac:	fffffeff 	.word	0xfffffeff
 8002eb0:	00001388 	.word	0x00001388

08002eb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb4:	b510      	push	{r4, lr}
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002eb6:	4a18      	ldr	r2, [pc, #96]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x64>)
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	2107      	movs	r1, #7
 8002ebe:	4019      	ands	r1, r3
 8002ec0:	3101      	adds	r1, #1
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ec2:	6893      	ldr	r3, [r2, #8]
 8002ec4:	2238      	movs	r2, #56	@ 0x38
 8002ec6:	421a      	tst	r2, r3
 8002ec8:	d109      	bne.n	8002ede <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002eca:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	0ad2      	lsrs	r2, r2, #11
 8002ed0:	2307      	movs	r3, #7
 8002ed2:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ed4:	4811      	ldr	r0, [pc, #68]	@ (8002f1c <HAL_RCC_GetSysClockFreq+0x68>)
 8002ed6:	40d8      	lsrs	r0, r3
  else
  {
    sysclockfreq = 0U;
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002ed8:	f7fd f916 	bl	8000108 <__udivsi3>
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8002edc:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ede:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	2338      	movs	r3, #56	@ 0x38
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b08      	cmp	r3, #8
 8002ee8:	d010      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x58>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x64>)
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	2338      	movs	r3, #56	@ 0x38
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <HAL_RCC_GetSysClockFreq+0x64>)
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2338      	movs	r3, #56	@ 0x38
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b18      	cmp	r3, #24
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = 0U;
 8002f02:	2000      	movs	r0, #0
 8002f04:	e7e8      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = LSI_VALUE;
 8002f06:	20fa      	movs	r0, #250	@ 0xfa
 8002f08:	01c0      	lsls	r0, r0, #7
 8002f0a:	e7e5      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = HSE_VALUE;
 8002f0c:	4804      	ldr	r0, [pc, #16]	@ (8002f20 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002f0e:	e7e3      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = LSE_VALUE;
 8002f10:	2080      	movs	r0, #128	@ 0x80
 8002f12:	0200      	lsls	r0, r0, #8
 8002f14:	e7e0      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x24>
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	02dc6c00 	.word	0x02dc6c00
 8002f20:	007a1200 	.word	0x007a1200

08002f24 <HAL_RCC_ClockConfig>:
{
 8002f24:	b570      	push	{r4, r5, r6, lr}
 8002f26:	0004      	movs	r4, r0
 8002f28:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d100      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xc>
 8002f2e:	e0aa      	b.n	8003086 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f30:	4b57      	ldr	r3, [pc, #348]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	2307      	movs	r3, #7
 8002f36:	4013      	ands	r3, r2
 8002f38:	428b      	cmp	r3, r1
 8002f3a:	d328      	bcc.n	8002f8e <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	079a      	lsls	r2, r3, #30
 8002f40:	d510      	bpl.n	8002f64 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f42:	075b      	lsls	r3, r3, #29
 8002f44:	d507      	bpl.n	8002f56 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f46:	4953      	ldr	r1, [pc, #332]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002f48:	688a      	ldr	r2, [r1, #8]
 8002f4a:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <HAL_RCC_ClockConfig+0x174>)
 8002f4c:	401a      	ands	r2, r3
 8002f4e:	23b0      	movs	r3, #176	@ 0xb0
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f56:	4a4f      	ldr	r2, [pc, #316]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002f58:	6893      	ldr	r3, [r2, #8]
 8002f5a:	4950      	ldr	r1, [pc, #320]	@ (800309c <HAL_RCC_ClockConfig+0x178>)
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	68e1      	ldr	r1, [r4, #12]
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	07db      	lsls	r3, r3, #31
 8002f68:	d552      	bpl.n	8003010 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	211c      	movs	r1, #28
 8002f70:	438b      	bics	r3, r1
 8002f72:	68a1      	ldr	r1, [r4, #8]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f78:	6863      	ldr	r3, [r4, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d01e      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x98>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d138      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f82:	4a44      	ldr	r2, [pc, #272]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	0552      	lsls	r2, r2, #21
 8002f88:	d41b      	bmi.n	8002fc2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	e063      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8e:	4a40      	ldr	r2, [pc, #256]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 8002f90:	6813      	ldr	r3, [r2, #0]
 8002f92:	2107      	movs	r1, #7
 8002f94:	438b      	bics	r3, r1
 8002f96:	432b      	orrs	r3, r5
 8002f98:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f9a:	f7ff fc17 	bl	80027cc <HAL_GetTick>
 8002f9e:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	42ab      	cmp	r3, r5
 8002faa:	d0c7      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fac:	f7ff fc0e 	bl	80027cc <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80030a0 <HAL_RCC_ClockConfig+0x17c>)
 8002fb4:	4290      	cmp	r0, r2
 8002fb6:	d9f3      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8002fb8:	2003      	movs	r0, #3
 8002fba:	e04c      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	0392      	lsls	r2, r2, #14
 8002fc0:	d563      	bpl.n	800308a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4934      	ldr	r1, [pc, #208]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002fc4:	688a      	ldr	r2, [r1, #8]
 8002fc6:	2007      	movs	r0, #7
 8002fc8:	4382      	bics	r2, r0
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002fce:	f7ff fbfd 	bl	80027cc <HAL_GetTick>
 8002fd2:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2238      	movs	r2, #56	@ 0x38
 8002fda:	401a      	ands	r2, r3
 8002fdc:	6863      	ldr	r3, [r4, #4]
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d015      	beq.n	8003010 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe4:	f7ff fbf2 	bl	80027cc <HAL_GetTick>
 8002fe8:	1b80      	subs	r0, r0, r6
 8002fea:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <HAL_RCC_ClockConfig+0x17c>)
 8002fec:	4298      	cmp	r0, r3
 8002fee:	d9f1      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e030      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ff8:	4a26      	ldr	r2, [pc, #152]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8002ffa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ffc:	0792      	lsls	r2, r2, #30
 8002ffe:	d4e0      	bmi.n	8002fc2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8003000:	2001      	movs	r0, #1
 8003002:	e028      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003004:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8003006:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8003008:	0792      	lsls	r2, r2, #30
 800300a:	d4da      	bmi.n	8002fc2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
 800300e:	e022      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2307      	movs	r3, #7
 8003016:	4013      	ands	r3, r2
 8003018:	42ab      	cmp	r3, r5
 800301a:	d81d      	bhi.n	8003058 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	075b      	lsls	r3, r3, #29
 8003020:	d506      	bpl.n	8003030 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8003024:	6893      	ldr	r3, [r2, #8]
 8003026:	491f      	ldr	r1, [pc, #124]	@ (80030a4 <HAL_RCC_ClockConfig+0x180>)
 8003028:	400b      	ands	r3, r1
 800302a:	6921      	ldr	r1, [r4, #16]
 800302c:	430b      	orrs	r3, r1
 800302e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003030:	f7ff ff40 	bl	8002eb4 <HAL_RCC_GetSysClockFreq>
 8003034:	4b17      	ldr	r3, [pc, #92]	@ (8003094 <HAL_RCC_ClockConfig+0x170>)
 8003036:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003038:	0a12      	lsrs	r2, r2, #8
 800303a:	230f      	movs	r3, #15
 800303c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800303e:	4a1a      	ldr	r2, [pc, #104]	@ (80030a8 <HAL_RCC_ClockConfig+0x184>)
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003044:	231f      	movs	r3, #31
 8003046:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003048:	40d8      	lsrs	r0, r3
 800304a:	4b18      	ldr	r3, [pc, #96]	@ (80030ac <HAL_RCC_ClockConfig+0x188>)
 800304c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_RCC_ClockConfig+0x18c>)
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f7ff fb77 	bl	8002744 <HAL_InitTick>
}
 8003056:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	2107      	movs	r1, #7
 800305e:	438b      	bics	r3, r1
 8003060:	432b      	orrs	r3, r5
 8003062:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003064:	f7ff fbb2 	bl	80027cc <HAL_GetTick>
 8003068:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800306a:	4b09      	ldr	r3, [pc, #36]	@ (8003090 <HAL_RCC_ClockConfig+0x16c>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	2307      	movs	r3, #7
 8003070:	4013      	ands	r3, r2
 8003072:	42ab      	cmp	r3, r5
 8003074:	d0d2      	beq.n	800301c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7ff fba9 	bl	80027cc <HAL_GetTick>
 800307a:	1b80      	subs	r0, r0, r6
 800307c:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_RCC_ClockConfig+0x17c>)
 800307e:	4298      	cmp	r0, r3
 8003080:	d9f3      	bls.n	800306a <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8003082:	2003      	movs	r0, #3
 8003084:	e7e7      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8003086:	2001      	movs	r0, #1
 8003088:	e7e5      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 800308a:	2001      	movs	r0, #1
 800308c:	e7e3      	b.n	8003056 <HAL_RCC_ClockConfig+0x132>
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
 8003098:	ffff84ff 	.word	0xffff84ff
 800309c:	fffff0ff 	.word	0xfffff0ff
 80030a0:	00001388 	.word	0x00001388
 80030a4:	ffff8fff 	.word	0xffff8fff
 80030a8:	08003d74 	.word	0x08003d74
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	20000014 	.word	0x20000014

080030b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030b6:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b8:	6a03      	ldr	r3, [r0, #32]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4393      	bics	r3, r2
 80030be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c2:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030c4:	4c16      	ldr	r4, [pc, #88]	@ (8003120 <TIM_OC1_SetConfig+0x6c>)
 80030c6:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030c8:	680c      	ldr	r4, [r1, #0]
 80030ca:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030cc:	2302      	movs	r3, #2
 80030ce:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030d0:	688b      	ldr	r3, [r1, #8]
 80030d2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d4:	4d13      	ldr	r5, [pc, #76]	@ (8003124 <TIM_OC1_SetConfig+0x70>)
 80030d6:	42a8      	cmp	r0, r5
 80030d8:	d005      	beq.n	80030e6 <TIM_OC1_SetConfig+0x32>
 80030da:	4d13      	ldr	r5, [pc, #76]	@ (8003128 <TIM_OC1_SetConfig+0x74>)
 80030dc:	42a8      	cmp	r0, r5
 80030de:	d002      	beq.n	80030e6 <TIM_OC1_SetConfig+0x32>
 80030e0:	4d12      	ldr	r5, [pc, #72]	@ (800312c <TIM_OC1_SetConfig+0x78>)
 80030e2:	42a8      	cmp	r0, r5
 80030e4:	d106      	bne.n	80030f4 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e6:	2508      	movs	r5, #8
 80030e8:	43ab      	bics	r3, r5
 80030ea:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030ec:	68cb      	ldr	r3, [r1, #12]
 80030ee:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030f0:	2504      	movs	r5, #4
 80030f2:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003124 <TIM_OC1_SetConfig+0x70>)
 80030f6:	42a8      	cmp	r0, r5
 80030f8:	d005      	beq.n	8003106 <TIM_OC1_SetConfig+0x52>
 80030fa:	4d0b      	ldr	r5, [pc, #44]	@ (8003128 <TIM_OC1_SetConfig+0x74>)
 80030fc:	42a8      	cmp	r0, r5
 80030fe:	d002      	beq.n	8003106 <TIM_OC1_SetConfig+0x52>
 8003100:	4d0a      	ldr	r5, [pc, #40]	@ (800312c <TIM_OC1_SetConfig+0x78>)
 8003102:	42a8      	cmp	r0, r5
 8003104:	d105      	bne.n	8003112 <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003106:	4d0a      	ldr	r5, [pc, #40]	@ (8003130 <TIM_OC1_SetConfig+0x7c>)
 8003108:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800310a:	694d      	ldr	r5, [r1, #20]
 800310c:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800310e:	698a      	ldr	r2, [r1, #24]
 8003110:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003112:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003114:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003116:	684a      	ldr	r2, [r1, #4]
 8003118:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311a:	6203      	str	r3, [r0, #32]
}
 800311c:	bd30      	pop	{r4, r5, pc}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	fffeff8c 	.word	0xfffeff8c
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800
 8003130:	fffffcff 	.word	0xfffffcff

08003134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003138:	6a03      	ldr	r3, [r0, #32]
 800313a:	4a16      	ldr	r2, [pc, #88]	@ (8003194 <TIM_OC3_SetConfig+0x60>)
 800313c:	4013      	ands	r3, r2
 800313e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003142:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003144:	4d14      	ldr	r5, [pc, #80]	@ (8003198 <TIM_OC3_SetConfig+0x64>)
 8003146:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003148:	680d      	ldr	r5, [r1, #0]
 800314a:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314c:	4b13      	ldr	r3, [pc, #76]	@ (800319c <TIM_OC3_SetConfig+0x68>)
 800314e:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003150:	688b      	ldr	r3, [r1, #8]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	4c12      	ldr	r4, [pc, #72]	@ (80031a0 <TIM_OC3_SetConfig+0x6c>)
 8003158:	42a0      	cmp	r0, r4
 800315a:	d006      	beq.n	800316a <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315c:	4c11      	ldr	r4, [pc, #68]	@ (80031a4 <TIM_OC3_SetConfig+0x70>)
 800315e:	42a0      	cmp	r0, r4
 8003160:	d00a      	beq.n	8003178 <TIM_OC3_SetConfig+0x44>
 8003162:	4c11      	ldr	r4, [pc, #68]	@ (80031a8 <TIM_OC3_SetConfig+0x74>)
 8003164:	42a0      	cmp	r0, r4
 8003166:	d10f      	bne.n	8003188 <TIM_OC3_SetConfig+0x54>
 8003168:	e006      	b.n	8003178 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 800316a:	4c10      	ldr	r4, [pc, #64]	@ (80031ac <TIM_OC3_SetConfig+0x78>)
 800316c:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800316e:	68cb      	ldr	r3, [r1, #12]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8003174:	4c0e      	ldr	r4, [pc, #56]	@ (80031b0 <TIM_OC3_SetConfig+0x7c>)
 8003176:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003178:	4c0e      	ldr	r4, [pc, #56]	@ (80031b4 <TIM_OC3_SetConfig+0x80>)
 800317a:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800317c:	694c      	ldr	r4, [r1, #20]
 800317e:	0124      	lsls	r4, r4, #4
 8003180:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003182:	698a      	ldr	r2, [r1, #24]
 8003184:	0112      	lsls	r2, r2, #4
 8003186:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003188:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800318a:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800318c:	684a      	ldr	r2, [r1, #4]
 800318e:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003190:	6203      	str	r3, [r0, #32]
}
 8003192:	bd30      	pop	{r4, r5, pc}
 8003194:	fffffeff 	.word	0xfffffeff
 8003198:	fffeff8c 	.word	0xfffeff8c
 800319c:	fffffdff 	.word	0xfffffdff
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	fffff7ff 	.word	0xfffff7ff
 80031b0:	fffffbff 	.word	0xfffffbff
 80031b4:	ffffcfff 	.word	0xffffcfff

080031b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ba:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031bc:	6a03      	ldr	r3, [r0, #32]
 80031be:	4a11      	ldr	r2, [pc, #68]	@ (8003204 <TIM_OC4_SetConfig+0x4c>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c6:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031c8:	4a0f      	ldr	r2, [pc, #60]	@ (8003208 <TIM_OC4_SetConfig+0x50>)
 80031ca:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031cc:	680a      	ldr	r2, [r1, #0]
 80031ce:	0212      	lsls	r2, r2, #8
 80031d0:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d2:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <TIM_OC4_SetConfig+0x54>)
 80031d4:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d6:	688b      	ldr	r3, [r1, #8]
 80031d8:	031b      	lsls	r3, r3, #12
 80031da:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031dc:	4c0c      	ldr	r4, [pc, #48]	@ (8003210 <TIM_OC4_SetConfig+0x58>)
 80031de:	42a0      	cmp	r0, r4
 80031e0:	d005      	beq.n	80031ee <TIM_OC4_SetConfig+0x36>
 80031e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003214 <TIM_OC4_SetConfig+0x5c>)
 80031e4:	42a0      	cmp	r0, r4
 80031e6:	d002      	beq.n	80031ee <TIM_OC4_SetConfig+0x36>
 80031e8:	4c0b      	ldr	r4, [pc, #44]	@ (8003218 <TIM_OC4_SetConfig+0x60>)
 80031ea:	42a0      	cmp	r0, r4
 80031ec:	d104      	bne.n	80031f8 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031ee:	4c0b      	ldr	r4, [pc, #44]	@ (800321c <TIM_OC4_SetConfig+0x64>)
 80031f0:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031f2:	694d      	ldr	r5, [r1, #20]
 80031f4:	01ad      	lsls	r5, r5, #6
 80031f6:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031f8:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031fa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031fc:	684a      	ldr	r2, [r1, #4]
 80031fe:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003200:	6203      	str	r3, [r0, #32]
}
 8003202:	bd30      	pop	{r4, r5, pc}
 8003204:	ffffefff 	.word	0xffffefff
 8003208:	feff8cff 	.word	0xfeff8cff
 800320c:	ffffdfff 	.word	0xffffdfff
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800
 800321c:	ffffbfff 	.word	0xffffbfff

08003220 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003222:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003224:	6a03      	ldr	r3, [r0, #32]
 8003226:	4a11      	ldr	r2, [pc, #68]	@ (800326c <TIM_OC5_SetConfig+0x4c>)
 8003228:	4013      	ands	r3, r2
 800322a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800322c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800322e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003230:	4d0f      	ldr	r5, [pc, #60]	@ (8003270 <TIM_OC5_SetConfig+0x50>)
 8003232:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003234:	680d      	ldr	r5, [r1, #0]
 8003236:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003238:	4b0e      	ldr	r3, [pc, #56]	@ (8003274 <TIM_OC5_SetConfig+0x54>)
 800323a:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800323c:	688b      	ldr	r3, [r1, #8]
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003242:	4c0d      	ldr	r4, [pc, #52]	@ (8003278 <TIM_OC5_SetConfig+0x58>)
 8003244:	42a0      	cmp	r0, r4
 8003246:	d005      	beq.n	8003254 <TIM_OC5_SetConfig+0x34>
 8003248:	4c0c      	ldr	r4, [pc, #48]	@ (800327c <TIM_OC5_SetConfig+0x5c>)
 800324a:	42a0      	cmp	r0, r4
 800324c:	d002      	beq.n	8003254 <TIM_OC5_SetConfig+0x34>
 800324e:	4c0c      	ldr	r4, [pc, #48]	@ (8003280 <TIM_OC5_SetConfig+0x60>)
 8003250:	42a0      	cmp	r0, r4
 8003252:	d104      	bne.n	800325e <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003254:	4c05      	ldr	r4, [pc, #20]	@ (800326c <TIM_OC5_SetConfig+0x4c>)
 8003256:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003258:	694a      	ldr	r2, [r1, #20]
 800325a:	0212      	lsls	r2, r2, #8
 800325c:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003260:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003262:	684a      	ldr	r2, [r1, #4]
 8003264:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003266:	6203      	str	r3, [r0, #32]
}
 8003268:	bd30      	pop	{r4, r5, pc}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	fffeffff 	.word	0xfffeffff
 8003270:	fffeff8f 	.word	0xfffeff8f
 8003274:	fffdffff 	.word	0xfffdffff
 8003278:	40012c00 	.word	0x40012c00
 800327c:	40014400 	.word	0x40014400
 8003280:	40014800 	.word	0x40014800

08003284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003288:	6a03      	ldr	r3, [r0, #32]
 800328a:	4a11      	ldr	r2, [pc, #68]	@ (80032d0 <TIM_OC6_SetConfig+0x4c>)
 800328c:	4013      	ands	r3, r2
 800328e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003292:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003294:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <TIM_OC6_SetConfig+0x50>)
 8003296:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	680a      	ldr	r2, [r1, #0]
 800329a:	0212      	lsls	r2, r2, #8
 800329c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800329e:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <TIM_OC6_SetConfig+0x54>)
 80032a0:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80032a2:	688b      	ldr	r3, [r1, #8]
 80032a4:	051b      	lsls	r3, r3, #20
 80032a6:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a8:	4c0c      	ldr	r4, [pc, #48]	@ (80032dc <TIM_OC6_SetConfig+0x58>)
 80032aa:	42a0      	cmp	r0, r4
 80032ac:	d005      	beq.n	80032ba <TIM_OC6_SetConfig+0x36>
 80032ae:	4c0c      	ldr	r4, [pc, #48]	@ (80032e0 <TIM_OC6_SetConfig+0x5c>)
 80032b0:	42a0      	cmp	r0, r4
 80032b2:	d002      	beq.n	80032ba <TIM_OC6_SetConfig+0x36>
 80032b4:	4c0b      	ldr	r4, [pc, #44]	@ (80032e4 <TIM_OC6_SetConfig+0x60>)
 80032b6:	42a0      	cmp	r0, r4
 80032b8:	d104      	bne.n	80032c4 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80032ba:	4c0b      	ldr	r4, [pc, #44]	@ (80032e8 <TIM_OC6_SetConfig+0x64>)
 80032bc:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80032be:	694d      	ldr	r5, [r1, #20]
 80032c0:	02ad      	lsls	r5, r5, #10
 80032c2:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80032c6:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80032c8:	684a      	ldr	r2, [r1, #4]
 80032ca:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032cc:	6203      	str	r3, [r0, #32]
}
 80032ce:	bd30      	pop	{r4, r5, pc}
 80032d0:	ffefffff 	.word	0xffefffff
 80032d4:	feff8fff 	.word	0xfeff8fff
 80032d8:	ffdfffff 	.word	0xffdfffff
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800
 80032e8:	fffbffff 	.word	0xfffbffff

080032ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032ec:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f0:	6a04      	ldr	r4, [r0, #32]
 80032f2:	2501      	movs	r5, #1
 80032f4:	43ac      	bics	r4, r5
 80032f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032fa:	35ef      	adds	r5, #239	@ 0xef
 80032fc:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032fe:	0112      	lsls	r2, r2, #4
 8003300:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003302:	240a      	movs	r4, #10
 8003304:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003306:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003308:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800330a:	6203      	str	r3, [r0, #32]
}
 800330c:	bd30      	pop	{r4, r5, pc}
	...

08003310 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003310:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003312:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003314:	6a04      	ldr	r4, [r0, #32]
 8003316:	2510      	movs	r5, #16
 8003318:	43ac      	bics	r4, r5
 800331a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800331c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800331e:	4d05      	ldr	r5, [pc, #20]	@ (8003334 <TIM_TI2_ConfigInputStage+0x24>)
 8003320:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003322:	0312      	lsls	r2, r2, #12
 8003324:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003326:	24a0      	movs	r4, #160	@ 0xa0
 8003328:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800332a:	0109      	lsls	r1, r1, #4
 800332c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003330:	6201      	str	r1, [r0, #32]
}
 8003332:	bd30      	pop	{r4, r5, pc}
 8003334:	ffff0fff 	.word	0xffff0fff

08003338 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003338:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800333a:	4a03      	ldr	r2, [pc, #12]	@ (8003348 <TIM_ITRx_SetConfig+0x10>)
 800333c:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333e:	430b      	orrs	r3, r1
 8003340:	2207      	movs	r2, #7
 8003342:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003344:	6083      	str	r3, [r0, #8]
}
 8003346:	4770      	bx	lr
 8003348:	ffcfff8f 	.word	0xffcfff8f

0800334c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	233d      	movs	r3, #61	@ 0x3d
 800334e:	5cc3      	ldrb	r3, [r0, r3]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d122      	bne.n	800339a <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	333c      	adds	r3, #60	@ 0x3c
 8003356:	2202      	movs	r2, #2
 8003358:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800335a:	6802      	ldr	r2, [r0, #0]
 800335c:	68d3      	ldr	r3, [r2, #12]
 800335e:	2101      	movs	r1, #1
 8003360:	430b      	orrs	r3, r1
 8003362:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003364:	6803      	ldr	r3, [r0, #0]
 8003366:	4a10      	ldr	r2, [pc, #64]	@ (80033a8 <HAL_TIM_Base_Start_IT+0x5c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d008      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x32>
 800336c:	4a0f      	ldr	r2, [pc, #60]	@ (80033ac <HAL_TIM_Base_Start_IT+0x60>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d005      	beq.n	800337e <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800337a:	2000      	movs	r0, #0
 800337c:	e00e      	b.n	800339c <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	490b      	ldr	r1, [pc, #44]	@ (80033b0 <HAL_TIM_Base_Start_IT+0x64>)
 8003382:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003384:	2a06      	cmp	r2, #6
 8003386:	d00a      	beq.n	800339e <HAL_TIM_Base_Start_IT+0x52>
 8003388:	3907      	subs	r1, #7
 800338a:	428a      	cmp	r2, r1
 800338c:	d009      	beq.n	80033a2 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003396:	2000      	movs	r0, #0
 8003398:	e000      	b.n	800339c <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 800339a:	2001      	movs	r0, #1
}
 800339c:	4770      	bx	lr
  return HAL_OK;
 800339e:	2000      	movs	r0, #0
 80033a0:	e7fc      	b.n	800339c <HAL_TIM_Base_Start_IT+0x50>
 80033a2:	2000      	movs	r0, #0
 80033a4:	e7fa      	b.n	800339c <HAL_TIM_Base_Start_IT+0x50>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	40012c00 	.word	0x40012c00
 80033ac:	40000400 	.word	0x40000400
 80033b0:	00010007 	.word	0x00010007

080033b4 <HAL_TIM_OC_MspInit>:
}
 80033b4:	4770      	bx	lr

080033b6 <HAL_TIM_OnePulse_MspInit>:
}
 80033b6:	4770      	bx	lr

080033b8 <HAL_TIM_OC_DelayElapsedCallback>:
}
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_IC_CaptureCallback>:
}
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_TriggerCallback>:
}
 80033be:	4770      	bx	lr

080033c0 <HAL_TIM_IRQHandler>:
{
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c8:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033ca:	07a2      	lsls	r2, r4, #30
 80033cc:	d50e      	bpl.n	80033ec <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ce:	07b2      	lsls	r2, r6, #30
 80033d0:	d50c      	bpl.n	80033ec <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033d2:	2203      	movs	r2, #3
 80033d4:	4252      	negs	r2, r2
 80033d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d8:	2301      	movs	r3, #1
 80033da:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033dc:	6803      	ldr	r3, [r0, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	079b      	lsls	r3, r3, #30
 80033e2:	d057      	beq.n	8003494 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 80033e4:	f7ff ffe9 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e8:	2300      	movs	r3, #0
 80033ea:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033ec:	0763      	lsls	r3, r4, #29
 80033ee:	d512      	bpl.n	8003416 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033f0:	0773      	lsls	r3, r6, #29
 80033f2:	d510      	bpl.n	8003416 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	2205      	movs	r2, #5
 80033f8:	4252      	negs	r2, r2
 80033fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fc:	2302      	movs	r3, #2
 80033fe:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003400:	682b      	ldr	r3, [r5, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	23c0      	movs	r3, #192	@ 0xc0
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	421a      	tst	r2, r3
 800340a:	d049      	beq.n	80034a0 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 800340c:	0028      	movs	r0, r5
 800340e:	f7ff ffd4 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	2300      	movs	r3, #0
 8003414:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003416:	0723      	lsls	r3, r4, #28
 8003418:	d510      	bpl.n	800343c <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341a:	0733      	lsls	r3, r6, #28
 800341c:	d50e      	bpl.n	800343c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	2209      	movs	r2, #9
 8003422:	4252      	negs	r2, r2
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	2304      	movs	r3, #4
 8003428:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	079b      	lsls	r3, r3, #30
 8003430:	d03d      	beq.n	80034ae <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	0028      	movs	r0, r5
 8003434:	f7ff ffc1 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003438:	2300      	movs	r3, #0
 800343a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800343c:	06e3      	lsls	r3, r4, #27
 800343e:	d512      	bpl.n	8003466 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003440:	06f3      	lsls	r3, r6, #27
 8003442:	d510      	bpl.n	8003466 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	2211      	movs	r2, #17
 8003448:	4252      	negs	r2, r2
 800344a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800344c:	2308      	movs	r3, #8
 800344e:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003450:	682b      	ldr	r3, [r5, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	23c0      	movs	r3, #192	@ 0xc0
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	421a      	tst	r2, r3
 800345a:	d02f      	beq.n	80034bc <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 800345c:	0028      	movs	r0, r5
 800345e:	f7ff ffac 	bl	80033ba <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	2300      	movs	r3, #0
 8003464:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003466:	07e3      	lsls	r3, r4, #31
 8003468:	d501      	bpl.n	800346e <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800346a:	07f3      	lsls	r3, r6, #31
 800346c:	d42d      	bmi.n	80034ca <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800346e:	2382      	movs	r3, #130	@ 0x82
 8003470:	019b      	lsls	r3, r3, #6
 8003472:	421c      	tst	r4, r3
 8003474:	d001      	beq.n	800347a <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003476:	0633      	lsls	r3, r6, #24
 8003478:	d42f      	bmi.n	80034da <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800347a:	05e3      	lsls	r3, r4, #23
 800347c:	d501      	bpl.n	8003482 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800347e:	0633      	lsls	r3, r6, #24
 8003480:	d432      	bmi.n	80034e8 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003482:	0663      	lsls	r3, r4, #25
 8003484:	d501      	bpl.n	800348a <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003486:	0673      	lsls	r3, r6, #25
 8003488:	d435      	bmi.n	80034f6 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800348a:	06a4      	lsls	r4, r4, #26
 800348c:	d501      	bpl.n	8003492 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800348e:	06b6      	lsls	r6, r6, #26
 8003490:	d439      	bmi.n	8003506 <HAL_TIM_IRQHandler+0x146>
}
 8003492:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003494:	f7ff ff90 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	0028      	movs	r0, r5
 800349a:	f7ff ff8f 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
 800349e:	e7a3      	b.n	80033e8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a0:	0028      	movs	r0, r5
 80034a2:	f7ff ff89 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a6:	0028      	movs	r0, r5
 80034a8:	f7ff ff88 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
 80034ac:	e7b1      	b.n	8003412 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	0028      	movs	r0, r5
 80034b0:	f7ff ff82 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	0028      	movs	r0, r5
 80034b6:	f7ff ff81 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
 80034ba:	e7bd      	b.n	8003438 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034bc:	0028      	movs	r0, r5
 80034be:	f7ff ff7b 	bl	80033b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c2:	0028      	movs	r0, r5
 80034c4:	f7ff ff7a 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
 80034c8:	e7cb      	b.n	8003462 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034ca:	682b      	ldr	r3, [r5, #0]
 80034cc:	2202      	movs	r2, #2
 80034ce:	4252      	negs	r2, r2
 80034d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80034d2:	0028      	movs	r0, r5
 80034d4:	f7fe fb28 	bl	8001b28 <HAL_TIM_PeriodElapsedCallback>
 80034d8:	e7c9      	b.n	800346e <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003518 <HAL_TIM_IRQHandler+0x158>)
 80034de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80034e0:	0028      	movs	r0, r5
 80034e2:	f000 fac0 	bl	8003a66 <HAL_TIMEx_BreakCallback>
 80034e6:	e7c8      	b.n	800347a <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034e8:	682b      	ldr	r3, [r5, #0]
 80034ea:	4a0c      	ldr	r2, [pc, #48]	@ (800351c <HAL_TIM_IRQHandler+0x15c>)
 80034ec:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80034ee:	0028      	movs	r0, r5
 80034f0:	f000 faba 	bl	8003a68 <HAL_TIMEx_Break2Callback>
 80034f4:	e7c5      	b.n	8003482 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034f6:	682b      	ldr	r3, [r5, #0]
 80034f8:	2241      	movs	r2, #65	@ 0x41
 80034fa:	4252      	negs	r2, r2
 80034fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80034fe:	0028      	movs	r0, r5
 8003500:	f7ff ff5d 	bl	80033be <HAL_TIM_TriggerCallback>
 8003504:	e7c1      	b.n	800348a <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	2221      	movs	r2, #33	@ 0x21
 800350a:	4252      	negs	r2, r2
 800350c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800350e:	0028      	movs	r0, r5
 8003510:	f000 faa8 	bl	8003a64 <HAL_TIMEx_CommutCallback>
}
 8003514:	e7bd      	b.n	8003492 <HAL_TIM_IRQHandler+0xd2>
 8003516:	46c0      	nop			@ (mov r8, r8)
 8003518:	ffffdf7f 	.word	0xffffdf7f
 800351c:	fffffeff 	.word	0xfffffeff

08003520 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003520:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003522:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <TIM_Base_SetConfig+0x78>)
 8003524:	4290      	cmp	r0, r2
 8003526:	d002      	beq.n	800352e <TIM_Base_SetConfig+0xe>
 8003528:	4a1c      	ldr	r2, [pc, #112]	@ (800359c <TIM_Base_SetConfig+0x7c>)
 800352a:	4290      	cmp	r0, r2
 800352c:	d103      	bne.n	8003536 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800352e:	2270      	movs	r2, #112	@ 0x70
 8003530:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8003532:	684a      	ldr	r2, [r1, #4]
 8003534:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003536:	4a18      	ldr	r2, [pc, #96]	@ (8003598 <TIM_Base_SetConfig+0x78>)
 8003538:	4290      	cmp	r0, r2
 800353a:	d00b      	beq.n	8003554 <TIM_Base_SetConfig+0x34>
 800353c:	4a17      	ldr	r2, [pc, #92]	@ (800359c <TIM_Base_SetConfig+0x7c>)
 800353e:	4290      	cmp	r0, r2
 8003540:	d008      	beq.n	8003554 <TIM_Base_SetConfig+0x34>
 8003542:	4a17      	ldr	r2, [pc, #92]	@ (80035a0 <TIM_Base_SetConfig+0x80>)
 8003544:	4290      	cmp	r0, r2
 8003546:	d005      	beq.n	8003554 <TIM_Base_SetConfig+0x34>
 8003548:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <TIM_Base_SetConfig+0x84>)
 800354a:	4290      	cmp	r0, r2
 800354c:	d002      	beq.n	8003554 <TIM_Base_SetConfig+0x34>
 800354e:	4a16      	ldr	r2, [pc, #88]	@ (80035a8 <TIM_Base_SetConfig+0x88>)
 8003550:	4290      	cmp	r0, r2
 8003552:	d103      	bne.n	800355c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003554:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <TIM_Base_SetConfig+0x8c>)
 8003556:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003558:	68ca      	ldr	r2, [r1, #12]
 800355a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	2280      	movs	r2, #128	@ 0x80
 800355e:	4393      	bics	r3, r2
 8003560:	694a      	ldr	r2, [r1, #20]
 8003562:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003564:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003566:	688b      	ldr	r3, [r1, #8]
 8003568:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800356a:	680b      	ldr	r3, [r1, #0]
 800356c:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <TIM_Base_SetConfig+0x78>)
 8003570:	4298      	cmp	r0, r3
 8003572:	d005      	beq.n	8003580 <TIM_Base_SetConfig+0x60>
 8003574:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <TIM_Base_SetConfig+0x84>)
 8003576:	4298      	cmp	r0, r3
 8003578:	d002      	beq.n	8003580 <TIM_Base_SetConfig+0x60>
 800357a:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <TIM_Base_SetConfig+0x88>)
 800357c:	4298      	cmp	r0, r3
 800357e:	d101      	bne.n	8003584 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	690b      	ldr	r3, [r1, #16]
 8003582:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003584:	2301      	movs	r3, #1
 8003586:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003588:	6902      	ldr	r2, [r0, #16]
 800358a:	4213      	tst	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800358e:	6903      	ldr	r3, [r0, #16]
 8003590:	2201      	movs	r2, #1
 8003592:	4393      	bics	r3, r2
 8003594:	6103      	str	r3, [r0, #16]
}
 8003596:	4770      	bx	lr
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40000400 	.word	0x40000400
 80035a0:	40002000 	.word	0x40002000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800
 80035ac:	fffffcff 	.word	0xfffffcff

080035b0 <HAL_TIM_Base_Init>:
{
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80035b4:	d02a      	beq.n	800360c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	233d      	movs	r3, #61	@ 0x3d
 80035b8:	5cc3      	ldrb	r3, [r0, r3]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d020      	beq.n	8003600 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 80035be:	253d      	movs	r5, #61	@ 0x3d
 80035c0:	2302      	movs	r3, #2
 80035c2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c4:	0021      	movs	r1, r4
 80035c6:	c901      	ldmia	r1!, {r0}
 80035c8:	f7ff ffaa 	bl	8003520 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035cc:	2301      	movs	r3, #1
 80035ce:	2248      	movs	r2, #72	@ 0x48
 80035d0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	3a0a      	subs	r2, #10
 80035d4:	54a3      	strb	r3, [r4, r2]
 80035d6:	3201      	adds	r2, #1
 80035d8:	54a3      	strb	r3, [r4, r2]
 80035da:	3201      	adds	r2, #1
 80035dc:	54a3      	strb	r3, [r4, r2]
 80035de:	3201      	adds	r2, #1
 80035e0:	54a3      	strb	r3, [r4, r2]
 80035e2:	3201      	adds	r2, #1
 80035e4:	54a3      	strb	r3, [r4, r2]
 80035e6:	3201      	adds	r2, #1
 80035e8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	3201      	adds	r2, #1
 80035ec:	54a3      	strb	r3, [r4, r2]
 80035ee:	3201      	adds	r2, #1
 80035f0:	54a3      	strb	r3, [r4, r2]
 80035f2:	3201      	adds	r2, #1
 80035f4:	54a3      	strb	r3, [r4, r2]
 80035f6:	3201      	adds	r2, #1
 80035f8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80035fa:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80035fc:	2000      	movs	r0, #0
}
 80035fe:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003600:	333c      	adds	r3, #60	@ 0x3c
 8003602:	2200      	movs	r2, #0
 8003604:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003606:	f7fe fff5 	bl	80025f4 <HAL_TIM_Base_MspInit>
 800360a:	e7d8      	b.n	80035be <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800360c:	2001      	movs	r0, #1
 800360e:	e7f6      	b.n	80035fe <HAL_TIM_Base_Init+0x4e>

08003610 <HAL_TIM_OC_Init>:
{
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003614:	d02a      	beq.n	800366c <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003616:	233d      	movs	r3, #61	@ 0x3d
 8003618:	5cc3      	ldrb	r3, [r0, r3]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800361e:	253d      	movs	r5, #61	@ 0x3d
 8003620:	2302      	movs	r3, #2
 8003622:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003624:	0021      	movs	r1, r4
 8003626:	c901      	ldmia	r1!, {r0}
 8003628:	f7ff ff7a 	bl	8003520 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362c:	2301      	movs	r3, #1
 800362e:	2248      	movs	r2, #72	@ 0x48
 8003630:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003632:	3a0a      	subs	r2, #10
 8003634:	54a3      	strb	r3, [r4, r2]
 8003636:	3201      	adds	r2, #1
 8003638:	54a3      	strb	r3, [r4, r2]
 800363a:	3201      	adds	r2, #1
 800363c:	54a3      	strb	r3, [r4, r2]
 800363e:	3201      	adds	r2, #1
 8003640:	54a3      	strb	r3, [r4, r2]
 8003642:	3201      	adds	r2, #1
 8003644:	54a3      	strb	r3, [r4, r2]
 8003646:	3201      	adds	r2, #1
 8003648:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364a:	3201      	adds	r2, #1
 800364c:	54a3      	strb	r3, [r4, r2]
 800364e:	3201      	adds	r2, #1
 8003650:	54a3      	strb	r3, [r4, r2]
 8003652:	3201      	adds	r2, #1
 8003654:	54a3      	strb	r3, [r4, r2]
 8003656:	3201      	adds	r2, #1
 8003658:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800365a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800365c:	2000      	movs	r0, #0
}
 800365e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003660:	333c      	adds	r3, #60	@ 0x3c
 8003662:	2200      	movs	r2, #0
 8003664:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 8003666:	f7ff fea5 	bl	80033b4 <HAL_TIM_OC_MspInit>
 800366a:	e7d8      	b.n	800361e <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 800366c:	2001      	movs	r0, #1
 800366e:	e7f6      	b.n	800365e <HAL_TIM_OC_Init+0x4e>

08003670 <HAL_TIM_OnePulse_Init>:
{
 8003670:	b570      	push	{r4, r5, r6, lr}
 8003672:	0004      	movs	r4, r0
 8003674:	000d      	movs	r5, r1
  if (htim == NULL)
 8003676:	2800      	cmp	r0, #0
 8003678:	d027      	beq.n	80036ca <HAL_TIM_OnePulse_Init+0x5a>
  if (htim->State == HAL_TIM_STATE_RESET)
 800367a:	233d      	movs	r3, #61	@ 0x3d
 800367c:	5cc3      	ldrb	r3, [r0, r3]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01d      	beq.n	80036be <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 8003682:	263d      	movs	r6, #61	@ 0x3d
 8003684:	2302      	movs	r3, #2
 8003686:	55a3      	strb	r3, [r4, r6]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	0021      	movs	r1, r4
 800368a:	c901      	ldmia	r1!, {r0}
 800368c:	f7ff ff48 	bl	8003520 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	2108      	movs	r1, #8
 8003696:	438b      	bics	r3, r1
 8003698:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800369a:	6822      	ldr	r2, [r4, #0]
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	432b      	orrs	r3, r5
 80036a0:	6013      	str	r3, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a2:	2301      	movs	r3, #1
 80036a4:	2248      	movs	r2, #72	@ 0x48
 80036a6:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	3a0a      	subs	r2, #10
 80036aa:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	3201      	adds	r2, #1
 80036ae:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	3205      	adds	r2, #5
 80036b2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	3201      	adds	r2, #1
 80036b6:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 80036ba:	2000      	movs	r0, #0
}
 80036bc:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80036be:	333c      	adds	r3, #60	@ 0x3c
 80036c0:	2200      	movs	r2, #0
 80036c2:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OnePulse_MspInit(htim);
 80036c4:	f7ff fe77 	bl	80033b6 <HAL_TIM_OnePulse_MspInit>
 80036c8:	e7db      	b.n	8003682 <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 80036ca:	2001      	movs	r0, #1
 80036cc:	e7f6      	b.n	80036bc <HAL_TIM_OnePulse_Init+0x4c>
	...

080036d0 <TIM_OC2_SetConfig>:
{
 80036d0:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 80036d2:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d4:	6a03      	ldr	r3, [r0, #32]
 80036d6:	2410      	movs	r4, #16
 80036d8:	43a3      	bics	r3, r4
 80036da:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036dc:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036de:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e0:	4c14      	ldr	r4, [pc, #80]	@ (8003734 <TIM_OC2_SetConfig+0x64>)
 80036e2:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036e4:	680c      	ldr	r4, [r1, #0]
 80036e6:	0224      	lsls	r4, r4, #8
 80036e8:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80036ea:	2320      	movs	r3, #32
 80036ec:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ee:	688b      	ldr	r3, [r1, #8]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f4:	4a10      	ldr	r2, [pc, #64]	@ (8003738 <TIM_OC2_SetConfig+0x68>)
 80036f6:	4290      	cmp	r0, r2
 80036f8:	d006      	beq.n	8003708 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fa:	4a10      	ldr	r2, [pc, #64]	@ (800373c <TIM_OC2_SetConfig+0x6c>)
 80036fc:	4290      	cmp	r0, r2
 80036fe:	d00b      	beq.n	8003718 <TIM_OC2_SetConfig+0x48>
 8003700:	4a0f      	ldr	r2, [pc, #60]	@ (8003740 <TIM_OC2_SetConfig+0x70>)
 8003702:	4290      	cmp	r0, r2
 8003704:	d110      	bne.n	8003728 <TIM_OC2_SetConfig+0x58>
 8003706:	e007      	b.n	8003718 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003708:	2280      	movs	r2, #128	@ 0x80
 800370a:	4393      	bics	r3, r2
 800370c:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800370e:	68cb      	ldr	r3, [r1, #12]
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003714:	3a40      	subs	r2, #64	@ 0x40
 8003716:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003718:	4a0a      	ldr	r2, [pc, #40]	@ (8003744 <TIM_OC2_SetConfig+0x74>)
 800371a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800371c:	694a      	ldr	r2, [r1, #20]
 800371e:	0092      	lsls	r2, r2, #2
 8003720:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003722:	698d      	ldr	r5, [r1, #24]
 8003724:	00ad      	lsls	r5, r5, #2
 8003726:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8003728:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800372a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800372c:	684a      	ldr	r2, [r1, #4]
 800372e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003730:	6203      	str	r3, [r0, #32]
}
 8003732:	bd70      	pop	{r4, r5, r6, pc}
 8003734:	feff8cff 	.word	0xfeff8cff
 8003738:	40012c00 	.word	0x40012c00
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	fffff3ff 	.word	0xfffff3ff

08003748 <HAL_TIM_OC_ConfigChannel>:
{
 8003748:	b510      	push	{r4, lr}
 800374a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800374c:	233c      	movs	r3, #60	@ 0x3c
 800374e:	5cc3      	ldrb	r3, [r0, r3]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d02b      	beq.n	80037ac <HAL_TIM_OC_ConfigChannel+0x64>
 8003754:	233c      	movs	r3, #60	@ 0x3c
 8003756:	2001      	movs	r0, #1
 8003758:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 800375a:	2a14      	cmp	r2, #20
 800375c:	d821      	bhi.n	80037a2 <HAL_TIM_OC_ConfigChannel+0x5a>
 800375e:	0092      	lsls	r2, r2, #2
 8003760:	4b13      	ldr	r3, [pc, #76]	@ (80037b0 <HAL_TIM_OC_ConfigChannel+0x68>)
 8003762:	589b      	ldr	r3, [r3, r2]
 8003764:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003766:	6820      	ldr	r0, [r4, #0]
 8003768:	f7ff fca4 	bl	80030b4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800376c:	2000      	movs	r0, #0
      break;
 800376e:	e019      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003770:	6820      	ldr	r0, [r4, #0]
 8003772:	f7ff ffad 	bl	80036d0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2000      	movs	r0, #0
      break;
 8003778:	e014      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377a:	6820      	ldr	r0, [r4, #0]
 800377c:	f7ff fcda 	bl	8003134 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003780:	2000      	movs	r0, #0
      break;
 8003782:	e00f      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003784:	6820      	ldr	r0, [r4, #0]
 8003786:	f7ff fd17 	bl	80031b8 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800378a:	2000      	movs	r0, #0
      break;
 800378c:	e00a      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f7ff fd46 	bl	8003220 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2000      	movs	r0, #0
      break;
 8003796:	e005      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	f7ff fd73 	bl	8003284 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800379e:	2000      	movs	r0, #0
      break;
 80037a0:	e000      	b.n	80037a4 <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 80037a2:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80037a4:	233c      	movs	r3, #60	@ 0x3c
 80037a6:	2200      	movs	r2, #0
 80037a8:	54e2      	strb	r2, [r4, r3]
}
 80037aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80037ac:	2002      	movs	r0, #2
 80037ae:	e7fc      	b.n	80037aa <HAL_TIM_OC_ConfigChannel+0x62>
 80037b0:	08003db4 	.word	0x08003db4

080037b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b4:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b8:	4d03      	ldr	r5, [pc, #12]	@ (80037c8 <TIM_ETR_SetConfig+0x14>)
 80037ba:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	4313      	orrs	r3, r2
 80037c0:	430b      	orrs	r3, r1
 80037c2:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037c4:	6083      	str	r3, [r0, #8]
}
 80037c6:	bd30      	pop	{r4, r5, pc}
 80037c8:	ffff00ff 	.word	0xffff00ff

080037cc <HAL_TIM_ConfigClockSource>:
{
 80037cc:	b510      	push	{r4, lr}
 80037ce:	0004      	movs	r4, r0
 80037d0:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 80037d2:	233c      	movs	r3, #60	@ 0x3c
 80037d4:	5ce3      	ldrb	r3, [r4, r3]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d100      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x10>
 80037da:	e077      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x100>
 80037dc:	233c      	movs	r3, #60	@ 0x3c
 80037de:	2201      	movs	r2, #1
 80037e0:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80037e2:	3301      	adds	r3, #1
 80037e4:	3201      	adds	r2, #1
 80037e6:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 80037e8:	6822      	ldr	r2, [r4, #0]
 80037ea:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ec:	4938      	ldr	r1, [pc, #224]	@ (80038d0 <HAL_TIM_ConfigClockSource+0x104>)
 80037ee:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 80037f0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80037f2:	6801      	ldr	r1, [r0, #0]
 80037f4:	2960      	cmp	r1, #96	@ 0x60
 80037f6:	d04f      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xcc>
 80037f8:	d829      	bhi.n	800384e <HAL_TIM_ConfigClockSource+0x82>
 80037fa:	2940      	cmp	r1, #64	@ 0x40
 80037fc:	d057      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0xe2>
 80037fe:	d90c      	bls.n	800381a <HAL_TIM_ConfigClockSource+0x4e>
 8003800:	2950      	cmp	r1, #80	@ 0x50
 8003802:	d122      	bne.n	800384a <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8003804:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003806:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003808:	6820      	ldr	r0, [r4, #0]
 800380a:	f7ff fd6f 	bl	80032ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	2150      	movs	r1, #80	@ 0x50
 8003812:	f7ff fd91 	bl	8003338 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003816:	2000      	movs	r0, #0
      break;
 8003818:	e005      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800381a:	2920      	cmp	r1, #32
 800381c:	d00e      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x70>
 800381e:	d909      	bls.n	8003834 <HAL_TIM_ConfigClockSource+0x68>
 8003820:	2930      	cmp	r1, #48	@ 0x30
 8003822:	d00b      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8003824:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003826:	233d      	movs	r3, #61	@ 0x3d
 8003828:	2201      	movs	r2, #1
 800382a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 800382c:	3b01      	subs	r3, #1
 800382e:	2200      	movs	r2, #0
 8003830:	54e2      	strb	r2, [r4, r3]
}
 8003832:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8003834:	2900      	cmp	r1, #0
 8003836:	d001      	beq.n	800383c <HAL_TIM_ConfigClockSource+0x70>
 8003838:	2910      	cmp	r1, #16
 800383a:	d104      	bne.n	8003846 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383c:	6820      	ldr	r0, [r4, #0]
 800383e:	f7ff fd7b 	bl	8003338 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003842:	2000      	movs	r0, #0
      break;
 8003844:	e7ef      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003846:	2001      	movs	r0, #1
 8003848:	e7ed      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
 800384a:	2001      	movs	r0, #1
 800384c:	e7eb      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800384e:	2280      	movs	r2, #128	@ 0x80
 8003850:	0152      	lsls	r2, r2, #5
 8003852:	4291      	cmp	r1, r2
 8003854:	d036      	beq.n	80038c4 <HAL_TIM_ConfigClockSource+0xf8>
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	0192      	lsls	r2, r2, #6
 800385a:	4291      	cmp	r1, r2
 800385c:	d10d      	bne.n	800387a <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 800385e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8003860:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8003862:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f7ff ffa5 	bl	80037b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800386a:	6822      	ldr	r2, [r4, #0]
 800386c:	6891      	ldr	r1, [r2, #8]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	01db      	lsls	r3, r3, #7
 8003872:	430b      	orrs	r3, r1
 8003874:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003876:	2000      	movs	r0, #0
      break;
 8003878:	e7d5      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800387a:	2970      	cmp	r1, #112	@ 0x70
 800387c:	d124      	bne.n	80038c8 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 800387e:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 8003880:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 8003882:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	f7ff ff95 	bl	80037b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800388a:	6822      	ldr	r2, [r4, #0]
 800388c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388e:	2177      	movs	r1, #119	@ 0x77
 8003890:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003892:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003894:	2000      	movs	r0, #0
      break;
 8003896:	e7c6      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8003898:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 800389a:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	f7ff fd37 	bl	8003310 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a2:	6820      	ldr	r0, [r4, #0]
 80038a4:	2160      	movs	r1, #96	@ 0x60
 80038a6:	f7ff fd47 	bl	8003338 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2000      	movs	r0, #0
      break;
 80038ac:	e7bb      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 80038ae:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 80038b0:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	6820      	ldr	r0, [r4, #0]
 80038b4:	f7ff fd1a 	bl	80032ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038b8:	6820      	ldr	r0, [r4, #0]
 80038ba:	2140      	movs	r1, #64	@ 0x40
 80038bc:	f7ff fd3c 	bl	8003338 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2000      	movs	r0, #0
      break;
 80038c2:	e7b0      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80038c4:	2000      	movs	r0, #0
 80038c6:	e7ae      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80038c8:	2001      	movs	r0, #1
 80038ca:	e7ac      	b.n	8003826 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 80038cc:	2002      	movs	r0, #2
 80038ce:	e7b0      	b.n	8003832 <HAL_TIM_ConfigClockSource+0x66>
 80038d0:	ffce0088 	.word	0xffce0088

080038d4 <TIM_SlaveTimer_SetConfig>:
{
 80038d4:	b570      	push	{r4, r5, r6, lr}
 80038d6:	000c      	movs	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	6801      	ldr	r1, [r0, #0]
 80038da:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003990 <TIM_SlaveTimer_SetConfig+0xbc>)
 80038de:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003994 <TIM_SlaveTimer_SetConfig+0xc0>)
 80038e6:	4013      	ands	r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80038ec:	608b      	str	r3, [r1, #8]
  switch (sSlaveConfig->InputTrigger)
 80038ee:	6863      	ldr	r3, [r4, #4]
 80038f0:	2b50      	cmp	r3, #80	@ 0x50
 80038f2:	d033      	beq.n	800395c <TIM_SlaveTimer_SetConfig+0x88>
 80038f4:	d90b      	bls.n	800390e <TIM_SlaveTimer_SetConfig+0x3a>
 80038f6:	2b60      	cmp	r3, #96	@ 0x60
 80038f8:	d037      	beq.n	800396a <TIM_SlaveTimer_SetConfig+0x96>
 80038fa:	2b70      	cmp	r3, #112	@ 0x70
 80038fc:	d144      	bne.n	8003988 <TIM_SlaveTimer_SetConfig+0xb4>
                        sSlaveConfig->TriggerPrescaler,
 80038fe:	68e1      	ldr	r1, [r4, #12]
                        sSlaveConfig->TriggerPolarity,
 8003900:	68a2      	ldr	r2, [r4, #8]
                        sSlaveConfig->TriggerFilter);
 8003902:	6923      	ldr	r3, [r4, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	6800      	ldr	r0, [r0, #0]
 8003906:	f7ff ff55 	bl	80037b4 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2000      	movs	r0, #0
      break;
 800390c:	e010      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 800390e:	2b40      	cmp	r3, #64	@ 0x40
 8003910:	d00f      	beq.n	8003932 <TIM_SlaveTimer_SetConfig+0x5e>
 8003912:	d901      	bls.n	8003918 <TIM_SlaveTimer_SetConfig+0x44>
      status = HAL_ERROR;
 8003914:	2001      	movs	r0, #1
 8003916:	e00b      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 8003918:	2b20      	cmp	r3, #32
 800391a:	d02d      	beq.n	8003978 <TIM_SlaveTimer_SetConfig+0xa4>
 800391c:	d903      	bls.n	8003926 <TIM_SlaveTimer_SetConfig+0x52>
 800391e:	2b30      	cmp	r3, #48	@ 0x30
 8003920:	d130      	bne.n	8003984 <TIM_SlaveTimer_SetConfig+0xb0>
 8003922:	2000      	movs	r0, #0
 8003924:	e004      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d028      	beq.n	800397c <TIM_SlaveTimer_SetConfig+0xa8>
 800392a:	2b10      	cmp	r3, #16
 800392c:	d128      	bne.n	8003980 <TIM_SlaveTimer_SetConfig+0xac>
 800392e:	2000      	movs	r0, #0
}
 8003930:	bd70      	pop	{r4, r5, r6, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	2b05      	cmp	r3, #5
 8003936:	d029      	beq.n	800398c <TIM_SlaveTimer_SetConfig+0xb8>
      tmpccer = htim->Instance->CCER;
 8003938:	6803      	ldr	r3, [r0, #0]
 800393a:	6a1d      	ldr	r5, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800393c:	6a1a      	ldr	r2, [r3, #32]
 800393e:	2101      	movs	r1, #1
 8003940:	438a      	bics	r2, r1
 8003942:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003944:	6801      	ldr	r1, [r0, #0]
 8003946:	698a      	ldr	r2, [r1, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003948:	23f0      	movs	r3, #240	@ 0xf0
 800394a:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800394c:	6923      	ldr	r3, [r4, #16]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 8003952:	618b      	str	r3, [r1, #24]
      htim->Instance->CCER = tmpccer;
 8003954:	6803      	ldr	r3, [r0, #0]
 8003956:	621d      	str	r5, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8003958:	2000      	movs	r0, #0
      break;
 800395a:	e7e9      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
                               sSlaveConfig->TriggerPolarity,
 800395c:	68a1      	ldr	r1, [r4, #8]
                               sSlaveConfig->TriggerFilter);
 800395e:	6922      	ldr	r2, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003960:	6800      	ldr	r0, [r0, #0]
 8003962:	f7ff fcc3 	bl	80032ec <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8003966:	2000      	movs	r0, #0
      break;
 8003968:	e7e2      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
                               sSlaveConfig->TriggerPolarity,
 800396a:	68a1      	ldr	r1, [r4, #8]
                               sSlaveConfig->TriggerFilter);
 800396c:	6922      	ldr	r2, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	6800      	ldr	r0, [r0, #0]
 8003970:	f7ff fcce 	bl	8003310 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2000      	movs	r0, #0
      break;
 8003976:	e7db      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 8003978:	2000      	movs	r0, #0
 800397a:	e7d9      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
 800397c:	2000      	movs	r0, #0
 800397e:	e7d7      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
      status = HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e7d5      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
 8003984:	2001      	movs	r0, #1
 8003986:	e7d3      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
 8003988:	2001      	movs	r0, #1
 800398a:	e7d1      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
        return HAL_ERROR;
 800398c:	2001      	movs	r0, #1
 800398e:	e7cf      	b.n	8003930 <TIM_SlaveTimer_SetConfig+0x5c>
 8003990:	ffcfff8f 	.word	0xffcfff8f
 8003994:	fffefff8 	.word	0xfffefff8

08003998 <HAL_TIM_SlaveConfigSynchro>:
{
 8003998:	b510      	push	{r4, lr}
 800399a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800399c:	233c      	movs	r3, #60	@ 0x3c
 800399e:	5cc3      	ldrb	r3, [r0, r3]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d022      	beq.n	80039ea <HAL_TIM_SlaveConfigSynchro+0x52>
 80039a4:	233c      	movs	r3, #60	@ 0x3c
 80039a6:	2201      	movs	r2, #1
 80039a8:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80039aa:	3301      	adds	r3, #1
 80039ac:	3201      	adds	r2, #1
 80039ae:	54c2      	strb	r2, [r0, r3]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039b0:	f7ff ff90 	bl	80038d4 <TIM_SlaveTimer_SetConfig>
 80039b4:	2800      	cmp	r0, #0
 80039b6:	d110      	bne.n	80039da <HAL_TIM_SlaveConfigSynchro+0x42>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80039b8:	6822      	ldr	r2, [r4, #0]
 80039ba:	68d3      	ldr	r3, [r2, #12]
 80039bc:	2140      	movs	r1, #64	@ 0x40
 80039be:	438b      	bics	r3, r1
 80039c0:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039c2:	6822      	ldr	r2, [r4, #0]
 80039c4:	68d3      	ldr	r3, [r2, #12]
 80039c6:	490a      	ldr	r1, [pc, #40]	@ (80039f0 <HAL_TIM_SlaveConfigSynchro+0x58>)
 80039c8:	400b      	ands	r3, r1
 80039ca:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	233d      	movs	r3, #61	@ 0x3d
 80039ce:	2201      	movs	r2, #1
 80039d0:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 80039d2:	3b01      	subs	r3, #1
 80039d4:	2200      	movs	r2, #0
 80039d6:	54e2      	strb	r2, [r4, r3]
}
 80039d8:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 80039da:	233d      	movs	r3, #61	@ 0x3d
 80039dc:	2201      	movs	r2, #1
 80039de:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(htim);
 80039e0:	3b01      	subs	r3, #1
 80039e2:	2200      	movs	r2, #0
 80039e4:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 80039e6:	2001      	movs	r0, #1
 80039e8:	e7f6      	b.n	80039d8 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 80039ea:	2002      	movs	r0, #2
 80039ec:	e7f4      	b.n	80039d8 <HAL_TIM_SlaveConfigSynchro+0x40>
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	ffffbfff 	.word	0xffffbfff

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039f6:	233c      	movs	r3, #60	@ 0x3c
 80039f8:	5cc3      	ldrb	r3, [r0, r3]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d029      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80039fe:	233c      	movs	r3, #60	@ 0x3c
 8003a00:	2201      	movs	r2, #1
 8003a02:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	3301      	adds	r3, #1
 8003a06:	3201      	adds	r2, #1
 8003a08:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a0a:	6802      	ldr	r2, [r0, #0]
 8003a0c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a10:	4c11      	ldr	r4, [pc, #68]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003a12:	42a2      	cmp	r2, r4
 8003a14:	d018      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a16:	2470      	movs	r4, #112	@ 0x70
 8003a18:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1a:	680c      	ldr	r4, [r1, #0]
 8003a1c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a1e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a20:	6803      	ldr	r3, [r0, #0]
 8003a22:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d002      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003a28:	4a0c      	ldr	r2, [pc, #48]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d104      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2e:	2280      	movs	r2, #128	@ 0x80
 8003a30:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	688a      	ldr	r2, [r1, #8]
 8003a34:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	233d      	movs	r3, #61	@ 0x3d
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	2200      	movs	r2, #0
 8003a42:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003a44:	2000      	movs	r0, #0
}
 8003a46:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a48:	4c05      	ldr	r4, [pc, #20]	@ (8003a60 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003a4a:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a4c:	684c      	ldr	r4, [r1, #4]
 8003a4e:	4323      	orrs	r3, r4
 8003a50:	e7e1      	b.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003a52:	2002      	movs	r0, #2
 8003a54:	e7f7      	b.n	8003a46 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	40012c00 	.word	0x40012c00
 8003a5c:	40000400 	.word	0x40000400
 8003a60:	ff0fffff 	.word	0xff0fffff

08003a64 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a66:	4770      	bx	lr

08003a68 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a68:	4770      	bx	lr
	...

08003a6c <malloc>:
 8003a6c:	b510      	push	{r4, lr}
 8003a6e:	4b03      	ldr	r3, [pc, #12]	@ (8003a7c <malloc+0x10>)
 8003a70:	0001      	movs	r1, r0
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	f000 f826 	bl	8003ac4 <_malloc_r>
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	20000018 	.word	0x20000018

08003a80 <sbrk_aligned>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	4e0f      	ldr	r6, [pc, #60]	@ (8003ac0 <sbrk_aligned+0x40>)
 8003a84:	000d      	movs	r5, r1
 8003a86:	6831      	ldr	r1, [r6, #0]
 8003a88:	0004      	movs	r4, r0
 8003a8a:	2900      	cmp	r1, #0
 8003a8c:	d102      	bne.n	8003a94 <sbrk_aligned+0x14>
 8003a8e:	f000 f8b1 	bl	8003bf4 <_sbrk_r>
 8003a92:	6030      	str	r0, [r6, #0]
 8003a94:	0029      	movs	r1, r5
 8003a96:	0020      	movs	r0, r4
 8003a98:	f000 f8ac 	bl	8003bf4 <_sbrk_r>
 8003a9c:	1c43      	adds	r3, r0, #1
 8003a9e:	d103      	bne.n	8003aa8 <sbrk_aligned+0x28>
 8003aa0:	2501      	movs	r5, #1
 8003aa2:	426d      	negs	r5, r5
 8003aa4:	0028      	movs	r0, r5
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	1cc5      	adds	r5, r0, #3
 8003aac:	439d      	bics	r5, r3
 8003aae:	42a8      	cmp	r0, r5
 8003ab0:	d0f8      	beq.n	8003aa4 <sbrk_aligned+0x24>
 8003ab2:	1a29      	subs	r1, r5, r0
 8003ab4:	0020      	movs	r0, r4
 8003ab6:	f000 f89d 	bl	8003bf4 <_sbrk_r>
 8003aba:	3001      	adds	r0, #1
 8003abc:	d1f2      	bne.n	8003aa4 <sbrk_aligned+0x24>
 8003abe:	e7ef      	b.n	8003aa0 <sbrk_aligned+0x20>
 8003ac0:	2000092c 	.word	0x2000092c

08003ac4 <_malloc_r>:
 8003ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	1ccb      	adds	r3, r1, #3
 8003aca:	4393      	bics	r3, r2
 8003acc:	3308      	adds	r3, #8
 8003ace:	0005      	movs	r5, r0
 8003ad0:	001f      	movs	r7, r3
 8003ad2:	2b0c      	cmp	r3, #12
 8003ad4:	d234      	bcs.n	8003b40 <_malloc_r+0x7c>
 8003ad6:	270c      	movs	r7, #12
 8003ad8:	42b9      	cmp	r1, r7
 8003ada:	d833      	bhi.n	8003b44 <_malloc_r+0x80>
 8003adc:	0028      	movs	r0, r5
 8003ade:	f000 f871 	bl	8003bc4 <__malloc_lock>
 8003ae2:	4e37      	ldr	r6, [pc, #220]	@ (8003bc0 <_malloc_r+0xfc>)
 8003ae4:	6833      	ldr	r3, [r6, #0]
 8003ae6:	001c      	movs	r4, r3
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d12f      	bne.n	8003b4c <_malloc_r+0x88>
 8003aec:	0039      	movs	r1, r7
 8003aee:	0028      	movs	r0, r5
 8003af0:	f7ff ffc6 	bl	8003a80 <sbrk_aligned>
 8003af4:	0004      	movs	r4, r0
 8003af6:	1c43      	adds	r3, r0, #1
 8003af8:	d15f      	bne.n	8003bba <_malloc_r+0xf6>
 8003afa:	6834      	ldr	r4, [r6, #0]
 8003afc:	9400      	str	r4, [sp, #0]
 8003afe:	9b00      	ldr	r3, [sp, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d14a      	bne.n	8003b9a <_malloc_r+0xd6>
 8003b04:	2c00      	cmp	r4, #0
 8003b06:	d052      	beq.n	8003bae <_malloc_r+0xea>
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	0028      	movs	r0, r5
 8003b0c:	18e3      	adds	r3, r4, r3
 8003b0e:	9900      	ldr	r1, [sp, #0]
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	f000 f86f 	bl	8003bf4 <_sbrk_r>
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	4283      	cmp	r3, r0
 8003b1a:	d148      	bne.n	8003bae <_malloc_r+0xea>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	0028      	movs	r0, r5
 8003b20:	1aff      	subs	r7, r7, r3
 8003b22:	0039      	movs	r1, r7
 8003b24:	f7ff ffac 	bl	8003a80 <sbrk_aligned>
 8003b28:	3001      	adds	r0, #1
 8003b2a:	d040      	beq.n	8003bae <_malloc_r+0xea>
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	19db      	adds	r3, r3, r7
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	6833      	ldr	r3, [r6, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d133      	bne.n	8003ba2 <_malloc_r+0xde>
 8003b3a:	9b00      	ldr	r3, [sp, #0]
 8003b3c:	6033      	str	r3, [r6, #0]
 8003b3e:	e019      	b.n	8003b74 <_malloc_r+0xb0>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	dac9      	bge.n	8003ad8 <_malloc_r+0x14>
 8003b44:	230c      	movs	r3, #12
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	2000      	movs	r0, #0
 8003b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	1bc9      	subs	r1, r1, r7
 8003b50:	d420      	bmi.n	8003b94 <_malloc_r+0xd0>
 8003b52:	290b      	cmp	r1, #11
 8003b54:	d90a      	bls.n	8003b6c <_malloc_r+0xa8>
 8003b56:	19e2      	adds	r2, r4, r7
 8003b58:	6027      	str	r7, [r4, #0]
 8003b5a:	42a3      	cmp	r3, r4
 8003b5c:	d104      	bne.n	8003b68 <_malloc_r+0xa4>
 8003b5e:	6032      	str	r2, [r6, #0]
 8003b60:	6863      	ldr	r3, [r4, #4]
 8003b62:	6011      	str	r1, [r2, #0]
 8003b64:	6053      	str	r3, [r2, #4]
 8003b66:	e005      	b.n	8003b74 <_malloc_r+0xb0>
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e7f9      	b.n	8003b60 <_malloc_r+0x9c>
 8003b6c:	6862      	ldr	r2, [r4, #4]
 8003b6e:	42a3      	cmp	r3, r4
 8003b70:	d10e      	bne.n	8003b90 <_malloc_r+0xcc>
 8003b72:	6032      	str	r2, [r6, #0]
 8003b74:	0028      	movs	r0, r5
 8003b76:	f000 f82d 	bl	8003bd4 <__malloc_unlock>
 8003b7a:	0020      	movs	r0, r4
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	300b      	adds	r0, #11
 8003b80:	1d23      	adds	r3, r4, #4
 8003b82:	4390      	bics	r0, r2
 8003b84:	1ac2      	subs	r2, r0, r3
 8003b86:	4298      	cmp	r0, r3
 8003b88:	d0df      	beq.n	8003b4a <_malloc_r+0x86>
 8003b8a:	1a1b      	subs	r3, r3, r0
 8003b8c:	50a3      	str	r3, [r4, r2]
 8003b8e:	e7dc      	b.n	8003b4a <_malloc_r+0x86>
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	e7ef      	b.n	8003b74 <_malloc_r+0xb0>
 8003b94:	0023      	movs	r3, r4
 8003b96:	6864      	ldr	r4, [r4, #4]
 8003b98:	e7a6      	b.n	8003ae8 <_malloc_r+0x24>
 8003b9a:	9c00      	ldr	r4, [sp, #0]
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	e7ad      	b.n	8003afe <_malloc_r+0x3a>
 8003ba2:	001a      	movs	r2, r3
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	42a3      	cmp	r3, r4
 8003ba8:	d1fb      	bne.n	8003ba2 <_malloc_r+0xde>
 8003baa:	2300      	movs	r3, #0
 8003bac:	e7da      	b.n	8003b64 <_malloc_r+0xa0>
 8003bae:	230c      	movs	r3, #12
 8003bb0:	0028      	movs	r0, r5
 8003bb2:	602b      	str	r3, [r5, #0]
 8003bb4:	f000 f80e 	bl	8003bd4 <__malloc_unlock>
 8003bb8:	e7c6      	b.n	8003b48 <_malloc_r+0x84>
 8003bba:	6007      	str	r7, [r0, #0]
 8003bbc:	e7da      	b.n	8003b74 <_malloc_r+0xb0>
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	20000930 	.word	0x20000930

08003bc4 <__malloc_lock>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	4802      	ldr	r0, [pc, #8]	@ (8003bd0 <__malloc_lock+0xc>)
 8003bc8:	f000 f850 	bl	8003c6c <__retarget_lock_acquire_recursive>
 8003bcc:	bd10      	pop	{r4, pc}
 8003bce:	46c0      	nop			@ (mov r8, r8)
 8003bd0:	20000a70 	.word	0x20000a70

08003bd4 <__malloc_unlock>:
 8003bd4:	b510      	push	{r4, lr}
 8003bd6:	4802      	ldr	r0, [pc, #8]	@ (8003be0 <__malloc_unlock+0xc>)
 8003bd8:	f000 f849 	bl	8003c6e <__retarget_lock_release_recursive>
 8003bdc:	bd10      	pop	{r4, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	20000a70 	.word	0x20000a70

08003be4 <memset>:
 8003be4:	0003      	movs	r3, r0
 8003be6:	1882      	adds	r2, r0, r2
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d100      	bne.n	8003bee <memset+0xa>
 8003bec:	4770      	bx	lr
 8003bee:	7019      	strb	r1, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	e7f9      	b.n	8003be8 <memset+0x4>

08003bf4 <_sbrk_r>:
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	b570      	push	{r4, r5, r6, lr}
 8003bf8:	4d06      	ldr	r5, [pc, #24]	@ (8003c14 <_sbrk_r+0x20>)
 8003bfa:	0004      	movs	r4, r0
 8003bfc:	0008      	movs	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fe fbda 	bl	80023b8 <_sbrk>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d103      	bne.n	8003c10 <_sbrk_r+0x1c>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d000      	beq.n	8003c10 <_sbrk_r+0x1c>
 8003c0e:	6023      	str	r3, [r4, #0]
 8003c10:	bd70      	pop	{r4, r5, r6, pc}
 8003c12:	46c0      	nop			@ (mov r8, r8)
 8003c14:	20000a6c 	.word	0x20000a6c

08003c18 <__errno>:
 8003c18:	4b01      	ldr	r3, [pc, #4]	@ (8003c20 <__errno+0x8>)
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	4770      	bx	lr
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	20000018 	.word	0x20000018

08003c24 <__libc_init_array>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	2600      	movs	r6, #0
 8003c28:	4c0c      	ldr	r4, [pc, #48]	@ (8003c5c <__libc_init_array+0x38>)
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c60 <__libc_init_array+0x3c>)
 8003c2c:	1b64      	subs	r4, r4, r5
 8003c2e:	10a4      	asrs	r4, r4, #2
 8003c30:	42a6      	cmp	r6, r4
 8003c32:	d109      	bne.n	8003c48 <__libc_init_array+0x24>
 8003c34:	2600      	movs	r6, #0
 8003c36:	f000 f825 	bl	8003c84 <_init>
 8003c3a:	4c0a      	ldr	r4, [pc, #40]	@ (8003c64 <__libc_init_array+0x40>)
 8003c3c:	4d0a      	ldr	r5, [pc, #40]	@ (8003c68 <__libc_init_array+0x44>)
 8003c3e:	1b64      	subs	r4, r4, r5
 8003c40:	10a4      	asrs	r4, r4, #2
 8003c42:	42a6      	cmp	r6, r4
 8003c44:	d105      	bne.n	8003c52 <__libc_init_array+0x2e>
 8003c46:	bd70      	pop	{r4, r5, r6, pc}
 8003c48:	00b3      	lsls	r3, r6, #2
 8003c4a:	58eb      	ldr	r3, [r5, r3]
 8003c4c:	4798      	blx	r3
 8003c4e:	3601      	adds	r6, #1
 8003c50:	e7ee      	b.n	8003c30 <__libc_init_array+0xc>
 8003c52:	00b3      	lsls	r3, r6, #2
 8003c54:	58eb      	ldr	r3, [r5, r3]
 8003c56:	4798      	blx	r3
 8003c58:	3601      	adds	r6, #1
 8003c5a:	e7f2      	b.n	8003c42 <__libc_init_array+0x1e>
 8003c5c:	08003e08 	.word	0x08003e08
 8003c60:	08003e08 	.word	0x08003e08
 8003c64:	08003e0c 	.word	0x08003e0c
 8003c68:	08003e08 	.word	0x08003e08

08003c6c <__retarget_lock_acquire_recursive>:
 8003c6c:	4770      	bx	lr

08003c6e <__retarget_lock_release_recursive>:
 8003c6e:	4770      	bx	lr

08003c70 <memcpy>:
 8003c70:	2300      	movs	r3, #0
 8003c72:	b510      	push	{r4, lr}
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d100      	bne.n	8003c7a <memcpy+0xa>
 8003c78:	bd10      	pop	{r4, pc}
 8003c7a:	5ccc      	ldrb	r4, [r1, r3]
 8003c7c:	54c4      	strb	r4, [r0, r3]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	e7f8      	b.n	8003c74 <memcpy+0x4>
	...

08003c84 <_init>:
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8a:	bc08      	pop	{r3}
 8003c8c:	469e      	mov	lr, r3
 8003c8e:	4770      	bx	lr

08003c90 <_fini>:
 8003c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c92:	46c0      	nop			@ (mov r8, r8)
 8003c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c96:	bc08      	pop	{r3}
 8003c98:	469e      	mov	lr, r3
 8003c9a:	4770      	bx	lr
