
reynolds-switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b4c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003c0c  08003c0c  00004c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d78  08003d78  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d78  08003d78  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d78  08003d78  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d78  08003d78  00004d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d7c  08003d7c  00004d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d80  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000068  08003de8  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a64  08003de8  00005a64  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014775  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6a  00000000  00000000  00019805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00007b89  00000000  00000000  0001c66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  000241f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b26  00000000  00000000  00025078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014048  00000000  00000000  00025b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001621f  00000000  00000000  00039be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c8f1  00000000  00000000  0004fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cc6f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000293c  00000000  00000000  000cc73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000cf078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bf4 	.word	0x08003bf4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003bf4 	.word	0x08003bf4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <nutone_app_config>:
							deadline_timer_t *timer_fsm_fan,
							deadline_timer_t *timer_fsm_white,
							deadline_timer_t *timer_fsm_vyv,
							deadline_timer_t *timer_fsm_vyv_timeout,
							deadline_timer_t *timer_fsm_vyv_safe)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
 8000224:	9804      	ldr	r0, [sp, #16]
	nutone_app_hand->motion_hand = motion_hand;
 8000226:	6062      	str	r2, [r4, #4]
	nutone_app_hand->nutone_dev = nutone_dev;
 8000228:	6021      	str	r1, [r4, #0]
	nutone_app_hand->button_white = button_white;
 800022a:	9a02      	ldr	r2, [sp, #8]
 800022c:	60e2      	str	r2, [r4, #12]
	nutone_app_hand->button_fan = button_fan;
 800022e:	60a3      	str	r3, [r4, #8]
	nutone_app_hand->button_vyv = button_vyv;
 8000230:	9b03      	ldr	r3, [sp, #12]
 8000232:	6123      	str	r3, [r4, #16]
	nutone_app_hand->led_signal_hand = led_signal_hand;
 8000234:	61e0      	str	r0, [r4, #28]
	led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 8000236:	6800      	ldr	r0, [r0, #0]
 8000238:	f000 fb17 	bl	800086a <led_signal_start>
	nutone_app_hand->timer_fsm_white = timer_fsm_white;
 800023c:	9b06      	ldr	r3, [sp, #24]
 800023e:	6223      	str	r3, [r4, #32]
	nutone_app_hand->timer_fsm_vyv = timer_fsm_vyv;
 8000240:	9b07      	ldr	r3, [sp, #28]
 8000242:	6263      	str	r3, [r4, #36]	@ 0x24
	nutone_app_hand->timer_fsm_vyv_safe = timer_fsm_vyv_safe;
 8000244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000246:	62e3      	str	r3, [r4, #44]	@ 0x2c
	nutone_app_hand->timer_fsm_vyv_timeout = timer_fsm_vyv_timeout;
 8000248:	9b08      	ldr	r3, [sp, #32]
 800024a:	62a3      	str	r3, [r4, #40]	@ 0x28
	nutone_app_hand->timer_fsm_fan = timer_fsm_fan;
 800024c:	9b05      	ldr	r3, [sp, #20]
 800024e:	6323      	str	r3, [r4, #48]	@ 0x30


	nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 8000250:	2301      	movs	r3, #1
 8000252:	2236      	movs	r2, #54	@ 0x36
 8000254:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 8000256:	3202      	adds	r2, #2
 8000258:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800025a:	2300      	movs	r3, #0
 800025c:	3a03      	subs	r2, #3
 800025e:	54a3      	strb	r3, [r4, r2]
	nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 8000260:	3a01      	subs	r2, #1
 8000262:	54a3      	strb	r3, [r4, r2]
	return 0;
}
 8000264:	2000      	movs	r0, #0
 8000266:	bd10      	pop	{r4, pc}

08000268 <nutone_fan_fsm>:

	return 0;
}

uint8_t nutone_fan_fsm(nutone_app_t *nutone_app_hand)
{
 8000268:	b510      	push	{r4, lr}
 800026a:	0004      	movs	r4, r0
	if(nutone_app_hand->button_fan->button->edge_attended ==
 800026c:	6883      	ldr	r3, [r0, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	78da      	ldrb	r2, [r3, #3]
 8000272:	2a02      	cmp	r2, #2
 8000274:	d001      	beq.n	800027a <nutone_fan_fsm+0x12>
													NUTONE_CMD_FAN_TURN_OFF);
		}
		nutone_app_hand->button_fan->button->edge_attended = BUTTON_ISR_ATTENDED;
	}
	return 0;
}
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
		if(nutone_app_hand->button_fan->button->edge == BUTTON_EDGE_POSITIVE)
 800027a:	785b      	ldrb	r3, [r3, #1]
 800027c:	2b02      	cmp	r3, #2
 800027e:	d008      	beq.n	8000292 <nutone_fan_fsm+0x2a>
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000280:	6800      	ldr	r0, [r0, #0]
 8000282:	2102      	movs	r1, #2
 8000284:	f001 f83a 	bl	80012fc <nutone_set_command>
		nutone_app_hand->button_fan->button->edge_attended = BUTTON_ISR_ATTENDED;
 8000288:	68a3      	ldr	r3, [r4, #8]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2200      	movs	r2, #0
 800028e:	70da      	strb	r2, [r3, #3]
 8000290:	e7f1      	b.n	8000276 <nutone_fan_fsm+0xe>
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000292:	6800      	ldr	r0, [r0, #0]
 8000294:	2101      	movs	r1, #1
 8000296:	f001 f831 	bl	80012fc <nutone_set_command>
 800029a:	e7f5      	b.n	8000288 <nutone_fan_fsm+0x20>

0800029c <nutone_white_fsm>:

uint8_t nutone_white_fsm(nutone_app_t *nutone_app_hand)
{
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	0004      	movs	r4, r0
	button_isr_status_t button_isr_status;
	button_edge_t edge;
	deadline_timer_expired_t deadline_expired;


	button_check_isr_request(*nutone_app_hand->button_white->button,
 80002a2:	68c3      	ldr	r3, [r0, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	2216      	movs	r2, #22
 80002a8:	446a      	add	r2, sp
 80002aa:	9203      	str	r2, [sp, #12]
 80002ac:	2517      	movs	r5, #23
 80002ae:	446d      	add	r5, sp
 80002b0:	9502      	str	r5, [sp, #8]
 80002b2:	001a      	movs	r2, r3
 80002b4:	3210      	adds	r2, #16
 80002b6:	4669      	mov	r1, sp
 80002b8:	ca41      	ldmia	r2!, {r0, r6}
 80002ba:	c141      	stmia	r1!, {r0, r6}
 80002bc:	6818      	ldr	r0, [r3, #0]
 80002be:	6859      	ldr	r1, [r3, #4]
 80002c0:	689a      	ldr	r2, [r3, #8]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	f000 fab1 	bl	800082a <button_check_isr_request>
													&button_isr_status, &edge);


	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 80002c8:	782b      	ldrb	r3, [r5, #0]
 80002ca:	2b02      	cmp	r3, #2
 80002cc:	d00c      	beq.n	80002e8 <nutone_white_fsm+0x4c>
			(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED))
 80002ce:	2234      	movs	r2, #52	@ 0x34
 80002d0:	5ca2      	ldrb	r2, [r4, r2]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 80002d2:	2a02      	cmp	r2, #2
 80002d4:	d008      	beq.n	80002e8 <nutone_white_fsm+0x4c>

	}



	switch(nutone_app_hand->fsm_state_white)
 80002d6:	2339      	movs	r3, #57	@ 0x39
 80002d8:	5ce3      	ldrb	r3, [r4, r3]
 80002da:	2b05      	cmp	r3, #5
 80002dc:	d900      	bls.n	80002e0 <nutone_white_fsm+0x44>
 80002de:	e07b      	b.n	80003d8 <nutone_white_fsm+0x13c>
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	4a3f      	ldr	r2, [pc, #252]	@ (80003e0 <nutone_white_fsm+0x144>)
 80002e4:	58d3      	ldr	r3, [r2, r3]
 80002e6:	469f      	mov	pc, r3
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d014      	beq.n	8000316 <nutone_white_fsm+0x7a>
		nutone_app_hand->button_white->button->edge_attended = button_isr_status;
 80002ec:	68e3      	ldr	r3, [r4, #12]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2217      	movs	r2, #23
 80002f2:	446a      	add	r2, sp
 80002f4:	7812      	ldrb	r2, [r2, #0]
 80002f6:	70da      	strb	r2, [r3, #3]
		if( (nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED) &&
 80002f8:	2334      	movs	r3, #52	@ 0x34
 80002fa:	5ce3      	ldrb	r3, [r4, r3]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d1ea      	bne.n	80002d6 <nutone_white_fsm+0x3a>
			(nutone_app_hand->fsm_state_white == MOTION_LIGHT_IDLE))
 8000300:	3337      	adds	r3, #55	@ 0x37
 8000302:	5ce3      	ldrb	r3, [r4, r3]
		if( (nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED) &&
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1e6      	bne.n	80002d6 <nutone_white_fsm+0x3a>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 8000308:	3339      	adds	r3, #57	@ 0x39
 800030a:	2201      	movs	r2, #1
 800030c:	54e2      	strb	r2, [r4, r3]
			nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 800030e:	3b05      	subs	r3, #5
 8000310:	2200      	movs	r2, #0
 8000312:	54e2      	strb	r2, [r4, r3]
 8000314:	e7df      	b.n	80002d6 <nutone_white_fsm+0x3a>
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8000316:	3315      	adds	r3, #21
 8000318:	446b      	add	r3, sp
 800031a:	2200      	movs	r2, #0
 800031c:	701a      	strb	r2, [r3, #0]
			if(edge == BUTTON_EDGE_NEGATIVE)
 800031e:	2316      	movs	r3, #22
 8000320:	446b      	add	r3, sp
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d003      	beq.n	8000330 <nutone_white_fsm+0x94>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 8000328:	2339      	movs	r3, #57	@ 0x39
 800032a:	2201      	movs	r2, #1
 800032c:	54e2      	strb	r2, [r4, r3]
 800032e:	e7dd      	b.n	80002ec <nutone_white_fsm+0x50>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 8000330:	3338      	adds	r3, #56	@ 0x38
 8000332:	3205      	adds	r2, #5
 8000334:	54e2      	strb	r2, [r4, r3]
 8000336:	e7d9      	b.n	80002ec <nutone_white_fsm+0x50>
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8000338:	46c0      	nop			@ (mov r8, r8)

	return 0;



}
 800033a:	2000      	movs	r0, #0
 800033c:	b006      	add	sp, #24
 800033e:	bd70      	pop	{r4, r5, r6, pc}
			button_status_t button_status = BUTTON_OFF;
 8000340:	2300      	movs	r3, #0
 8000342:	466a      	mov	r2, sp
 8000344:	7513      	strb	r3, [r2, #20]
			button_get_status(nutone_app_hand->button_white->button,
 8000346:	68e3      	ldr	r3, [r4, #12]
 8000348:	6818      	ldr	r0, [r3, #0]
 800034a:	a905      	add	r1, sp, #20
 800034c:	f000 fa2d 	bl	80007aa <button_get_status>
			if(button_status == BUTTON_ON)
 8000350:	466b      	mov	r3, sp
 8000352:	7d1b      	ldrb	r3, [r3, #20]
 8000354:	2b01      	cmp	r3, #1
 8000356:	d006      	beq.n	8000366 <nutone_white_fsm+0xca>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 8000358:	2339      	movs	r3, #57	@ 0x39
 800035a:	2205      	movs	r2, #5
 800035c:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 800035e:	3b05      	subs	r3, #5
 8000360:	2200      	movs	r2, #0
 8000362:	54e2      	strb	r2, [r4, r3]
 8000364:	e7e9      	b.n	800033a <nutone_white_fsm+0x9e>
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_TURN_ON_LIGHT;
 8000366:	3338      	adds	r3, #56	@ 0x38
 8000368:	2202      	movs	r2, #2
 800036a:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 800036c:	3b05      	subs	r3, #5
 800036e:	2200      	movs	r2, #0
 8000370:	54e2      	strb	r2, [r4, r3]
 8000372:	e7e2      	b.n	800033a <nutone_white_fsm+0x9e>
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000374:	6820      	ldr	r0, [r4, #0]
 8000376:	2103      	movs	r1, #3
 8000378:	f000 ffc0 	bl	80012fc <nutone_set_command>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 800037c:	2339      	movs	r3, #57	@ 0x39
 800037e:	2203      	movs	r2, #3
 8000380:	54e2      	strb	r2, [r4, r3]
			break;
 8000382:	e7da      	b.n	800033a <nutone_white_fsm+0x9e>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_white);
 8000384:	6a20      	ldr	r0, [r4, #32]
 8000386:	f001 f95c 	bl	8001642 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_EXPIRATION;
 800038a:	2339      	movs	r3, #57	@ 0x39
 800038c:	2204      	movs	r2, #4
 800038e:	54e2      	strb	r2, [r4, r3]
			break;
 8000390:	e7d3      	b.n	800033a <nutone_white_fsm+0x9e>
			deadline_timer_check(nutone_app_hand->timer_fsm_white,
 8000392:	2515      	movs	r5, #21
 8000394:	446d      	add	r5, sp
 8000396:	6a20      	ldr	r0, [r4, #32]
 8000398:	0029      	movs	r1, r5
 800039a:	f001 f9c3 	bl	8001724 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 800039e:	782b      	ldrb	r3, [r5, #0]
 80003a0:	2b01      	cmp	r3, #1
 80003a2:	d00a      	beq.n	80003ba <nutone_white_fsm+0x11e>
			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 80003a4:	2334      	movs	r3, #52	@ 0x34
 80003a6:	5ce3      	ldrb	r3, [r4, r3]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d1c6      	bne.n	800033a <nutone_white_fsm+0x9e>
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 80003ac:	3332      	adds	r3, #50	@ 0x32
 80003ae:	2200      	movs	r2, #0
 80003b0:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 80003b2:	3305      	adds	r3, #5
 80003b4:	3203      	adds	r2, #3
 80003b6:	54e2      	strb	r2, [r4, r3]
 80003b8:	e7bf      	b.n	800033a <nutone_white_fsm+0x9e>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 80003ba:	3338      	adds	r3, #56	@ 0x38
 80003bc:	2205      	movs	r2, #5
 80003be:	54e2      	strb	r2, [r4, r3]
 80003c0:	e7f0      	b.n	80003a4 <nutone_white_fsm+0x108>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_white);
 80003c2:	6a20      	ldr	r0, [r4, #32]
 80003c4:	f001 f938 	bl	8001638 <deadline_timer_force_expiration>
			nutone_set_command(nutone_app_hand->nutone_dev,
 80003c8:	6820      	ldr	r0, [r4, #0]
 80003ca:	2104      	movs	r1, #4
 80003cc:	f000 ff96 	bl	80012fc <nutone_set_command>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80003d0:	2339      	movs	r3, #57	@ 0x39
 80003d2:	2200      	movs	r2, #0
 80003d4:	54e2      	strb	r2, [r4, r3]
			break;
 80003d6:	e7b0      	b.n	800033a <nutone_white_fsm+0x9e>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80003d8:	2339      	movs	r3, #57	@ 0x39
 80003da:	2200      	movs	r2, #0
 80003dc:	54e2      	strb	r2, [r4, r3]
			break;
 80003de:	e7ac      	b.n	800033a <nutone_white_fsm+0x9e>
 80003e0:	08003c0c 	.word	0x08003c0c

080003e4 <nutone_vyv_fsm>:


uint8_t nutone_vyv_fsm(nutone_app_t *nutone_app_hand)
{
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	b098      	sub	sp, #96	@ 0x60
 80003e8:	0004      	movs	r4, r0
	button_edge_t edge;
	pyd1598_motion_isr_status_t motion_isr_status;
	deadline_timer_expired_t deadline_safe_expired;
	deadline_timer_expired_t deadline_timeout_expired;

	button_check_isr_request(*nutone_app_hand->button_vyv->button, &button_isr_status, &edge);
 80003ea:	6903      	ldr	r3, [r0, #16]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	225e      	movs	r2, #94	@ 0x5e
 80003f0:	446a      	add	r2, sp
 80003f2:	9203      	str	r2, [sp, #12]
 80003f4:	265f      	movs	r6, #95	@ 0x5f
 80003f6:	446e      	add	r6, sp
 80003f8:	9602      	str	r6, [sp, #8]
 80003fa:	001a      	movs	r2, r3
 80003fc:	3210      	adds	r2, #16
 80003fe:	4669      	mov	r1, sp
 8000400:	ca21      	ldmia	r2!, {r0, r5}
 8000402:	c121      	stmia	r1!, {r0, r5}
 8000404:	6818      	ldr	r0, [r3, #0]
 8000406:	6859      	ldr	r1, [r3, #4]
 8000408:	689a      	ldr	r2, [r3, #8]
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	f000 fa0d 	bl	800082a <button_check_isr_request>
	pyd1598_check_isr_request(*nutone_app_hand->motion_hand->motion_sensor, &motion_isr_status);
 8000410:	6863      	ldr	r3, [r4, #4]
 8000412:	681d      	ldr	r5, [r3, #0]
 8000414:	235d      	movs	r3, #93	@ 0x5d
 8000416:	446b      	add	r3, sp
 8000418:	9314      	str	r3, [sp, #80]	@ 0x50
 800041a:	0029      	movs	r1, r5
 800041c:	3110      	adds	r1, #16
 800041e:	2250      	movs	r2, #80	@ 0x50
 8000420:	4668      	mov	r0, sp
 8000422:	f003 fbdd 	bl	8003be0 <memcpy>
 8000426:	6828      	ldr	r0, [r5, #0]
 8000428:	6869      	ldr	r1, [r5, #4]
 800042a:	68aa      	ldr	r2, [r5, #8]
 800042c:	68eb      	ldr	r3, [r5, #12]
 800042e:	f000 fae5 	bl	80009fc <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8000432:	7833      	ldrb	r3, [r6, #0]
 8000434:	2b02      	cmp	r3, #2
 8000436:	d029      	beq.n	800048c <nutone_vyv_fsm+0xa8>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
	}
	nutone_app_hand->button_vyv->button->edge_attended = button_isr_status;
 8000438:	6923      	ldr	r3, [r4, #16]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	225f      	movs	r2, #95	@ 0x5f
 800043e:	446a      	add	r2, sp
 8000440:	7812      	ldrb	r2, [r2, #0]
 8000442:	70da      	strb	r2, [r3, #3]


	if(nutone_app_hand->signals.uv_abort == MOTION_ABORT_TRUE)
 8000444:	2336      	movs	r3, #54	@ 0x36
 8000446:	5ce3      	ldrb	r3, [r4, r3]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d105      	bne.n	8000458 <nutone_vyv_fsm+0x74>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 800044c:	333a      	adds	r3, #58	@ 0x3a
 800044e:	220a      	movs	r2, #10
 8000450:	54e2      	strb	r2, [r4, r3]
		nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 8000452:	3b04      	subs	r3, #4
 8000454:	3a09      	subs	r2, #9
 8000456:	54e2      	strb	r2, [r4, r3]
	}

	if(nutone_app_hand->signals.uv_abort_white_button == MOTION_ABORT_TRUE)
 8000458:	2337      	movs	r3, #55	@ 0x37
 800045a:	5ce3      	ldrb	r3, [r4, r3]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d105      	bne.n	800046c <nutone_vyv_fsm+0x88>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT_WHITE_BUTTON;
 8000460:	333a      	adds	r3, #58	@ 0x3a
 8000462:	220b      	movs	r2, #11
 8000464:	54e2      	strb	r2, [r4, r3]
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_FALSE;
 8000466:	3b03      	subs	r3, #3
 8000468:	3a0a      	subs	r2, #10
 800046a:	54e2      	strb	r2, [r4, r3]
	}

	if(	nutone_app_hand->nutone_dev->current_light_mode ==
 800046c:	6820      	ldr	r0, [r4, #0]
 800046e:	7d83      	ldrb	r3, [r0, #22]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d01c      	beq.n	80004ae <nutone_vyv_fsm+0xca>
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_TRUE;
	}
	else
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 8000474:	2338      	movs	r3, #56	@ 0x38
 8000476:	2201      	movs	r2, #1
 8000478:	54e2      	strb	r2, [r4, r3]
	}



	switch(nutone_app_hand->fsm_state_uyu)
 800047a:	233a      	movs	r3, #58	@ 0x3a
 800047c:	5ce3      	ldrb	r3, [r4, r3]
 800047e:	2b0b      	cmp	r3, #11
 8000480:	d900      	bls.n	8000484 <nutone_vyv_fsm+0xa0>
 8000482:	e0cf      	b.n	8000624 <nutone_vyv_fsm+0x240>
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4a69      	ldr	r2, [pc, #420]	@ (800062c <nutone_vyv_fsm+0x248>)
 8000488:	58d3      	ldr	r3, [r2, r3]
 800048a:	469f      	mov	pc, r3
		if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_ON)
 800048c:	6923      	ldr	r3, [r4, #16]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	789b      	ldrb	r3, [r3, #2]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d007      	beq.n	80004a6 <nutone_vyv_fsm+0xc2>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000496:	233a      	movs	r3, #58	@ 0x3a
 8000498:	220a      	movs	r2, #10
 800049a:	54e2      	strb	r2, [r4, r3]
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 800049c:	235f      	movs	r3, #95	@ 0x5f
 800049e:	446b      	add	r3, sp
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e7c8      	b.n	8000438 <nutone_vyv_fsm+0x54>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 80004a6:	3339      	adds	r3, #57	@ 0x39
 80004a8:	2201      	movs	r2, #1
 80004aa:	54e2      	strb	r2, [r4, r3]
 80004ac:	e7f6      	b.n	800049c <nutone_vyv_fsm+0xb8>
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_TRUE;
 80004ae:	3337      	adds	r3, #55	@ 0x37
 80004b0:	2200      	movs	r2, #0
 80004b2:	54e2      	strb	r2, [r4, r3]
 80004b4:	e7e1      	b.n	800047a <nutone_vyv_fsm+0x96>
	{
		case MOTION_LIGHT_UV_IDLE:


			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80004b6:	2335      	movs	r3, #53	@ 0x35
 80004b8:	5ce3      	ldrb	r3, [r4, r3]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d003      	beq.n	80004c6 <nutone_vyv_fsm+0xe2>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
			}

			__NOP();//Do nothing
 80004be:	46c0      	nop			@ (mov r8, r8)




	return 0;
}
 80004c0:	2000      	movs	r0, #0
 80004c2:	b018      	add	sp, #96	@ 0x60
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80004c6:	3333      	adds	r3, #51	@ 0x33
 80004c8:	2200      	movs	r2, #0
 80004ca:	54e2      	strb	r2, [r4, r3]
 80004cc:	e7f7      	b.n	80004be <nutone_vyv_fsm+0xda>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_timeout);
 80004ce:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80004d0:	f001 f8b7 	bl	8001642 <deadline_timer_set_initial_time>
			led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 80004d4:	69e3      	ldr	r3, [r4, #28]
 80004d6:	6818      	ldr	r0, [r3, #0]
 80004d8:	f000 f9c7 	bl	800086a <led_signal_start>
			nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_BLINK;
 80004dc:	69e3      	ldr	r3, [r4, #28]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2202      	movs	r2, #2
 80004e2:	725a      	strb	r2, [r3, #9]
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 80004e4:	233a      	movs	r3, #58	@ 0x3a
 80004e6:	3201      	adds	r2, #1
 80004e8:	54e2      	strb	r2, [r4, r3]
			break;
 80004ea:	e7e9      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80004ec:	2335      	movs	r3, #53	@ 0x35
 80004ee:	5ce3      	ldrb	r3, [r4, r3]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d013      	beq.n	800051c <nutone_vyv_fsm+0x138>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_timeout,
 80004f4:	255b      	movs	r5, #91	@ 0x5b
 80004f6:	446d      	add	r5, sp
 80004f8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80004fa:	0029      	movs	r1, r5
 80004fc:	f001 f912 	bl	8001724 <deadline_timer_check>
			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000500:	782b      	ldrb	r3, [r5, #0]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d1dc      	bne.n	80004c0 <nutone_vyv_fsm+0xdc>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000506:	3334      	adds	r3, #52	@ 0x34
 8000508:	2200      	movs	r2, #0
 800050a:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 800050c:	3305      	adds	r3, #5
 800050e:	3204      	adds	r2, #4
 8000510:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_SOLID;
 8000512:	69e3      	ldr	r3, [r4, #28]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3a03      	subs	r2, #3
 8000518:	725a      	strb	r2, [r3, #9]
 800051a:	e7d1      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800051c:	3333      	adds	r3, #51	@ 0x33
 800051e:	2200      	movs	r2, #0
 8000520:	54e2      	strb	r2, [r4, r3]
 8000522:	e7e7      	b.n	80004f4 <nutone_vyv_fsm+0x110>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_safe);
 8000524:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000526:	f001 f88c 	bl	8001642 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 800052a:	233a      	movs	r3, #58	@ 0x3a
 800052c:	2205      	movs	r2, #5
 800052e:	54e2      	strb	r2, [r4, r3]
			break;
 8000530:	e7c6      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_safe,
 8000532:	ad17      	add	r5, sp, #92	@ 0x5c
 8000534:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000536:	0029      	movs	r1, r5
 8000538:	f001 f8f4 	bl	8001724 <deadline_timer_check>
			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 800053c:	782b      	ldrb	r3, [r5, #0]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d00b      	beq.n	800055a <nutone_vyv_fsm+0x176>
				if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 8000542:	2335      	movs	r3, #53	@ 0x35
 8000544:	5ce3      	ldrb	r3, [r4, r3]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d00b      	beq.n	8000562 <nutone_vyv_fsm+0x17e>
					if(nutone_app_hand->signals.wait == MOTION_UV_WAIT_TRUE)
 800054a:	2338      	movs	r3, #56	@ 0x38
 800054c:	5ce3      	ldrb	r3, [r4, r3]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1b6      	bne.n	80004c0 <nutone_vyv_fsm+0xdc>
						nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8000552:	333a      	adds	r3, #58	@ 0x3a
 8000554:	2204      	movs	r2, #4
 8000556:	54e2      	strb	r2, [r4, r3]
 8000558:	e7b2      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 800055a:	3339      	adds	r3, #57	@ 0x39
 800055c:	2206      	movs	r2, #6
 800055e:	54e2      	strb	r2, [r4, r3]
 8000560:	e7ae      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
					nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000562:	3333      	adds	r3, #51	@ 0x33
 8000564:	2200      	movs	r2, #0
 8000566:	54e2      	strb	r2, [r4, r3]
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000568:	3305      	adds	r3, #5
 800056a:	320a      	adds	r2, #10
 800056c:	54e2      	strb	r2, [r4, r3]
 800056e:	e7a7      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000570:	2105      	movs	r1, #5
 8000572:	f000 fec3 	bl	80012fc <nutone_set_command>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMER;
 8000576:	233a      	movs	r3, #58	@ 0x3a
 8000578:	2207      	movs	r2, #7
 800057a:	54e2      	strb	r2, [r4, r3]
			break;
 800057c:	e7a0      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800057e:	2335      	movs	r3, #53	@ 0x35
 8000580:	2200      	movs	r2, #0
 8000582:	54e2      	strb	r2, [r4, r3]
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv);
 8000584:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000586:	f001 f85c 	bl	8001642 <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 800058a:	233a      	movs	r3, #58	@ 0x3a
 800058c:	2208      	movs	r2, #8
 800058e:	54e2      	strb	r2, [r4, r3]
			break;
 8000590:	e796      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv,
 8000592:	255a      	movs	r5, #90	@ 0x5a
 8000594:	446d      	add	r5, sp
 8000596:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000598:	0029      	movs	r1, r5
 800059a:	f001 f8c3 	bl	8001724 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 800059e:	782b      	ldrb	r3, [r5, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d00b      	beq.n	80005bc <nutone_vyv_fsm+0x1d8>
			if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 80005a4:	2335      	movs	r3, #53	@ 0x35
 80005a6:	5ce3      	ldrb	r3, [r4, r3]
 80005a8:	2b02      	cmp	r3, #2
 80005aa:	d000      	beq.n	80005ae <nutone_vyv_fsm+0x1ca>
 80005ac:	e788      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80005ae:	3333      	adds	r3, #51	@ 0x33
 80005b0:	2200      	movs	r2, #0
 80005b2:	54e2      	strb	r2, [r4, r3]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 80005b4:	3305      	adds	r3, #5
 80005b6:	320a      	adds	r2, #10
 80005b8:	54e2      	strb	r2, [r4, r3]
 80005ba:	e781      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80005bc:	3339      	adds	r3, #57	@ 0x39
 80005be:	2209      	movs	r2, #9
 80005c0:	54e2      	strb	r2, [r4, r3]
 80005c2:	e7ef      	b.n	80005a4 <nutone_vyv_fsm+0x1c0>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80005c4:	233a      	movs	r3, #58	@ 0x3a
 80005c6:	2209      	movs	r2, #9
 80005c8:	54e2      	strb	r2, [r4, r3]
			break;
 80005ca:	e779      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 80005cc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005ce:	f001 f833 	bl	8001638 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 80005d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80005d4:	f001 f830 	bl	8001638 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 80005d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005da:	f001 f82d 	bl	8001638 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005de:	6923      	ldr	r3, [r4, #16]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2500      	movs	r5, #0
 80005e4:	709d      	strb	r5, [r3, #2]
			nutone_set_command(nutone_app_hand->nutone_dev,
 80005e6:	6820      	ldr	r0, [r4, #0]
 80005e8:	2106      	movs	r1, #6
 80005ea:	f000 fe87 	bl	80012fc <nutone_set_command>
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 80005ee:	69e3      	ldr	r3, [r4, #28]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	f000 f93e 	bl	8000872 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 80005f6:	233a      	movs	r3, #58	@ 0x3a
 80005f8:	54e5      	strb	r5, [r4, r3]
			break;
 80005fa:	e761      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 80005fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005fe:	f001 f81b 	bl	8001638 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 8000602:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000604:	f001 f818 	bl	8001638 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 8000608:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800060a:	f001 f815 	bl	8001638 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 800060e:	6923      	ldr	r3, [r4, #16]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2500      	movs	r5, #0
 8000614:	709d      	strb	r5, [r3, #2]
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 8000616:	69e3      	ldr	r3, [r4, #28]
 8000618:	6818      	ldr	r0, [r3, #0]
 800061a:	f000 f92a 	bl	8000872 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 800061e:	233a      	movs	r3, #58	@ 0x3a
 8000620:	54e5      	strb	r5, [r4, r3]
			break;
 8000622:	e74d      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 8000624:	233a      	movs	r3, #58	@ 0x3a
 8000626:	2200      	movs	r2, #0
 8000628:	54e2      	strb	r2, [r4, r3]
			break;
 800062a:	e749      	b.n	80004c0 <nutone_vyv_fsm+0xdc>
 800062c:	08003c24 	.word	0x08003c24

08000630 <nutone_app_fsm>:
{
 8000630:	b510      	push	{r4, lr}
 8000632:	0004      	movs	r4, r0
	nutone_fan_fsm(nutone_app_hand);
 8000634:	f7ff fe18 	bl	8000268 <nutone_fan_fsm>
	nutone_white_fsm(nutone_app_hand);
 8000638:	0020      	movs	r0, r4
 800063a:	f7ff fe2f 	bl	800029c <nutone_white_fsm>
	nutone_vyv_fsm(nutone_app_hand);
 800063e:	0020      	movs	r0, r4
 8000640:	f7ff fed0 	bl	80003e4 <nutone_vyv_fsm>
	nutone_fsm(nutone_app_hand->nutone_dev);
 8000644:	6820      	ldr	r0, [r4, #0]
 8000646:	f000 fe95 	bl	8001374 <nutone_fsm>
}
 800064a:	2000      	movs	r0, #0
 800064c:	bd10      	pop	{r4, pc}

0800064e <nutone_app_check_button_event>:


}

void nutone_app_check_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 800064e:	b570      	push	{r4, r5, r6, lr}
 8000650:	b082      	sub	sp, #8
 8000652:	0005      	movs	r5, r0
 8000654:	000c      	movs	r4, r1
	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8000656:	7b4b      	ldrb	r3, [r1, #13]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <nutone_app_check_button_event+0x12>
		{
			button_debounce_fsm(button);
			deadline_timer_set_initial_time(deadline_events);
		}
	}
}
 800065c:	b002      	add	sp, #8
 800065e:	bd70      	pop	{r4, r5, r6, pc}
		deadline_timer_check(deadline_events, &timer_expired);
 8000660:	466b      	mov	r3, sp
 8000662:	1dde      	adds	r6, r3, #7
 8000664:	0031      	movs	r1, r6
 8000666:	f001 f85d 	bl	8001724 <deadline_timer_check>
		if(timer_expired == TIMER_EXPIRED_TRUE)
 800066a:	7833      	ldrb	r3, [r6, #0]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d1f5      	bne.n	800065c <nutone_app_check_button_event+0xe>
			button_debounce_fsm(button);
 8000670:	0020      	movs	r0, r4
 8000672:	f000 f8ac 	bl	80007ce <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 8000676:	0028      	movs	r0, r5
 8000678:	f000 ffe3 	bl	8001642 <deadline_timer_set_initial_time>
}
 800067c:	e7ee      	b.n	800065c <nutone_app_check_button_event+0xe>

0800067e <nutone_app_check_events>:
{
 800067e:	b570      	push	{r4, r5, r6, lr}
 8000680:	b086      	sub	sp, #24
 8000682:	0004      	movs	r4, r0
	nutone_app_check_button_event(nutone_app_hand->button_white->btn_timer,
 8000684:	68c3      	ldr	r3, [r0, #12]
 8000686:	6819      	ldr	r1, [r3, #0]
 8000688:	6858      	ldr	r0, [r3, #4]
 800068a:	f7ff ffe0 	bl	800064e <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_vyv->btn_timer,
 800068e:	6923      	ldr	r3, [r4, #16]
 8000690:	6819      	ldr	r1, [r3, #0]
 8000692:	6858      	ldr	r0, [r3, #4]
 8000694:	f7ff ffdb 	bl	800064e <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_fan->btn_timer,
 8000698:	68a3      	ldr	r3, [r4, #8]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	6858      	ldr	r0, [r3, #4]
 800069e:	f7ff ffd6 	bl	800064e <nutone_app_check_button_event>
	button_check_isr_request(*nutone_app_hand->button_vyv->button,
 80006a2:	6923      	ldr	r3, [r4, #16]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2216      	movs	r2, #22
 80006a8:	446a      	add	r2, sp
 80006aa:	9203      	str	r2, [sp, #12]
 80006ac:	2517      	movs	r5, #23
 80006ae:	446d      	add	r5, sp
 80006b0:	9502      	str	r5, [sp, #8]
 80006b2:	001a      	movs	r2, r3
 80006b4:	3210      	adds	r2, #16
 80006b6:	4669      	mov	r1, sp
 80006b8:	ca41      	ldmia	r2!, {r0, r6}
 80006ba:	c141      	stmia	r1!, {r0, r6}
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	6859      	ldr	r1, [r3, #4]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	f000 f8b1 	bl	800082a <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80006c8:	782b      	ldrb	r3, [r5, #0]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d017      	beq.n	80006fe <nutone_app_check_events+0x80>
	button_check_isr_request(*nutone_app_hand->button_white->button,
 80006ce:	68e3      	ldr	r3, [r4, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2216      	movs	r2, #22
 80006d4:	446a      	add	r2, sp
 80006d6:	9203      	str	r2, [sp, #12]
 80006d8:	2517      	movs	r5, #23
 80006da:	446d      	add	r5, sp
 80006dc:	9502      	str	r5, [sp, #8]
 80006de:	001a      	movs	r2, r3
 80006e0:	3210      	adds	r2, #16
 80006e2:	4669      	mov	r1, sp
 80006e4:	ca41      	ldmia	r2!, {r0, r6}
 80006e6:	c141      	stmia	r1!, {r0, r6}
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	6859      	ldr	r1, [r3, #4]
 80006ec:	689a      	ldr	r2, [r3, #8]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	f000 f89b 	bl	800082a <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80006f4:	782b      	ldrb	r3, [r5, #0]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d00c      	beq.n	8000714 <nutone_app_check_events+0x96>
}
 80006fa:	b006      	add	sp, #24
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
		if(nutone_app_hand->button_vyv->button->push_status != BUTTON_PUSH_ON)
 80006fe:	6923      	ldr	r3, [r4, #16]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	789a      	ldrb	r2, [r3, #2]
 8000704:	2a01      	cmp	r2, #1
 8000706:	d002      	beq.n	800070e <nutone_app_check_events+0x90>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_ON;
 8000708:	2201      	movs	r2, #1
 800070a:	709a      	strb	r2, [r3, #2]
 800070c:	e7df      	b.n	80006ce <nutone_app_check_events+0x50>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 800070e:	2200      	movs	r2, #0
 8000710:	709a      	strb	r2, [r3, #2]
 8000712:	e7dc      	b.n	80006ce <nutone_app_check_events+0x50>
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_TRUE;
 8000714:	3335      	adds	r3, #53	@ 0x35
 8000716:	2200      	movs	r2, #0
 8000718:	54e2      	strb	r2, [r4, r3]
}
 800071a:	e7ee      	b.n	80006fa <nutone_app_check_events+0x7c>

0800071c <nutone_app_set_outputs>:


void nutone_app_set_outputs(nutone_app_t *nutone_app_hand)
{
 800071c:	b510      	push	{r4, lr}
 800071e:	0004      	movs	r4, r0
	output_fsm_ctrl(nutone_app_hand->nutone_dev->lights->relay,
 8000720:	6803      	ldr	r3, [r0, #0]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6859      	ldr	r1, [r3, #4]
 8000726:	6818      	ldr	r0, [r3, #0]
 8000728:	f001 f814 	bl	8001754 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->lights->deadline_timer);

	output_fsm_ctrl(nutone_app_hand->nutone_dev->fan->relay,
 800072c:	6823      	ldr	r3, [r4, #0]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	6859      	ldr	r1, [r3, #4]
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	f001 f80e 	bl	8001754 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->fan->deadline_timer);

	output_led_indicator(nutone_app_hand->led_signal_hand->led_signal,
 8000738:	69e3      	ldr	r3, [r4, #28]
 800073a:	6859      	ldr	r1, [r3, #4]
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f001 f86f 	bl	8001820 <output_led_indicator>
							nutone_app_hand->led_signal_hand->led_signal_timer);

}
 8000742:	bd10      	pop	{r4, pc}

08000744 <nutone_app_process>:
{
 8000744:	b510      	push	{r4, lr}
 8000746:	0004      	movs	r4, r0
	nutone_app_check_events(nutone_app_hand);
 8000748:	f7ff ff99 	bl	800067e <nutone_app_check_events>
	nutone_app_fsm(nutone_app_hand);
 800074c:	0020      	movs	r0, r4
 800074e:	f7ff ff6f 	bl	8000630 <nutone_app_fsm>
	nutone_app_set_outputs(nutone_app_hand);
 8000752:	0020      	movs	r0, r4
 8000754:	f7ff ffe2 	bl	800071c <nutone_app_set_outputs>
}
 8000758:	2000      	movs	r0, #0
 800075a:	bd10      	pop	{r4, pc}

0800075c <button_setup>:

#include "BoardSupport/button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 800075c:	b510      	push	{r4, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	466b      	mov	r3, sp
 8000762:	9100      	str	r1, [sp, #0]
 8000764:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 8000766:	1d02      	adds	r2, r0, #4
 8000768:	cb12      	ldmia	r3!, {r1, r4}
 800076a:	c212      	stmia	r2!, {r1, r4}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 800076c:	2300      	movs	r3, #0
 800076e:	7043      	strb	r3, [r0, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 8000770:	70c3      	strb	r3, [r0, #3]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000772:	7303      	strb	r3, [r0, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000774:	2201      	movs	r2, #1
 8000776:	7342      	strb	r2, [r0, #13]
	button->debounce_idx = 0;
 8000778:	6103      	str	r3, [r0, #16]
	button->debounce_count_limit = 1;
 800077a:	6142      	str	r2, [r0, #20]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 800077c:	7083      	strb	r3, [r0, #2]

	return 0;

}
 800077e:	2000      	movs	r0, #0
 8000780:	b002      	add	sp, #8
 8000782:	bd10      	pop	{r4, pc}

08000784 <button_positive_edge_detected>:


uint8_t button_positive_edge_detected(button_t *button)
{

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000784:	7b43      	ldrb	r3, [r0, #13]
 8000786:	2b01      	cmp	r3, #1
 8000788:	d001      	beq.n	800078e <button_positive_edge_detected+0xa>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
	}
	return 0;
}
 800078a:	2000      	movs	r0, #0
 800078c:	4770      	bx	lr
		button->edge = BUTTON_EDGE_POSITIVE;
 800078e:	3301      	adds	r3, #1
 8000790:	7043      	strb	r3, [r0, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000792:	2300      	movs	r3, #0
 8000794:	7343      	strb	r3, [r0, #13]
 8000796:	e7f8      	b.n	800078a <button_positive_edge_detected+0x6>

08000798 <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000798:	7b43      	ldrb	r3, [r0, #13]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d001      	beq.n	80007a2 <button_negative_edge_detected+0xa>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
	}
	return 0;
}
 800079e:	2000      	movs	r0, #0
 80007a0:	4770      	bx	lr
		button->edge = BUTTON_EDGE_NEGATIVE;
 80007a2:	7043      	strb	r3, [r0, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 80007a4:	2300      	movs	r3, #0
 80007a6:	7343      	strb	r3, [r0, #13]
 80007a8:	e7f9      	b.n	800079e <button_negative_edge_detected+0x6>

080007aa <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 80007aa:	b570      	push	{r4, r5, r6, lr}
 80007ac:	0004      	movs	r4, r0
 80007ae:	000d      	movs	r5, r1
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 80007b0:	6840      	ldr	r0, [r0, #4]
 80007b2:	8921      	ldrh	r1, [r4, #8]
 80007b4:	f002 f9aa 	bl	8002b0c <HAL_GPIO_ReadPin>
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 80007b8:	2801      	cmp	r0, #1
 80007ba:	d005      	beq.n	80007c8 <button_get_status+0x1e>
	{
		button->status = BUTTON_ON;
	}
	else
	{
		button->status = BUTTON_OFF;
 80007bc:	2300      	movs	r3, #0
 80007be:	7023      	strb	r3, [r4, #0]
	}

	*status = button->status;
 80007c0:	7823      	ldrb	r3, [r4, #0]
 80007c2:	702b      	strb	r3, [r5, #0]

	return 0;
}
 80007c4:	2000      	movs	r0, #0
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
		button->status = BUTTON_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	7023      	strb	r3, [r4, #0]
 80007cc:	e7f8      	b.n	80007c0 <button_get_status+0x16>

080007ce <button_debounce_fsm>:
{
 80007ce:	b570      	push	{r4, r5, r6, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	0004      	movs	r4, r0
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 80007d4:	7b03      	ldrb	r3, [r0, #12]
	button_edge_t edge = button->edge;
 80007d6:	7846      	ldrb	r6, [r0, #1]
	uint32_t debounce_idx = button->debounce_idx;
 80007d8:	6905      	ldr	r5, [r0, #16]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 80007da:	6942      	ldr	r2, [r0, #20]
	switch(debounce_fsm_state)
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d011      	beq.n	8000804 <button_debounce_fsm+0x36>
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d014      	beq.n	800080e <button_debounce_fsm+0x40>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <button_debounce_fsm+0x28>
 80007e8:	2300      	movs	r3, #0
	button->debounce_fsm_state = debounce_fsm_state;
 80007ea:	7323      	strb	r3, [r4, #12]
	button->edge = edge;
 80007ec:	7066      	strb	r6, [r4, #1]
	button->debounce_idx = debounce_idx;
 80007ee:	6125      	str	r5, [r4, #16]
}
 80007f0:	2000      	movs	r0, #0
 80007f2:	b002      	add	sp, #8
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80007f6:	7b41      	ldrb	r1, [r0, #13]
 80007f8:	2900      	cmp	r1, #0
 80007fa:	d1f6      	bne.n	80007ea <button_debounce_fsm+0x1c>
				if(debounce_count_limit == 0)
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d112      	bne.n	8000826 <button_debounce_fsm+0x58>
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 8000800:	3302      	adds	r3, #2
 8000802:	e7f2      	b.n	80007ea <button_debounce_fsm+0x1c>
			if(debounce_idx >= debounce_count_limit)
 8000804:	4295      	cmp	r5, r2
 8000806:	d300      	bcc.n	800080a <button_debounce_fsm+0x3c>
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 8000808:	2302      	movs	r3, #2
			debounce_idx++;
 800080a:	3501      	adds	r5, #1
			break;
 800080c:	e7ed      	b.n	80007ea <button_debounce_fsm+0x1c>
			button->edge_attended = BUTTON_ISR_UNATTENDED;
 800080e:	2302      	movs	r3, #2
 8000810:	70c3      	strb	r3, [r0, #3]
			button->debounce_idx = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	6103      	str	r3, [r0, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000816:	3301      	adds	r3, #1
 8000818:	7343      	strb	r3, [r0, #13]
			button_get_status(button, &button_status);
 800081a:	466b      	mov	r3, sp
 800081c:	1dd9      	adds	r1, r3, #7
 800081e:	f7ff ffc4 	bl	80007aa <button_get_status>
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000822:	2300      	movs	r3, #0
			break;
 8000824:	e7e1      	b.n	80007ea <button_debounce_fsm+0x1c>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 8000826:	2301      	movs	r3, #1
 8000828:	e7df      	b.n	80007ea <button_debounce_fsm+0x1c>

0800082a <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 800082a:	b084      	sub	sp, #16
 800082c:	9000      	str	r0, [sp, #0]
 800082e:	9101      	str	r1, [sp, #4]
 8000830:	9202      	str	r2, [sp, #8]
 8000832:	9303      	str	r3, [sp, #12]
	*button_isr_status = button.edge_attended;
 8000834:	466b      	mov	r3, sp
 8000836:	78db      	ldrb	r3, [r3, #3]
 8000838:	9a06      	ldr	r2, [sp, #24]
 800083a:	7013      	strb	r3, [r2, #0]
	*edge = button.edge;
 800083c:	466b      	mov	r3, sp
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	9a07      	ldr	r2, [sp, #28]
 8000842:	7013      	strb	r3, [r2, #0]
	return 0;
}
 8000844:	2000      	movs	r0, #0
 8000846:	b004      	add	sp, #16
 8000848:	4770      	bx	lr

0800084a <led_signal_setup>:
 */

#include "BoardSupport/led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 800084a:	b510      	push	{r4, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	466b      	mov	r3, sp
 8000850:	9100      	str	r1, [sp, #0]
 8000852:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 8000854:	0002      	movs	r2, r0
 8000856:	cb12      	ldmia	r3!, {r1, r4}
 8000858:	c212      	stmia	r2!, {r1, r4}
	led_signal->type = LED_SIGNAL_OFF;
 800085a:	2300      	movs	r3, #0
 800085c:	7243      	strb	r3, [r0, #9]

	return 0;
}
 800085e:	2000      	movs	r0, #0
 8000860:	b002      	add	sp, #8
 8000862:	bd10      	pop	{r4, pc}

08000864 <led_signal_type_selector>:


uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
	led_signal->type = type;
 8000864:	7241      	strb	r1, [r0, #9]
	return 0;
}
 8000866:	2000      	movs	r0, #0
 8000868:	4770      	bx	lr

0800086a <led_signal_start>:
}


uint8_t led_signal_start(led_signal_t *led_signal)
{
	led_signal->control = LED_SIGNAL_CTRL_START;
 800086a:	2300      	movs	r3, #0
 800086c:	7203      	strb	r3, [r0, #8]

	return 0;
}
 800086e:	2000      	movs	r0, #0
 8000870:	4770      	bx	lr

08000872 <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000872:	2301      	movs	r3, #1
 8000874:	7203      	strb	r3, [r0, #8]

	return 0;
}
 8000876:	2000      	movs	r0, #0
 8000878:	4770      	bx	lr

0800087a <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 800087a:	b500      	push	{lr}
 800087c:	b085      	sub	sp, #20
 800087e:	ab01      	add	r3, sp, #4
 8000880:	9001      	str	r0, [sp, #4]
 8000882:	9102      	str	r1, [sp, #8]
 8000884:	9203      	str	r2, [sp, #12]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000886:	8899      	ldrh	r1, [r3, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	f002 f946 	bl	8002b1a <HAL_GPIO_WritePin>
	return 0;
}
 800088e:	2000      	movs	r0, #0
 8000890:	b005      	add	sp, #20
 8000892:	bd00      	pop	{pc}

08000894 <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000894:	b500      	push	{lr}
 8000896:	b085      	sub	sp, #20
 8000898:	ab01      	add	r3, sp, #4
 800089a:	9001      	str	r0, [sp, #4]
 800089c:	9102      	str	r1, [sp, #8]
 800089e:	9203      	str	r2, [sp, #12]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 80008a0:	8899      	ldrh	r1, [r3, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f002 f939 	bl	8002b1a <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
}
 80008a8:	2000      	movs	r0, #0
 80008aa:	b005      	add	sp, #20
 80008ac:	bd00      	pop	{pc}

080008ae <led_signal_solid_fsm>:
{
 80008ae:	b510      	push	{r4, lr}
 80008b0:	0004      	movs	r4, r0
	led_signal_fsm_state_t state = led_signal->state;
 80008b2:	7a83      	ldrb	r3, [r0, #10]
	led_signal_ctrl_t control = led_signal->control;
 80008b4:	7a02      	ldrb	r2, [r0, #8]
	switch(state)
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d01a      	beq.n	80008f0 <led_signal_solid_fsm+0x42>
 80008ba:	d80c      	bhi.n	80008d6 <led_signal_solid_fsm+0x28>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d013      	beq.n	80008e8 <led_signal_solid_fsm+0x3a>
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d119      	bne.n	80008f8 <led_signal_solid_fsm+0x4a>
			led_signal_turn_on(*led_signal);
 80008c4:	6800      	ldr	r0, [r0, #0]
 80008c6:	6861      	ldr	r1, [r4, #4]
 80008c8:	68a2      	ldr	r2, [r4, #8]
 80008ca:	f7ff ffd6 	bl	800087a <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 80008ce:	2302      	movs	r3, #2
	led_signal->state = state;
 80008d0:	72a3      	strb	r3, [r4, #10]
}
 80008d2:	2000      	movs	r0, #0
 80008d4:	bd10      	pop	{r4, pc}
	switch(state)
 80008d6:	2b04      	cmp	r3, #4
 80008d8:	d10e      	bne.n	80008f8 <led_signal_solid_fsm+0x4a>
			led_signal_turn_off(*led_signal);
 80008da:	6800      	ldr	r0, [r0, #0]
 80008dc:	6861      	ldr	r1, [r4, #4]
 80008de:	68a2      	ldr	r2, [r4, #8]
 80008e0:	f7ff ffd8 	bl	8000894 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 80008e4:	2300      	movs	r3, #0
			break;
 80008e6:	e7f3      	b.n	80008d0 <led_signal_solid_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_START)
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	d1f1      	bne.n	80008d0 <led_signal_solid_fsm+0x22>
				state = LED_SIGNAL_STATE_ON;
 80008ec:	2301      	movs	r3, #1
 80008ee:	e7ef      	b.n	80008d0 <led_signal_solid_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_STOP)
 80008f0:	2a01      	cmp	r2, #1
 80008f2:	d1ed      	bne.n	80008d0 <led_signal_solid_fsm+0x22>
				state = LED_SIGNAL_STATE_END;
 80008f4:	2304      	movs	r3, #4
 80008f6:	e7eb      	b.n	80008d0 <led_signal_solid_fsm+0x22>
			led_signal_turn_off(*led_signal);
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	6861      	ldr	r1, [r4, #4]
 80008fc:	68a2      	ldr	r2, [r4, #8]
 80008fe:	f7ff ffc9 	bl	8000894 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000902:	2300      	movs	r3, #0
			break;
 8000904:	e7e4      	b.n	80008d0 <led_signal_solid_fsm+0x22>

08000906 <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000906:	b500      	push	{lr}
 8000908:	b085      	sub	sp, #20
 800090a:	ab01      	add	r3, sp, #4
 800090c:	9001      	str	r0, [sp, #4]
 800090e:	9102      	str	r1, [sp, #8]
 8000910:	9203      	str	r2, [sp, #12]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000912:	8899      	ldrh	r1, [r3, #4]
 8000914:	f002 f907 	bl	8002b26 <HAL_GPIO_TogglePin>
	return 0;
}
 8000918:	2000      	movs	r0, #0
 800091a:	b005      	add	sp, #20
 800091c:	bd00      	pop	{pc}

0800091e <led_signal_togle_fsm>:
{
 800091e:	b570      	push	{r4, r5, r6, lr}
 8000920:	0004      	movs	r4, r0
	led_signal_fsm_state_t state = led_signal->state;
 8000922:	7a85      	ldrb	r5, [r0, #10]
	led_signal_ctrl_t control = led_signal->control;
 8000924:	7a06      	ldrb	r6, [r0, #8]
	switch(state)
 8000926:	2d03      	cmp	r5, #3
 8000928:	d01a      	beq.n	8000960 <led_signal_togle_fsm+0x42>
 800092a:	d80c      	bhi.n	8000946 <led_signal_togle_fsm+0x28>
 800092c:	2d00      	cmp	r5, #0
 800092e:	d013      	beq.n	8000958 <led_signal_togle_fsm+0x3a>
 8000930:	2d01      	cmp	r5, #1
 8000932:	d11e      	bne.n	8000972 <led_signal_togle_fsm+0x54>
			led_signal_turn_on(*led_signal);
 8000934:	6800      	ldr	r0, [r0, #0]
 8000936:	6861      	ldr	r1, [r4, #4]
 8000938:	68a2      	ldr	r2, [r4, #8]
 800093a:	f7ff ff9e 	bl	800087a <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 800093e:	2503      	movs	r5, #3
	led_signal->state = state;
 8000940:	72a5      	strb	r5, [r4, #10]
}
 8000942:	2000      	movs	r0, #0
 8000944:	bd70      	pop	{r4, r5, r6, pc}
	switch(state)
 8000946:	2d04      	cmp	r5, #4
 8000948:	d113      	bne.n	8000972 <led_signal_togle_fsm+0x54>
			led_signal_turn_off(*led_signal);
 800094a:	6800      	ldr	r0, [r0, #0]
 800094c:	6861      	ldr	r1, [r4, #4]
 800094e:	68a2      	ldr	r2, [r4, #8]
 8000950:	f7ff ffa0 	bl	8000894 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000954:	2500      	movs	r5, #0
			break;
 8000956:	e7f3      	b.n	8000940 <led_signal_togle_fsm+0x22>
			if(control == LED_SIGNAL_CTRL_START)
 8000958:	2e00      	cmp	r6, #0
 800095a:	d1f1      	bne.n	8000940 <led_signal_togle_fsm+0x22>
				state = LED_SIGNAL_STATE_ON;
 800095c:	2501      	movs	r5, #1
 800095e:	e7ef      	b.n	8000940 <led_signal_togle_fsm+0x22>
			led_signal_toggle(*led_signal);
 8000960:	6800      	ldr	r0, [r0, #0]
 8000962:	6861      	ldr	r1, [r4, #4]
 8000964:	68a2      	ldr	r2, [r4, #8]
 8000966:	f7ff ffce 	bl	8000906 <led_signal_toggle>
			if(control == LED_SIGNAL_CTRL_STOP)
 800096a:	2e01      	cmp	r6, #1
 800096c:	d1e8      	bne.n	8000940 <led_signal_togle_fsm+0x22>
				state = LED_SIGNAL_STATE_END;
 800096e:	2504      	movs	r5, #4
 8000970:	e7e6      	b.n	8000940 <led_signal_togle_fsm+0x22>
			led_signal_turn_off(*led_signal);
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	6861      	ldr	r1, [r4, #4]
 8000976:	68a2      	ldr	r2, [r4, #8]
 8000978:	f7ff ff8c 	bl	8000894 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 800097c:	2500      	movs	r5, #0
			break;
 800097e:	e7df      	b.n	8000940 <led_signal_togle_fsm+0x22>

08000980 <led_signal_fsm>:
{
 8000980:	b510      	push	{r4, lr}
 8000982:	0004      	movs	r4, r0
	led_signal_type_t type = led_signal->type;
 8000984:	7a43      	ldrb	r3, [r0, #9]
	switch(type)
 8000986:	2b01      	cmp	r3, #1
 8000988:	d00d      	beq.n	80009a6 <led_signal_fsm+0x26>
 800098a:	2b02      	cmp	r3, #2
 800098c:	d00e      	beq.n	80009ac <led_signal_fsm+0x2c>
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <led_signal_fsm+0x16>
}
 8000992:	2000      	movs	r0, #0
 8000994:	bd10      	pop	{r4, pc}
			led_signal_turn_off(*led_signal);
 8000996:	6800      	ldr	r0, [r0, #0]
 8000998:	6861      	ldr	r1, [r4, #4]
 800099a:	68a2      	ldr	r2, [r4, #8]
 800099c:	f7ff ff7a 	bl	8000894 <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	72a3      	strb	r3, [r4, #10]
			break;
 80009a4:	e7f5      	b.n	8000992 <led_signal_fsm+0x12>
			led_signal_solid_fsm(led_signal);
 80009a6:	f7ff ff82 	bl	80008ae <led_signal_solid_fsm>
			break;
 80009aa:	e7f2      	b.n	8000992 <led_signal_fsm+0x12>
			led_signal_togle_fsm(led_signal);
 80009ac:	f7ff ffb7 	bl	800091e <led_signal_togle_fsm>
			break;
 80009b0:	e7ef      	b.n	8000992 <led_signal_fsm+0x12>

080009b2 <pyd1598_direct_link_setup>:

}

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 80009b2:	b530      	push	{r4, r5, lr}
 80009b4:	b083      	sub	sp, #12
 80009b6:	466b      	mov	r3, sp
 80009b8:	9100      	str	r1, [sp, #0]
 80009ba:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 80009bc:	0002      	movs	r2, r0
 80009be:	3224      	adds	r2, #36	@ 0x24
 80009c0:	cb12      	ldmia	r3!, {r1, r4}
 80009c2:	c212      	stmia	r2!, {r1, r4}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	7043      	strb	r3, [r0, #1]
	direct_link->config.count_mode = 0;
 80009c8:	71c3      	strb	r3, [r0, #7]
	direct_link->config.hpf_cutoff = 0;
 80009ca:	7183      	strb	r3, [r0, #6]
	direct_link->config.op_mode = 0;
 80009cc:	7103      	strb	r3, [r0, #4]
	direct_link->config.pulse_counter = 0;
 80009ce:	7083      	strb	r3, [r0, #2]
	direct_link->config.signal_source = 0;
 80009d0:	7143      	strb	r3, [r0, #5]
	direct_link->config.threshold = 0;
 80009d2:	7003      	strb	r3, [r0, #0]
	direct_link->config.window_time = 0;
 80009d4:	70c3      	strb	r3, [r0, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 80009d6:	7383      	strb	r3, [r0, #14]
	direct_link->source_value.pir_bpf = 0;
 80009d8:	2200      	movs	r2, #0
 80009da:	8103      	strh	r3, [r0, #8]
	direct_link->source_value.pir_lpf = 0;
 80009dc:	8143      	strh	r3, [r0, #10]
	direct_link->source_value.temperature = 0;
 80009de:	8183      	strh	r3, [r0, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 80009e0:	7702      	strb	r2, [r0, #28]
	direct_link->datagram_bufffer = 0;
 80009e2:	2400      	movs	r4, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	6104      	str	r4, [r0, #16]
 80009e8:	6145      	str	r5, [r0, #20]
	direct_link->start_fsm = 0;
 80009ea:	3321      	adds	r3, #33	@ 0x21
 80009ec:	54c2      	strb	r2, [r0, r3]
	direct_link->time_update_idx = 0;
 80009ee:	3301      	adds	r3, #1
 80009f0:	54c2      	strb	r2, [r0, r3]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 80009f2:	b003      	add	sp, #12
 80009f4:	bd30      	pop	{r4, r5, pc}

080009f6 <pyd1598_request_write>:

/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
	sensor->serin.start_fsm = true;
 80009f6:	2301      	movs	r3, #1
 80009f8:	7543      	strb	r3, [r0, #21]
}
 80009fa:	4770      	bx	lr

080009fc <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 80009fc:	b084      	sub	sp, #16
 80009fe:	9000      	str	r0, [sp, #0]
 8000a00:	9101      	str	r1, [sp, #4]
 8000a02:	9202      	str	r2, [sp, #8]
 8000a04:	9303      	str	r3, [sp, #12]
	*motion_isr_status = sensor.motion_sensed;
 8000a06:	466a      	mov	r2, sp
 8000a08:	2358      	movs	r3, #88	@ 0x58
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8000a0e:	7013      	strb	r3, [r2, #0]
	return 0;
}
 8000a10:	2000      	movs	r0, #0
 8000a12:	b004      	add	sp, #16
 8000a14:	4770      	bx	lr

08000a16 <pyd1598_serin_add_to_datagram>:
	return status;
}

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 8000a16:	b510      	push	{r4, lr}
	uint32_t old_config = 0;
	uint32_t new_config = 0;

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8000a18:	680c      	ldr	r4, [r1, #0]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8000a1a:	4022      	ands	r2, r4

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 8000a1c:	4098      	lsls	r0, r3

	//Adding data to the datagram copy
	new_config |= old_config;
 8000a1e:	4310      	orrs	r0, r2

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8000a20:	6008      	str	r0, [r1, #0]

	return 0;
}
 8000a22:	2000      	movs	r0, #0
 8000a24:	bd10      	pop	{r4, pc}
	...

08000a28 <pyd1598_serin_add_threshold>:
{
 8000a28:	b510      	push	{r4, lr}
	serin->config.threshold = new_threshold;
 8000a2a:	7008      	strb	r0, [r1, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 8000a2c:	3108      	adds	r1, #8
 8000a2e:	2311      	movs	r3, #17
 8000a30:	4a01      	ldr	r2, [pc, #4]	@ (8000a38 <pyd1598_serin_add_threshold+0x10>)
 8000a32:	f7ff fff0 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000a36:	bd10      	pop	{r4, pc}
 8000a38:	0001ffff 	.word	0x0001ffff

08000a3c <pyd1598_serin_add_blind_time>:
{
 8000a3c:	b510      	push	{r4, lr}
	new_blind_time &= 0x0F;
 8000a3e:	230f      	movs	r3, #15
 8000a40:	4018      	ands	r0, r3
	serin->config.blind_time = new_blind_time;
 8000a42:	7048      	strb	r0, [r1, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 8000a44:	3108      	adds	r1, #8
 8000a46:	3b02      	subs	r3, #2
 8000a48:	4a01      	ldr	r2, [pc, #4]	@ (8000a50 <pyd1598_serin_add_blind_time+0x14>)
 8000a4a:	f7ff ffe4 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000a4e:	bd10      	pop	{r4, pc}
 8000a50:	01fe1fff 	.word	0x01fe1fff

08000a54 <pyd1598_serin_add_pulse_counter>:
{
 8000a54:	b510      	push	{r4, lr}
	pulse_counter &= 0x03;
 8000a56:	2303      	movs	r3, #3
 8000a58:	4018      	ands	r0, r3
	serin->config.pulse_counter = pulse_counter;
 8000a5a:	7088      	strb	r0, [r1, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 8000a5c:	3108      	adds	r1, #8
 8000a5e:	3308      	adds	r3, #8
 8000a60:	4a01      	ldr	r2, [pc, #4]	@ (8000a68 <pyd1598_serin_add_pulse_counter+0x14>)
 8000a62:	f7ff ffd8 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000a66:	bd10      	pop	{r4, pc}
 8000a68:	01ffe7ff 	.word	0x01ffe7ff

08000a6c <pyd1598_serin_add_window_time>:
{
 8000a6c:	b510      	push	{r4, lr}
	window_time &= 0x03;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	4018      	ands	r0, r3
	serin->config.window_time = window_time;
 8000a72:	70c8      	strb	r0, [r1, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8000a74:	3108      	adds	r1, #8
 8000a76:	3306      	adds	r3, #6
 8000a78:	4a01      	ldr	r2, [pc, #4]	@ (8000a80 <pyd1598_serin_add_window_time+0x14>)
 8000a7a:	f7ff ffcc 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000a7e:	bd10      	pop	{r4, pc}
 8000a80:	01fff9ff 	.word	0x01fff9ff

08000a84 <pyd1598_serin_add_operation_mode>:
{
 8000a84:	b510      	push	{r4, lr}
	serin->config.op_mode = new_op_mode;
 8000a86:	7108      	strb	r0, [r1, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 8000a88:	3108      	adds	r1, #8
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	4a01      	ldr	r2, [pc, #4]	@ (8000a94 <pyd1598_serin_add_operation_mode+0x10>)
 8000a8e:	f7ff ffc2 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000a92:	bd10      	pop	{r4, pc}
 8000a94:	01fffe7f 	.word	0x01fffe7f

08000a98 <pyd1598_serin_add_signal_source>:
{
 8000a98:	b510      	push	{r4, lr}
	signal_source &= 0x03;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	4018      	ands	r0, r3
	serin->config.signal_source = signal_source;
 8000a9e:	7148      	strb	r0, [r1, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 8000aa0:	3108      	adds	r1, #8
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	4a01      	ldr	r2, [pc, #4]	@ (8000aac <pyd1598_serin_add_signal_source+0x14>)
 8000aa6:	f7ff ffb6 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000aaa:	bd10      	pop	{r4, pc}
 8000aac:	01ffff9f 	.word	0x01ffff9f

08000ab0 <pyd1598_serin_add_hpf_cutoff>:
{
 8000ab0:	b510      	push	{r4, lr}
	new_hpf_cutoff &= 0x03;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	4018      	ands	r0, r3
	serin->config.hpf_cutoff = new_hpf_cutoff;
 8000ab6:	7188      	strb	r0, [r1, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8000ab8:	3108      	adds	r1, #8
 8000aba:	3b01      	subs	r3, #1
 8000abc:	4a01      	ldr	r2, [pc, #4]	@ (8000ac4 <pyd1598_serin_add_hpf_cutoff+0x14>)
 8000abe:	f7ff ffaa 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000ac2:	bd10      	pop	{r4, pc}
 8000ac4:	01fffffb 	.word	0x01fffffb

08000ac8 <pyd1598_serin_add_count_mode>:
{
 8000ac8:	b510      	push	{r4, lr}
	new_count_mode &= 0x03;
 8000aca:	2303      	movs	r3, #3
 8000acc:	4018      	ands	r0, r3
	serin->config.count_mode = new_count_mode;
 8000ace:	71c8      	strb	r0, [r1, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 8000ad0:	3108      	adds	r1, #8
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	4a01      	ldr	r2, [pc, #4]	@ (8000adc <pyd1598_serin_add_count_mode+0x14>)
 8000ad6:	f7ff ff9e 	bl	8000a16 <pyd1598_serin_add_to_datagram>
}
 8000ada:	bd10      	pop	{r4, pc}
 8000adc:	01fffffd 	.word	0x01fffffd

08000ae0 <pyd1598_serin_add_all_conf>:
{
 8000ae0:	b510      	push	{r4, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	9000      	str	r0, [sp, #0]
 8000ae6:	9101      	str	r1, [sp, #4]
 8000ae8:	0014      	movs	r4, r2
	pyd1598_serin_add_threshold(config.threshold, serin);
 8000aea:	466b      	mov	r3, sp
 8000aec:	7818      	ldrb	r0, [r3, #0]
 8000aee:	0011      	movs	r1, r2
 8000af0:	f7ff ff9a 	bl	8000a28 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 8000af4:	466b      	mov	r3, sp
 8000af6:	7858      	ldrb	r0, [r3, #1]
 8000af8:	0021      	movs	r1, r4
 8000afa:	f7ff ff9f 	bl	8000a3c <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 8000afe:	466b      	mov	r3, sp
 8000b00:	7898      	ldrb	r0, [r3, #2]
 8000b02:	0021      	movs	r1, r4
 8000b04:	f7ff ffa6 	bl	8000a54 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8000b08:	466b      	mov	r3, sp
 8000b0a:	78d8      	ldrb	r0, [r3, #3]
 8000b0c:	0021      	movs	r1, r4
 8000b0e:	f7ff ffad 	bl	8000a6c <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8000b12:	466b      	mov	r3, sp
 8000b14:	7918      	ldrb	r0, [r3, #4]
 8000b16:	0021      	movs	r1, r4
 8000b18:	f7ff ffb4 	bl	8000a84 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8000b1c:	466b      	mov	r3, sp
 8000b1e:	7958      	ldrb	r0, [r3, #5]
 8000b20:	0021      	movs	r1, r4
 8000b22:	f7ff ffb9 	bl	8000a98 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8000b26:	466b      	mov	r3, sp
 8000b28:	7998      	ldrb	r0, [r3, #6]
 8000b2a:	0021      	movs	r1, r4
 8000b2c:	f7ff ffc0 	bl	8000ab0 <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8000b30:	466b      	mov	r3, sp
 8000b32:	79d8      	ldrb	r0, [r3, #7]
 8000b34:	0021      	movs	r1, r4
 8000b36:	f7ff ffc7 	bl	8000ac8 <pyd1598_serin_add_count_mode>
}
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd10      	pop	{r4, pc}

08000b40 <pyd1598_serin_setup>:
{
 8000b40:	b082      	sub	sp, #8
 8000b42:	b530      	push	{r4, r5, lr}
 8000b44:	b083      	sub	sp, #12
 8000b46:	0004      	movs	r4, r0
 8000b48:	4668      	mov	r0, sp
 8000b4a:	9100      	str	r1, [sp, #0]
 8000b4c:	6042      	str	r2, [r0, #4]
 8000b4e:	ad07      	add	r5, sp, #28
 8000b50:	9307      	str	r3, [sp, #28]
	serin->config = initial_config;
 8000b52:	0023      	movs	r3, r4
 8000b54:	c806      	ldmia	r0!, {r1, r2}
 8000b56:	c306      	stmia	r3!, {r1, r2}
	pyd1598_serin_add_all_conf(serin->config, serin);
 8000b58:	0022      	movs	r2, r4
 8000b5a:	6820      	ldr	r0, [r4, #0]
 8000b5c:	6861      	ldr	r1, [r4, #4]
 8000b5e:	f7ff ffbf 	bl	8000ae0 <pyd1598_serin_add_all_conf>
	serin->hardware_inteface = hardware_inteface;
 8000b62:	0023      	movs	r3, r4
 8000b64:	3318      	adds	r3, #24
 8000b66:	cd06      	ldmia	r5!, {r1, r2}
 8000b68:	c306      	stmia	r3!, {r1, r2}
	serin->data_idx = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	6123      	str	r3, [r4, #16]
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	0452      	lsls	r2, r2, #17
 8000b72:	60e2      	str	r2, [r4, #12]
	serin->state = PYD1598_SERIN_IDLE;
 8000b74:	7523      	strb	r3, [r4, #20]
	serin->start_fsm = false;
 8000b76:	7563      	strb	r3, [r4, #21]
}
 8000b78:	b003      	add	sp, #12
 8000b7a:	bc30      	pop	{r4, r5}
 8000b7c:	bc08      	pop	{r3}
 8000b7e:	b002      	add	sp, #8
 8000b80:	4718      	bx	r3

08000b82 <pyd1598_setup>:
{
 8000b82:	b082      	sub	sp, #8
 8000b84:	b510      	push	{r4, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	0004      	movs	r4, r0
 8000b8a:	9102      	str	r1, [sp, #8]
 8000b8c:	9203      	str	r2, [sp, #12]
 8000b8e:	9307      	str	r3, [sp, #28]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8000b90:	9b08      	ldr	r3, [sp, #32]
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	9b07      	ldr	r3, [sp, #28]
 8000b96:	f7ff ffd3 	bl	8000b40 <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 8000b9a:	0020      	movs	r0, r4
 8000b9c:	3020      	adds	r0, #32
 8000b9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000ba0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000ba2:	f7ff ff06 	bl	80009b2 <pyd1598_direct_link_setup>
	sensor->current_config.blind_time = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	2251      	movs	r2, #81	@ 0x51
 8000baa:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.count_mode = 0;
 8000bac:	3206      	adds	r2, #6
 8000bae:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.hpf_cutoff = 0;
 8000bb0:	3a01      	subs	r2, #1
 8000bb2:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.op_mode = 0;
 8000bb4:	3a02      	subs	r2, #2
 8000bb6:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.pulse_counter = 0;
 8000bb8:	3a02      	subs	r2, #2
 8000bba:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.signal_source = 0;
 8000bbc:	3203      	adds	r2, #3
 8000bbe:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.threshold = 0;
 8000bc0:	3a05      	subs	r2, #5
 8000bc2:	54a3      	strb	r3, [r4, r2]
	sensor->current_config.window_time = 0;
 8000bc4:	3203      	adds	r2, #3
 8000bc6:	54a3      	strb	r3, [r4, r2]
}
 8000bc8:	b004      	add	sp, #16
 8000bca:	bc10      	pop	{r4}
 8000bcc:	bc08      	pop	{r3}
 8000bce:	b002      	add	sp, #8
 8000bd0:	4718      	bx	r3

08000bd2 <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8000bd2:	b530      	push	{r4, r5, lr}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	9000      	str	r0, [sp, #0]
 8000bd8:	9101      	str	r1, [sp, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000bda:	0004      	movs	r4, r0
 8000bdc:	466b      	mov	r3, sp
 8000bde:	889d      	ldrh	r5, [r3, #4]
 8000be0:	2200      	movs	r2, #0
 8000be2:	0029      	movs	r1, r5
 8000be4:	f001 ff99 	bl	8002b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	0029      	movs	r1, r5
 8000bec:	0020      	movs	r0, r4
 8000bee:	f001 ff94 	bl	8002b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	0029      	movs	r1, r5
 8000bf6:	0020      	movs	r0, r4
 8000bf8:	f001 ff8f 	bl	8002b1a <HAL_GPIO_WritePin>
}
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd30      	pop	{r4, r5, pc}

08000c00 <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8000c00:	b530      	push	{r4, r5, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	9000      	str	r0, [sp, #0]
 8000c06:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000c08:	0004      	movs	r4, r0
 8000c0a:	466b      	mov	r3, sp
 8000c0c:	889d      	ldrh	r5, [r3, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	0029      	movs	r1, r5
 8000c12:	f001 ff82 	bl	8002b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	0029      	movs	r1, r5
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f001 ff7d 	bl	8002b1a <HAL_GPIO_WritePin>
}
 8000c20:	b003      	add	sp, #12
 8000c22:	bd30      	pop	{r4, r5, pc}

08000c24 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8000c24:	b500      	push	{lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	9000      	str	r0, [sp, #0]
 8000c2a:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8000c2c:	466b      	mov	r3, sp
 8000c2e:	2206      	movs	r2, #6
 8000c30:	569a      	ldrsb	r2, [r3, r2]
 8000c32:	8899      	ldrh	r1, [r3, #4]
 8000c34:	f000 fe48 	bl	80018c8 <HAL_DIRECT_LINK_conf_as_output>
}
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd00      	pop	{pc}

08000c3c <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8000c3c:	b500      	push	{lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	9000      	str	r0, [sp, #0]
 8000c42:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8000c44:	466b      	mov	r3, sp
 8000c46:	2206      	movs	r2, #6
 8000c48:	569a      	ldrsb	r2, [r3, r2]
 8000c4a:	8899      	ldrh	r1, [r3, #4]
 8000c4c:	f000 fdfe 	bl	800184c <HAL_DIRECT_LINK_conf_as_input>
}
 8000c50:	b003      	add	sp, #12
 8000c52:	bd00      	pop	{pc}

08000c54 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8000c54:	b500      	push	{lr}
 8000c56:	b083      	sub	sp, #12
 8000c58:	9000      	str	r0, [sp, #0]
 8000c5a:	9101      	str	r1, [sp, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8000c5c:	466b      	mov	r3, sp
 8000c5e:	2206      	movs	r2, #6
 8000c60:	569a      	ldrsb	r2, [r3, r2]
 8000c62:	8899      	ldrh	r1, [r3, #4]
 8000c64:	f000 fe0c 	bl	8001880 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd00      	pop	{pc}

08000c6c <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8000c6c:	b530      	push	{r4, r5, lr}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	9000      	str	r0, [sp, #0]
 8000c72:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000c74:	0004      	movs	r4, r0
 8000c76:	466b      	mov	r3, sp
 8000c78:	889d      	ldrh	r5, [r3, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	0029      	movs	r1, r5
 8000c7e:	f001 ff4c 	bl	8002b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	0029      	movs	r1, r5
 8000c86:	0020      	movs	r0, r4
 8000c88:	f001 ff47 	bl	8002b1a <HAL_GPIO_WritePin>
}
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd30      	pop	{r4, r5, pc}

08000c90 <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8000c90:	b500      	push	{lr}
 8000c92:	b083      	sub	sp, #12
 8000c94:	9000      	str	r0, [sp, #0]
 8000c96:	9101      	str	r1, [sp, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000c98:	466b      	mov	r3, sp
 8000c9a:	8899      	ldrh	r1, [r3, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f001 ff3c 	bl	8002b1a <HAL_GPIO_WritePin>
}
 8000ca2:	b003      	add	sp, #12
 8000ca4:	bd00      	pop	{pc}
	...

08000ca8 <pyd1598_serin_send_datagram_fsm>:
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	46ce      	mov	lr, r9
 8000cac:	4647      	mov	r7, r8
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b087      	sub	sp, #28
 8000cb2:	0004      	movs	r4, r0
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	9201      	str	r2, [sp, #4]
	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8000cb8:	7d05      	ldrb	r5, [r0, #20]
	uint32_t data_idx = serin->data_idx;
 8000cba:	6907      	ldr	r7, [r0, #16]
	bool start_fsm = serin->start_fsm;
 8000cbc:	7d43      	ldrb	r3, [r0, #21]
 8000cbe:	4698      	mov	r8, r3
	pyd1598_config_t config = serin->config;
 8000cc0:	ab04      	add	r3, sp, #16
 8000cc2:	0002      	movs	r2, r0
 8000cc4:	ca41      	ldmia	r2!, {r0, r6}
 8000cc6:	c341      	stmia	r3!, {r0, r6}
	uint32_t mask = serin->mask;
 8000cc8:	68e6      	ldr	r6, [r4, #12]
	uint32_t conf_datagram = serin->conf_datagram;
 8000cca:	68a3      	ldr	r3, [r4, #8]
 8000ccc:	469c      	mov	ip, r3
	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8000cce:	aa02      	add	r2, sp, #8
 8000cd0:	0023      	movs	r3, r4
 8000cd2:	3318      	adds	r3, #24
 8000cd4:	cb03      	ldmia	r3!, {r0, r1}
 8000cd6:	c203      	stmia	r2!, {r0, r1}
	switch(state)
 8000cd8:	2d05      	cmp	r5, #5
 8000cda:	d855      	bhi.n	8000d88 <pyd1598_serin_send_datagram_fsm+0xe0>
 8000cdc:	00ab      	lsls	r3, r5, #2
 8000cde:	4a2d      	ldr	r2, [pc, #180]	@ (8000d94 <pyd1598_serin_send_datagram_fsm+0xec>)
 8000ce0:	58d3      	ldr	r3, [r2, r3]
 8000ce2:	469f      	mov	pc, r3
 8000ce4:	2680      	movs	r6, #128	@ 0x80
 8000ce6:	0476      	lsls	r6, r6, #17
 8000ce8:	2700      	movs	r7, #0
 8000cea:	2502      	movs	r5, #2
	serin->state = state;
 8000cec:	7525      	strb	r5, [r4, #20]
	serin->data_idx = data_idx;
 8000cee:	6127      	str	r7, [r4, #16]
	serin->start_fsm = false;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	7563      	strb	r3, [r4, #21]
	serin->mask = mask;
 8000cf4:	60e6      	str	r6, [r4, #12]
	serin->start_fsm = start_fsm;
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	7563      	strb	r3, [r4, #21]
}
 8000cfa:	b007      	add	sp, #28
 8000cfc:	bcc0      	pop	{r6, r7}
 8000cfe:	46b9      	mov	r9, r7
 8000d00:	46b0      	mov	r8, r6
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(start_fsm == true)
 8000d04:	4643      	mov	r3, r8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f0      	beq.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_output(data_link_pin);
 8000d0a:	9800      	ldr	r0, [sp, #0]
 8000d0c:	9901      	ldr	r1, [sp, #4]
 8000d0e:	f7ff ff89 	bl	8000c24 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000d12:	9800      	ldr	r0, [sp, #0]
 8000d14:	9901      	ldr	r1, [sp, #4]
 8000d16:	f7ff ffbb 	bl	8000c90 <pyd1598_direct_link_set_negative_edge>
				start_fsm = false;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	4698      	mov	r8, r3
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 8000d1e:	2501      	movs	r5, #1
 8000d20:	e7e4      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
			if((conf_datagram & mask) == 0)
 8000d22:	4663      	mov	r3, ip
 8000d24:	4233      	tst	r3, r6
 8000d26:	d107      	bne.n	8000d38 <pyd1598_serin_send_datagram_fsm+0x90>
				pyd1598_serin_set_zero_pulse(output);
 8000d28:	9802      	ldr	r0, [sp, #8]
 8000d2a:	9903      	ldr	r1, [sp, #12]
 8000d2c:	f7ff ff51 	bl	8000bd2 <pyd1598_serin_set_zero_pulse>
			mask >>= 1;
 8000d30:	0876      	lsrs	r6, r6, #1
			if(mask == 0)
 8000d32:	d02b      	beq.n	8000d8c <pyd1598_serin_send_datagram_fsm+0xe4>
				data_idx++;
 8000d34:	3701      	adds	r7, #1
 8000d36:	e7d9      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_serin_set_one_pulse(output);
 8000d38:	9802      	ldr	r0, [sp, #8]
 8000d3a:	9903      	ldr	r1, [sp, #12]
 8000d3c:	f7ff ff60 	bl	8000c00 <pyd1598_serin_set_one_pulse>
 8000d40:	e7f6      	b.n	8000d30 <pyd1598_serin_send_datagram_fsm+0x88>
			pyd1598_direct_link_set_as_output(data_link_pin);
 8000d42:	9800      	ldr	r0, [sp, #0]
 8000d44:	9901      	ldr	r1, [sp, #4]
 8000d46:	f7ff ff6d 	bl	8000c24 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000d4a:	9800      	ldr	r0, [sp, #0]
 8000d4c:	9901      	ldr	r1, [sp, #4]
 8000d4e:	f7ff ff9f 	bl	8000c90 <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 8000d52:	2504      	movs	r5, #4
			break;
 8000d54:	e7ca      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8000d56:	2f22      	cmp	r7, #34	@ 0x22
 8000d58:	d81a      	bhi.n	8000d90 <pyd1598_serin_send_datagram_fsm+0xe8>
				data_idx++;
 8000d5a:	3701      	adds	r7, #1
 8000d5c:	e7c6      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
			if(config.op_mode == PYD1598_FORCE_READOUT)
 8000d5e:	ab04      	add	r3, sp, #16
 8000d60:	791d      	ldrb	r5, [r3, #4]
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d005      	beq.n	8000d72 <pyd1598_serin_send_datagram_fsm+0xca>
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000d66:	3d01      	subs	r5, #1
 8000d68:	b2ed      	uxtb	r5, r5
 8000d6a:	2d01      	cmp	r5, #1
 8000d6c:	d906      	bls.n	8000d7c <pyd1598_serin_send_datagram_fsm+0xd4>
			state = PYD1598_SERIN_IDLE;
 8000d6e:	2500      	movs	r5, #0
 8000d70:	e7bc      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_input(data_link_pin);
 8000d72:	9800      	ldr	r0, [sp, #0]
 8000d74:	9901      	ldr	r1, [sp, #4]
 8000d76:	f7ff ff61 	bl	8000c3c <pyd1598_direct_link_set_as_input>
 8000d7a:	e7b7      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8000d7c:	9800      	ldr	r0, [sp, #0]
 8000d7e:	9901      	ldr	r1, [sp, #4]
 8000d80:	f7ff ff68 	bl	8000c54 <pyd1598_direct_link_set_as_interrupt_input>
			state = PYD1598_SERIN_IDLE;
 8000d84:	2500      	movs	r5, #0
 8000d86:	e7b1      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
			state = PYD1598_SERIN_IDLE;
 8000d88:	2500      	movs	r5, #0
 8000d8a:	e7af      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				state = PYD1598_SERIN_SEND_DOWN;
 8000d8c:	2503      	movs	r5, #3
 8000d8e:	e7ad      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
				state = PYD1598_SERIN_END_COM;
 8000d90:	2505      	movs	r5, #5
 8000d92:	e7ab      	b.n	8000cec <pyd1598_serin_send_datagram_fsm+0x44>
 8000d94:	08003c54 	.word	0x08003c54

08000d98 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8000d98:	b510      	push	{r4, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	9000      	str	r0, [sp, #0]
 8000d9e:	9101      	str	r1, [sp, #4]
 8000da0:	0014      	movs	r4, r2
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8000da2:	466b      	mov	r3, sp
 8000da4:	8899      	ldrh	r1, [r3, #4]
 8000da6:	f001 feb1 	bl	8002b0c <HAL_GPIO_ReadPin>

	if(pin_value == GPIO_PIN_SET)
 8000daa:	2801      	cmp	r0, #1
 8000dac:	d00b      	beq.n	8000dc6 <pyd1598_direct_link_read_pin+0x2e>
	{
		*buffer  |= readout_mask;
	}
	else if(pin_value == GPIO_PIN_RESET)
 8000dae:	2800      	cmp	r0, #0
 8000db0:	d125      	bne.n	8000dfe <pyd1598_direct_link_read_pin+0x66>
	{
		*buffer  &= ~readout_mask;
 8000db2:	6822      	ldr	r2, [r4, #0]
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	4913      	ldr	r1, [pc, #76]	@ (8000e04 <pyd1598_direct_link_read_pin+0x6c>)
 8000db8:	6808      	ldr	r0, [r1, #0]
 8000dba:	6849      	ldr	r1, [r1, #4]
 8000dbc:	4382      	bics	r2, r0
 8000dbe:	6022      	str	r2, [r4, #0]
 8000dc0:	438b      	bics	r3, r1
 8000dc2:	6063      	str	r3, [r4, #4]
 8000dc4:	e008      	b.n	8000dd8 <pyd1598_direct_link_read_pin+0x40>
		*buffer  |= readout_mask;
 8000dc6:	6820      	ldr	r0, [r4, #0]
 8000dc8:	6861      	ldr	r1, [r4, #4]
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <pyd1598_direct_link_read_pin+0x6c>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	4302      	orrs	r2, r0
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	6022      	str	r2, [r4, #0]
 8000dd6:	6063      	str	r3, [r4, #4]
	else
	{
		__NOP();
	}

	readout_mask = (readout_mask >> 1);
 8000dd8:	490a      	ldr	r1, [pc, #40]	@ (8000e04 <pyd1598_direct_link_read_pin+0x6c>)
 8000dda:	684a      	ldr	r2, [r1, #4]
 8000ddc:	07d0      	lsls	r0, r2, #31
 8000dde:	680b      	ldr	r3, [r1, #0]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	4303      	orrs	r3, r0
 8000de4:	0852      	lsrs	r2, r2, #1
 8000de6:	600b      	str	r3, [r1, #0]
 8000de8:	604a      	str	r2, [r1, #4]

	if(readout_mask == ((uint64_t) 0))
 8000dea:	4313      	orrs	r3, r2
 8000dec:	d104      	bne.n	8000df8 <pyd1598_direct_link_read_pin+0x60>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8000dee:	000b      	movs	r3, r1
 8000df0:	2000      	movs	r0, #0
 8000df2:	2180      	movs	r1, #128	@ 0x80
 8000df4:	6018      	str	r0, [r3, #0]
 8000df6:	6059      	str	r1, [r3, #4]
	}
	return 0;

}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd10      	pop	{r4, pc}
		__NOP();
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	e7ea      	b.n	8000dd8 <pyd1598_direct_link_read_pin+0x40>
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	20000000 	.word	0x20000000

08000e08 <pyd1598_dl_readout_fsm>:
{
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	46d6      	mov	lr, sl
 8000e0c:	464f      	mov	r7, r9
 8000e0e:	4646      	mov	r6, r8
 8000e10:	b5c0      	push	{r6, r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	0004      	movs	r4, r0
 8000e16:	000d      	movs	r5, r1
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000e18:	6902      	ldr	r2, [r0, #16]
 8000e1a:	6943      	ldr	r3, [r0, #20]
 8000e1c:	9200      	str	r2, [sp, #0]
 8000e1e:	9301      	str	r3, [sp, #4]
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8000e20:	7f43      	ldrb	r3, [r0, #29]
 8000e22:	469a      	mov	sl, r3
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000e24:	7fc1      	ldrb	r1, [r0, #31]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000e26:	2320      	movs	r3, #32
 8000e28:	5cc6      	ldrb	r6, [r0, r3]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	5cc7      	ldrb	r7, [r0, r3]
	bool start_fsm = direct_link->start_fsm;
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	5cc3      	ldrb	r3, [r0, r3]
 8000e32:	4698      	mov	r8, r3
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8000e34:	2323      	movs	r3, #35	@ 0x23
 8000e36:	5cc3      	ldrb	r3, [r0, r3]
 8000e38:	4699      	mov	r9, r3
	switch(readout_state)
 8000e3a:	2e04      	cmp	r6, #4
 8000e3c:	d900      	bls.n	8000e40 <pyd1598_dl_readout_fsm+0x38>
 8000e3e:	e0a5      	b.n	8000f8c <pyd1598_dl_readout_fsm+0x184>
 8000e40:	00b3      	lsls	r3, r6, #2
 8000e42:	4a5e      	ldr	r2, [pc, #376]	@ (8000fbc <pyd1598_dl_readout_fsm+0x1b4>)
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	469f      	mov	pc, r3
			if(start_fsm == true)
 8000e48:	4643      	mov	r3, r8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d100      	bne.n	8000e50 <pyd1598_dl_readout_fsm+0x48>
 8000e4e:	e0a0      	b.n	8000f92 <pyd1598_dl_readout_fsm+0x18a>
				if(op_mode == PYD1598_FORCE_READOUT)
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	d008      	beq.n	8000e66 <pyd1598_dl_readout_fsm+0x5e>
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000e54:	1e6b      	subs	r3, r5, #1
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d911      	bls.n	8000e80 <pyd1598_dl_readout_fsm+0x78>
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000e5c:	0035      	movs	r5, r6
				start_fsm = false;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	4698      	mov	r8, r3
				readout_status = READOUT_BUSY;
 8000e62:	2601      	movs	r6, #1
 8000e64:	e041      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000e66:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000e68:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e6a:	f7ff fedb 	bl	8000c24 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000e6e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e70:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e72:	f7ff fefb 	bl	8000c6c <pyd1598_direct_link_set_one_pulse>
				start_fsm = false;
 8000e76:	2300      	movs	r3, #0
 8000e78:	4698      	mov	r8, r3
					readout_state = PYD1598_READOUT_GET_MSG;
 8000e7a:	3501      	adds	r5, #1
				readout_status = READOUT_BUSY;
 8000e7c:	2601      	movs	r6, #1
 8000e7e:	e034      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000e80:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000e82:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e84:	f7ff fece 	bl	8000c24 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000e88:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e8a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e8c:	f7ff ff00 	bl	8000c90 <pyd1598_direct_link_set_negative_edge>
					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8000e90:	2d01      	cmp	r5, #1
 8000e92:	d100      	bne.n	8000e96 <pyd1598_dl_readout_fsm+0x8e>
 8000e94:	e080      	b.n	8000f98 <pyd1598_dl_readout_fsm+0x190>
 8000e96:	4653      	mov	r3, sl
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d100      	bne.n	8000e9e <pyd1598_dl_readout_fsm+0x96>
 8000e9c:	e081      	b.n	8000fa2 <pyd1598_dl_readout_fsm+0x19a>
				start_fsm = false;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_GET_MSG;
 8000ea2:	2501      	movs	r5, #1
				readout_status = READOUT_BUSY;
 8000ea4:	2601      	movs	r6, #1
 8000ea6:	e020      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
			datagram_bufffer = 0;
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9200      	str	r2, [sp, #0]
 8000eae:	9301      	str	r3, [sp, #4]
			for(idx = 0; idx < 40; idx++)
 8000eb0:	2500      	movs	r5, #0
 8000eb2:	e016      	b.n	8000ee2 <pyd1598_dl_readout_fsm+0xda>
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000eb4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000eb6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000eb8:	f7ff fed8 	bl	8000c6c <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000ebc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000ebe:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000ec0:	f7ff febc 	bl	8000c3c <pyd1598_direct_link_set_as_input>
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8000ec4:	002b      	movs	r3, r5
 8000ec6:	466a      	mov	r2, sp
 8000ec8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000eca:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000ecc:	f7ff ff64 	bl	8000d98 <pyd1598_direct_link_read_pin>
				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000ed0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000ed2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000ed4:	f7ff fedc 	bl	8000c90 <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000ed8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000eda:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000edc:	f7ff fea2 	bl	8000c24 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8000ee0:	3501      	adds	r5, #1
 8000ee2:	2d27      	cmp	r5, #39	@ 0x27
 8000ee4:	d9e6      	bls.n	8000eb4 <pyd1598_dl_readout_fsm+0xac>
			time_update_idx = 0;
 8000ee6:	2700      	movs	r7, #0
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8000ee8:	2503      	movs	r5, #3
	direct_link->readout_state = readout_state;
 8000eea:	2320      	movs	r3, #32
 8000eec:	54e5      	strb	r5, [r4, r3]
	direct_link->readout_status = readout_status;
 8000eee:	77e6      	strb	r6, [r4, #31]
	direct_link->time_update_idx = time_update_idx;
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	54e7      	strb	r7, [r4, r3]
	direct_link->start_fsm = start_fsm;
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4642      	mov	r2, r8
 8000ef8:	54e2      	strb	r2, [r4, r3]
	direct_link->datagram_bufffer = datagram_bufffer;
 8000efa:	9a00      	ldr	r2, [sp, #0]
 8000efc:	9b01      	ldr	r3, [sp, #4]
 8000efe:	6122      	str	r2, [r4, #16]
 8000f00:	6163      	str	r3, [r4, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 8000f02:	2323      	movs	r3, #35	@ 0x23
 8000f04:	464a      	mov	r2, r9
 8000f06:	54e2      	strb	r2, [r4, r3]
}
 8000f08:	b002      	add	sp, #8
 8000f0a:	bce0      	pop	{r5, r6, r7}
 8000f0c:	46ba      	mov	sl, r7
 8000f0e:	46b1      	mov	r9, r6
 8000f10:	46a8      	mov	r8, r5
 8000f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000f14:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000f16:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f18:	f7ff fe84 	bl	8000c24 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000f1c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f1e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f20:	f7ff feb6 	bl	8000c90 <pyd1598_direct_link_set_negative_edge>
			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000f24:	1e6b      	subs	r3, r5, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d908      	bls.n	8000f3e <pyd1598_dl_readout_fsm+0x136>
				readout_state = PYD1598_READOUT_UPDATE;
 8000f2c:	2602      	movs	r6, #2
				readout_status = READOUT_BUSY;
 8000f2e:	2101      	movs	r1, #1
			time_update_idx++;
 8000f30:	3701      	adds	r7, #1
 8000f32:	b2ff      	uxtb	r7, r7
			if(time_update_idx >= 11)
 8000f34:	2f0a      	cmp	r7, #10
 8000f36:	d839      	bhi.n	8000fac <pyd1598_dl_readout_fsm+0x1a4>
 8000f38:	0035      	movs	r5, r6
 8000f3a:	000e      	movs	r6, r1
 8000f3c:	e7d5      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000f3e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000f40:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f42:	f7ff fe87 	bl	8000c54 <pyd1598_direct_link_set_as_interrupt_input>
				if(op_mode == PYD1598_WAKE_UP)
 8000f46:	2d02      	cmp	r5, #2
 8000f48:	d003      	beq.n	8000f52 <pyd1598_dl_readout_fsm+0x14a>
				time_update_idx = 0;
 8000f4a:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_IDLE;
 8000f4c:	2600      	movs	r6, #0
				readout_status = READOUT_READY;
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e7ee      	b.n	8000f30 <pyd1598_dl_readout_fsm+0x128>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000f52:	46a9      	mov	r9, r5
				time_update_idx = 0;
 8000f54:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_IDLE;
 8000f56:	2600      	movs	r6, #0
				readout_status = READOUT_READY;
 8000f58:	2100      	movs	r1, #0
 8000f5a:	e7e9      	b.n	8000f30 <pyd1598_dl_readout_fsm+0x128>
			if(op_mode == PYD1598_FORCE_READOUT)
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d006      	beq.n	8000f6e <pyd1598_dl_readout_fsm+0x166>
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000f60:	1e6b      	subs	r3, r5, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d908      	bls.n	8000f7a <pyd1598_dl_readout_fsm+0x172>
			readout_state = PYD1598_READOUT_IDLE;
 8000f68:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	e7bd      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000f6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000f70:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f72:	f7ff fe63 	bl	8000c3c <pyd1598_direct_link_set_as_input>
			readout_status = READOUT_READY;
 8000f76:	002e      	movs	r6, r5
 8000f78:	e7b7      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000f7a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8000f7c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000f7e:	f7ff fe69 	bl	8000c54 <pyd1598_direct_link_set_as_interrupt_input>
				if(op_mode == PYD1598_WAKE_UP)
 8000f82:	2d02      	cmp	r5, #2
 8000f84:	d016      	beq.n	8000fb4 <pyd1598_dl_readout_fsm+0x1ac>
			readout_state = PYD1598_READOUT_IDLE;
 8000f86:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8000f88:	2600      	movs	r6, #0
 8000f8a:	e7ae      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
	switch(readout_state)
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	002e      	movs	r6, r5
 8000f90:	e7ab      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000f92:	0035      	movs	r5, r6
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000f94:	000e      	movs	r6, r1
 8000f96:	e7a8      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
				start_fsm = false;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_GET_MSG;
 8000f9c:	2501      	movs	r5, #1
				readout_status = READOUT_BUSY;
 8000f9e:	2601      	movs	r6, #1
 8000fa0:	e7a3      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
 8000fa2:	4656      	mov	r6, sl
				start_fsm = false;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4698      	mov	r8, r3
						readout_state = PYD1598_READOUT_END_COM;
 8000fa8:	2504      	movs	r5, #4
 8000faa:	e79e      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
				time_update_idx = 0;
 8000fac:	2700      	movs	r7, #0
				readout_state = PYD1598_READOUT_END_COM;
 8000fae:	2504      	movs	r5, #4
				readout_status = READOUT_BUSY;
 8000fb0:	2601      	movs	r6, #1
 8000fb2:	e79a      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000fb4:	46a9      	mov	r9, r5
			readout_state = PYD1598_READOUT_IDLE;
 8000fb6:	2500      	movs	r5, #0
			readout_status = READOUT_READY;
 8000fb8:	2600      	movs	r6, #0
 8000fba:	e796      	b.n	8000eea <pyd1598_dl_readout_fsm+0xe2>
 8000fbc:	08003c6c 	.word	0x08003c6c

08000fc0 <relay_ask_off_pulse_fsm>:

uint8_t relay_ask_off_pulse_fsm(relay_t *relay)
{
	uint8_t status = 0;

	if(relay->fsm_run_off == RELAY_RUN_FALSE)
 8000fc0:	2322      	movs	r3, #34	@ 0x22
 8000fc2:	5cc3      	ldrb	r3, [r0, r3]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d001      	beq.n	8000fcc <relay_ask_off_pulse_fsm+0xc>
		relay->fsm_state = RELAY_STATE_IDLE;
		status = 0;
	}

	return status;
}
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4770      	bx	lr
		relay->fsm_run_on = RELAY_RUN_FALSE;
 8000fcc:	3320      	adds	r3, #32
 8000fce:	2201      	movs	r2, #1
 8000fd0:	54c2      	strb	r2, [r0, r3]
		relay->fsm_run_off = RELAY_RUN_TRUE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	3221      	adds	r2, #33	@ 0x21
 8000fd6:	5483      	strb	r3, [r0, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8000fd8:	3201      	adds	r2, #1
 8000fda:	5483      	strb	r3, [r0, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 8000fdc:	3a03      	subs	r2, #3
 8000fde:	5483      	strb	r3, [r0, r2]
		status = 0;
 8000fe0:	e7f2      	b.n	8000fc8 <relay_ask_off_pulse_fsm+0x8>

08000fe2 <relay_ask_on_pulse_fsm>:
{
	uint8_t status = 0;


	//TODO: (high) Test this change (conditional) intensively
	if(relay->fsm_run_on == RELAY_RUN_FALSE)
 8000fe2:	2321      	movs	r3, #33	@ 0x21
 8000fe4:	5cc3      	ldrb	r3, [r0, r3]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <relay_ask_on_pulse_fsm+0xc>
		relay->fsm_run_off = RELAY_RUN_FALSE;
		relay->fsm_init = RELAY_INIT_TRUE;
		relay->fsm_state = RELAY_STATE_IDLE;
	}
	return status;
}
 8000fea:	2000      	movs	r0, #0
 8000fec:	4770      	bx	lr
		relay->fsm_run_on = RELAY_RUN_TRUE;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	2221      	movs	r2, #33	@ 0x21
 8000ff2:	5483      	strb	r3, [r0, r2]
		relay->fsm_run_off = RELAY_RUN_FALSE;
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	5481      	strb	r1, [r0, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8000ffa:	3201      	adds	r2, #1
 8000ffc:	5483      	strb	r3, [r0, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 8000ffe:	3a03      	subs	r2, #3
 8001000:	5483      	strb	r3, [r0, r2]
 8001002:	e7f2      	b.n	8000fea <relay_ask_on_pulse_fsm+0x8>

08001004 <relay_check_init_fsm>:
uint8_t relay_check_init_fsm(relay_t relay, relay_fsm_init_t *init)
{
 8001004:	b084      	sub	sp, #16
 8001006:	9000      	str	r0, [sp, #0]
 8001008:	9101      	str	r1, [sp, #4]
 800100a:	9202      	str	r2, [sp, #8]
 800100c:	9303      	str	r3, [sp, #12]
	*init = relay.fsm_init;
 800100e:	466a      	mov	r2, sp
 8001010:	2323      	movs	r3, #35	@ 0x23
 8001012:	5cd3      	ldrb	r3, [r2, r3]
 8001014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001016:	7013      	strb	r3, [r2, #0]
	return 0;
}
 8001018:	2000      	movs	r0, #0
 800101a:	b004      	add	sp, #16
 800101c:	4770      	bx	lr

0800101e <relay_acknowledge_init_fsm>:

uint8_t relay_acknowledge_init_fsm(relay_t *relay)
{
	relay->fsm_init = RELAY_INIT_FALSE;
 800101e:	2323      	movs	r3, #35	@ 0x23
 8001020:	2201      	movs	r2, #1
 8001022:	54c2      	strb	r2, [r0, r3]
	return 0;
}
 8001024:	2000      	movs	r0, #0
 8001026:	4770      	bx	lr

08001028 <relay_on>:

	return 0;
}

uint8_t relay_on(relay_t *relay)
{
 8001028:	b510      	push	{r4, lr}
 800102a:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 800102c:	8901      	ldrh	r1, [r0, #8]
 800102e:	6840      	ldr	r0, [r0, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f001 fd72 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001036:	8a21      	ldrh	r1, [r4, #16]
 8001038:	68e0      	ldr	r0, [r4, #12]
 800103a:	2201      	movs	r2, #1
 800103c:	f001 fd6d 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_SET);

	relay->relay_status = RELAY_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	7023      	strb	r3, [r4, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_ON;
 8001044:	7063      	strb	r3, [r4, #1]
	return 0;
}
 8001046:	2000      	movs	r0, #0
 8001048:	bd10      	pop	{r4, pc}

0800104a <relay_off>:

uint8_t relay_off(relay_t *relay)
{
 800104a:	b510      	push	{r4, lr}
 800104c:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 800104e:	8901      	ldrh	r1, [r0, #8]
 8001050:	6840      	ldr	r0, [r0, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f001 fd61 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001058:	8a21      	ldrh	r1, [r4, #16]
 800105a:	68e0      	ldr	r0, [r4, #12]
 800105c:	2200      	movs	r2, #0
 800105e:	f001 fd5c 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->relay_status = RELAY_OFF;
 8001062:	2300      	movs	r3, #0
 8001064:	7023      	strb	r3, [r4, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_OFF;
 8001066:	7063      	strb	r3, [r4, #1]
	return 0;
}
 8001068:	2000      	movs	r0, #0
 800106a:	bd10      	pop	{r4, pc}

0800106c <relay_deenergize>:


uint8_t relay_deenergize(relay_t *relay)
{
 800106c:	b510      	push	{r4, lr}
 800106e:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8001070:	8901      	ldrh	r1, [r0, #8]
 8001072:	6840      	ldr	r0, [r0, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	f001 fd50 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 800107a:	8a21      	ldrh	r1, [r4, #16]
 800107c:	68e0      	ldr	r0, [r4, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f001 fd4b 	bl	8002b1a <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->power_status = RELAY_POWER_STATUS_DEENERGIZED;
 8001084:	2302      	movs	r3, #2
 8001086:	7063      	strb	r3, [r4, #1]
	return 0;
}
 8001088:	2000      	movs	r0, #0
 800108a:	bd10      	pop	{r4, pc}

0800108c <relay_setup>:
{
 800108c:	b082      	sub	sp, #8
 800108e:	b530      	push	{r4, r5, lr}
 8001090:	b083      	sub	sp, #12
 8001092:	0004      	movs	r4, r0
 8001094:	4668      	mov	r0, sp
 8001096:	9100      	str	r1, [sp, #0]
 8001098:	6042      	str	r2, [r0, #4]
 800109a:	aa07      	add	r2, sp, #28
 800109c:	9307      	str	r3, [sp, #28]
	relay->hardware_output_1 = hardware_output_1;
 800109e:	1d23      	adds	r3, r4, #4
 80010a0:	c822      	ldmia	r0!, {r1, r5}
 80010a2:	c322      	stmia	r3!, {r1, r5}
	relay->hardware_output_2 = hardware_output_2;
 80010a4:	ca03      	ldmia	r2!, {r0, r1}
 80010a6:	c303      	stmia	r3!, {r0, r1}
	relay_deenergize(relay);
 80010a8:	0020      	movs	r0, r4
 80010aa:	f7ff ffdf 	bl	800106c <relay_deenergize>
	relay->relay_status = RELAY_OFF;
 80010ae:	2300      	movs	r3, #0
 80010b0:	7023      	strb	r3, [r4, #0]
	relay->fsm_run_on = RELAY_RUN_FALSE;
 80010b2:	3301      	adds	r3, #1
 80010b4:	2221      	movs	r2, #33	@ 0x21
 80010b6:	54a3      	strb	r3, [r4, r2]
	relay->fsm_run_off = RELAY_RUN_FALSE;
 80010b8:	3201      	adds	r2, #1
 80010ba:	54a3      	strb	r3, [r4, r2]
	relay->fsm_pulse_counts = 1;
 80010bc:	61a3      	str	r3, [r4, #24]
}
 80010be:	2000      	movs	r0, #0
 80010c0:	b003      	add	sp, #12
 80010c2:	bc30      	pop	{r4, r5}
 80010c4:	bc08      	pop	{r3}
 80010c6:	b002      	add	sp, #8
 80010c8:	4718      	bx	r3

080010ca <relay_pulse_fsm>:
{
 80010ca:	b510      	push	{r4, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	0004      	movs	r4, r0
	volatile relay_fsm_state_t state = relay->fsm_state;
 80010d0:	2320      	movs	r3, #32
 80010d2:	5cc2      	ldrb	r2, [r0, r3]
 80010d4:	3b11      	subs	r3, #17
 80010d6:	446b      	add	r3, sp
 80010d8:	701a      	strb	r2, [r3, #0]
	volatile uint32_t fsm_pulse_counts = relay->fsm_pulse_counts;
 80010da:	6982      	ldr	r2, [r0, #24]
 80010dc:	9202      	str	r2, [sp, #8]
	volatile uint32_t fsm_pulse_idx = relay->fsm_pulse_idx;
 80010de:	69c2      	ldr	r2, [r0, #28]
 80010e0:	9201      	str	r2, [sp, #4]
	volatile relay_fsm_status_t fsm_status = relay->fsm_status;
 80010e2:	7d00      	ldrb	r0, [r0, #20]
 80010e4:	466a      	mov	r2, sp
 80010e6:	70d0      	strb	r0, [r2, #3]
	volatile relay_fsm_init_t fsm_init = relay->fsm_init;
 80010e8:	2223      	movs	r2, #35	@ 0x23
 80010ea:	5ca0      	ldrb	r0, [r4, r2]
 80010ec:	466a      	mov	r2, sp
 80010ee:	7090      	strb	r0, [r2, #2]
	switch(state)
 80010f0:	781a      	ldrb	r2, [r3, #0]
 80010f2:	b2d3      	uxtb	r3, r2
 80010f4:	2a02      	cmp	r2, #2
 80010f6:	d02e      	beq.n	8001156 <relay_pulse_fsm+0x8c>
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d03d      	beq.n	8001178 <relay_pulse_fsm+0xae>
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d011      	beq.n	8001124 <relay_pulse_fsm+0x5a>
	relay->fsm_state = state;
 8001100:	230f      	movs	r3, #15
 8001102:	446b      	add	r3, sp
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	2320      	movs	r3, #32
 8001108:	54e2      	strb	r2, [r4, r3]
	relay->fsm_init = fsm_init;
 800110a:	466b      	mov	r3, sp
 800110c:	789a      	ldrb	r2, [r3, #2]
 800110e:	2323      	movs	r3, #35	@ 0x23
 8001110:	54e2      	strb	r2, [r4, r3]
	relay->fsm_pulse_idx = fsm_pulse_idx;
 8001112:	9b01      	ldr	r3, [sp, #4]
 8001114:	61e3      	str	r3, [r4, #28]
	relay->fsm_status = fsm_status;
 8001116:	466b      	mov	r3, sp
 8001118:	3303      	adds	r3, #3
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	7523      	strb	r3, [r4, #20]
}
 800111e:	2000      	movs	r0, #0
 8001120:	b004      	add	sp, #16
 8001122:	bd10      	pop	{r4, pc}
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8001124:	466b      	mov	r3, sp
 8001126:	2201      	movs	r2, #1
 8001128:	70da      	strb	r2, [r3, #3]
			if(new_status == RELAY_ON)
 800112a:	2901      	cmp	r1, #1
 800112c:	d00a      	beq.n	8001144 <relay_pulse_fsm+0x7a>
				relay_off(relay);
 800112e:	0020      	movs	r0, r4
 8001130:	f7ff ff8b 	bl	800104a <relay_off>
			if(fsm_pulse_counts == 0)
 8001134:	9b02      	ldr	r3, [sp, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d108      	bne.n	800114c <relay_pulse_fsm+0x82>
				state = RELAY_STATE_DEENERGIZING;
 800113a:	330f      	adds	r3, #15
 800113c:	446b      	add	r3, sp
 800113e:	2203      	movs	r2, #3
 8001140:	701a      	strb	r2, [r3, #0]
 8001142:	e7dd      	b.n	8001100 <relay_pulse_fsm+0x36>
				relay_on(relay);
 8001144:	0020      	movs	r0, r4
 8001146:	f7ff ff6f 	bl	8001028 <relay_on>
 800114a:	e7f3      	b.n	8001134 <relay_pulse_fsm+0x6a>
				state = RELAY_STATE_WAIT;
 800114c:	230f      	movs	r3, #15
 800114e:	446b      	add	r3, sp
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
 8001154:	e7d4      	b.n	8001100 <relay_pulse_fsm+0x36>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8001156:	466b      	mov	r3, sp
 8001158:	2201      	movs	r2, #1
 800115a:	70da      	strb	r2, [r3, #3]
			fsm_pulse_idx++;
 800115c:	9b01      	ldr	r3, [sp, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8001162:	9a01      	ldr	r2, [sp, #4]
 8001164:	9b02      	ldr	r3, [sp, #8]
 8001166:	429a      	cmp	r2, r3
 8001168:	d9ca      	bls.n	8001100 <relay_pulse_fsm+0x36>
				state = RELAY_STATE_DEENERGIZING;
 800116a:	230f      	movs	r3, #15
 800116c:	446b      	add	r3, sp
 800116e:	2203      	movs	r2, #3
 8001170:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	e7c3      	b.n	8001100 <relay_pulse_fsm+0x36>
			relay_deenergize(relay);
 8001178:	0020      	movs	r0, r4
 800117a:	f7ff ff77 	bl	800106c <relay_deenergize>
			fsm_status = RELAY_STATE_STATUS_READY;
 800117e:	2300      	movs	r3, #0
 8001180:	466a      	mov	r2, sp
 8001182:	70d3      	strb	r3, [r2, #3]
			state = RELAY_STATE_IDLE;
 8001184:	220f      	movs	r2, #15
 8001186:	446a      	add	r2, sp
 8001188:	7013      	strb	r3, [r2, #0]
			break;
 800118a:	e7b9      	b.n	8001100 <relay_pulse_fsm+0x36>

0800118c <relay_on_pulse_fsm>:
{
 800118c:	b510      	push	{r4, lr}
 800118e:	0004      	movs	r4, r0
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001190:	2321      	movs	r3, #33	@ 0x21
 8001192:	5cc3      	ldrb	r3, [r0, r3]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d103      	bne.n	80011a0 <relay_on_pulse_fsm+0x14>
		(relay->fsm_run_off != RELAY_RUN_TRUE) )
 8001198:	3322      	adds	r3, #34	@ 0x22
 800119a:	5cc3      	ldrb	r3, [r0, r3]
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <relay_on_pulse_fsm+0x18>
}
 80011a0:	2000      	movs	r0, #0
 80011a2:	bd10      	pop	{r4, pc}
		relay_pulse_fsm(relay, RELAY_ON);
 80011a4:	2101      	movs	r1, #1
 80011a6:	f7ff ff90 	bl	80010ca <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 80011aa:	7d23      	ldrb	r3, [r4, #20]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f7      	bne.n	80011a0 <relay_on_pulse_fsm+0x14>
			relay->fsm_run_on = RELAY_RUN_FALSE;
 80011b0:	3321      	adds	r3, #33	@ 0x21
 80011b2:	2201      	movs	r2, #1
 80011b4:	54e2      	strb	r2, [r4, r3]
 80011b6:	e7f3      	b.n	80011a0 <relay_on_pulse_fsm+0x14>

080011b8 <relay_off_pulse_fsm>:
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	0004      	movs	r4, r0
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 80011bc:	2322      	movs	r3, #34	@ 0x22
 80011be:	5cc3      	ldrb	r3, [r0, r3]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d103      	bne.n	80011cc <relay_off_pulse_fsm+0x14>
			(relay->fsm_run_on != RELAY_RUN_TRUE) )
 80011c4:	3321      	adds	r3, #33	@ 0x21
 80011c6:	5cc3      	ldrb	r3, [r0, r3]
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <relay_off_pulse_fsm+0x18>
}
 80011cc:	2000      	movs	r0, #0
 80011ce:	bd10      	pop	{r4, pc}
		relay_pulse_fsm(relay, RELAY_OFF);
 80011d0:	2100      	movs	r1, #0
 80011d2:	f7ff ff7a 	bl	80010ca <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 80011d6:	7d23      	ldrb	r3, [r4, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f7      	bne.n	80011cc <relay_off_pulse_fsm+0x14>
			relay->fsm_run_off = RELAY_RUN_FALSE;
 80011dc:	3322      	adds	r3, #34	@ 0x22
 80011de:	2201      	movs	r2, #1
 80011e0:	54e2      	strb	r2, [r4, r3]
 80011e2:	e7f3      	b.n	80011cc <relay_off_pulse_fsm+0x14>

080011e4 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	46c6      	mov	lr, r8
 80011e8:	b500      	push	{lr}
 80011ea:	0004      	movs	r4, r0
 80011ec:	0017      	movs	r7, r2
 80011ee:	001e      	movs	r6, r3
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;

	switch_mask <<= pin;
 80011f0:	2301      	movs	r3, #1
 80011f2:	408b      	lsls	r3, r1
 80011f4:	4698      	mov	r8, r3

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 80011f6:	6800      	ldr	r0, [r0, #0]
 80011f8:	00cd      	lsls	r5, r1, #3
 80011fa:	1941      	adds	r1, r0, r5
 80011fc:	6808      	ldr	r0, [r1, #0]
 80011fe:	8889      	ldrh	r1, [r1, #4]
 8001200:	f001 fc84 	bl	8002b0c <HAL_GPIO_ReadPin>
							(switch_selector->switch_selector_gpio + pin)->pin);

	if(pin_value == GPIO_PIN_SET)
 8001204:	2801      	cmp	r0, #1
 8001206:	d011      	beq.n	800122c <switch_selector_read_bit+0x48>

		switch_selector->value |= switch_mask;
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	195b      	adds	r3, r3, r5
 800120c:	2200      	movs	r2, #0
 800120e:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 8001210:	68a3      	ldr	r3, [r4, #8]
 8001212:	4642      	mov	r2, r8
 8001214:	4393      	bics	r3, r2
 8001216:	60a3      	str	r3, [r4, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	195b      	adds	r3, r3, r5
 800121c:	799b      	ldrb	r3, [r3, #6]
 800121e:	703b      	strb	r3, [r7, #0]

	*value = switch_selector->value;
 8001220:	68a3      	ldr	r3, [r4, #8]
 8001222:	6033      	str	r3, [r6, #0]

	return 0;
}
 8001224:	2000      	movs	r0, #0
 8001226:	bc80      	pop	{r7}
 8001228:	46b8      	mov	r8, r7
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	195b      	adds	r3, r3, r5
 8001230:	2201      	movs	r2, #1
 8001232:	719a      	strb	r2, [r3, #6]
		switch_selector->value |= switch_mask;
 8001234:	68a3      	ldr	r3, [r4, #8]
 8001236:	4642      	mov	r2, r8
 8001238:	4313      	orrs	r3, r2
 800123a:	60a3      	str	r3, [r4, #8]
 800123c:	e7ec      	b.n	8001218 <switch_selector_read_bit+0x34>

0800123e <switch_selector_setup>:
{
 800123e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001240:	46c6      	mov	lr, r8
 8001242:	b500      	push	{lr}
 8001244:	b082      	sub	sp, #8
 8001246:	0006      	movs	r6, r0
 8001248:	4688      	mov	r8, r1
 800124a:	0017      	movs	r7, r2
	if(switch_size > 32)
 800124c:	2a20      	cmp	r2, #32
 800124e:	d81e      	bhi.n	800128e <switch_selector_setup+0x50>
	switch_selector->value = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	6083      	str	r3, [r0, #8]
	switch_selector->switch_size = switch_size;
 8001254:	7102      	strb	r2, [r0, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 8001256:	00d0      	lsls	r0, r2, #3
 8001258:	f002 fbc0 	bl	80039dc <malloc>
 800125c:	6030      	str	r0, [r6, #0]
	for(idx = 0; idx < switch_size; idx++)
 800125e:	2400      	movs	r4, #0
 8001260:	42bc      	cmp	r4, r7
 8001262:	d212      	bcs.n	800128a <switch_selector_setup+0x4c>
		if((switch_selector_gpio + idx) != NULL)
 8001264:	00e2      	lsls	r2, r4, #3
 8001266:	4643      	mov	r3, r8
 8001268:	189b      	adds	r3, r3, r2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d014      	beq.n	8001298 <switch_selector_setup+0x5a>
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 800126e:	6835      	ldr	r5, [r6, #0]
 8001270:	18ad      	adds	r5, r5, r2
 8001272:	cb03      	ldmia	r3!, {r0, r1}
 8001274:	c503      	stmia	r5!, {r0, r1}
		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8001276:	ab01      	add	r3, sp, #4
 8001278:	466a      	mov	r2, sp
 800127a:	3203      	adds	r2, #3
 800127c:	0021      	movs	r1, r4
 800127e:	0030      	movs	r0, r6
 8001280:	f7ff ffb0 	bl	80011e4 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8001284:	3401      	adds	r4, #1
 8001286:	b2e4      	uxtb	r4, r4
 8001288:	e7ea      	b.n	8001260 <switch_selector_setup+0x22>
 800128a:	2000      	movs	r0, #0
 800128c:	e000      	b.n	8001290 <switch_selector_setup+0x52>
		return 2;
 800128e:	2002      	movs	r0, #2
}
 8001290:	b002      	add	sp, #8
 8001292:	bc80      	pop	{r7}
 8001294:	46b8      	mov	r8, r7
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
			status = 1;
 8001298:	2001      	movs	r0, #1
 800129a:	e7f9      	b.n	8001290 <switch_selector_setup+0x52>

0800129c <nutone_setup>:

void nutone_setup(nutone_t *exhaust_fan, nutone_relay_handler_t *lights,
											nutone_relay_handler_t *fan,
											deadline_timer_t *ctrl_timer,
											deadline_timer_t *vyv_timeoff)
{
 800129c:	b530      	push	{r4, r5, lr}
 800129e:	b08b      	sub	sp, #44	@ 0x2c
 80012a0:	0004      	movs	r4, r0
 80012a2:	001d      	movs	r5, r3

	timer_clock_t deadline;


	exhaust_fan->lights = lights;
 80012a4:	6001      	str	r1, [r0, #0]
	exhaust_fan->fan = fan;
 80012a6:	6042      	str	r2, [r0, #4]

	exhaust_fan->ctrl_timer = ctrl_timer;
 80012a8:	6083      	str	r3, [r0, #8]
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <nutone_setup+0x58>)
 80012ac:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 80012ae:	2210      	movs	r2, #16
 80012b0:	a906      	add	r1, sp, #24
 80012b2:	4668      	mov	r0, sp
 80012b4:	f002 fc94 	bl	8003be0 <memcpy>
 80012b8:	9a04      	ldr	r2, [sp, #16]
 80012ba:	9b05      	ldr	r3, [sp, #20]
 80012bc:	0028      	movs	r0, r5
 80012be:	f000 f9db 	bl	8001678 <deadline_timer_setup>
//	exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;

	exhaust_fan->vyv_timeoff = vyv_timeoff;
 80012c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80012c4:	60e3      	str	r3, [r4, #12]
	deadline.msec = NUTONE_VYV_TIMEOUT;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <nutone_setup+0x5c>)
 80012c8:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 80012ca:	2210      	movs	r2, #16
 80012cc:	a906      	add	r1, sp, #24
 80012ce:	4668      	mov	r0, sp
 80012d0:	f002 fc86 	bl	8003be0 <memcpy>
 80012d4:	9a04      	ldr	r2, [sp, #16]
 80012d6:	9b05      	ldr	r3, [sp, #20]
 80012d8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012da:	f000 f9cd 	bl	8001678 <deadline_timer_setup>
//	exhaust_fan->vyv_timeoff->deadline.msec = NUTONE_VYV_TIMEOUT;



	exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 80012de:	2302      	movs	r3, #2
 80012e0:	75e3      	strb	r3, [r4, #23]
	exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75a3      	strb	r3, [r4, #22]

	exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 80012e6:	2203      	movs	r2, #3
 80012e8:	7562      	strb	r2, [r4, #21]
	exhaust_fan->light_on_pulses_idx = 0;
 80012ea:	7523      	strb	r3, [r4, #20]

	exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80012ec:	74e3      	strb	r3, [r4, #19]
	exhaust_fan->command = NUTONE_CMD_NONE;
 80012ee:	74a3      	strb	r3, [r4, #18]


}
 80012f0:	b00b      	add	sp, #44	@ 0x2c
 80012f2:	bd30      	pop	{r4, r5, pc}
 80012f4:	000009c4 	.word	0x000009c4
 80012f8:	00002710 	.word	0x00002710

080012fc <nutone_set_command>:

}

uint8_t nutone_set_command(nutone_t *exhaust_fan, nutone_command_e command)
{
	exhaust_fan->command = command;
 80012fc:	7481      	strb	r1, [r0, #18]
	return 0;
}
 80012fe:	2000      	movs	r0, #0
 8001300:	4770      	bx	lr
	...

08001304 <nutone_select_state>:


//#define NO_MEMORY

uint8_t nutone_select_state(nutone_t *exhaust_fan)
{
 8001304:	0003      	movs	r3, r0
	if(exhaust_fan->cmd_state != NUTONE_CMD_STE_READY)
 8001306:	7cc0      	ldrb	r0, [r0, #19]
 8001308:	2800      	cmp	r0, #0
 800130a:	d12f      	bne.n	800136c <nutone_select_state+0x68>
	{
		return 1;
	}
	switch(exhaust_fan->command)
 800130c:	7c9a      	ldrb	r2, [r3, #18]
 800130e:	2a06      	cmp	r2, #6
 8001310:	d82d      	bhi.n	800136e <nutone_select_state+0x6a>
 8001312:	0092      	lsls	r2, r2, #2
 8001314:	4916      	ldr	r1, [pc, #88]	@ (8001370 <nutone_select_state+0x6c>)
 8001316:	588a      	ldr	r2, [r1, r2]
 8001318:	4697      	mov	pc, r2
	{
		case NUTONE_CMD_FAN_TURN_ON:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_ON;
 800131a:	2201      	movs	r2, #1
 800131c:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 800131e:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8001320:	2200      	movs	r2, #0
 8001322:	749a      	strb	r2, [r3, #18]
			break;
 8001324:	e023      	b.n	800136e <nutone_select_state+0x6a>
		case NUTONE_CMD_FAN_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_OFF;
 8001326:	2203      	movs	r2, #3
 8001328:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 800132a:	3a02      	subs	r2, #2
 800132c:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800132e:	2200      	movs	r2, #0
 8001330:	749a      	strb	r2, [r3, #18]
			break;
 8001332:	e01c      	b.n	800136e <nutone_select_state+0x6a>
		case NUTONE_CMD_WHITE_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_L_SET_ON;
 8001334:	220d      	movs	r2, #13
 8001336:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8001338:	3a0c      	subs	r2, #12
 800133a:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800133c:	2200      	movs	r2, #0
 800133e:	749a      	strb	r2, [r3, #18]
			break;
 8001340:	e015      	b.n	800136e <nutone_select_state+0x6a>
		case NUTONE_CMD_WHITE_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 8001342:	220f      	movs	r2, #15
 8001344:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8001346:	3a0e      	subs	r2, #14
 8001348:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800134a:	2200      	movs	r2, #0
 800134c:	749a      	strb	r2, [r3, #18]
			break;
 800134e:	e00e      	b.n	800136e <nutone_select_state+0x6a>
		case NUTONE_CMD_VYV_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_L_SET_ON;
 8001350:	220e      	movs	r2, #14
 8001352:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8001354:	3a0d      	subs	r2, #13
 8001356:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8001358:	2200      	movs	r2, #0
 800135a:	749a      	strb	r2, [r3, #18]
			break;
 800135c:	e007      	b.n	800136e <nutone_select_state+0x6a>
		case NUTONE_CMD_VYV_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 800135e:	220f      	movs	r2, #15
 8001360:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8001362:	3a0e      	subs	r2, #14
 8001364:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8001366:	2200      	movs	r2, #0
 8001368:	749a      	strb	r2, [r3, #18]
			break;
 800136a:	e000      	b.n	800136e <nutone_select_state+0x6a>
		return 1;
 800136c:	2001      	movs	r0, #1
			break;
	}


	return 0;
}
 800136e:	4770      	bx	lr
 8001370:	08003c80 	.word	0x08003c80

08001374 <nutone_fsm>:
{
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	0004      	movs	r4, r0
	deadline_timer_expired_t is_expired = TIMER_EXPIRED_FALSE;
 800137a:	2300      	movs	r3, #0
 800137c:	466a      	mov	r2, sp
 800137e:	71d3      	strb	r3, [r2, #7]
	deadline_timer_expired_t is_expired_vyv = TIMER_EXPIRED_FALSE;
 8001380:	466a      	mov	r2, sp
 8001382:	7193      	strb	r3, [r2, #6]
	switch(exhaust_fan->fsm_state)
 8001384:	7c03      	ldrb	r3, [r0, #16]
 8001386:	2b11      	cmp	r3, #17
 8001388:	d805      	bhi.n	8001396 <nutone_fsm+0x22>
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4aa8      	ldr	r2, [pc, #672]	@ (8001630 <nutone_fsm+0x2bc>)
 800138e:	58d3      	ldr	r3, [r2, r3]
 8001390:	469f      	mov	pc, r3
			nutone_select_state(exhaust_fan);
 8001392:	f7ff ffb7 	bl	8001304 <nutone_select_state>
}
 8001396:	2000      	movs	r0, #0
 8001398:	b002      	add	sp, #8
 800139a:	bd70      	pop	{r4, r5, r6, pc}
			relay_ask_on_pulse_fsm(exhaust_fan->fan->relay);
 800139c:	6843      	ldr	r3, [r0, #4]
 800139e:	6818      	ldr	r0, [r3, #0]
 80013a0:	f7ff fe1f 	bl	8000fe2 <relay_ask_on_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	7423      	strb	r3, [r4, #16]
			break;
 80013a8:	e7f5      	b.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->fan->relay->fsm_run_on == RELAY_RUN_FALSE)
 80013aa:	6843      	ldr	r3, [r0, #4]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	2321      	movs	r3, #33	@ 0x21
 80013b0:	5cd3      	ldrb	r3, [r2, r3]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d1ef      	bne.n	8001396 <nutone_fsm+0x22>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80013b6:	2300      	movs	r3, #0
 80013b8:	74c3      	strb	r3, [r0, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80013ba:	7403      	strb	r3, [r0, #16]
 80013bc:	e7eb      	b.n	8001396 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->fan->relay);
 80013be:	6843      	ldr	r3, [r0, #4]
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7ff fdfd 	bl	8000fc0 <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_OFF;
 80013c6:	2304      	movs	r3, #4
 80013c8:	7423      	strb	r3, [r4, #16]
			break;
 80013ca:	e7e4      	b.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->fan->relay->fsm_run_off == RELAY_RUN_FALSE)
 80013cc:	6843      	ldr	r3, [r0, #4]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2322      	movs	r3, #34	@ 0x22
 80013d2:	5cd3      	ldrb	r3, [r2, r3]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d1de      	bne.n	8001396 <nutone_fsm+0x22>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80013d8:	2300      	movs	r3, #0
 80013da:	74c3      	strb	r3, [r0, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80013dc:	7403      	strb	r3, [r0, #16]
 80013de:	e7da      	b.n	8001396 <nutone_fsm+0x22>
			exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 80013e0:	2303      	movs	r3, #3
 80013e2:	7543      	strb	r3, [r0, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	7503      	strb	r3, [r0, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80013e8:	6880      	ldr	r0, [r0, #8]
 80013ea:	f000 f92a 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 80013f2:	3301      	adds	r3, #1
 80013f4:	75e3      	strb	r3, [r4, #23]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 80013f6:	68a3      	ldr	r3, [r4, #8]
 80013f8:	4a8e      	ldr	r2, [pc, #568]	@ (8001634 <nutone_fsm+0x2c0>)
 80013fa:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 80013fc:	2306      	movs	r3, #6
 80013fe:	7423      	strb	r3, [r4, #16]
			break;
 8001400:	e7c9      	b.n	8001396 <nutone_fsm+0x22>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 8001402:	6803      	ldr	r3, [r0, #0]
 8001404:	6818      	ldr	r0, [r3, #0]
 8001406:	f7ff fdec 	bl	8000fe2 <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800140a:	68a0      	ldr	r0, [r4, #8]
 800140c:	f000 f919 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 8001410:	2308      	movs	r3, #8
 8001412:	7423      	strb	r3, [r4, #16]
			break;
 8001414:	e7bf      	b.n	8001396 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8001416:	6803      	ldr	r3, [r0, #0]
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f7ff fdd1 	bl	8000fc0 <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800141e:	68a0      	ldr	r0, [r4, #8]
 8001420:	f000 f90f 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 8001424:	2308      	movs	r3, #8
 8001426:	7423      	strb	r3, [r4, #16]
			break;
 8001428:	e7b5      	b.n	8001396 <nutone_fsm+0x22>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired);
 800142a:	466b      	mov	r3, sp
 800142c:	1ddd      	adds	r5, r3, #7
 800142e:	6880      	ldr	r0, [r0, #8]
 8001430:	0029      	movs	r1, r5
 8001432:	f000 f977 	bl	8001724 <deadline_timer_check>
			if(is_expired != TIMER_EXPIRED_TRUE)
 8001436:	782b      	ldrb	r3, [r5, #0]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d1ac      	bne.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 800143c:	6823      	ldr	r3, [r4, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	2a01      	cmp	r2, #1
 8001444:	d006      	beq.n	8001454 <nutone_fsm+0xe0>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001446:	2222      	movs	r2, #34	@ 0x22
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d1a3      	bne.n	8001396 <nutone_fsm+0x22>
					exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 800144e:	3305      	adds	r3, #5
 8001450:	7423      	strb	r3, [r4, #16]
 8001452:	e7a0      	b.n	8001396 <nutone_fsm+0x22>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 8001454:	3220      	adds	r2, #32
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d19c      	bne.n	8001396 <nutone_fsm+0x22>
					if((exhaust_fan->light_on_pulses_idx) >=
 800145c:	7d23      	ldrb	r3, [r4, #20]
												exhaust_fan->light_on_pulses)
 800145e:	7d62      	ldrb	r2, [r4, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 8001460:	4293      	cmp	r3, r2
 8001462:	d305      	bcc.n	8001470 <nutone_fsm+0xfc>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001464:	2200      	movs	r2, #0
 8001466:	74e2      	strb	r2, [r4, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001468:	7422      	strb	r2, [r4, #16]
					exhaust_fan->light_on_pulses_idx++;
 800146a:	3301      	adds	r3, #1
 800146c:	7523      	strb	r3, [r4, #20]
 800146e:	e792      	b.n	8001396 <nutone_fsm+0x22>
						exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001470:	2207      	movs	r2, #7
 8001472:	7422      	strb	r2, [r4, #16]
 8001474:	e7f9      	b.n	800146a <nutone_fsm+0xf6>
			exhaust_fan->light_on_pulses = NUTONE_VYV_ON_PULSES;
 8001476:	2502      	movs	r5, #2
 8001478:	7545      	strb	r5, [r0, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 800147a:	2600      	movs	r6, #0
 800147c:	7506      	strb	r6, [r0, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800147e:	6880      	ldr	r0, [r0, #8]
 8001480:	f000 f8df 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001484:	75a6      	strb	r6, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001486:	75e5      	strb	r5, [r4, #23]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8001488:	68a3      	ldr	r3, [r4, #8]
 800148a:	4a6a      	ldr	r2, [pc, #424]	@ (8001634 <nutone_fsm+0x2c0>)
 800148c:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 800148e:	230b      	movs	r3, #11
 8001490:	7423      	strb	r3, [r4, #16]
			break;
 8001492:	e780      	b.n	8001396 <nutone_fsm+0x22>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 8001494:	6803      	ldr	r3, [r0, #0]
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f7ff fda3 	bl	8000fe2 <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800149c:	68a0      	ldr	r0, [r4, #8]
 800149e:	f000 f8d0 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 80014a2:	230c      	movs	r3, #12
 80014a4:	7423      	strb	r3, [r4, #16]
			break;
 80014a6:	e776      	b.n	8001396 <nutone_fsm+0x22>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 80014a8:	6803      	ldr	r3, [r0, #0]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f7ff fd88 	bl	8000fc0 <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80014b0:	68a0      	ldr	r0, [r4, #8]
 80014b2:	f000 f8c6 	bl	8001642 <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 80014b6:	230c      	movs	r3, #12
 80014b8:	7423      	strb	r3, [r4, #16]
			break;
 80014ba:	e76c      	b.n	8001396 <nutone_fsm+0x22>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired_vyv);
 80014bc:	466b      	mov	r3, sp
 80014be:	1d9d      	adds	r5, r3, #6
 80014c0:	6880      	ldr	r0, [r0, #8]
 80014c2:	0029      	movs	r1, r5
 80014c4:	f000 f92e 	bl	8001724 <deadline_timer_check>
			if(is_expired_vyv != TIMER_EXPIRED_TRUE)
 80014c8:	782b      	ldrb	r3, [r5, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d000      	beq.n	80014d0 <nutone_fsm+0x15c>
 80014ce:	e762      	b.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 80014d0:	6823      	ldr	r3, [r4, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	781a      	ldrb	r2, [r3, #0]
 80014d6:	2a01      	cmp	r2, #1
 80014d8:	d007      	beq.n	80014ea <nutone_fsm+0x176>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 80014da:	2222      	movs	r2, #34	@ 0x22
 80014dc:	5c9b      	ldrb	r3, [r3, r2]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d000      	beq.n	80014e4 <nutone_fsm+0x170>
 80014e2:	e758      	b.n	8001396 <nutone_fsm+0x22>
					exhaust_fan->fsm_state = NUTONE_STE_VYV_ON;
 80014e4:	3309      	adds	r3, #9
 80014e6:	7423      	strb	r3, [r4, #16]
 80014e8:	e755      	b.n	8001396 <nutone_fsm+0x22>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 80014ea:	3220      	adds	r2, #32
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d000      	beq.n	80014f4 <nutone_fsm+0x180>
 80014f2:	e750      	b.n	8001396 <nutone_fsm+0x22>
					if((exhaust_fan->light_on_pulses_idx) >=
 80014f4:	7d22      	ldrb	r2, [r4, #20]
												exhaust_fan->light_on_pulses)
 80014f6:	7d63      	ldrb	r3, [r4, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d307      	bcc.n	800150c <nutone_fsm+0x198>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80014fc:	2300      	movs	r3, #0
 80014fe:	74e3      	strb	r3, [r4, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001500:	7423      	strb	r3, [r4, #16]
						exhaust_fan->light_on_pulses_idx = 0;
 8001502:	7523      	strb	r3, [r4, #20]
					exhaust_fan->light_on_pulses_idx++;
 8001504:	7d23      	ldrb	r3, [r4, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	7523      	strb	r3, [r4, #20]
 800150a:	e744      	b.n	8001396 <nutone_fsm+0x22>
						exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 800150c:	230b      	movs	r3, #11
 800150e:	7423      	strb	r3, [r4, #16]
 8001510:	e7f8      	b.n	8001504 <nutone_fsm+0x190>
			exhaust_fan->ctrl_timer->deadline.msec =
 8001512:	6883      	ldr	r3, [r0, #8]
 8001514:	4a47      	ldr	r2, [pc, #284]	@ (8001634 <nutone_fsm+0x2c0>)
 8001516:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	7503      	strb	r3, [r0, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 800151c:	7d83      	ldrb	r3, [r0, #22]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d005      	beq.n	800152e <nutone_fsm+0x1ba>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <nutone_fsm+0x1ca>
				exhaust_fan->light_on_pulses = 0;
 8001526:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001528:	3307      	adds	r3, #7
 800152a:	7403      	strb	r3, [r0, #16]
 800152c:	e002      	b.n	8001534 <nutone_fsm+0x1c0>
				exhaust_fan->light_on_pulses = 1;
 800152e:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001530:	3306      	adds	r3, #6
 8001532:	7403      	strb	r3, [r0, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8001534:	2301      	movs	r3, #1
 8001536:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001538:	3301      	adds	r3, #1
 800153a:	75e3      	strb	r3, [r4, #23]
			break;
 800153c:	e72b      	b.n	8001396 <nutone_fsm+0x22>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 800153e:	7dc3      	ldrb	r3, [r0, #23]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d104      	bne.n	800154e <nutone_fsm+0x1da>
					exhaust_fan->light_on_pulses = 1;
 8001544:	3301      	adds	r3, #1
 8001546:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8001548:	2306      	movs	r3, #6
 800154a:	7423      	strb	r3, [r4, #16]
 800154c:	e7f2      	b.n	8001534 <nutone_fsm+0x1c0>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 800154e:	2b01      	cmp	r3, #1
 8001550:	d1fa      	bne.n	8001548 <nutone_fsm+0x1d4>
					exhaust_fan->light_on_pulses = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	7543      	strb	r3, [r0, #21]
 8001556:	e7f7      	b.n	8001548 <nutone_fsm+0x1d4>
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8001558:	6883      	ldr	r3, [r0, #8]
 800155a:	4a36      	ldr	r2, [pc, #216]	@ (8001634 <nutone_fsm+0x2c0>)
 800155c:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	7503      	strb	r3, [r0, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001562:	7d83      	ldrb	r3, [r0, #22]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d006      	beq.n	8001576 <nutone_fsm+0x202>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10d      	bne.n	8001588 <nutone_fsm+0x214>
				exhaust_fan->light_on_pulses = 1;
 800156c:	3301      	adds	r3, #1
 800156e:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001570:	3306      	adds	r3, #6
 8001572:	7403      	strb	r3, [r0, #16]
 8001574:	e003      	b.n	800157e <nutone_fsm+0x20a>
				exhaust_fan->light_on_pulses = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 800157a:	3307      	adds	r3, #7
 800157c:	7403      	strb	r3, [r0, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 800157e:	2300      	movs	r3, #0
 8001580:	75a3      	strb	r3, [r4, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001582:	3302      	adds	r3, #2
 8001584:	75e3      	strb	r3, [r4, #23]
			break;
 8001586:	e706      	b.n	8001396 <nutone_fsm+0x22>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001588:	7dc3      	ldrb	r3, [r0, #23]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <nutone_fsm+0x222>
					exhaust_fan->light_on_pulses = 0;
 800158e:	7543      	strb	r3, [r0, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8001590:	2306      	movs	r3, #6
 8001592:	7423      	strb	r3, [r4, #16]
 8001594:	e7f3      	b.n	800157e <nutone_fsm+0x20a>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001596:	2b01      	cmp	r3, #1
 8001598:	d1fa      	bne.n	8001590 <nutone_fsm+0x21c>
					exhaust_fan->light_on_pulses = 1;
 800159a:	7543      	strb	r3, [r0, #21]
 800159c:	e7f8      	b.n	8001590 <nutone_fsm+0x21c>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	6818      	ldr	r0, [r3, #0]
 80015a2:	f7ff fd0d 	bl	8000fc0 <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNING_OFF;
 80015a6:	2310      	movs	r3, #16
 80015a8:	7423      	strb	r3, [r4, #16]
			break;
 80015aa:	e6f4      	b.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 80015ac:	6803      	ldr	r3, [r0, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2322      	movs	r3, #34	@ 0x22
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d000      	beq.n	80015ba <nutone_fsm+0x246>
 80015b8:	e6ed      	b.n	8001396 <nutone_fsm+0x22>
				deadline_timer_set_initial_time(exhaust_fan->vyv_timeoff);
 80015ba:	68c0      	ldr	r0, [r0, #12]
 80015bc:	f000 f841 	bl	8001642 <deadline_timer_set_initial_time>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80015c0:	2300      	movs	r3, #0
 80015c2:	74e3      	strb	r3, [r4, #19]
				exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNED_OFF;
 80015c4:	3311      	adds	r3, #17
 80015c6:	7423      	strb	r3, [r4, #16]
 80015c8:	e6e5      	b.n	8001396 <nutone_fsm+0x22>
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 80015ca:	7d83      	ldrb	r3, [r0, #22]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d107      	bne.n	80015e0 <nutone_fsm+0x26c>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80015d0:	3302      	adds	r3, #2
 80015d2:	7583      	strb	r3, [r0, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 80015d4:	3b01      	subs	r3, #1
 80015d6:	75c3      	strb	r3, [r0, #23]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	7403      	strb	r3, [r0, #16]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80015dc:	74c3      	strb	r3, [r0, #19]
 80015de:	e6da      	b.n	8001396 <nutone_fsm+0x22>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d105      	bne.n	80015f0 <nutone_fsm+0x27c>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80015e4:	3301      	adds	r3, #1
 80015e6:	7583      	strb	r3, [r0, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_VYV;
 80015e8:	2300      	movs	r3, #0
 80015ea:	75c3      	strb	r3, [r0, #23]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80015ec:	74c3      	strb	r3, [r0, #19]
 80015ee:	e6d2      	b.n	8001396 <nutone_fsm+0x22>
				nutone_select_state(exhaust_fan);
 80015f0:	f7ff fe88 	bl	8001304 <nutone_select_state>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 80015f4:	7de3      	ldrb	r3, [r4, #23]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <nutone_fsm+0x28e>
					exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80015fa:	2300      	movs	r3, #0
 80015fc:	74e3      	strb	r3, [r4, #19]
					exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80015fe:	7423      	strb	r3, [r4, #16]
 8001600:	e6c9      	b.n	8001396 <nutone_fsm+0x22>
					deadline_timer_check(exhaust_fan->vyv_timeoff,
 8001602:	466b      	mov	r3, sp
 8001604:	1d5d      	adds	r5, r3, #5
 8001606:	68e0      	ldr	r0, [r4, #12]
 8001608:	0029      	movs	r1, r5
 800160a:	f000 f88b 	bl	8001724 <deadline_timer_check>
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 800160e:	782b      	ldrb	r3, [r5, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d000      	beq.n	8001616 <nutone_fsm+0x2a2>
 8001614:	e6bf      	b.n	8001396 <nutone_fsm+0x22>
						(exhaust_fan->cmd_state == NUTONE_CMD_STE_READY))
 8001616:	7ce3      	ldrb	r3, [r4, #19]
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 8001618:	2b00      	cmp	r3, #0
 800161a:	d000      	beq.n	800161e <nutone_fsm+0x2aa>
 800161c:	e6bb      	b.n	8001396 <nutone_fsm+0x22>
						exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 800161e:	3302      	adds	r3, #2
 8001620:	75a3      	strb	r3, [r4, #22]
						exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8001622:	3b01      	subs	r3, #1
 8001624:	75e3      	strb	r3, [r4, #23]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8001626:	2300      	movs	r3, #0
 8001628:	7423      	strb	r3, [r4, #16]
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800162a:	74e3      	strb	r3, [r4, #19]
 800162c:	e6b3      	b.n	8001396 <nutone_fsm+0x22>
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	08003c9c 	.word	0x08003c9c
 8001634:	000009c4 	.word	0x000009c4

08001638 <deadline_timer_force_expiration>:
}


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 8001638:	2360      	movs	r3, #96	@ 0x60
 800163a:	2201      	movs	r2, #1
 800163c:	54c2      	strb	r2, [r0, r3]
	return 0;
}
 800163e:	2000      	movs	r0, #0
 8001640:	4770      	bx	lr

08001642 <deadline_timer_set_initial_time>:

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
	//memcpy fails after several assignations.
	//copy uint32_t variables directly to avoid a race condition
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 8001642:	6802      	ldr	r2, [r0, #0]
 8001644:	6843      	ldr	r3, [r0, #4]
 8001646:	6302      	str	r2, [r0, #48]	@ 0x30
 8001648:	6343      	str	r3, [r0, #52]	@ 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 800164a:	6883      	ldr	r3, [r0, #8]
 800164c:	6383      	str	r3, [r0, #56]	@ 0x38


	return 0;
}
 800164e:	2000      	movs	r0, #0
 8001650:	4770      	bx	lr

08001652 <timer_clock_clear>:
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
	timer->counts = 0;
 8001652:	2200      	movs	r2, #0
 8001654:	2300      	movs	r3, #0
 8001656:	6002      	str	r2, [r0, #0]
 8001658:	6043      	str	r3, [r0, #4]
	timer->msec = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	6083      	str	r3, [r0, #8]
	timer->sec = 0;
 800165e:	60c3      	str	r3, [r0, #12]
	return 0;
}
 8001660:	2000      	movs	r0, #0
 8001662:	4770      	bx	lr

08001664 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8001664:	b082      	sub	sp, #8
 8001666:	9200      	str	r2, [sp, #0]
 8001668:	9301      	str	r3, [sp, #4]
	timer->msec = new_time.msec;
 800166a:	9b02      	ldr	r3, [sp, #8]
 800166c:	6083      	str	r3, [r0, #8]
	timer->sec = new_time.sec;
 800166e:	9b03      	ldr	r3, [sp, #12]
 8001670:	60c3      	str	r3, [r0, #12]
	return 0;
}
 8001672:	2000      	movs	r0, #0
 8001674:	b002      	add	sp, #8
 8001676:	4770      	bx	lr

08001678 <deadline_timer_setup>:
{
 8001678:	b082      	sub	sp, #8
 800167a:	b510      	push	{r4, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	0004      	movs	r4, r0
 8001680:	9206      	str	r2, [sp, #24]
 8001682:	9307      	str	r3, [sp, #28]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 8001684:	2360      	movs	r3, #96	@ 0x60
 8001686:	2200      	movs	r2, #0
 8001688:	54c2      	strb	r2, [r0, r3]
	timer_clock_clear(&deadline_timer->time_current);
 800168a:	f7ff ffe2 	bl	8001652 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 800168e:	0020      	movs	r0, r4
 8001690:	3030      	adds	r0, #48	@ 0x30
 8001692:	f7ff ffde 	bl	8001652 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 8001696:	0020      	movs	r0, r4
 8001698:	3048      	adds	r0, #72	@ 0x48
 800169a:	f7ff ffda 	bl	8001652 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 800169e:	3418      	adds	r4, #24
 80016a0:	2210      	movs	r2, #16
 80016a2:	a908      	add	r1, sp, #32
 80016a4:	4668      	mov	r0, sp
 80016a6:	f002 fa9b 	bl	8003be0 <memcpy>
 80016aa:	9a06      	ldr	r2, [sp, #24]
 80016ac:	9b07      	ldr	r3, [sp, #28]
 80016ae:	0020      	movs	r0, r4
 80016b0:	f7ff ffd8 	bl	8001664 <timer_clock_set_time>
}
 80016b4:	2000      	movs	r0, #0
 80016b6:	b004      	add	sp, #16
 80016b8:	bc10      	pop	{r4}
 80016ba:	bc08      	pop	{r3}
 80016bc:	b002      	add	sp, #8
 80016be:	4718      	bx	r3

080016c0 <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 80016c0:	b530      	push	{r4, r5, lr}

	timer->msec++;
 80016c2:	6881      	ldr	r1, [r0, #8]
 80016c4:	3101      	adds	r1, #1
 80016c6:	6081      	str	r1, [r0, #8]
	timer->counts++;
 80016c8:	6802      	ldr	r2, [r0, #0]
 80016ca:	6843      	ldr	r3, [r0, #4]
 80016cc:	2401      	movs	r4, #1
 80016ce:	2500      	movs	r5, #0
 80016d0:	1912      	adds	r2, r2, r4
 80016d2:	416b      	adcs	r3, r5
 80016d4:	6002      	str	r2, [r0, #0]
 80016d6:	6043      	str	r3, [r0, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <deadline_timer_increment+0x28>)
 80016da:	4299      	cmp	r1, r3
 80016dc:	d901      	bls.n	80016e2 <deadline_timer_increment+0x22>
	{
//		timer->sec++;
		timer->msec = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	6083      	str	r3, [r0, #8]
//	{
//		timer->counts = 0;
//	}

	return 0;
}
 80016e2:	2000      	movs	r0, #0
 80016e4:	bd30      	pop	{r4, r5, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	3b9ac9ff 	.word	0x3b9ac9ff

080016ec <deadline_timer_count>:
{
 80016ec:	b510      	push	{r4, lr}
	deadline_timer_increment(&deadline_timer->time_current);
 80016ee:	f7ff ffe7 	bl	80016c0 <deadline_timer_increment>
}
 80016f2:	2000      	movs	r0, #0
 80016f4:	bd10      	pop	{r4, pc}

080016f6 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 80016f6:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status = 0;
	int64_t remaining = 0;
	int32_t deadline_difference = 0;

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 80016f8:	0004      	movs	r4, r0
 80016fa:	2500      	movs	r5, #0
 80016fc:	0016      	movs	r6, r2
 80016fe:	2700      	movs	r7, #0
 8001700:	1ba4      	subs	r4, r4, r6
 8001702:	41bd      	sbcs	r5, r7

	if(remaining < 0)
 8001704:	2d00      	cmp	r5, #0
 8001706:	db06      	blt.n	8001716 <deadline_timer_compare_check+0x20>
		remaining = (max_time - time_initial) + time_current;

	}
	deadline_difference = (uint32_t) remaining;

	if(deadline_difference >= deadline)
 8001708:	42a1      	cmp	r1, r4
 800170a:	d807      	bhi.n	800171c <deadline_timer_compare_check+0x26>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 800170c:	2301      	movs	r3, #1
 800170e:	9a05      	ldr	r2, [sp, #20]
 8001710:	7013      	strb	r3, [r2, #0]
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
	}

	return status;
}
 8001712:	2000      	movs	r0, #0
 8001714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		remaining = (max_time - time_initial) + time_current;
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	181c      	adds	r4, r3, r0
 800171a:	e7f5      	b.n	8001708 <deadline_timer_compare_check+0x12>
		*deadline_expired = TIMER_EXPIRED_FALSE;
 800171c:	2300      	movs	r3, #0
 800171e:	9a05      	ldr	r2, [sp, #20]
 8001720:	7013      	strb	r3, [r2, #0]
 8001722:	e7f6      	b.n	8001712 <deadline_timer_compare_check+0x1c>

08001724 <deadline_timer_check>:
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	0004      	movs	r4, r0
 800172a:	000d      	movs	r5, r1
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 800172c:	260f      	movs	r6, #15
 800172e:	446e      	add	r6, sp
 8001730:	2300      	movs	r3, #0
 8001732:	7033      	strb	r3, [r6, #0]
	deadline_timer_compare_check(deadline_timer->time_current.msec,
 8001734:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8001736:	6a01      	ldr	r1, [r0, #32]
 8001738:	6880      	ldr	r0, [r0, #8]
 800173a:	9600      	str	r6, [sp, #0]
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <deadline_timer_check+0x2c>)
 800173e:	f7ff ffda 	bl	80016f6 <deadline_timer_compare_check>
	*deadline_expired = deadline_expired_msec;
 8001742:	7833      	ldrb	r3, [r6, #0]
 8001744:	702b      	strb	r3, [r5, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 8001746:	2260      	movs	r2, #96	@ 0x60
 8001748:	54a3      	strb	r3, [r4, r2]
}
 800174a:	2000      	movs	r0, #0
 800174c:	b004      	add	sp, #16
 800174e:	bd70      	pop	{r4, r5, r6, pc}
 8001750:	3b9aca00 	.word	0x3b9aca00

08001754 <output_fsm_ctrl>:




void output_fsm_ctrl(relay_t *actuator, deadline_timer_t *deadline_timer)
{
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	b089      	sub	sp, #36	@ 0x24
 8001758:	0004      	movs	r4, r0
 800175a:	000d      	movs	r5, r1
	relay_fsm_init_t init = RELAY_INIT_FALSE;
 800175c:	231f      	movs	r3, #31
 800175e:	446b      	add	r3, sp
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == RELAY_RUN_TRUE)
 8001764:	2321      	movs	r3, #33	@ 0x21
 8001766:	5cc3      	ldrb	r3, [r0, r3]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <output_fsm_ctrl+0x24>
			relay_on_pulse_fsm(actuator);
			deadline_timer_set_initial_time(deadline_timer);
		}
	}

	if(actuator->fsm_run_off == RELAY_RUN_TRUE)
 800176c:	2322      	movs	r3, #34	@ 0x22
 800176e:	5ce3      	ldrb	r3, [r4, r3]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d02b      	beq.n	80017cc <output_fsm_ctrl+0x78>
	  {
		  relay_off_pulse_fsm(actuator);
		  deadline_timer_set_initial_time(deadline_timer);
	  }
	}
}
 8001774:	b009      	add	sp, #36	@ 0x24
 8001776:	bdf0      	pop	{r4, r5, r6, r7, pc}
		relay_check_init_fsm(*actuator, &init);
 8001778:	261f      	movs	r6, #31
 800177a:	446e      	add	r6, sp
 800177c:	9605      	str	r6, [sp, #20]
 800177e:	0003      	movs	r3, r0
 8001780:	3310      	adds	r3, #16
 8001782:	466a      	mov	r2, sp
 8001784:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001786:	c283      	stmia	r2!, {r0, r1, r7}
 8001788:	cb03      	ldmia	r3!, {r0, r1}
 800178a:	c203      	stmia	r2!, {r0, r1}
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	6861      	ldr	r1, [r4, #4]
 8001790:	68a2      	ldr	r2, [r4, #8]
 8001792:	68e3      	ldr	r3, [r4, #12]
 8001794:	f7ff fc36 	bl	8001004 <relay_check_init_fsm>
		if(init == RELAY_INIT_TRUE)
 8001798:	7833      	ldrb	r3, [r6, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00f      	beq.n	80017be <output_fsm_ctrl+0x6a>
		deadline_timer_check(deadline_timer, &expired);
 800179e:	261e      	movs	r6, #30
 80017a0:	446e      	add	r6, sp
 80017a2:	0031      	movs	r1, r6
 80017a4:	0028      	movs	r0, r5
 80017a6:	f7ff ffbd 	bl	8001724 <deadline_timer_check>
		if(expired == TIMER_EXPIRED_TRUE)
 80017aa:	7833      	ldrb	r3, [r6, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d1dd      	bne.n	800176c <output_fsm_ctrl+0x18>
			relay_on_pulse_fsm(actuator);
 80017b0:	0020      	movs	r0, r4
 80017b2:	f7ff fceb 	bl	800118c <relay_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 80017b6:	0028      	movs	r0, r5
 80017b8:	f7ff ff43 	bl	8001642 <deadline_timer_set_initial_time>
 80017bc:	e7d6      	b.n	800176c <output_fsm_ctrl+0x18>
			deadline_timer_set_initial_time(deadline_timer);
 80017be:	0028      	movs	r0, r5
 80017c0:	f7ff ff3f 	bl	8001642 <deadline_timer_set_initial_time>
			relay_acknowledge_init_fsm(actuator);
 80017c4:	0020      	movs	r0, r4
 80017c6:	f7ff fc2a 	bl	800101e <relay_acknowledge_init_fsm>
 80017ca:	e7e8      	b.n	800179e <output_fsm_ctrl+0x4a>
	  relay_check_init_fsm(*actuator, &init);
 80017cc:	261f      	movs	r6, #31
 80017ce:	446e      	add	r6, sp
 80017d0:	9605      	str	r6, [sp, #20]
 80017d2:	0023      	movs	r3, r4
 80017d4:	3310      	adds	r3, #16
 80017d6:	466a      	mov	r2, sp
 80017d8:	cb83      	ldmia	r3!, {r0, r1, r7}
 80017da:	c283      	stmia	r2!, {r0, r1, r7}
 80017dc:	cb03      	ldmia	r3!, {r0, r1}
 80017de:	c203      	stmia	r2!, {r0, r1}
 80017e0:	6820      	ldr	r0, [r4, #0]
 80017e2:	6861      	ldr	r1, [r4, #4]
 80017e4:	68a2      	ldr	r2, [r4, #8]
 80017e6:	68e3      	ldr	r3, [r4, #12]
 80017e8:	f7ff fc0c 	bl	8001004 <relay_check_init_fsm>
	  if(init == RELAY_INIT_TRUE)
 80017ec:	7833      	ldrb	r3, [r6, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00f      	beq.n	8001812 <output_fsm_ctrl+0xbe>
	  deadline_timer_check(deadline_timer, &expired);
 80017f2:	261e      	movs	r6, #30
 80017f4:	446e      	add	r6, sp
 80017f6:	0031      	movs	r1, r6
 80017f8:	0028      	movs	r0, r5
 80017fa:	f7ff ff93 	bl	8001724 <deadline_timer_check>
	  if(expired == TIMER_EXPIRED_TRUE)
 80017fe:	7833      	ldrb	r3, [r6, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d1b7      	bne.n	8001774 <output_fsm_ctrl+0x20>
		  relay_off_pulse_fsm(actuator);
 8001804:	0020      	movs	r0, r4
 8001806:	f7ff fcd7 	bl	80011b8 <relay_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 800180a:	0028      	movs	r0, r5
 800180c:	f7ff ff19 	bl	8001642 <deadline_timer_set_initial_time>
}
 8001810:	e7b0      	b.n	8001774 <output_fsm_ctrl+0x20>
		  deadline_timer_set_initial_time(deadline_timer);
 8001812:	0028      	movs	r0, r5
 8001814:	f7ff ff15 	bl	8001642 <deadline_timer_set_initial_time>
		  relay_acknowledge_init_fsm(actuator);
 8001818:	0020      	movs	r0, r4
 800181a:	f7ff fc00 	bl	800101e <relay_acknowledge_init_fsm>
 800181e:	e7e8      	b.n	80017f2 <output_fsm_ctrl+0x9e>

08001820 <output_led_indicator>:


void output_led_indicator(led_signal_t *led_signal,
								deadline_timer_t *deadline_timer)
{
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	0005      	movs	r5, r0
 8001826:	000c      	movs	r4, r1
	deadline_timer_expired_t indicator_timer_expired;
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 8001828:	466b      	mov	r3, sp
 800182a:	1dde      	adds	r6, r3, #7
 800182c:	0031      	movs	r1, r6
 800182e:	0020      	movs	r0, r4
 8001830:	f7ff ff78 	bl	8001724 <deadline_timer_check>

	if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8001834:	7833      	ldrb	r3, [r6, #0]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <output_led_indicator+0x1e>
	{
		led_signal_fsm(led_signal);
		deadline_timer_set_initial_time(deadline_timer);
	}
}
 800183a:	b002      	add	sp, #8
 800183c:	bd70      	pop	{r4, r5, r6, pc}
		led_signal_fsm(led_signal);
 800183e:	0028      	movs	r0, r5
 8001840:	f7ff f89e 	bl	8000980 <led_signal_fsm>
		deadline_timer_set_initial_time(deadline_timer);
 8001844:	0020      	movs	r0, r4
 8001846:	f7ff fefc 	bl	8001642 <deadline_timer_set_initial_time>
}
 800184a:	e7f6      	b.n	800183a <output_led_indicator+0x1a>

0800184c <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 800184c:	b530      	push	{r4, r5, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	0004      	movs	r4, r0
 8001852:	000d      	movs	r5, r1
 8001854:	0010      	movs	r0, r2
	HAL_NVIC_DisableIRQ(irq_type);
 8001856:	f000 ffed 	bl	8002834 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185a:	2214      	movs	r2, #20
 800185c:	2100      	movs	r1, #0
 800185e:	a801      	add	r0, sp, #4
 8001860:	f002 f978 	bl	8003b54 <memset>

	HAL_GPIO_DeInit(port, pin);
 8001864:	0029      	movs	r1, r5
 8001866:	0020      	movs	r0, r4
 8001868:	f001 f8d0 	bl	8002a0c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800186c:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186e:	2300      	movs	r3, #0
 8001870:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001874:	a901      	add	r1, sp, #4
 8001876:	0020      	movs	r0, r4
 8001878:	f000 fff0 	bl	800285c <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 800187c:	b007      	add	sp, #28
 800187e:	bd30      	pop	{r4, r5, pc}

08001880 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001880:	b570      	push	{r4, r5, r6, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	0005      	movs	r5, r0
 8001886:	000e      	movs	r6, r1
 8001888:	0014      	movs	r4, r2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	2214      	movs	r2, #20
 800188c:	2100      	movs	r1, #0
 800188e:	a801      	add	r0, sp, #4
 8001890:	f002 f960 	bl	8003b54 <memset>
	HAL_GPIO_DeInit(port, pin);
 8001894:	0031      	movs	r1, r6
 8001896:	0028      	movs	r0, r5
 8001898:	f001 f8b8 	bl	8002a0c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800189c:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189e:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x44>)
 80018a0:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018a6:	a901      	add	r1, sp, #4
 80018a8:	0028      	movs	r0, r5
 80018aa:	f000 ffd7 	bl	800285c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 80018ae:	2203      	movs	r2, #3
 80018b0:	2100      	movs	r1, #0
 80018b2:	0020      	movs	r0, r4
 80018b4:	f000 ffae 	bl	8002814 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 80018b8:	0020      	movs	r0, r4
 80018ba:	f000 ffaf 	bl	800281c <HAL_NVIC_EnableIRQ>


}
 80018be:	b006      	add	sp, #24
 80018c0:	bd70      	pop	{r4, r5, r6, pc}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	10110000 	.word	0x10110000

080018c8 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	0004      	movs	r4, r0
 80018ce:	000d      	movs	r5, r1
 80018d0:	0016      	movs	r6, r2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	2214      	movs	r2, #20
 80018d4:	2100      	movs	r1, #0
 80018d6:	a801      	add	r0, sp, #4
 80018d8:	f002 f93c 	bl	8003b54 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 80018dc:	0030      	movs	r0, r6
 80018de:	f000 ffa9 	bl	8002834 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 80018e2:	0029      	movs	r1, r5
 80018e4:	0020      	movs	r0, r4
 80018e6:	f001 f891 	bl	8002a0c <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 80018ea:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	3303      	adds	r3, #3
 80018f6:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80018f8:	a901      	add	r1, sp, #4
 80018fa:	0020      	movs	r0, r4
 80018fc:	f000 ffae 	bl	800285c <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001900:	4a03      	ldr	r2, [pc, #12]	@ (8001910 <HAL_DIRECT_LINK_conf_as_output+0x48>)
 8001902:	6811      	ldr	r1, [r2, #0]
 8001904:	2380      	movs	r3, #128	@ 0x80
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	430b      	orrs	r3, r1
 800190a:	6013      	str	r3, [r2, #0]

}
 800190c:	b006      	add	sp, #24
 800190e:	bd70      	pop	{r4, r5, r6, pc}
 8001910:	40010000 	.word	0x40010000

08001914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	46d6      	mov	lr, sl
 8001918:	464f      	mov	r7, r9
 800191a:	4646      	mov	r6, r8
 800191c:	b5c0      	push	{r6, r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	2214      	movs	r2, #20
 8001922:	2100      	movs	r1, #0
 8001924:	a805      	add	r0, sp, #20
 8001926:	f002 f915 	bl	8003b54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <MX_GPIO_Init+0x14c>)
 800192c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800192e:	2704      	movs	r7, #4
 8001930:	433a      	orrs	r2, r7
 8001932:	635a      	str	r2, [r3, #52]	@ 0x34
 8001934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001936:	403a      	ands	r2, r7
 8001938:	9201      	str	r2, [sp, #4]
 800193a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193e:	2220      	movs	r2, #32
 8001940:	4311      	orrs	r1, r2
 8001942:	6359      	str	r1, [r3, #52]	@ 0x34
 8001944:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001946:	400a      	ands	r2, r1
 8001948:	9202      	str	r2, [sp, #8]
 800194a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800194c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800194e:	2501      	movs	r5, #1
 8001950:	432a      	orrs	r2, r5
 8001952:	635a      	str	r2, [r3, #52]	@ 0x34
 8001954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001956:	402a      	ands	r2, r5
 8001958:	9203      	str	r2, [sp, #12]
 800195a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800195e:	2202      	movs	r2, #2
 8001960:	4311      	orrs	r1, r2
 8001962:	6359      	str	r1, [r3, #52]	@ 0x34
 8001964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001966:	401a      	ands	r2, r3
 8001968:	9204      	str	r2, [sp, #16]
 800196a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 800196c:	24c0      	movs	r4, #192	@ 0xc0
 800196e:	0224      	lsls	r4, r4, #8
 8001970:	4b3c      	ldr	r3, [pc, #240]	@ (8001a64 <MX_GPIO_Init+0x150>)
 8001972:	469a      	mov	sl, r3
 8001974:	2200      	movs	r2, #0
 8001976:	0021      	movs	r1, r4
 8001978:	0018      	movs	r0, r3
 800197a:	f001 f8ce 	bl	8002b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 800197e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <MX_GPIO_Init+0x154>)
 8001980:	4699      	mov	r9, r3
 8001982:	26a0      	movs	r6, #160	@ 0xa0
 8001984:	05f6      	lsls	r6, r6, #23
 8001986:	2200      	movs	r2, #0
 8001988:	0019      	movs	r1, r3
 800198a:	0030      	movs	r0, r6
 800198c:	f001 f8c5 	bl	8002b1a <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8001990:	4b36      	ldr	r3, [pc, #216]	@ (8001a6c <MX_GPIO_Init+0x158>)
 8001992:	4698      	mov	r8, r3
 8001994:	2200      	movs	r2, #0
 8001996:	2140      	movs	r1, #64	@ 0x40
 8001998:	0018      	movs	r0, r3
 800199a:	f001 f8be 	bl	8002b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 800199e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2400      	movs	r4, #0
 80019a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	a905      	add	r1, sp, #20
 80019aa:	4650      	mov	r0, sl
 80019ac:	f000 ff56 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80019b0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80019b6:	a905      	add	r1, sp, #20
 80019b8:	482d      	ldr	r0, [pc, #180]	@ (8001a70 <MX_GPIO_Init+0x15c>)
 80019ba:	f000 ff4f 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 80019be:	464b      	mov	r3, r9
 80019c0:	9305      	str	r3, [sp, #20]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c8:	a905      	add	r1, sp, #20
 80019ca:	0030      	movs	r0, r6
 80019cc:	f000 ff46 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 80019d0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019d2:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <MX_GPIO_Init+0x160>)
 80019d4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 80019d8:	a905      	add	r1, sp, #20
 80019da:	0030      	movs	r0, r6
 80019dc:	f000 ff3e 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 80019e0:	2382      	movs	r3, #130	@ 0x82
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <MX_GPIO_Init+0x164>)
 80019e8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ec:	a905      	add	r1, sp, #20
 80019ee:	0030      	movs	r0, r6
 80019f0:	f000 ff34 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 80019f4:	2360      	movs	r3, #96	@ 0x60
 80019f6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	a905      	add	r1, sp, #20
 80019fe:	0030      	movs	r0, r6
 8001a00:	f000 ff2c 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8001a04:	2340      	movs	r3, #64	@ 0x40
 8001a06:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	a905      	add	r1, sp, #20
 8001a10:	4640      	mov	r0, r8
 8001a12:	f000 ff23 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	@ (8001a7c <MX_GPIO_Init+0x168>)
 8001a1c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8001a20:	a905      	add	r1, sp, #20
 8001a22:	4640      	mov	r0, r8
 8001a24:	f000 ff1a 	bl	800285c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8001a28:	4a15      	ldr	r2, [pc, #84]	@ (8001a80 <MX_GPIO_Init+0x16c>)
 8001a2a:	6811      	ldr	r1, [r2, #0]
 8001a2c:	2380      	movs	r3, #128	@ 0x80
 8001a2e:	045b      	lsls	r3, r3, #17
 8001a30:	430b      	orrs	r3, r1
 8001a32:	6013      	str	r3, [r2, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f000 feeb 	bl	8002814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001a3e:	2006      	movs	r0, #6
 8001a40:	f000 feec 	bl	800281c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	2007      	movs	r0, #7
 8001a4a:	f000 fee3 	bl	8002814 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a4e:	2007      	movs	r0, #7
 8001a50:	f000 fee4 	bl	800281c <HAL_NVIC_EnableIRQ>

}
 8001a54:	b00a      	add	sp, #40	@ 0x28
 8001a56:	bce0      	pop	{r5, r6, r7}
 8001a58:	46ba      	mov	sl, r7
 8001a5a:	46b1      	mov	r9, r6
 8001a5c:	46a8      	mov	r8, r5
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	50000800 	.word	0x50000800
 8001a68:	00000583 	.word	0x00000583
 8001a6c:	50000400 	.word	0x50000400
 8001a70:	50001400 	.word	0x50001400
 8001a74:	10210000 	.word	0x10210000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10110000 	.word	0x10110000
 8001a80:	40010000 	.word	0x40010000

08001a84 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a84:	b510      	push	{r4, lr}
 8001a86:	0004      	movs	r4, r0

	if (htim == &htim17)
 8001a88:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001a8a:	4298      	cmp	r0, r3
 8001a8c:	d006      	beq.n	8001a9c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001a90:	429c      	cmp	r4, r3
 8001a92:	d009      	beq.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x24>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8001a94:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001a96:	429c      	cmp	r4, r3
 8001a98:	d00c      	beq.n	8001ab4 <HAL_TIM_PeriodElapsedCallback+0x30>

	}



}
 8001a9a:	bd10      	pop	{r4, pc}
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8001a9c:	481e      	ldr	r0, [pc, #120]	@ (8001b18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001a9e:	7901      	ldrb	r1, [r0, #4]
 8001aa0:	3020      	adds	r0, #32
 8001aa2:	f7ff f9b1 	bl	8000e08 <pyd1598_dl_readout_fsm>
 8001aa6:	e7f2      	b.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0xa>
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8001aa8:	481b      	ldr	r0, [pc, #108]	@ (8001b18 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001aaa:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001aac:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8001aae:	f7ff f8fb 	bl	8000ca8 <pyd1598_serin_send_datagram_fsm>
 8001ab2:	e7ef      	b.n	8001a94 <HAL_TIM_PeriodElapsedCallback+0x10>
		deadline_timer_count(&deadline_timer_light_1);
 8001ab4:	4819      	ldr	r0, [pc, #100]	@ (8001b1c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001ab6:	f7ff fe19 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8001aba:	4819      	ldr	r0, [pc, #100]	@ (8001b20 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001abc:	f7ff fe16 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8001ac0:	4818      	ldr	r0, [pc, #96]	@ (8001b24 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ac2:	f7ff fe13 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001ac8:	f7ff fe10 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_1);
 8001acc:	4817      	ldr	r0, [pc, #92]	@ (8001b2c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001ace:	f7ff fe0d 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8001ad2:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001ad4:	f7ff fe0a 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8001ad8:	4816      	ldr	r0, [pc, #88]	@ (8001b34 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001ada:	f7ff fe07 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8001ade:	4816      	ldr	r0, [pc, #88]	@ (8001b38 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ae0:	f7ff fe04 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_led_indicator);
 8001ae4:	4815      	ldr	r0, [pc, #84]	@ (8001b3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001ae6:	f7ff fe01 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_timeout);
 8001aea:	4815      	ldr	r0, [pc, #84]	@ (8001b40 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001aec:	f7ff fdfe 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 8001af0:	4814      	ldr	r0, [pc, #80]	@ (8001b44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001af2:	f7ff fdfb 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&ctrl_timer);
 8001af6:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001af8:	f7ff fdf8 	bl	80016ec <deadline_timer_count>
		deadline_timer_count(&vyv_timeoff);
 8001afc:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001afe:	f7ff fdf5 	bl	80016ec <deadline_timer_count>
		deadline_timer_increment(&general_clock);
 8001b02:	4813      	ldr	r0, [pc, #76]	@ (8001b50 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001b04:	f7ff fddc 	bl	80016c0 <deadline_timer_increment>
}
 8001b08:	e7c7      	b.n	8001a9a <HAL_TIM_PeriodElapsedCallback+0x16>
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	2000079c 	.word	0x2000079c
 8001b10:	20000834 	.word	0x20000834
 8001b14:	200007e8 	.word	0x200007e8
 8001b18:	20000738 	.word	0x20000738
 8001b1c:	200006b0 	.word	0x200006b0
 8001b20:	20000648 	.word	0x20000648
 8001b24:	200005e0 	.word	0x200005e0
 8001b28:	20000560 	.word	0x20000560
 8001b2c:	20000428 	.word	0x20000428
 8001b30:	200003a0 	.word	0x200003a0
 8001b34:	20000318 	.word	0x20000318
 8001b38:	20000298 	.word	0x20000298
 8001b3c:	20000490 	.word	0x20000490
 8001b40:	20000218 	.word	0x20000218
 8001b44:	20000198 	.word	0x20000198
 8001b48:	20000128 	.word	0x20000128
 8001b4c:	200000c0 	.word	0x200000c0
 8001b50:	200005c8 	.word	0x200005c8

08001b54 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001b54:	b510      	push	{r4, lr}
 8001b56:	0004      	movs	r4, r0


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001b5a:	2248      	movs	r2, #72	@ 0x48
 8001b5c:	5a9b      	ldrh	r3, [r3, r2]
 8001b5e:	4283      	cmp	r3, r0
 8001b60:	d00d      	beq.n	8001b7e <HAL_GPIO_EXTI_Rising_Callback+0x2a>
		motion_sensor.direct_link.start_fsm = true;
		TIM17->CNT = 0;
	}
	else
	{
		__NOP();
 8001b62:	46c0      	nop			@ (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001b66:	891b      	ldrh	r3, [r3, #8]
 8001b68:	42a3      	cmp	r3, r4
 8001b6a:	d010      	beq.n	8001b8e <HAL_GPIO_EXTI_Rising_Callback+0x3a>
			button_positive_edge_detected(&button_light_1);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001b6e:	891b      	ldrh	r3, [r3, #8]
 8001b70:	42a3      	cmp	r3, r4
 8001b72:	d017      	beq.n	8001ba4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_2);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001b74:	4b19      	ldr	r3, [pc, #100]	@ (8001bdc <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001b76:	891b      	ldrh	r3, [r3, #8]
 8001b78:	42a3      	cmp	r3, r4
 8001b7a:	d01e      	beq.n	8001bba <HAL_GPIO_EXTI_Rising_Callback+0x66>
		{
			button_positive_edge_detected(&button_uv);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
}
 8001b7c:	bd10      	pop	{r4, pc}
		motion_sensor.direct_link.start_fsm = true;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 8001b80:	3a07      	subs	r2, #7
 8001b82:	2101      	movs	r1, #1
 8001b84:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8001b86:	4b16      	ldr	r3, [pc, #88]	@ (8001be0 <HAL_GPIO_EXTI_Rising_Callback+0x8c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b8c:	e7ea      	b.n	8001b64 <HAL_GPIO_EXTI_Rising_Callback+0x10>
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001b90:	7b5b      	ldrb	r3, [r3, #13]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d1ea      	bne.n	8001b6c <HAL_GPIO_EXTI_Rising_Callback+0x18>
			button_positive_edge_detected(&button_light_1);
 8001b96:	480f      	ldr	r0, [pc, #60]	@ (8001bd4 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 8001b98:	f7fe fdf4 	bl	8000784 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001b9c:	4811      	ldr	r0, [pc, #68]	@ (8001be4 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001b9e:	f7ff fd50 	bl	8001642 <deadline_timer_set_initial_time>
 8001ba2:	e7e3      	b.n	8001b6c <HAL_GPIO_EXTI_Rising_Callback+0x18>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd8 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001ba6:	7b5b      	ldrb	r3, [r3, #13]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d1e3      	bne.n	8001b74 <HAL_GPIO_EXTI_Rising_Callback+0x20>
			button_positive_edge_detected(&button_light_2);
 8001bac:	480a      	ldr	r0, [pc, #40]	@ (8001bd8 <HAL_GPIO_EXTI_Rising_Callback+0x84>)
 8001bae:	f7fe fde9 	bl	8000784 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001bb2:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001bb4:	f7ff fd45 	bl	8001642 <deadline_timer_set_initial_time>
 8001bb8:	e7dc      	b.n	8001b74 <HAL_GPIO_EXTI_Rising_Callback+0x20>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001bbc:	7b5b      	ldrb	r3, [r3, #13]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d1dc      	bne.n	8001b7c <HAL_GPIO_EXTI_Rising_Callback+0x28>
			button_positive_edge_detected(&button_uv);
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <HAL_GPIO_EXTI_Rising_Callback+0x88>)
 8001bc4:	f7fe fdde 	bl	8000784 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001bc8:	4806      	ldr	r0, [pc, #24]	@ (8001be4 <HAL_GPIO_EXTI_Rising_Callback+0x90>)
 8001bca:	f7ff fd3a 	bl	8001642 <deadline_timer_set_initial_time>
}
 8001bce:	e7d5      	b.n	8001b7c <HAL_GPIO_EXTI_Rising_Callback+0x28>
 8001bd0:	20000738 	.word	0x20000738
 8001bd4:	2000052c 	.word	0x2000052c
 8001bd8:	20000514 	.word	0x20000514
 8001bdc:	200004fc 	.word	0x200004fc
 8001be0:	40014800 	.word	0x40014800
 8001be4:	20000560 	.word	0x20000560

08001be8 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	0004      	movs	r4, r0


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001bec:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001bee:	891b      	ldrh	r3, [r3, #8]
 8001bf0:	4283      	cmp	r3, r0
 8001bf2:	d008      	beq.n	8001c06 <HAL_GPIO_EXTI_Falling_Callback+0x1e>
		{
			button_negative_edge_detected(&button_light_1);
			deadline_timer_set_initial_time(&deadline_buttons);
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001bf4:	4b15      	ldr	r3, [pc, #84]	@ (8001c4c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001bf6:	891b      	ldrh	r3, [r3, #8]
 8001bf8:	42a3      	cmp	r3, r4
 8001bfa:	d00f      	beq.n	8001c1c <HAL_GPIO_EXTI_Falling_Callback+0x34>
			button_negative_edge_detected(&button_light_2);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001bfc:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001bfe:	891b      	ldrh	r3, [r3, #8]
 8001c00:	42a3      	cmp	r3, r4
 8001c02:	d016      	beq.n	8001c32 <HAL_GPIO_EXTI_Falling_Callback+0x4a>
		{
			button_negative_edge_detected(&button_uv);
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
		}
	}
}
 8001c04:	bd10      	pop	{r4, pc}
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c06:	4b10      	ldr	r3, [pc, #64]	@ (8001c48 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c08:	7b5b      	ldrb	r3, [r3, #13]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d1f2      	bne.n	8001bf4 <HAL_GPIO_EXTI_Falling_Callback+0xc>
			button_negative_edge_detected(&button_light_1);
 8001c0e:	480e      	ldr	r0, [pc, #56]	@ (8001c48 <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8001c10:	f7fe fdc2 	bl	8000798 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 8001c14:	480f      	ldr	r0, [pc, #60]	@ (8001c54 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001c16:	f7ff fd14 	bl	8001642 <deadline_timer_set_initial_time>
 8001c1a:	e7eb      	b.n	8001bf4 <HAL_GPIO_EXTI_Falling_Callback+0xc>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001c1e:	7b5b      	ldrb	r3, [r3, #13]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d1eb      	bne.n	8001bfc <HAL_GPIO_EXTI_Falling_Callback+0x14>
			button_negative_edge_detected(&button_light_2);
 8001c24:	4809      	ldr	r0, [pc, #36]	@ (8001c4c <HAL_GPIO_EXTI_Falling_Callback+0x64>)
 8001c26:	f7fe fdb7 	bl	8000798 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001c2a:	480a      	ldr	r0, [pc, #40]	@ (8001c54 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001c2c:	f7ff fd09 	bl	8001642 <deadline_timer_set_initial_time>
 8001c30:	e7e4      	b.n	8001bfc <HAL_GPIO_EXTI_Falling_Callback+0x14>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001c32:	4b07      	ldr	r3, [pc, #28]	@ (8001c50 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001c34:	7b5b      	ldrb	r3, [r3, #13]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d1e4      	bne.n	8001c04 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
			button_negative_edge_detected(&button_uv);
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <HAL_GPIO_EXTI_Falling_Callback+0x68>)
 8001c3c:	f7fe fdac 	bl	8000798 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001c40:	4804      	ldr	r0, [pc, #16]	@ (8001c54 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8001c42:	f7ff fcfe 	bl	8001642 <deadline_timer_set_initial_time>
}
 8001c46:	e7dd      	b.n	8001c04 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
 8001c48:	2000052c 	.word	0x2000052c
 8001c4c:	20000514 	.word	0x20000514
 8001c50:	200004fc 	.word	0x200004fc
 8001c54:	20000560 	.word	0x20000560

08001c58 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <Error_Handler+0x2>

08001c5c <SystemClock_Config>:
{
 8001c5c:	b500      	push	{lr}
 8001c5e:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c60:	221c      	movs	r2, #28
 8001c62:	2100      	movs	r1, #0
 8001c64:	a805      	add	r0, sp, #20
 8001c66:	f001 ff75 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c6a:	2214      	movs	r2, #20
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4668      	mov	r0, sp
 8001c70:	f001 ff70 	bl	8003b54 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	33fe      	adds	r3, #254	@ 0xfe
 8001c7a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	3bc0      	subs	r3, #192	@ 0xc0
 8001c7e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c80:	a805      	add	r0, sp, #20
 8001c82:	f000 ff71 	bl	8002b68 <HAL_RCC_OscConfig>
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d10e      	bne.n	8001ca8 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c92:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c94:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001c96:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4668      	mov	r0, sp
 8001c9c:	f001 f8fa 	bl	8002e94 <HAL_RCC_ClockConfig>
 8001ca0:	2800      	cmp	r0, #0
 8001ca2:	d103      	bne.n	8001cac <SystemClock_Config+0x50>
}
 8001ca4:	b00d      	add	sp, #52	@ 0x34
 8001ca6:	bd00      	pop	{pc}
    Error_Handler();
 8001ca8:	f7ff ffd6 	bl	8001c58 <Error_Handler>
    Error_Handler();
 8001cac:	f7ff ffd4 	bl	8001c58 <Error_Handler>

08001cb0 <main>:
{
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4657      	mov	r7, sl
 8001cb6:	464e      	mov	r6, r9
 8001cb8:	4645      	mov	r5, r8
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b0d9      	sub	sp, #356	@ 0x164
  HAL_Init();
 8001cbe:	f000 fd25 	bl	800270c <HAL_Init>
  SystemClock_Config();
 8001cc2:	f7ff ffcb 	bl	8001c5c <SystemClock_Config>
  MX_GPIO_Init();
 8001cc6:	f7ff fe25 	bl	8001914 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001cca:	f000 fb59 	bl	8002380 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001cce:	f000 fbfd 	bl	80024cc <MX_TIM14_Init>
  MX_TIM3_Init();
 8001cd2:	f000 fb95 	bl	8002400 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001cd6:	f000 fc2b 	bl	8002530 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001cda:	f000 fc0f 	bl	80024fc <MX_TIM16_Init>
  general_clock.counts = 0;
 8001cde:	4ba2      	ldr	r3, [pc, #648]	@ (8001f68 <main+0x2b8>)
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	6018      	str	r0, [r3, #0]
 8001ce6:	6059      	str	r1, [r3, #4]
  general_clock.msec = 0;
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001cec:	23a0      	movs	r3, #160	@ 0xa0
 8001cee:	05db      	lsls	r3, r3, #23
 8001cf0:	9351      	str	r3, [sp, #324]	@ 0x144
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001cf2:	3220      	adds	r2, #32
 8001cf4:	a902      	add	r1, sp, #8
 8001cf6:	3041      	adds	r0, #65	@ 0x41
 8001cf8:	30ff      	adds	r0, #255	@ 0xff
 8001cfa:	1809      	adds	r1, r1, r0
 8001cfc:	800a      	strh	r2, [r1, #0]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 8001cfe:	9353      	str	r3, [sp, #332]	@ 0x14c
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001d00:	2340      	movs	r3, #64	@ 0x40
 8001d02:	aa02      	add	r2, sp, #8
 8001d04:	21a4      	movs	r1, #164	@ 0xa4
 8001d06:	0049      	lsls	r1, r1, #1
 8001d08:	1852      	adds	r2, r2, r1
 8001d0a:	8013      	strh	r3, [r2, #0]
  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	a951      	add	r1, sp, #324	@ 0x144
 8001d10:	a855      	add	r0, sp, #340	@ 0x154
 8001d12:	f7ff fa94 	bl	800123e <switch_selector_setup>
  switch(switch_selector.value)
 8001d16:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d100      	bne.n	8001d1e <main+0x6e>
 8001d1c:	e105      	b.n	8001f2a <main+0x27a>
 8001d1e:	d80a      	bhi.n	8001d36 <main+0x86>
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d012      	beq.n	8001d4a <main+0x9a>
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d000      	beq.n	8001d2a <main+0x7a>
 8001d28:	e106      	b.n	8001f38 <main+0x288>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001d2a:	4b90      	ldr	r3, [pc, #576]	@ (8001f6c <main+0x2bc>)
 8001d2c:	22ff      	movs	r2, #255	@ 0xff
 8001d2e:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001d30:	3afc      	subs	r2, #252	@ 0xfc
 8001d32:	70da      	strb	r2, [r3, #3]
	  break;
 8001d34:	e00e      	b.n	8001d54 <main+0xa4>
  switch(switch_selector.value)
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	d000      	beq.n	8001d3c <main+0x8c>
 8001d3a:	e0fd      	b.n	8001f38 <main+0x288>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001d3c:	4b8b      	ldr	r3, [pc, #556]	@ (8001f6c <main+0x2bc>)
 8001d3e:	22ff      	movs	r2, #255	@ 0xff
 8001d40:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001d42:	3afc      	subs	r2, #252	@ 0xfc
 8001d44:	70da      	strb	r2, [r3, #3]
		__NOP();
 8001d46:	46c0      	nop			@ (mov r8, r8)
		break;
 8001d48:	e004      	b.n	8001d54 <main+0xa4>
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001d4a:	4b88      	ldr	r3, [pc, #544]	@ (8001f6c <main+0x2bc>)
 8001d4c:	225a      	movs	r2, #90	@ 0x5a
 8001d4e:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = OFFICE_MOTION_SENSOR_WINDOW;
 8001d50:	2200      	movs	r2, #0
 8001d52:	70da      	strb	r2, [r3, #3]
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001d54:	4a85      	ldr	r2, [pc, #532]	@ (8001f6c <main+0x2bc>)
 8001d56:	2300      	movs	r3, #0
 8001d58:	7053      	strb	r3, [r2, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8001d5a:	71d3      	strb	r3, [r2, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8001d5c:	2501      	movs	r5, #1
 8001d5e:	7195      	strb	r5, [r2, #6]
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001d60:	2102      	movs	r1, #2
 8001d62:	7111      	strb	r1, [r2, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_2_PULSES;
 8001d64:	7095      	strb	r5, [r2, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001d66:	7153      	strb	r3, [r2, #5]
  setin_pin.pin = SERIN_Pin;
 8001d68:	a94f      	add	r1, sp, #316	@ 0x13c
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	01db      	lsls	r3, r3, #7
 8001d6e:	808b      	strh	r3, [r1, #4]
  setin_pin.port = SERIN_GPIO_Port;
 8001d70:	487f      	ldr	r0, [pc, #508]	@ (8001f70 <main+0x2c0>)
 8001d72:	904f      	str	r0, [sp, #316]	@ 0x13c
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001d74:	2007      	movs	r0, #7
 8001d76:	7188      	strb	r0, [r1, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001d78:	ab4d      	add	r3, sp, #308	@ 0x134
 8001d7a:	2480      	movs	r4, #128	@ 0x80
 8001d7c:	46a1      	mov	r9, r4
 8001d7e:	809c      	strh	r4, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001d80:	4f7c      	ldr	r7, [pc, #496]	@ (8001f74 <main+0x2c4>)
 8001d82:	974d      	str	r7, [sp, #308]	@ 0x134
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001d84:	7198      	strb	r0, [r3, #6]
  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001d86:	487c      	ldr	r0, [pc, #496]	@ (8001f78 <main+0x2c8>)
 8001d88:	9009      	str	r0, [sp, #36]	@ 0x24
 8001d8a:	a801      	add	r0, sp, #4
 8001d8c:	cb50      	ldmia	r3!, {r4, r6}
 8001d8e:	c050      	stmia	r0!, {r4, r6}
 8001d90:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4b76      	ldr	r3, [pc, #472]	@ (8001f70 <main+0x2c0>)
 8001d96:	6811      	ldr	r1, [r2, #0]
 8001d98:	6852      	ldr	r2, [r2, #4]
 8001d9a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f7fe fef0 	bl	8000b82 <pyd1598_setup>
  HAL_Delay(1000);
 8001da2:	20fa      	movs	r0, #250	@ 0xfa
 8001da4:	0080      	lsls	r0, r0, #2
 8001da6:	f000 fccf 	bl	8002748 <HAL_Delay>
  pyd1598_request_write(&motion_sensor);
 8001daa:	0020      	movs	r0, r4
 8001dac:	f7fe fe23 	bl	80009f6 <pyd1598_request_write>
  deadline.msec = 80;
 8001db0:	4c72      	ldr	r4, [pc, #456]	@ (8001f7c <main+0x2cc>)
 8001db2:	2350      	movs	r3, #80	@ 0x50
 8001db4:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001db6:	0026      	movs	r6, r4
 8001db8:	3608      	adds	r6, #8
 8001dba:	2210      	movs	r2, #16
 8001dbc:	0031      	movs	r1, r6
 8001dbe:	4668      	mov	r0, sp
 8001dc0:	f001 ff0e 	bl	8003be0 <memcpy>
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	486d      	ldr	r0, [pc, #436]	@ (8001f80 <main+0x2d0>)
 8001dca:	f7ff fc55 	bl	8001678 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8001dce:	2210      	movs	r2, #16
 8001dd0:	0031      	movs	r1, r6
 8001dd2:	4668      	mov	r0, sp
 8001dd4:	f001 ff04 	bl	8003be0 <memcpy>
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	6863      	ldr	r3, [r4, #4]
 8001ddc:	4869      	ldr	r0, [pc, #420]	@ (8001f84 <main+0x2d4>)
 8001dde:	f7ff fc4b 	bl	8001678 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8001de2:	2210      	movs	r2, #16
 8001de4:	0031      	movs	r1, r6
 8001de6:	4668      	mov	r0, sp
 8001de8:	f001 fefa 	bl	8003be0 <memcpy>
 8001dec:	6822      	ldr	r2, [r4, #0]
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	4865      	ldr	r0, [pc, #404]	@ (8001f88 <main+0x2d8>)
 8001df2:	f7ff fc41 	bl	8001678 <deadline_timer_setup>
  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8001df6:	aa30      	add	r2, sp, #192	@ 0xc0
 8001df8:	2340      	movs	r3, #64	@ 0x40
 8001dfa:	8093      	strh	r3, [r2, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001dfc:	a92c      	add	r1, sp, #176	@ 0xb0
 8001dfe:	468a      	mov	sl, r1
 8001e00:	33c0      	adds	r3, #192	@ 0xc0
 8001e02:	808b      	strh	r3, [r1, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8001e04:	a928      	add	r1, sp, #160	@ 0xa0
 8001e06:	4688      	mov	r8, r1
 8001e08:	808d      	strh	r5, [r1, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001e0a:	ab2e      	add	r3, sp, #184	@ 0xb8
 8001e0c:	2180      	movs	r1, #128	@ 0x80
 8001e0e:	00c9      	lsls	r1, r1, #3
 8001e10:	8099      	strh	r1, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8001e12:	ad2a      	add	r5, sp, #168	@ 0xa8
 8001e14:	46ab      	mov	fp, r5
 8001e16:	4649      	mov	r1, r9
 8001e18:	80a9      	strh	r1, [r5, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001e1a:	ad26      	add	r5, sp, #152	@ 0x98
 8001e1c:	46a9      	mov	r9, r5
 8001e1e:	495b      	ldr	r1, [pc, #364]	@ (8001f8c <main+0x2dc>)
 8001e20:	80a9      	strh	r1, [r5, #4]
  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8001e22:	9730      	str	r7, [sp, #192]	@ 0xc0
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001e24:	25a0      	movs	r5, #160	@ 0xa0
 8001e26:	05ed      	lsls	r5, r5, #23
 8001e28:	952c      	str	r5, [sp, #176]	@ 0xb0
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8001e2a:	9528      	str	r5, [sp, #160]	@ 0xa0
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8001e2c:	952e      	str	r5, [sp, #184]	@ 0xb8
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001e2e:	952a      	str	r5, [sp, #168]	@ 0xa8
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001e30:	484f      	ldr	r0, [pc, #316]	@ (8001f70 <main+0x2c0>)
 8001e32:	9026      	str	r0, [sp, #152]	@ 0x98
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001e34:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	002b      	movs	r3, r5
 8001e3a:	0039      	movs	r1, r7
 8001e3c:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8001e3e:	a844      	add	r0, sp, #272	@ 0x110
 8001e40:	f7ff f924 	bl	800108c <relay_setup>
  relay_setup(&light_2, light_2_output_a, light_2_output_b);
 8001e44:	465a      	mov	r2, fp
 8001e46:	6853      	ldr	r3, [r2, #4]
 8001e48:	9300      	str	r3, [sp, #0]
 8001e4a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8001e4c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8001e4e:	4652      	mov	r2, sl
 8001e50:	6852      	ldr	r2, [r2, #4]
 8001e52:	a83b      	add	r0, sp, #236	@ 0xec
 8001e54:	f7ff f91a 	bl	800108c <relay_setup>
  relay_setup(&light_uv, light_uv_output_a, light_uv_output_b);
 8001e58:	464a      	mov	r2, r9
 8001e5a:	6853      	ldr	r3, [r2, #4]
 8001e5c:	9300      	str	r3, [sp, #0]
 8001e5e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001e60:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8001e62:	4642      	mov	r2, r8
 8001e64:	6852      	ldr	r2, [r2, #4]
 8001e66:	a832      	add	r0, sp, #200	@ 0xc8
 8001e68:	f7ff f910 	bl	800108c <relay_setup>
  timer_buttons.msec = 100;
 8001e6c:	4a48      	ldr	r2, [pc, #288]	@ (8001f90 <main+0x2e0>)
 8001e6e:	2364      	movs	r3, #100	@ 0x64
 8001e70:	0017      	movs	r7, r2
 8001e72:	6093      	str	r3, [r2, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001e74:	3208      	adds	r2, #8
 8001e76:	0011      	movs	r1, r2
 8001e78:	2210      	movs	r2, #16
 8001e7a:	4668      	mov	r0, sp
 8001e7c:	f001 feb0 	bl	8003be0 <memcpy>
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4843      	ldr	r0, [pc, #268]	@ (8001f94 <main+0x2e4>)
 8001e86:	f7ff fbf7 	bl	8001678 <deadline_timer_setup>
  button_input.pin = LAMP1_IN_Pin;
 8001e8a:	af24      	add	r7, sp, #144	@ 0x90
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	80bb      	strh	r3, [r7, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 8001e92:	9524      	str	r5, [sp, #144]	@ 0x90
  button_setup(&button_light_1, button_input);
 8001e94:	4840      	ldr	r0, [pc, #256]	@ (8001f98 <main+0x2e8>)
 8001e96:	0029      	movs	r1, r5
 8001e98:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001e9a:	f7fe fc5f 	bl	800075c <button_setup>
  button_input.pin = LAMP2_IN_Pin;
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	80bb      	strh	r3, [r7, #4]
  button_setup(&button_light_2, button_input);
 8001ea2:	483e      	ldr	r0, [pc, #248]	@ (8001f9c <main+0x2ec>)
 8001ea4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8001ea6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001ea8:	f7fe fc58 	bl	800075c <button_setup>
  button_input.pin = UV_IN_Pin;
 8001eac:	2304      	movs	r3, #4
 8001eae:	80bb      	strh	r3, [r7, #4]
  button_setup(&button_uv, button_input);
 8001eb0:	483b      	ldr	r0, [pc, #236]	@ (8001fa0 <main+0x2f0>)
 8001eb2:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8001eb4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8001eb6:	f7fe fc51 	bl	800075c <button_setup>
  signal_led_gpio.pin = LED_Pin;
 8001eba:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	8099      	strh	r1, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 8001ec0:	951f      	str	r5, [sp, #124]	@ 0x7c
  led_signal_setup(&signal_led, signal_led_gpio);
 8001ec2:	0029      	movs	r1, r5
 8001ec4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001ec6:	a821      	add	r0, sp, #132	@ 0x84
 8001ec8:	f7fe fcbf 	bl	800084a <led_signal_setup>
  deadline.msec = 500;
 8001ecc:	23fa      	movs	r3, #250	@ 0xfa
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	60a3      	str	r3, [r4, #8]
  deadline.sec = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60e3      	str	r3, [r4, #12]
  deadline_timer_setup(&deadline_led_indicator, deadline);
 8001ed6:	4d33      	ldr	r5, [pc, #204]	@ (8001fa4 <main+0x2f4>)
 8001ed8:	2210      	movs	r2, #16
 8001eda:	0031      	movs	r1, r6
 8001edc:	4668      	mov	r0, sp
 8001ede:	f001 fe7f 	bl	8003be0 <memcpy>
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	6863      	ldr	r3, [r4, #4]
 8001ee6:	0028      	movs	r0, r5
 8001ee8:	f7ff fbc6 	bl	8001678 <deadline_timer_setup>
  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 8001eec:	2101      	movs	r1, #1
 8001eee:	a821      	add	r0, sp, #132	@ 0x84
 8001ef0:	f7fe fcb8 	bl	8000864 <led_signal_type_selector>
    switch(switch_selector.value)
 8001ef4:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d100      	bne.n	8001efc <main+0x24c>
 8001efa:	e108      	b.n	800210e <main+0x45e>
 8001efc:	d81e      	bhi.n	8001f3c <main+0x28c>
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d062      	beq.n	8001fc8 <main+0x318>
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d000      	beq.n	8001f08 <main+0x258>
 8001f06:	e113      	b.n	8002130 <main+0x480>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001f08:	4b27      	ldr	r3, [pc, #156]	@ (8001fa8 <main+0x2f8>)
 8001f0a:	4a28      	ldr	r2, [pc, #160]	@ (8001fac <main+0x2fc>)
 8001f0c:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001f0e:	4b28      	ldr	r3, [pc, #160]	@ (8001fb0 <main+0x300>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001f14:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <main+0x304>)
 8001f16:	22e1      	movs	r2, #225	@ 0xe1
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001f1c:	4b26      	ldr	r3, [pc, #152]	@ (8001fb8 <main+0x308>)
 8001f1e:	4a27      	ldr	r2, [pc, #156]	@ (8001fbc <main+0x30c>)
 8001f20:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8001f22:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <main+0x310>)
 8001f24:	4a27      	ldr	r2, [pc, #156]	@ (8001fc4 <main+0x314>)
 8001f26:	609a      	str	r2, [r3, #8]
    	  break;
 8001f28:	e05d      	b.n	8001fe6 <main+0x336>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <main+0x2bc>)
 8001f2c:	22ff      	movs	r2, #255	@ 0xff
 8001f2e:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001f30:	3afc      	subs	r2, #252	@ 0xfc
 8001f32:	70da      	strb	r2, [r3, #3]
		__NOP();
 8001f34:	46c0      	nop			@ (mov r8, r8)
		break;
 8001f36:	e70d      	b.n	8001d54 <main+0xa4>
		__NOP();
 8001f38:	46c0      	nop			@ (mov r8, r8)
	  break;
 8001f3a:	e70b      	b.n	8001d54 <main+0xa4>
    switch(switch_selector.value)
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d000      	beq.n	8001f42 <main+0x292>
 8001f40:	e0f6      	b.n	8002130 <main+0x480>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001f42:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <main+0x2f8>)
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <main+0x2fc>)
 8001f46:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <main+0x300>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <main+0x304>)
 8001f50:	22e1      	movs	r2, #225	@ 0xe1
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <main+0x308>)
 8001f58:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <main+0x30c>)
 8001f5a:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <main+0x310>)
 8001f5e:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <main+0x314>)
 8001f60:	609a      	str	r2, [r3, #8]
    	  __NOP();
 8001f62:	46c0      	nop			@ (mov r8, r8)
    	  break;
 8001f64:	e03f      	b.n	8001fe6 <main+0x336>
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	200005c8 	.word	0x200005c8
 8001f6c:	20000730 	.word	0x20000730
 8001f70:	50000800 	.word	0x50000800
 8001f74:	50000400 	.word	0x50000400
 8001f78:	20000738 	.word	0x20000738
 8001f7c:	20000718 	.word	0x20000718
 8001f80:	200006b0 	.word	0x200006b0
 8001f84:	20000648 	.word	0x20000648
 8001f88:	200005e0 	.word	0x200005e0
 8001f8c:	ffff8000 	.word	0xffff8000
 8001f90:	20000548 	.word	0x20000548
 8001f94:	20000560 	.word	0x20000560
 8001f98:	2000052c 	.word	0x2000052c
 8001f9c:	20000514 	.word	0x20000514
 8001fa0:	200004fc 	.word	0x200004fc
 8001fa4:	20000490 	.word	0x20000490
 8001fa8:	20000410 	.word	0x20000410
 8001fac:	00009c40 	.word	0x00009c40
 8001fb0:	20000388 	.word	0x20000388
 8001fb4:	20000280 	.word	0x20000280
 8001fb8:	20000300 	.word	0x20000300
 8001fbc:	00007530 	.word	0x00007530
 8001fc0:	20000200 	.word	0x20000200
 8001fc4:	00001388 	.word	0x00001388
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 8001fc8:	4b7f      	ldr	r3, [pc, #508]	@ (80021c8 <main+0x518>)
 8001fca:	4a80      	ldr	r2, [pc, #512]	@ (80021cc <main+0x51c>)
 8001fcc:	609a      	str	r2, [r3, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 8001fce:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <main+0x520>)
 8001fd0:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 8001fd2:	4b80      	ldr	r3, [pc, #512]	@ (80021d4 <main+0x524>)
 8001fd4:	22e1      	movs	r2, #225	@ 0xe1
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 8001fda:	4b7f      	ldr	r3, [pc, #508]	@ (80021d8 <main+0x528>)
 8001fdc:	4a7f      	ldr	r2, [pc, #508]	@ (80021dc <main+0x52c>)
 8001fde:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_timeout.msec = OFFICE_LAMP_UV_TIMEOUT_MS;
 8001fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80021e0 <main+0x530>)
 8001fe2:	4a80      	ldr	r2, [pc, #512]	@ (80021e4 <main+0x534>)
 8001fe4:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8001fe6:	4c78      	ldr	r4, [pc, #480]	@ (80021c8 <main+0x518>)
 8001fe8:	4d7f      	ldr	r5, [pc, #508]	@ (80021e8 <main+0x538>)
 8001fea:	0027      	movs	r7, r4
 8001fec:	3708      	adds	r7, #8
 8001fee:	2210      	movs	r2, #16
 8001ff0:	0039      	movs	r1, r7
 8001ff2:	4668      	mov	r0, sp
 8001ff4:	f001 fdf4 	bl	8003be0 <memcpy>
 8001ff8:	6822      	ldr	r2, [r4, #0]
 8001ffa:	6863      	ldr	r3, [r4, #4]
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	f7ff fb3b 	bl	8001678 <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 8002002:	4b7a      	ldr	r3, [pc, #488]	@ (80021ec <main+0x53c>)
 8002004:	2600      	movs	r6, #0
 8002006:	701e      	strb	r6, [r3, #0]
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 8002008:	4d79      	ldr	r5, [pc, #484]	@ (80021f0 <main+0x540>)
 800200a:	2210      	movs	r2, #16
 800200c:	0039      	movs	r1, r7
 800200e:	4668      	mov	r0, sp
 8002010:	f001 fde6 	bl	8003be0 <memcpy>
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	0028      	movs	r0, r5
 800201a:	f7ff fb2d 	bl	8001678 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 800201e:	4b75      	ldr	r3, [pc, #468]	@ (80021f4 <main+0x544>)
 8002020:	701e      	strb	r6, [r3, #0]
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 8002022:	4c6d      	ldr	r4, [pc, #436]	@ (80021d8 <main+0x528>)
 8002024:	4d74      	ldr	r5, [pc, #464]	@ (80021f8 <main+0x548>)
 8002026:	0021      	movs	r1, r4
 8002028:	3108      	adds	r1, #8
 800202a:	2210      	movs	r2, #16
 800202c:	4668      	mov	r0, sp
 800202e:	f001 fdd7 	bl	8003be0 <memcpy>
 8002032:	6822      	ldr	r2, [r4, #0]
 8002034:	6863      	ldr	r3, [r4, #4]
 8002036:	0028      	movs	r0, r5
 8002038:	f7ff fb1e 	bl	8001678 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 800203c:	4c65      	ldr	r4, [pc, #404]	@ (80021d4 <main+0x524>)
 800203e:	4d6f      	ldr	r5, [pc, #444]	@ (80021fc <main+0x54c>)
 8002040:	0021      	movs	r1, r4
 8002042:	3108      	adds	r1, #8
 8002044:	2210      	movs	r2, #16
 8002046:	4668      	mov	r0, sp
 8002048:	f001 fdca 	bl	8003be0 <memcpy>
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	6863      	ldr	r3, [r4, #4]
 8002050:	0028      	movs	r0, r5
 8002052:	f7ff fb11 	bl	8001678 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 8002056:	4c62      	ldr	r4, [pc, #392]	@ (80021e0 <main+0x530>)
 8002058:	4d69      	ldr	r5, [pc, #420]	@ (8002200 <main+0x550>)
 800205a:	0021      	movs	r1, r4
 800205c:	3108      	adds	r1, #8
 800205e:	2210      	movs	r2, #16
 8002060:	4668      	mov	r0, sp
 8002062:	f001 fdbd 	bl	8003be0 <memcpy>
 8002066:	6822      	ldr	r2, [r4, #0]
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	0028      	movs	r0, r5
 800206c:	f7ff fb04 	bl	8001678 <deadline_timer_setup>
  deadline.msec = 5000;
 8002070:	4c64      	ldr	r4, [pc, #400]	@ (8002204 <main+0x554>)
 8002072:	4b65      	ldr	r3, [pc, #404]	@ (8002208 <main+0x558>)
 8002074:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8002076:	4d65      	ldr	r5, [pc, #404]	@ (800220c <main+0x55c>)
 8002078:	0021      	movs	r1, r4
 800207a:	3108      	adds	r1, #8
 800207c:	2210      	movs	r2, #16
 800207e:	4668      	mov	r0, sp
 8002080:	f001 fdae 	bl	8003be0 <memcpy>
 8002084:	6822      	ldr	r2, [r4, #0]
 8002086:	6863      	ldr	r3, [r4, #4]
 8002088:	0028      	movs	r0, r5
 800208a:	f7ff faf5 	bl	8001678 <deadline_timer_setup>
  if(switch_selector.value == MOTION_SWITCH_MODE_3)
 800208e:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 8002090:	2b03      	cmp	r3, #3
 8002092:	d04f      	beq.n	8002134 <main+0x484>
	HAL_TIM_Base_Start_IT(&htim1);
 8002094:	485e      	ldr	r0, [pc, #376]	@ (8002210 <main+0x560>)
 8002096:	f001 f911 	bl	80032bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 800209a:	485e      	ldr	r0, [pc, #376]	@ (8002214 <main+0x564>)
 800209c:	f001 f90e 	bl	80032bc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 80020a0:	485d      	ldr	r0, [pc, #372]	@ (8002218 <main+0x568>)
 80020a2:	f001 f90b 	bl	80032bc <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	2016      	movs	r0, #22
 80020ac:	f000 fbb2 	bl	8002814 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80020b0:	2016      	movs	r0, #22
 80020b2:	f000 fbb3 	bl	800281c <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim17);
 80020b6:	4859      	ldr	r0, [pc, #356]	@ (800221c <main+0x56c>)
 80020b8:	f001 f900 	bl	80032bc <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 80020bc:	2201      	movs	r2, #1
 80020be:	2100      	movs	r1, #0
 80020c0:	2007      	movs	r0, #7
 80020c2:	f000 fba7 	bl	8002814 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80020c6:	2007      	movs	r0, #7
 80020c8:	f000 fba8 	bl	800281c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2103      	movs	r1, #3
 80020d0:	2006      	movs	r0, #6
 80020d2:	f000 fb9f 	bl	8002814 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80020d6:	2006      	movs	r0, #6
 80020d8:	f000 fba0 	bl	800281c <HAL_NVIC_EnableIRQ>
  relay_ask_off_pulse_fsm(&light_1);
 80020dc:	a844      	add	r0, sp, #272	@ 0x110
 80020de:	f7fe ff6f 	bl	8000fc0 <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_2);
 80020e2:	a83b      	add	r0, sp, #236	@ 0xec
 80020e4:	f7fe ff6c 	bl	8000fc0 <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_uv);
 80020e8:	a832      	add	r0, sp, #200	@ 0xc8
 80020ea:	f7fe ff69 	bl	8000fc0 <relay_ask_off_pulse_fsm>
  uv_state = MOTION_LIGHT_UV_IDLE;
 80020ee:	4a4c      	ldr	r2, [pc, #304]	@ (8002220 <main+0x570>)
 80020f0:	2300      	movs	r3, #0
 80020f2:	7013      	strb	r3, [r2, #0]
  abort_uv = MOTION_ABORT_FALSE;
 80020f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002224 <main+0x574>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	7011      	strb	r1, [r2, #0]
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 80020fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002228 <main+0x578>)
 80020fc:	7013      	strb	r3, [r2, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 80020fe:	4a4b      	ldr	r2, [pc, #300]	@ (800222c <main+0x57c>)
 8002100:	7013      	strb	r3, [r2, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 8002102:	4a4b      	ldr	r2, [pc, #300]	@ (8002230 <main+0x580>)
 8002104:	7013      	strb	r3, [r2, #0]
  led_signal_stop(&signal_led);
 8002106:	a821      	add	r0, sp, #132	@ 0x84
 8002108:	f7fe fbb3 	bl	8000872 <led_signal_stop>
 800210c:	e04b      	b.n	80021a6 <main+0x4f6>
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 800210e:	4b2e      	ldr	r3, [pc, #184]	@ (80021c8 <main+0x518>)
 8002110:	4a48      	ldr	r2, [pc, #288]	@ (8002234 <main+0x584>)
 8002112:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8002114:	4b2e      	ldr	r3, [pc, #184]	@ (80021d0 <main+0x520>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <main+0x524>)
 800211c:	22e1      	movs	r2, #225	@ 0xe1
 800211e:	0092      	lsls	r2, r2, #2
 8002120:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8002122:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <main+0x528>)
 8002124:	4a44      	ldr	r2, [pc, #272]	@ (8002238 <main+0x588>)
 8002126:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8002128:	4b2d      	ldr	r3, [pc, #180]	@ (80021e0 <main+0x530>)
 800212a:	4a37      	ldr	r2, [pc, #220]	@ (8002208 <main+0x558>)
 800212c:	609a      	str	r2, [r3, #8]
    	  break;
 800212e:	e75a      	b.n	8001fe6 <main+0x336>
    	  __NOP();
 8002130:	46c0      	nop			@ (mov r8, r8)
    	  break;
 8002132:	e758      	b.n	8001fe6 <main+0x336>
	  lights.relay = &light_2;
 8002134:	ab3b      	add	r3, sp, #236	@ 0xec
 8002136:	930d      	str	r3, [sp, #52]	@ 0x34
	  lights.deadline_timer = &deadline_timer_light_1;
 8002138:	4b40      	ldr	r3, [pc, #256]	@ (800223c <main+0x58c>)
 800213a:	930e      	str	r3, [sp, #56]	@ 0x38
	  fan.relay = &light_uv;
 800213c:	ab32      	add	r3, sp, #200	@ 0xc8
 800213e:	930b      	str	r3, [sp, #44]	@ 0x2c
	  fan.deadline_timer = &deadline_timer_light_2;
 8002140:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <main+0x590>)
 8002142:	930c      	str	r3, [sp, #48]	@ 0x30
	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 8002144:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <main+0x594>)
 8002146:	4a40      	ldr	r2, [pc, #256]	@ (8002248 <main+0x598>)
 8002148:	9200      	str	r2, [sp, #0]
 800214a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800214c:	a90d      	add	r1, sp, #52	@ 0x34
 800214e:	a819      	add	r0, sp, #100	@ 0x64
 8002150:	f7ff f8a4 	bl	800129c <nutone_setup>
	  button_white.button = &button_light_1;
 8002154:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <main+0x59c>)
 8002156:	9315      	str	r3, [sp, #84]	@ 0x54
	  button_white.btn_timer = &deadline_buttons;
 8002158:	4b3d      	ldr	r3, [pc, #244]	@ (8002250 <main+0x5a0>)
 800215a:	9316      	str	r3, [sp, #88]	@ 0x58
	  button_fan.button = &button_light_2;
 800215c:	4a3d      	ldr	r2, [pc, #244]	@ (8002254 <main+0x5a4>)
 800215e:	9217      	str	r2, [sp, #92]	@ 0x5c
	  button_fan.btn_timer = &deadline_buttons;
 8002160:	9318      	str	r3, [sp, #96]	@ 0x60
	  button_vyv.button = &button_uv;
 8002162:	4a3d      	ldr	r2, [pc, #244]	@ (8002258 <main+0x5a8>)
 8002164:	9213      	str	r2, [sp, #76]	@ 0x4c
	  button_vyv.btn_timer = &deadline_buttons;
 8002166:	9314      	str	r3, [sp, #80]	@ 0x50
	  motion_sensor_hand.motion_sensor = &motion_sensor;
 8002168:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <main+0x5ac>)
 800216a:	9311      	str	r3, [sp, #68]	@ 0x44
	  led_signal_hand.led_signal = &signal_led;
 800216c:	ab21      	add	r3, sp, #132	@ 0x84
 800216e:	930f      	str	r3, [sp, #60]	@ 0x3c
	  led_signal_hand.led_signal_timer = &deadline_led_indicator;
 8002170:	4b3b      	ldr	r3, [pc, #236]	@ (8002260 <main+0x5b0>)
 8002172:	9310      	str	r3, [sp, #64]	@ 0x40
	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 8002174:	483b      	ldr	r0, [pc, #236]	@ (8002264 <main+0x5b4>)
 8002176:	4b21      	ldr	r3, [pc, #132]	@ (80021fc <main+0x54c>)
 8002178:	9307      	str	r3, [sp, #28]
 800217a:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <main+0x550>)
 800217c:	9306      	str	r3, [sp, #24]
 800217e:	4b1e      	ldr	r3, [pc, #120]	@ (80021f8 <main+0x548>)
 8002180:	9305      	str	r3, [sp, #20]
 8002182:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <main+0x538>)
 8002184:	9304      	str	r3, [sp, #16]
 8002186:	4b1a      	ldr	r3, [pc, #104]	@ (80021f0 <main+0x540>)
 8002188:	9303      	str	r3, [sp, #12]
 800218a:	ab0f      	add	r3, sp, #60	@ 0x3c
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	ab13      	add	r3, sp, #76	@ 0x4c
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	ab15      	add	r3, sp, #84	@ 0x54
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	ab17      	add	r3, sp, #92	@ 0x5c
 8002198:	aa11      	add	r2, sp, #68	@ 0x44
 800219a:	a919      	add	r1, sp, #100	@ 0x64
 800219c:	f7fe f840 	bl	8000220 <nutone_app_config>
 80021a0:	e778      	b.n	8002094 <main+0x3e4>
	  switch(switch_selector.value)
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d80d      	bhi.n	80021c2 <main+0x512>
 80021a6:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d006      	beq.n	80021ba <main+0x50a>
 80021ac:	d9f9      	bls.n	80021a2 <main+0x4f2>
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d107      	bne.n	80021c2 <main+0x512>
			  nutone_app_process(&nutone_app_hand);
 80021b2:	482c      	ldr	r0, [pc, #176]	@ (8002264 <main+0x5b4>)
 80021b4:	f7fe fac6 	bl	8000744 <nutone_app_process>
			  break;
 80021b8:	e7f5      	b.n	80021a6 <main+0x4f6>
			  signal_led.type = LED_SIGNAL_BLINK;
 80021ba:	ab21      	add	r3, sp, #132	@ 0x84
 80021bc:	2202      	movs	r2, #2
 80021be:	725a      	strb	r2, [r3, #9]
			  break;
 80021c0:	e7f1      	b.n	80021a6 <main+0x4f6>
			  __NOP();
 80021c2:	46c0      	nop			@ (mov r8, r8)
			  break;
 80021c4:	e7ef      	b.n	80021a6 <main+0x4f6>
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	20000410 	.word	0x20000410
 80021cc:	0000ea60 	.word	0x0000ea60
 80021d0:	20000388 	.word	0x20000388
 80021d4:	20000280 	.word	0x20000280
 80021d8:	20000300 	.word	0x20000300
 80021dc:	0001d4c0 	.word	0x0001d4c0
 80021e0:	20000200 	.word	0x20000200
 80021e4:	00002710 	.word	0x00002710
 80021e8:	20000428 	.word	0x20000428
 80021ec:	20000408 	.word	0x20000408
 80021f0:	200003a0 	.word	0x200003a0
 80021f4:	20000380 	.word	0x20000380
 80021f8:	20000318 	.word	0x20000318
 80021fc:	20000298 	.word	0x20000298
 8002200:	20000218 	.word	0x20000218
 8002204:	20000718 	.word	0x20000718
 8002208:	00001388 	.word	0x00001388
 800220c:	20000198 	.word	0x20000198
 8002210:	200008cc 	.word	0x200008cc
 8002214:	20000834 	.word	0x20000834
 8002218:	200007e8 	.word	0x200007e8
 800221c:	2000079c 	.word	0x2000079c
 8002220:	20000190 	.word	0x20000190
 8002224:	20000008 	.word	0x20000008
 8002228:	200004fa 	.word	0x200004fa
 800222c:	200004f9 	.word	0x200004f9
 8002230:	200004f8 	.word	0x200004f8
 8002234:	00009c40 	.word	0x00009c40
 8002238:	00007530 	.word	0x00007530
 800223c:	200006b0 	.word	0x200006b0
 8002240:	20000648 	.word	0x20000648
 8002244:	20000128 	.word	0x20000128
 8002248:	200000c0 	.word	0x200000c0
 800224c:	2000052c 	.word	0x2000052c
 8002250:	20000560 	.word	0x20000560
 8002254:	20000514 	.word	0x20000514
 8002258:	200004fc 	.word	0x200004fc
 800225c:	20000738 	.word	0x20000738
 8002260:	20000490 	.word	0x20000490
 8002264:	20000084 	.word	0x20000084

08002268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002268:	b500      	push	{lr}
 800226a:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_MspInit+0x38>)
 800226e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002270:	2201      	movs	r2, #1
 8002272:	4311      	orrs	r1, r2
 8002274:	6419      	str	r1, [r3, #64]	@ 0x40
 8002276:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002278:	400a      	ands	r2, r1
 800227a:	9200      	str	r2, [sp, #0]
 800227c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002280:	2180      	movs	r1, #128	@ 0x80
 8002282:	0549      	lsls	r1, r1, #21
 8002284:	430a      	orrs	r2, r1
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	400b      	ands	r3, r1
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002290:	2008      	movs	r0, #8
 8002292:	f000 fa6b 	bl	800276c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002296:	2010      	movs	r0, #16
 8002298:	f000 fa68 	bl	800276c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229c:	b003      	add	sp, #12
 800229e:	bd00      	pop	{pc}
 80022a0:	40021000 	.word	0x40021000

080022a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <NMI_Handler>

080022a6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler>

080022a8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022aa:	4770      	bx	lr

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ae:	f000 fa39 	bl	8002724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b2:	bd10      	pop	{r4, pc}

080022b4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80022b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 80022b6:	2004      	movs	r0, #4
 80022b8:	f000 fc3e 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 80022bc:	2008      	movs	r0, #8
 80022be:	f000 fc3b 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80022c2:	bd10      	pop	{r4, pc}

080022c4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80022c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 80022c6:	2080      	movs	r0, #128	@ 0x80
 80022c8:	f000 fc36 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 80022cc:	2080      	movs	r0, #128	@ 0x80
 80022ce:	0080      	lsls	r0, r0, #2
 80022d0:	f000 fc32 	bl	8002b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80022d4:	bd10      	pop	{r4, pc}
	...

080022d8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80022d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022da:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80022dc:	f001 f828 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	46c0      	nop			@ (mov r8, r8)
 80022e4:	200008cc 	.word	0x200008cc

080022e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ea:	4802      	ldr	r0, [pc, #8]	@ (80022f4 <TIM1_CC_IRQHandler+0xc>)
 80022ec:	f001 f820 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022f0:	bd10      	pop	{r4, pc}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	200008cc 	.word	0x200008cc

080022f8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80022f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80022fa:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM14_IRQHandler+0xc>)
 80022fc:	f001 f818 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002300:	bd10      	pop	{r4, pc}
 8002302:	46c0      	nop			@ (mov r8, r8)
 8002304:	20000834 	.word	0x20000834

08002308 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002308:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800230a:	4802      	ldr	r0, [pc, #8]	@ (8002314 <TIM16_IRQHandler+0xc>)
 800230c:	f001 f810 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002310:	bd10      	pop	{r4, pc}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	200007e8 	.word	0x200007e8

08002318 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002318:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800231a:	4802      	ldr	r0, [pc, #8]	@ (8002324 <TIM17_IRQHandler+0xc>)
 800231c:	f001 f808 	bl	8003330 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002320:	bd10      	pop	{r4, pc}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	2000079c 	.word	0x2000079c

08002328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002328:	b510      	push	{r4, lr}
 800232a:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800232c:	4a0c      	ldr	r2, [pc, #48]	@ (8002360 <_sbrk+0x38>)
 800232e:	490d      	ldr	r1, [pc, #52]	@ (8002364 <_sbrk+0x3c>)
 8002330:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <_sbrk+0x40>)
 8002334:	6809      	ldr	r1, [r1, #0]
 8002336:	2900      	cmp	r1, #0
 8002338:	d007      	beq.n	800234a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800233a:	490b      	ldr	r1, [pc, #44]	@ (8002368 <_sbrk+0x40>)
 800233c:	6808      	ldr	r0, [r1, #0]
 800233e:	18c3      	adds	r3, r0, r3
 8002340:	4293      	cmp	r3, r2
 8002342:	d806      	bhi.n	8002352 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002344:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <_sbrk+0x40>)
 8002346:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002348:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800234a:	4907      	ldr	r1, [pc, #28]	@ (8002368 <_sbrk+0x40>)
 800234c:	4807      	ldr	r0, [pc, #28]	@ (800236c <_sbrk+0x44>)
 800234e:	6008      	str	r0, [r1, #0]
 8002350:	e7f3      	b.n	800233a <_sbrk+0x12>
    errno = ENOMEM;
 8002352:	f001 fc19 	bl	8003b88 <__errno>
 8002356:	230c      	movs	r3, #12
 8002358:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800235a:	2001      	movs	r0, #1
 800235c:	4240      	negs	r0, r0
 800235e:	e7f3      	b.n	8002348 <_sbrk+0x20>
 8002360:	20001800 	.word	0x20001800
 8002364:	00000400 	.word	0x00000400
 8002368:	20000798 	.word	0x20000798
 800236c:	20000a68 	.word	0x20000a68

08002370 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002370:	4b02      	ldr	r3, [pc, #8]	@ (800237c <SystemInit+0xc>)
 8002372:	2280      	movs	r2, #128	@ 0x80
 8002374:	0512      	lsls	r2, r2, #20
 8002376:	609a      	str	r2, [r3, #8]
#endif
}
 8002378:	4770      	bx	lr
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002380:	b500      	push	{lr}
 8002382:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002384:	2210      	movs	r2, #16
 8002386:	2100      	movs	r1, #0
 8002388:	a804      	add	r0, sp, #16
 800238a:	f001 fbe3 	bl	8003b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238e:	220c      	movs	r2, #12
 8002390:	2100      	movs	r1, #0
 8002392:	a801      	add	r0, sp, #4
 8002394:	f001 fbde 	bl	8003b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002398:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <MX_TIM1_Init+0x78>)
 800239a:	4b18      	ldr	r3, [pc, #96]	@ (80023fc <MX_TIM1_Init+0x7c>)
 800239c:	6003      	str	r3, [r0, #0]
  htim1.Init.Prescaler = 48-1;
 800239e:	232f      	movs	r3, #47	@ 0x2f
 80023a0:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a2:	2300      	movs	r3, #0
 80023a4:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 1000;
 80023a6:	22fa      	movs	r2, #250	@ 0xfa
 80023a8:	0092      	lsls	r2, r2, #2
 80023aa:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80023ae:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023b2:	f001 f8b5 	bl	8003520 <HAL_TIM_Base_Init>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d115      	bne.n	80023e6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <MX_TIM1_Init+0x78>)
 80023c2:	a904      	add	r1, sp, #16
 80023c4:	f001 f9ba 	bl	800373c <HAL_TIM_ConfigClockSource>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	d10f      	bne.n	80023ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80023cc:	2340      	movs	r3, #64	@ 0x40
 80023ce:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023d6:	4808      	ldr	r0, [pc, #32]	@ (80023f8 <MX_TIM1_Init+0x78>)
 80023d8:	a901      	add	r1, sp, #4
 80023da:	f001 fac3 	bl	8003964 <HAL_TIMEx_MasterConfigSynchronization>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d107      	bne.n	80023f2 <MX_TIM1_Init+0x72>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023e2:	b009      	add	sp, #36	@ 0x24
 80023e4:	bd00      	pop	{pc}
    Error_Handler();
 80023e6:	f7ff fc37 	bl	8001c58 <Error_Handler>
 80023ea:	e7e6      	b.n	80023ba <MX_TIM1_Init+0x3a>
    Error_Handler();
 80023ec:	f7ff fc34 	bl	8001c58 <Error_Handler>
 80023f0:	e7ec      	b.n	80023cc <MX_TIM1_Init+0x4c>
    Error_Handler();
 80023f2:	f7ff fc31 	bl	8001c58 <Error_Handler>
}
 80023f6:	e7f4      	b.n	80023e2 <MX_TIM1_Init+0x62>
 80023f8:	200008cc 	.word	0x200008cc
 80023fc:	40012c00 	.word	0x40012c00

08002400 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002400:	b500      	push	{lr}
 8002402:	b091      	sub	sp, #68	@ 0x44

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002404:	2214      	movs	r2, #20
 8002406:	2100      	movs	r1, #0
 8002408:	a80b      	add	r0, sp, #44	@ 0x2c
 800240a:	f001 fba3 	bl	8003b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240e:	220c      	movs	r2, #12
 8002410:	2100      	movs	r1, #0
 8002412:	a808      	add	r0, sp, #32
 8002414:	f001 fb9e 	bl	8003b54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002418:	221c      	movs	r2, #28
 800241a:	2100      	movs	r1, #0
 800241c:	a801      	add	r0, sp, #4
 800241e:	f001 fb99 	bl	8003b54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002422:	4827      	ldr	r0, [pc, #156]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 8002424:	4b27      	ldr	r3, [pc, #156]	@ (80024c4 <MX_TIM3_Init+0xc4>)
 8002426:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 47;
 8002428:	232f      	movs	r3, #47	@ 0x2f
 800242a:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	2300      	movs	r3, #0
 800242e:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 65535;
 8002430:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <MX_TIM3_Init+0xc8>)
 8002432:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002434:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002436:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002438:	f001 f872 	bl	8003520 <HAL_TIM_Base_Init>
 800243c:	2800      	cmp	r0, #0
 800243e:	d12c      	bne.n	800249a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002440:	481f      	ldr	r0, [pc, #124]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 8002442:	f001 f89d 	bl	8003580 <HAL_TIM_OC_Init>
 8002446:	2800      	cmp	r0, #0
 8002448:	d12a      	bne.n	80024a0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800244a:	481d      	ldr	r0, [pc, #116]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 800244c:	2108      	movs	r1, #8
 800244e:	f001 f8c7 	bl	80035e0 <HAL_TIM_OnePulse_Init>
 8002452:	2800      	cmp	r0, #0
 8002454:	d127      	bne.n	80024a6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	930b      	str	r3, [sp, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800245a:	3310      	adds	r3, #16
 800245c:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800245e:	4818      	ldr	r0, [pc, #96]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 8002460:	a90b      	add	r1, sp, #44	@ 0x2c
 8002462:	f001 fa51 	bl	8003908 <HAL_TIM_SlaveConfigSynchro>
 8002466:	2800      	cmp	r0, #0
 8002468:	d120      	bne.n	80024ac <MX_TIM3_Init+0xac>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800246a:	2300      	movs	r3, #0
 800246c:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002470:	4813      	ldr	r0, [pc, #76]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 8002472:	a908      	add	r1, sp, #32
 8002474:	f001 fa76 	bl	8003964 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	2800      	cmp	r0, #0
 800247a:	d11a      	bne.n	80024b2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 130;
 8002480:	2282      	movs	r2, #130	@ 0x82
 8002482:	9202      	str	r2, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002484:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002486:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002488:	480d      	ldr	r0, [pc, #52]	@ (80024c0 <MX_TIM3_Init+0xc0>)
 800248a:	2200      	movs	r2, #0
 800248c:	a901      	add	r1, sp, #4
 800248e:	f001 f913 	bl	80036b8 <HAL_TIM_OC_ConfigChannel>
 8002492:	2800      	cmp	r0, #0
 8002494:	d110      	bne.n	80024b8 <MX_TIM3_Init+0xb8>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002496:	b011      	add	sp, #68	@ 0x44
 8002498:	bd00      	pop	{pc}
    Error_Handler();
 800249a:	f7ff fbdd 	bl	8001c58 <Error_Handler>
 800249e:	e7cf      	b.n	8002440 <MX_TIM3_Init+0x40>
    Error_Handler();
 80024a0:	f7ff fbda 	bl	8001c58 <Error_Handler>
 80024a4:	e7d1      	b.n	800244a <MX_TIM3_Init+0x4a>
    Error_Handler();
 80024a6:	f7ff fbd7 	bl	8001c58 <Error_Handler>
 80024aa:	e7d4      	b.n	8002456 <MX_TIM3_Init+0x56>
    Error_Handler();
 80024ac:	f7ff fbd4 	bl	8001c58 <Error_Handler>
 80024b0:	e7db      	b.n	800246a <MX_TIM3_Init+0x6a>
    Error_Handler();
 80024b2:	f7ff fbd1 	bl	8001c58 <Error_Handler>
 80024b6:	e7e1      	b.n	800247c <MX_TIM3_Init+0x7c>
    Error_Handler();
 80024b8:	f7ff fbce 	bl	8001c58 <Error_Handler>
}
 80024bc:	e7eb      	b.n	8002496 <MX_TIM3_Init+0x96>
 80024be:	46c0      	nop			@ (mov r8, r8)
 80024c0:	20000880 	.word	0x20000880
 80024c4:	40000400 	.word	0x40000400
 80024c8:	0000ffff 	.word	0x0000ffff

080024cc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80024cc:	b510      	push	{r4, lr}
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80024ce:	4809      	ldr	r0, [pc, #36]	@ (80024f4 <MX_TIM14_Init+0x28>)
 80024d0:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <MX_TIM14_Init+0x2c>)
 80024d2:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 48-1;
 80024d4:	232f      	movs	r3, #47	@ 0x2f
 80024d6:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024d8:	2300      	movs	r3, #0
 80024da:	6083      	str	r3, [r0, #8]
  htim14.Init.Period = 145;
 80024dc:	2291      	movs	r2, #145	@ 0x91
 80024de:	60c2      	str	r2, [r0, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024e0:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e2:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80024e4:	f001 f81c 	bl	8003520 <HAL_TIM_Base_Init>
 80024e8:	2800      	cmp	r0, #0
 80024ea:	d100      	bne.n	80024ee <MX_TIM14_Init+0x22>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80024ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80024ee:	f7ff fbb3 	bl	8001c58 <Error_Handler>
}
 80024f2:	e7fb      	b.n	80024ec <MX_TIM14_Init+0x20>
 80024f4:	20000834 	.word	0x20000834
 80024f8:	40002000 	.word	0x40002000

080024fc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80024fc:	b510      	push	{r4, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80024fe:	480a      	ldr	r0, [pc, #40]	@ (8002528 <MX_TIM16_Init+0x2c>)
 8002500:	4b0a      	ldr	r3, [pc, #40]	@ (800252c <MX_TIM16_Init+0x30>)
 8002502:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48-1;
 8002504:	232f      	movs	r3, #47	@ 0x2f
 8002506:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002508:	2300      	movs	r3, #0
 800250a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 1000;
 800250c:	22fa      	movs	r2, #250	@ 0xfa
 800250e:	0092      	lsls	r2, r2, #2
 8002510:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002512:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002514:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002518:	f001 f802 	bl	8003520 <HAL_TIM_Base_Init>
 800251c:	2800      	cmp	r0, #0
 800251e:	d100      	bne.n	8002522 <MX_TIM16_Init+0x26>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002520:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002522:	f7ff fb99 	bl	8001c58 <Error_Handler>
}
 8002526:	e7fb      	b.n	8002520 <MX_TIM16_Init+0x24>
 8002528:	200007e8 	.word	0x200007e8
 800252c:	40014400 	.word	0x40014400

08002530 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002530:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002532:	480a      	ldr	r0, [pc, #40]	@ (800255c <MX_TIM17_Init+0x2c>)
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <MX_TIM17_Init+0x30>)
 8002536:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 48-1;
 8002538:	232f      	movs	r3, #47	@ 0x2f
 800253a:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253c:	2300      	movs	r3, #0
 800253e:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 130;
 8002540:	2282      	movs	r2, #130	@ 0x82
 8002542:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002544:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8002546:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002548:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800254a:	f000 ffe9 	bl	8003520 <HAL_TIM_Base_Init>
 800254e:	2800      	cmp	r0, #0
 8002550:	d100      	bne.n	8002554 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002552:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002554:	f7ff fb80 	bl	8001c58 <Error_Handler>
}
 8002558:	e7fb      	b.n	8002552 <MX_TIM17_Init+0x22>
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	2000079c 	.word	0x2000079c
 8002560:	40014800 	.word	0x40014800

08002564 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002564:	b500      	push	{lr}
 8002566:	b087      	sub	sp, #28

  if(tim_baseHandle->Instance==TIM1)
 8002568:	6803      	ldr	r3, [r0, #0]
 800256a:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_TIM_Base_MspInit+0xe4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00d      	beq.n	800258c <HAL_TIM_Base_MspInit+0x28>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 8002570:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_TIM_Base_MspInit+0xe8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d025      	beq.n	80025c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM14)
 8002576:	4a36      	ldr	r2, [pc, #216]	@ (8002650 <HAL_TIM_Base_MspInit+0xec>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d02c      	beq.n	80025d6 <HAL_TIM_Base_MspInit+0x72>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM16)
 800257c:	4a35      	ldr	r2, [pc, #212]	@ (8002654 <HAL_TIM_Base_MspInit+0xf0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d03c      	beq.n	80025fc <HAL_TIM_Base_MspInit+0x98>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM17)
 8002582:	4a35      	ldr	r2, [pc, #212]	@ (8002658 <HAL_TIM_Base_MspInit+0xf4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d04c      	beq.n	8002622 <HAL_TIM_Base_MspInit+0xbe>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002588:	b007      	add	sp, #28
 800258a:	bd00      	pop	{pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258c:	4b33      	ldr	r3, [pc, #204]	@ (800265c <HAL_TIM_Base_MspInit+0xf8>)
 800258e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	0109      	lsls	r1, r1, #4
 8002594:	430a      	orrs	r2, r1
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	400b      	ands	r3, r1
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80025a0:	2200      	movs	r2, #0
 80025a2:	2100      	movs	r1, #0
 80025a4:	200d      	movs	r0, #13
 80025a6:	f000 f935 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80025aa:	200d      	movs	r0, #13
 80025ac:	f000 f936 	bl	800281c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80025b0:	2200      	movs	r2, #0
 80025b2:	2100      	movs	r1, #0
 80025b4:	200e      	movs	r0, #14
 80025b6:	f000 f92d 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80025ba:	200e      	movs	r0, #14
 80025bc:	f000 f92e 	bl	800281c <HAL_NVIC_EnableIRQ>
 80025c0:	e7e2      	b.n	8002588 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c2:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_TIM_Base_MspInit+0xf8>)
 80025c4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80025c6:	2302      	movs	r3, #2
 80025c8:	4319      	orrs	r1, r3
 80025ca:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80025cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ce:	4013      	ands	r3, r2
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	e7d8      	b.n	8002588 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <HAL_TIM_Base_MspInit+0xf8>)
 80025d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025da:	2180      	movs	r1, #128	@ 0x80
 80025dc:	0209      	lsls	r1, r1, #8
 80025de:	430a      	orrs	r2, r1
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	400b      	ands	r3, r1
 80025e6:	9303      	str	r3, [sp, #12]
 80025e8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	2013      	movs	r0, #19
 80025f0:	f000 f910 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80025f4:	2013      	movs	r0, #19
 80025f6:	f000 f911 	bl	800281c <HAL_NVIC_EnableIRQ>
 80025fa:	e7c5      	b.n	8002588 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <HAL_TIM_Base_MspInit+0xf8>)
 80025fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002600:	2180      	movs	r1, #128	@ 0x80
 8002602:	0289      	lsls	r1, r1, #10
 8002604:	430a      	orrs	r2, r1
 8002606:	641a      	str	r2, [r3, #64]	@ 0x40
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	400b      	ands	r3, r1
 800260c:	9304      	str	r3, [sp, #16]
 800260e:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2015      	movs	r0, #21
 8002616:	f000 f8fd 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800261a:	2015      	movs	r0, #21
 800261c:	f000 f8fe 	bl	800281c <HAL_NVIC_EnableIRQ>
 8002620:	e7b2      	b.n	8002588 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002622:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_TIM_Base_MspInit+0xf8>)
 8002624:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002626:	2180      	movs	r1, #128	@ 0x80
 8002628:	02c9      	lsls	r1, r1, #11
 800262a:	430a      	orrs	r2, r1
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	400b      	ands	r3, r1
 8002632:	9305      	str	r3, [sp, #20]
 8002634:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	2016      	movs	r0, #22
 800263c:	f000 f8ea 	bl	8002814 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002640:	2016      	movs	r0, #22
 8002642:	f000 f8eb 	bl	800281c <HAL_NVIC_EnableIRQ>
}
 8002646:	e79f      	b.n	8002588 <HAL_TIM_Base_MspInit+0x24>
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40000400 	.word	0x40000400
 8002650:	40002000 	.word	0x40002000
 8002654:	40014400 	.word	0x40014400
 8002658:	40014800 	.word	0x40014800
 800265c:	40021000 	.word	0x40021000

08002660 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002660:	480d      	ldr	r0, [pc, #52]	@ (8002698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002662:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002664:	f7ff fe84 	bl	8002370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002668:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800266a:	e003      	b.n	8002674 <LoopCopyDataInit>

0800266c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800266e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002670:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002672:	3104      	adds	r1, #4

08002674 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002674:	480a      	ldr	r0, [pc, #40]	@ (80026a0 <LoopForever+0xa>)
  ldr r3, =_edata
 8002676:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <LoopForever+0xe>)
  adds r2, r0, r1
 8002678:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800267a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800267c:	d3f6      	bcc.n	800266c <CopyDataInit>
  ldr r2, =_sbss
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <LoopForever+0x12>)
  b LoopFillZerobss
 8002680:	e002      	b.n	8002688 <LoopFillZerobss>

08002682 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002682:	2300      	movs	r3, #0
  str  r3, [r2]
 8002684:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002686:	3204      	adds	r2, #4

08002688 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8002688:	4b08      	ldr	r3, [pc, #32]	@ (80026ac <LoopForever+0x16>)
  cmp r2, r3
 800268a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800268c:	d3f9      	bcc.n	8002682 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800268e:	f001 fa81 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002692:	f7ff fb0d 	bl	8001cb0 <main>

08002696 <LoopForever>:

LoopForever:
    b LoopForever
 8002696:	e7fe      	b.n	8002696 <LoopForever>
  ldr   r0, =_estack
 8002698:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800269c:	08003d80 	.word	0x08003d80
  ldr r0, =_sdata
 80026a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80026a4:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80026a8:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80026ac:	20000a64 	.word	0x20000a64

080026b0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026b0:	e7fe      	b.n	80026b0 <ADC1_IRQHandler>
	...

080026b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80026b8:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <HAL_InitTick+0x4c>)
 80026ba:	7819      	ldrb	r1, [r3, #0]
 80026bc:	2900      	cmp	r1, #0
 80026be:	d101      	bne.n	80026c4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80026c2:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80026c4:	20fa      	movs	r0, #250	@ 0xfa
 80026c6:	0080      	lsls	r0, r0, #2
 80026c8:	f7fd fd1e 	bl	8000108 <__udivsi3>
 80026cc:	0001      	movs	r1, r0
 80026ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002704 <HAL_InitTick+0x50>)
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	f7fd fd19 	bl	8000108 <__udivsi3>
 80026d6:	f000 f8bd 	bl	8002854 <HAL_SYSTICK_Config>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d10d      	bne.n	80026fa <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026de:	2c03      	cmp	r4, #3
 80026e0:	d901      	bls.n	80026e6 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 80026e2:	2001      	movs	r0, #1
 80026e4:	e7ed      	b.n	80026c2 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e6:	3001      	adds	r0, #1
 80026e8:	2200      	movs	r2, #0
 80026ea:	0021      	movs	r1, r4
 80026ec:	4240      	negs	r0, r0
 80026ee:	f000 f891 	bl	8002814 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f2:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <HAL_InitTick+0x54>)
 80026f4:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e7e3      	b.n	80026c2 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 80026fa:	2001      	movs	r0, #1
 80026fc:	e7e1      	b.n	80026c2 <HAL_InitTick+0xe>
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000010 	.word	0x20000010
 8002704:	2000000c 	.word	0x2000000c
 8002708:	20000014 	.word	0x20000014

0800270c <HAL_Init>:
{
 800270c:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270e:	2003      	movs	r0, #3
 8002710:	f7ff ffd0 	bl	80026b4 <HAL_InitTick>
 8002714:	1e04      	subs	r4, r0, #0
 8002716:	d002      	beq.n	800271e <HAL_Init+0x12>
    status = HAL_ERROR;
 8002718:	2401      	movs	r4, #1
}
 800271a:	0020      	movs	r0, r4
 800271c:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 800271e:	f7ff fda3 	bl	8002268 <HAL_MspInit>
 8002722:	e7fa      	b.n	800271a <HAL_Init+0xe>

08002724 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_IncTick+0x10>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	4a03      	ldr	r2, [pc, #12]	@ (8002738 <HAL_IncTick+0x14>)
 800272a:	6811      	ldr	r1, [r2, #0]
 800272c:	185b      	adds	r3, r3, r1
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	4770      	bx	lr
 8002732:	46c0      	nop			@ (mov r8, r8)
 8002734:	20000010 	.word	0x20000010
 8002738:	20000918 	.word	0x20000918

0800273c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800273c:	4b01      	ldr	r3, [pc, #4]	@ (8002744 <HAL_GetTick+0x8>)
 800273e:	6818      	ldr	r0, [r3, #0]
}
 8002740:	4770      	bx	lr
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	20000918 	.word	0x20000918

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b570      	push	{r4, r5, r6, lr}
 800274a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800274c:	f7ff fff6 	bl	800273c <HAL_GetTick>
 8002750:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	1c63      	adds	r3, r4, #1
 8002754:	d002      	beq.n	800275c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002756:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <HAL_Delay+0x20>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800275c:	f7ff ffee 	bl	800273c <HAL_GetTick>
 8002760:	1b40      	subs	r0, r0, r5
 8002762:	42a0      	cmp	r0, r4
 8002764:	d3fa      	bcc.n	800275c <HAL_Delay+0x14>
  {
  }
}
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	20000010 	.word	0x20000010

0800276c <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 800276c:	4a02      	ldr	r2, [pc, #8]	@ (8002778 <HAL_SYSCFG_EnableRemap+0xc>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	4303      	orrs	r3, r0
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	4770      	bx	lr
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	40010000 	.word	0x40010000

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800277e:	2800      	cmp	r0, #0
 8002780:	db11      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002782:	0883      	lsrs	r3, r0, #2
 8002784:	4d13      	ldr	r5, [pc, #76]	@ (80027d4 <__NVIC_SetPriority+0x58>)
 8002786:	33c0      	adds	r3, #192	@ 0xc0
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	595c      	ldr	r4, [r3, r5]
 800278c:	2203      	movs	r2, #3
 800278e:	4010      	ands	r0, r2
 8002790:	00c0      	lsls	r0, r0, #3
 8002792:	32fc      	adds	r2, #252	@ 0xfc
 8002794:	0016      	movs	r6, r2
 8002796:	4086      	lsls	r6, r0
 8002798:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800279a:	0189      	lsls	r1, r1, #6
 800279c:	400a      	ands	r2, r1
 800279e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027a0:	4322      	orrs	r2, r4
 80027a2:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027a6:	230f      	movs	r3, #15
 80027a8:	4003      	ands	r3, r0
 80027aa:	3b08      	subs	r3, #8
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3306      	adds	r3, #6
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <__NVIC_SetPriority+0x5c>)
 80027b4:	4694      	mov	ip, r2
 80027b6:	4463      	add	r3, ip
 80027b8:	685c      	ldr	r4, [r3, #4]
 80027ba:	2203      	movs	r2, #3
 80027bc:	4010      	ands	r0, r2
 80027be:	00c0      	lsls	r0, r0, #3
 80027c0:	32fc      	adds	r2, #252	@ 0xfc
 80027c2:	0015      	movs	r5, r2
 80027c4:	4085      	lsls	r5, r0
 80027c6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027c8:	0189      	lsls	r1, r1, #6
 80027ca:	400a      	ands	r2, r1
 80027cc:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ce:	4322      	orrs	r2, r4
 80027d0:	605a      	str	r2, [r3, #4]
}
 80027d2:	e7e7      	b.n	80027a4 <__NVIC_SetPriority+0x28>
 80027d4:	e000e100 	.word	0xe000e100
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	3801      	subs	r0, #1
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	045b      	lsls	r3, r3, #17
 80027e2:	4298      	cmp	r0, r3
 80027e4:	d20f      	bcs.n	8002806 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a09      	ldr	r2, [pc, #36]	@ (800280c <SysTick_Config+0x30>)
 80027e8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ea:	4809      	ldr	r0, [pc, #36]	@ (8002810 <SysTick_Config+0x34>)
 80027ec:	6a03      	ldr	r3, [r0, #32]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	21c0      	movs	r1, #192	@ 0xc0
 80027f4:	0609      	lsls	r1, r1, #24
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fa:	2300      	movs	r3, #0
 80027fc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	3307      	adds	r3, #7
 8002800:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002802:	2000      	movs	r0, #0
}
 8002804:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002806:	2001      	movs	r0, #1
 8002808:	e7fc      	b.n	8002804 <SysTick_Config+0x28>
 800280a:	46c0      	nop			@ (mov r8, r8)
 800280c:	e000e010 	.word	0xe000e010
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002814:	b510      	push	{r4, lr}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002816:	f7ff ffb1 	bl	800277c <__NVIC_SetPriority>
}
 800281a:	bd10      	pop	{r4, pc}

0800281c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800281c:	2800      	cmp	r0, #0
 800281e:	db05      	blt.n	800282c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002820:	221f      	movs	r2, #31
 8002822:	4002      	ands	r2, r0
 8002824:	2301      	movs	r3, #1
 8002826:	4093      	lsls	r3, r2
 8002828:	4a01      	ldr	r2, [pc, #4]	@ (8002830 <HAL_NVIC_EnableIRQ+0x14>)
 800282a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800282c:	4770      	bx	lr
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	e000e100 	.word	0xe000e100

08002834 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002834:	2800      	cmp	r0, #0
 8002836:	db0a      	blt.n	800284e <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002838:	221f      	movs	r2, #31
 800283a:	4002      	ands	r2, r0
 800283c:	2301      	movs	r3, #1
 800283e:	4093      	lsls	r3, r2
 8002840:	4903      	ldr	r1, [pc, #12]	@ (8002850 <HAL_NVIC_DisableIRQ+0x1c>)
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002846:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800284a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100

08002854 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002854:	b510      	push	{r4, lr}
  return SysTick_Config(TicksNumb);
 8002856:	f7ff ffc1 	bl	80027dc <SysTick_Config>
}
 800285a:	bd10      	pop	{r4, pc}

0800285c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800285c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800285e:	46d6      	mov	lr, sl
 8002860:	464f      	mov	r7, r9
 8002862:	4646      	mov	r6, r8
 8002864:	b5c0      	push	{r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002866:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002868:	e03b      	b.n	80028e2 <HAL_GPIO_Init+0x86>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800286a:	2505      	movs	r5, #5
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x14>
 800286e:	2500      	movs	r5, #0
 8002870:	40a5      	lsls	r5, r4
 8002872:	002c      	movs	r4, r5
 8002874:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002876:	4d61      	ldr	r5, [pc, #388]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 8002878:	3218      	adds	r2, #24
 800287a:	0092      	lsls	r2, r2, #2
 800287c:	5154      	str	r4, [r2, r5]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800287e:	2280      	movs	r2, #128	@ 0x80
 8002880:	58af      	ldr	r7, [r5, r2]
        tmp &= ~((uint32_t)iocurrent);
 8002882:	464a      	mov	r2, r9
 8002884:	43d2      	mvns	r2, r2
 8002886:	003d      	movs	r5, r7
 8002888:	464c      	mov	r4, r9
 800288a:	43a5      	bics	r5, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800288c:	684c      	ldr	r4, [r1, #4]
 800288e:	03e4      	lsls	r4, r4, #15
 8002890:	d502      	bpl.n	8002898 <HAL_GPIO_Init+0x3c>
        {
          tmp |= iocurrent;
 8002892:	003d      	movs	r5, r7
 8002894:	464c      	mov	r4, r9
 8002896:	4325      	orrs	r5, r4
        }
        EXTI->IMR1 = tmp;
 8002898:	4c58      	ldr	r4, [pc, #352]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 800289a:	2780      	movs	r7, #128	@ 0x80
 800289c:	51e5      	str	r5, [r4, r7]

        tmp = EXTI->EMR1;
 800289e:	2584      	movs	r5, #132	@ 0x84
 80028a0:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((uint32_t)iocurrent);
 80028a2:	003d      	movs	r5, r7
 80028a4:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a6:	684c      	ldr	r4, [r1, #4]
 80028a8:	03a4      	lsls	r4, r4, #14
 80028aa:	d502      	bpl.n	80028b2 <HAL_GPIO_Init+0x56>
        {
          tmp |= iocurrent;
 80028ac:	003d      	movs	r5, r7
 80028ae:	464c      	mov	r4, r9
 80028b0:	4325      	orrs	r5, r4
        }
        EXTI->EMR1 = tmp;
 80028b2:	4c52      	ldr	r4, [pc, #328]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 80028b4:	2784      	movs	r7, #132	@ 0x84
 80028b6:	51e5      	str	r5, [r4, r7]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80028b8:	6827      	ldr	r7, [r4, #0]
        tmp &= ~((uint32_t)iocurrent);
 80028ba:	003d      	movs	r5, r7
 80028bc:	4015      	ands	r5, r2
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028be:	684c      	ldr	r4, [r1, #4]
 80028c0:	02e4      	lsls	r4, r4, #11
 80028c2:	d502      	bpl.n	80028ca <HAL_GPIO_Init+0x6e>
        {
          tmp |= iocurrent;
 80028c4:	003d      	movs	r5, r7
 80028c6:	464c      	mov	r4, r9
 80028c8:	4325      	orrs	r5, r4
        }
        EXTI->RTSR1 = tmp;
 80028ca:	4c4c      	ldr	r4, [pc, #304]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 80028cc:	6025      	str	r5, [r4, #0]

        tmp = EXTI->FTSR1;
 80028ce:	6865      	ldr	r5, [r4, #4]
        tmp &= ~((uint32_t)iocurrent);
 80028d0:	402a      	ands	r2, r5
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028d2:	684c      	ldr	r4, [r1, #4]
 80028d4:	02a4      	lsls	r4, r4, #10
 80028d6:	d501      	bpl.n	80028dc <HAL_GPIO_Init+0x80>
        {
          tmp |= iocurrent;
 80028d8:	464a      	mov	r2, r9
 80028da:	432a      	orrs	r2, r5
        }
        EXTI->FTSR1 = tmp;
 80028dc:	4c47      	ldr	r4, [pc, #284]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 80028de:	6062      	str	r2, [r4, #4]
      }
    }

    position++;
 80028e0:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028e2:	680c      	ldr	r4, [r1, #0]
 80028e4:	0022      	movs	r2, r4
 80028e6:	40da      	lsrs	r2, r3
 80028e8:	d100      	bne.n	80028ec <HAL_GPIO_Init+0x90>
 80028ea:	e081      	b.n	80029f0 <HAL_GPIO_Init+0x194>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80028ec:	2201      	movs	r2, #1
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0026      	movs	r6, r4
 80028f2:	4016      	ands	r6, r2
 80028f4:	46b1      	mov	r9, r6
    if (iocurrent != 0U)
 80028f6:	4214      	tst	r4, r2
 80028f8:	d0f2      	beq.n	80028e0 <HAL_GPIO_Init+0x84>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fa:	684c      	ldr	r4, [r1, #4]
 80028fc:	2c02      	cmp	r4, #2
 80028fe:	d001      	beq.n	8002904 <HAL_GPIO_Init+0xa8>
 8002900:	2c12      	cmp	r4, #18
 8002902:	d118      	bne.n	8002936 <HAL_GPIO_Init+0xda>
        tmp = GPIOx->AFR[position >> 3U];
 8002904:	08dd      	lsrs	r5, r3, #3
 8002906:	3508      	adds	r5, #8
 8002908:	00ad      	lsls	r5, r5, #2
 800290a:	582c      	ldr	r4, [r5, r0]
 800290c:	46a4      	mov	ip, r4
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800290e:	2707      	movs	r7, #7
 8002910:	401f      	ands	r7, r3
 8002912:	00bf      	lsls	r7, r7, #2
 8002914:	240f      	movs	r4, #15
 8002916:	46a2      	mov	sl, r4
 8002918:	0026      	movs	r6, r4
 800291a:	40be      	lsls	r6, r7
 800291c:	46b0      	mov	r8, r6
 800291e:	4666      	mov	r6, ip
 8002920:	4644      	mov	r4, r8
 8002922:	43a6      	bics	r6, r4
 8002924:	46b4      	mov	ip, r6
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002926:	690c      	ldr	r4, [r1, #16]
 8002928:	4656      	mov	r6, sl
 800292a:	4026      	ands	r6, r4
 800292c:	0034      	movs	r4, r6
 800292e:	40bc      	lsls	r4, r7
 8002930:	4666      	mov	r6, ip
 8002932:	4334      	orrs	r4, r6
        GPIOx->AFR[position >> 3U] = tmp;
 8002934:	502c      	str	r4, [r5, r0]
      tmp = GPIOx->MODER;
 8002936:	6804      	ldr	r4, [r0, #0]
 8002938:	46a4      	mov	ip, r4
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800293a:	005d      	lsls	r5, r3, #1
 800293c:	2403      	movs	r4, #3
 800293e:	46a2      	mov	sl, r4
 8002940:	0027      	movs	r7, r4
 8002942:	40af      	lsls	r7, r5
 8002944:	46b8      	mov	r8, r7
 8002946:	43ff      	mvns	r7, r7
 8002948:	4666      	mov	r6, ip
 800294a:	4644      	mov	r4, r8
 800294c:	43a6      	bics	r6, r4
 800294e:	46b4      	mov	ip, r6
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002950:	684c      	ldr	r4, [r1, #4]
 8002952:	4656      	mov	r6, sl
 8002954:	4026      	ands	r6, r4
 8002956:	0034      	movs	r4, r6
 8002958:	40ac      	lsls	r4, r5
 800295a:	4666      	mov	r6, ip
 800295c:	4334      	orrs	r4, r6
      GPIOx->MODER = tmp;
 800295e:	6004      	str	r4, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002960:	684c      	ldr	r4, [r1, #4]
 8002962:	1e66      	subs	r6, r4, #1
 8002964:	2e01      	cmp	r6, #1
 8002966:	d903      	bls.n	8002970 <HAL_GPIO_Init+0x114>
 8002968:	2c11      	cmp	r4, #17
 800296a:	d001      	beq.n	8002970 <HAL_GPIO_Init+0x114>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800296c:	2c12      	cmp	r4, #18
 800296e:	d112      	bne.n	8002996 <HAL_GPIO_Init+0x13a>
        tmp = GPIOx->OSPEEDR;
 8002970:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002972:	403c      	ands	r4, r7
 8002974:	46a4      	mov	ip, r4
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002976:	68cc      	ldr	r4, [r1, #12]
 8002978:	40ac      	lsls	r4, r5
 800297a:	4666      	mov	r6, ip
 800297c:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = tmp;
 800297e:	6084      	str	r4, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002980:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002982:	4394      	bics	r4, r2
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002984:	684a      	ldr	r2, [r1, #4]
 8002986:	0912      	lsrs	r2, r2, #4
 8002988:	4694      	mov	ip, r2
 800298a:	2201      	movs	r2, #1
 800298c:	4666      	mov	r6, ip
 800298e:	4032      	ands	r2, r6
 8002990:	409a      	lsls	r2, r3
 8002992:	4322      	orrs	r2, r4
        GPIOx->OTYPER = tmp;
 8002994:	6042      	str	r2, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002996:	684a      	ldr	r2, [r1, #4]
 8002998:	2a03      	cmp	r2, #3
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x14c>
        tmp = GPIOx->PUPDR;
 800299c:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800299e:	403c      	ands	r4, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80029a0:	688a      	ldr	r2, [r1, #8]
 80029a2:	40aa      	lsls	r2, r5
 80029a4:	4322      	orrs	r2, r4
        GPIOx->PUPDR = tmp;
 80029a6:	60c2      	str	r2, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a8:	684a      	ldr	r2, [r1, #4]
 80029aa:	00d2      	lsls	r2, r2, #3
 80029ac:	d598      	bpl.n	80028e0 <HAL_GPIO_Init+0x84>
        tmp = EXTI->EXTICR[position >> 2U];
 80029ae:	089a      	lsrs	r2, r3, #2
 80029b0:	0014      	movs	r4, r2
 80029b2:	3418      	adds	r4, #24
 80029b4:	00a4      	lsls	r4, r4, #2
 80029b6:	4d11      	ldr	r5, [pc, #68]	@ (80029fc <HAL_GPIO_Init+0x1a0>)
 80029b8:	5967      	ldr	r7, [r4, r5]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029ba:	2403      	movs	r4, #3
 80029bc:	401c      	ands	r4, r3
 80029be:	00e4      	lsls	r4, r4, #3
 80029c0:	250f      	movs	r5, #15
 80029c2:	40a5      	lsls	r5, r4
 80029c4:	43af      	bics	r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80029c6:	25a0      	movs	r5, #160	@ 0xa0
 80029c8:	05ed      	lsls	r5, r5, #23
 80029ca:	42a8      	cmp	r0, r5
 80029cc:	d100      	bne.n	80029d0 <HAL_GPIO_Init+0x174>
 80029ce:	e74e      	b.n	800286e <HAL_GPIO_Init+0x12>
 80029d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002a00 <HAL_GPIO_Init+0x1a4>)
 80029d2:	42a8      	cmp	r0, r5
 80029d4:	d008      	beq.n	80029e8 <HAL_GPIO_Init+0x18c>
 80029d6:	4d0b      	ldr	r5, [pc, #44]	@ (8002a04 <HAL_GPIO_Init+0x1a8>)
 80029d8:	42a8      	cmp	r0, r5
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x190>
 80029dc:	4d0a      	ldr	r5, [pc, #40]	@ (8002a08 <HAL_GPIO_Init+0x1ac>)
 80029de:	42a8      	cmp	r0, r5
 80029e0:	d100      	bne.n	80029e4 <HAL_GPIO_Init+0x188>
 80029e2:	e742      	b.n	800286a <HAL_GPIO_Init+0xe>
 80029e4:	2506      	movs	r5, #6
 80029e6:	e743      	b.n	8002870 <HAL_GPIO_Init+0x14>
 80029e8:	2501      	movs	r5, #1
 80029ea:	e741      	b.n	8002870 <HAL_GPIO_Init+0x14>
 80029ec:	2502      	movs	r5, #2
 80029ee:	e73f      	b.n	8002870 <HAL_GPIO_Init+0x14>
  }
}
 80029f0:	bce0      	pop	{r5, r6, r7}
 80029f2:	46ba      	mov	sl, r7
 80029f4:	46b1      	mov	r9, r6
 80029f6:	46a8      	mov	r8, r5
 80029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fa:	46c0      	nop			@ (mov r8, r8)
 80029fc:	40021800 	.word	0x40021800
 8002a00:	50000400 	.word	0x50000400
 8002a04:	50000800 	.word	0x50000800
 8002a08:	50001400 	.word	0x50001400

08002a0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a0e:	46ce      	mov	lr, r9
 8002a10:	4647      	mov	r7, r8
 8002a12:	b580      	push	{r7, lr}
 8002a14:	4689      	mov	r9, r1
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a16:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002a18:	e023      	b.n	8002a62 <HAL_GPIO_DeInit+0x56>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002a1a:	2105      	movs	r1, #5
 8002a1c:	4688      	mov	r8, r1
 8002a1e:	e001      	b.n	8002a24 <HAL_GPIO_DeInit+0x18>
 8002a20:	2100      	movs	r1, #0
 8002a22:	4688      	mov	r8, r1
 8002a24:	4641      	mov	r1, r8
 8002a26:	40a1      	lsls	r1, r4
 8002a28:	42a9      	cmp	r1, r5
 8002a2a:	d047      	beq.n	8002abc <HAL_GPIO_DeInit+0xb0>
        EXTI->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002a2c:	6804      	ldr	r4, [r0, #0]
 8002a2e:	005e      	lsls	r6, r3, #1
 8002a30:	2503      	movs	r5, #3
 8002a32:	40b5      	lsls	r5, r6
 8002a34:	432c      	orrs	r4, r5
 8002a36:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002a38:	08dc      	lsrs	r4, r3, #3
 8002a3a:	3408      	adds	r4, #8
 8002a3c:	00a4      	lsls	r4, r4, #2
 8002a3e:	5827      	ldr	r7, [r4, r0]
 8002a40:	2607      	movs	r6, #7
 8002a42:	401e      	ands	r6, r3
 8002a44:	00b6      	lsls	r6, r6, #2
 8002a46:	210f      	movs	r1, #15
 8002a48:	40b1      	lsls	r1, r6
 8002a4a:	438f      	bics	r7, r1
 8002a4c:	5027      	str	r7, [r4, r0]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a4e:	6884      	ldr	r4, [r0, #8]
 8002a50:	43ac      	bics	r4, r5
 8002a52:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002a54:	6844      	ldr	r4, [r0, #4]
 8002a56:	4394      	bics	r4, r2
 8002a58:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002a5a:	68c2      	ldr	r2, [r0, #12]
 8002a5c:	43aa      	bics	r2, r5
 8002a5e:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8002a60:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8002a62:	464a      	mov	r2, r9
 8002a64:	40da      	lsrs	r2, r3
 8002a66:	d045      	beq.n	8002af4 <HAL_GPIO_DeInit+0xe8>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	409a      	lsls	r2, r3
 8002a6c:	464c      	mov	r4, r9
 8002a6e:	4014      	ands	r4, r2
 8002a70:	46a4      	mov	ip, r4
    if (iocurrent != 0U)
 8002a72:	4649      	mov	r1, r9
 8002a74:	4211      	tst	r1, r2
 8002a76:	d0f3      	beq.n	8002a60 <HAL_GPIO_DeInit+0x54>
      tmp = EXTI->EXTICR[position >> 2U];
 8002a78:	089f      	lsrs	r7, r3, #2
 8002a7a:	003c      	movs	r4, r7
 8002a7c:	3418      	adds	r4, #24
 8002a7e:	00a4      	lsls	r4, r4, #2
 8002a80:	4d1e      	ldr	r5, [pc, #120]	@ (8002afc <HAL_GPIO_DeInit+0xf0>)
 8002a82:	5965      	ldr	r5, [r4, r5]
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002a84:	2603      	movs	r6, #3
 8002a86:	401e      	ands	r6, r3
 8002a88:	00f4      	lsls	r4, r6, #3
 8002a8a:	260f      	movs	r6, #15
 8002a8c:	40a6      	lsls	r6, r4
 8002a8e:	4035      	ands	r5, r6
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002a90:	21a0      	movs	r1, #160	@ 0xa0
 8002a92:	05c9      	lsls	r1, r1, #23
 8002a94:	4288      	cmp	r0, r1
 8002a96:	d0c3      	beq.n	8002a20 <HAL_GPIO_DeInit+0x14>
 8002a98:	4919      	ldr	r1, [pc, #100]	@ (8002b00 <HAL_GPIO_DeInit+0xf4>)
 8002a9a:	4288      	cmp	r0, r1
 8002a9c:	d008      	beq.n	8002ab0 <HAL_GPIO_DeInit+0xa4>
 8002a9e:	4919      	ldr	r1, [pc, #100]	@ (8002b04 <HAL_GPIO_DeInit+0xf8>)
 8002aa0:	4288      	cmp	r0, r1
 8002aa2:	d008      	beq.n	8002ab6 <HAL_GPIO_DeInit+0xaa>
 8002aa4:	4918      	ldr	r1, [pc, #96]	@ (8002b08 <HAL_GPIO_DeInit+0xfc>)
 8002aa6:	4288      	cmp	r0, r1
 8002aa8:	d0b7      	beq.n	8002a1a <HAL_GPIO_DeInit+0xe>
 8002aaa:	2106      	movs	r1, #6
 8002aac:	4688      	mov	r8, r1
 8002aae:	e7b9      	b.n	8002a24 <HAL_GPIO_DeInit+0x18>
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4688      	mov	r8, r1
 8002ab4:	e7b6      	b.n	8002a24 <HAL_GPIO_DeInit+0x18>
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	4688      	mov	r8, r1
 8002aba:	e7b3      	b.n	8002a24 <HAL_GPIO_DeInit+0x18>
        EXTI->IMR1 &= ~(iocurrent);
 8002abc:	4d0f      	ldr	r5, [pc, #60]	@ (8002afc <HAL_GPIO_DeInit+0xf0>)
 8002abe:	2180      	movs	r1, #128	@ 0x80
 8002ac0:	4688      	mov	r8, r1
 8002ac2:	586c      	ldr	r4, [r5, r1]
 8002ac4:	4661      	mov	r1, ip
 8002ac6:	438c      	bics	r4, r1
 8002ac8:	4641      	mov	r1, r8
 8002aca:	506c      	str	r4, [r5, r1]
        EXTI->EMR1 &= ~(iocurrent);
 8002acc:	3104      	adds	r1, #4
 8002ace:	4688      	mov	r8, r1
 8002ad0:	586c      	ldr	r4, [r5, r1]
 8002ad2:	4661      	mov	r1, ip
 8002ad4:	438c      	bics	r4, r1
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	506c      	str	r4, [r5, r1]
        EXTI->RTSR1 &= ~(iocurrent);
 8002ada:	682c      	ldr	r4, [r5, #0]
 8002adc:	4661      	mov	r1, ip
 8002ade:	438c      	bics	r4, r1
 8002ae0:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002ae2:	686c      	ldr	r4, [r5, #4]
 8002ae4:	438c      	bics	r4, r1
 8002ae6:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002ae8:	3718      	adds	r7, #24
 8002aea:	00bc      	lsls	r4, r7, #2
 8002aec:	5967      	ldr	r7, [r4, r5]
 8002aee:	43b7      	bics	r7, r6
 8002af0:	5167      	str	r7, [r4, r5]
 8002af2:	e79b      	b.n	8002a2c <HAL_GPIO_DeInit+0x20>
  }
}
 8002af4:	bcc0      	pop	{r6, r7}
 8002af6:	46b9      	mov	r9, r7
 8002af8:	46b0      	mov	r8, r6
 8002afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afc:	40021800 	.word	0x40021800
 8002b00:	50000400 	.word	0x50000400
 8002b04:	50000800 	.word	0x50000800
 8002b08:	50001400 	.word	0x50001400

08002b0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002b0c:	6903      	ldr	r3, [r0, #16]
 8002b0e:	420b      	tst	r3, r1
 8002b10:	d001      	beq.n	8002b16 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8002b12:	2001      	movs	r0, #1
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002b14:	4770      	bx	lr
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2000      	movs	r0, #0
 8002b18:	e7fc      	b.n	8002b14 <HAL_GPIO_ReadPin+0x8>

08002b1a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b1e:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b20:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b22:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002b24:	e7fc      	b.n	8002b20 <HAL_GPIO_WritePin+0x6>

08002b26 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b26:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b28:	0013      	movs	r3, r2
 8002b2a:	400b      	ands	r3, r1
 8002b2c:	041b      	lsls	r3, r3, #16
 8002b2e:	4391      	bics	r1, r2
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6183      	str	r3, [r0, #24]
}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	0004      	movs	r4, r0
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002b3c:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	4218      	tst	r0, r3
 8002b42:	d104      	bne.n	8002b4e <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4223      	tst	r3, r4
 8002b4a:	d105      	bne.n	8002b58 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8002b4c:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002b4e:	4b05      	ldr	r3, [pc, #20]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b50:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002b52:	f7fe ffff 	bl	8001b54 <HAL_GPIO_EXTI_Rising_Callback>
 8002b56:	e7f5      	b.n	8002b44 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002b58:	4b02      	ldr	r3, [pc, #8]	@ (8002b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b5a:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002b5c:	0020      	movs	r0, r4
 8002b5e:	f7ff f843 	bl	8001be8 <HAL_GPIO_EXTI_Falling_Callback>
}
 8002b62:	e7f3      	b.n	8002b4c <HAL_GPIO_EXTI_IRQHandler+0x14>
 8002b64:	40021800 	.word	0x40021800

08002b68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b68:	b570      	push	{r4, r5, r6, lr}
 8002b6a:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b6c:	d100      	bne.n	8002b70 <HAL_RCC_OscConfig+0x8>
 8002b6e:	e139      	b.n	8002de4 <HAL_RCC_OscConfig+0x27c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b70:	6803      	ldr	r3, [r0, #0]
 8002b72:	07db      	lsls	r3, r3, #31
 8002b74:	d52c      	bpl.n	8002bd0 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b76:	4ba1      	ldr	r3, [pc, #644]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	2338      	movs	r3, #56	@ 0x38
 8002b7c:	4013      	ands	r3, r2

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d022      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x60>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b82:	6843      	ldr	r3, [r0, #4]
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	0252      	lsls	r2, r2, #9
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02e      	beq.n	8002bea <HAL_RCC_OscConfig+0x82>
 8002b8c:	22a0      	movs	r2, #160	@ 0xa0
 8002b8e:	02d2      	lsls	r2, r2, #11
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d031      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x90>
 8002b94:	4b99      	ldr	r3, [pc, #612]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4999      	ldr	r1, [pc, #612]	@ (8002e00 <HAL_RCC_OscConfig+0x298>)
 8002b9a:	400a      	ands	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4998      	ldr	r1, [pc, #608]	@ (8002e04 <HAL_RCC_OscConfig+0x29c>)
 8002ba2:	400a      	ands	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba6:	6863      	ldr	r3, [r4, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d031      	beq.n	8002c10 <HAL_RCC_OscConfig+0xa8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff fdc6 	bl	800273c <HAL_GetTick>
 8002bb0:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb2:	4b92      	ldr	r3, [pc, #584]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	039b      	lsls	r3, r3, #14
 8002bb8:	d40a      	bmi.n	8002bd0 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002bba:	f7ff fdbf 	bl	800273c <HAL_GetTick>
 8002bbe:	1b40      	subs	r0, r0, r5
 8002bc0:	2864      	cmp	r0, #100	@ 0x64
 8002bc2:	d9f6      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x4a>
          {
            return HAL_TIMEOUT;
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	e10e      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002bc8:	6843      	ldr	r3, [r0, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d100      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x68>
 8002bce:	e10b      	b.n	8002de8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	079b      	lsls	r3, r3, #30
 8002bd4:	d547      	bpl.n	8002c66 <HAL_RCC_OscConfig+0xfe>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	4b89      	ldr	r3, [pc, #548]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2238      	movs	r2, #56	@ 0x38

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002bdc:	421a      	tst	r2, r3
 8002bde:	d161      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x13c>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002be0:	68e3      	ldr	r3, [r4, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d122      	bne.n	8002c2c <HAL_RCC_OscConfig+0xc4>
      {
        return HAL_ERROR;
 8002be6:	2001      	movs	r0, #1
 8002be8:	e0fd      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bea:	4a84      	ldr	r2, [pc, #528]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002bec:	6811      	ldr	r1, [r2, #0]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	025b      	lsls	r3, r3, #9
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e7d6      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3e>
 8002bf8:	4b80      	ldr	r3, [pc, #512]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002bfa:	6819      	ldr	r1, [r3, #0]
 8002bfc:	2280      	movs	r2, #128	@ 0x80
 8002bfe:	02d2      	lsls	r2, r2, #11
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	2280      	movs	r2, #128	@ 0x80
 8002c08:	0252      	lsls	r2, r2, #9
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e7ca      	b.n	8002ba6 <HAL_RCC_OscConfig+0x3e>
        tickstart = HAL_GetTick();
 8002c10:	f7ff fd94 	bl	800273c <HAL_GetTick>
 8002c14:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c16:	4b79      	ldr	r3, [pc, #484]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	039b      	lsls	r3, r3, #14
 8002c1c:	d5d8      	bpl.n	8002bd0 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002c1e:	f7ff fd8d 	bl	800273c <HAL_GetTick>
 8002c22:	1b40      	subs	r0, r0, r5
 8002c24:	2864      	cmp	r0, #100	@ 0x64
 8002c26:	d9f6      	bls.n	8002c16 <HAL_RCC_OscConfig+0xae>
            return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e0dc      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b73      	ldr	r3, [pc, #460]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	4975      	ldr	r1, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x2a0>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	6961      	ldr	r1, [r4, #20]
 8002c36:	0209      	lsls	r1, r1, #8
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	4973      	ldr	r1, [pc, #460]	@ (8002e0c <HAL_RCC_OscConfig+0x2a4>)
 8002c40:	400a      	ands	r2, r1
 8002c42:	6921      	ldr	r1, [r4, #16]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	0adb      	lsrs	r3, r3, #11
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	401a      	ands	r2, r3
 8002c50:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x2a8>)
 8002c52:	40d3      	lsrs	r3, r2
 8002c54:	4a6f      	ldr	r2, [pc, #444]	@ (8002e14 <HAL_RCC_OscConfig+0x2ac>)
 8002c56:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c58:	4b6f      	ldr	r3, [pc, #444]	@ (8002e18 <HAL_RCC_OscConfig+0x2b0>)
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	f7ff fd2a 	bl	80026b4 <HAL_InitTick>
 8002c60:	2800      	cmp	r0, #0
 8002c62:	d000      	beq.n	8002c66 <HAL_RCC_OscConfig+0xfe>
 8002c64:	e0c2      	b.n	8002dec <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	071b      	lsls	r3, r3, #28
 8002c6a:	d557      	bpl.n	8002d1c <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002c6c:	4b63      	ldr	r3, [pc, #396]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	2338      	movs	r3, #56	@ 0x38
 8002c72:	4013      	ands	r3, r2
 8002c74:	2b18      	cmp	r3, #24
 8002c76:	d04e      	beq.n	8002d16 <HAL_RCC_OscConfig+0x1ae>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c78:	69a3      	ldr	r3, [r4, #24]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d077      	beq.n	8002d6e <HAL_RCC_OscConfig+0x206>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002c80:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002c82:	2101      	movs	r1, #1
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff fd58 	bl	800273c <HAL_GetTick>
 8002c8c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c92:	079b      	lsls	r3, r3, #30
 8002c94:	d442      	bmi.n	8002d1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002c96:	f7ff fd51 	bl	800273c <HAL_GetTick>
 8002c9a:	1b40      	subs	r0, r0, r5
 8002c9c:	2802      	cmp	r0, #2
 8002c9e:	d9f6      	bls.n	8002c8e <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002ca0:	2003      	movs	r0, #3
 8002ca2:	e0a0      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ca4:	68e3      	ldr	r3, [r4, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d022      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002caa:	4a54      	ldr	r2, [pc, #336]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002cac:	6813      	ldr	r3, [r2, #0]
 8002cae:	4957      	ldr	r1, [pc, #348]	@ (8002e0c <HAL_RCC_OscConfig+0x2a4>)
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	6921      	ldr	r1, [r4, #16]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002cb8:	6811      	ldr	r1, [r2, #0]
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cc2:	f7ff fd3b 	bl	800273c <HAL_GetTick>
 8002cc6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	055b      	lsls	r3, r3, #21
 8002cce:	d406      	bmi.n	8002cde <HAL_RCC_OscConfig+0x176>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002cd0:	f7ff fd34 	bl	800273c <HAL_GetTick>
 8002cd4:	1b40      	subs	r0, r0, r5
 8002cd6:	2802      	cmp	r0, #2
 8002cd8:	d9f6      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 8002cda:	2003      	movs	r0, #3
 8002cdc:	e083      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cde:	4947      	ldr	r1, [pc, #284]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002ce0:	684b      	ldr	r3, [r1, #4]
 8002ce2:	4a49      	ldr	r2, [pc, #292]	@ (8002e08 <HAL_RCC_OscConfig+0x2a0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	6962      	ldr	r2, [r4, #20]
 8002ce8:	0212      	lsls	r2, r2, #8
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]
 8002cee:	e7ba      	b.n	8002c66 <HAL_RCC_OscConfig+0xfe>
        __HAL_RCC_HSI_DISABLE();
 8002cf0:	4a42      	ldr	r2, [pc, #264]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002cf2:	6813      	ldr	r3, [r2, #0]
 8002cf4:	4949      	ldr	r1, [pc, #292]	@ (8002e1c <HAL_RCC_OscConfig+0x2b4>)
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002cfa:	f7ff fd1f 	bl	800273c <HAL_GetTick>
 8002cfe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d00:	4b3e      	ldr	r3, [pc, #248]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	055b      	lsls	r3, r3, #21
 8002d06:	d5ae      	bpl.n	8002c66 <HAL_RCC_OscConfig+0xfe>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002d08:	f7ff fd18 	bl	800273c <HAL_GetTick>
 8002d0c:	1b40      	subs	r0, r0, r5
 8002d0e:	2802      	cmp	r0, #2
 8002d10:	d9f6      	bls.n	8002d00 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8002d12:	2003      	movs	r0, #3
 8002d14:	e067      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002d16:	69a3      	ldr	r3, [r4, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d069      	beq.n	8002df0 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	075b      	lsls	r3, r3, #29
 8002d20:	d568      	bpl.n	8002df4 <HAL_RCC_OscConfig+0x28c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002d22:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	2338      	movs	r3, #56	@ 0x38
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	d032      	beq.n	8002d94 <HAL_RCC_OscConfig+0x22c>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2e:	68a3      	ldr	r3, [r4, #8]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d034      	beq.n	8002d9e <HAL_RCC_OscConfig+0x236>
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d038      	beq.n	8002daa <HAL_RCC_OscConfig+0x242>
 8002d38:	4b30      	ldr	r3, [pc, #192]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	438a      	bics	r2, r1
 8002d40:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002d42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002d44:	3103      	adds	r1, #3
 8002d46:	438a      	bics	r2, r1
 8002d48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d038      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7ff fcf4 	bl	800273c <HAL_GetTick>
 8002d54:	0004      	movs	r4, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002d56:	4b29      	ldr	r3, [pc, #164]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5a:	079b      	lsls	r3, r3, #30
 8002d5c:	d42f      	bmi.n	8002dbe <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7ff fced 	bl	800273c <HAL_GetTick>
 8002d62:	1b00      	subs	r0, r0, r4
 8002d64:	4b2e      	ldr	r3, [pc, #184]	@ (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002d66:	4298      	cmp	r0, r3
 8002d68:	d9f5      	bls.n	8002d56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002d6a:	2003      	movs	r0, #3
 8002d6c:	e03b      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
        __HAL_RCC_LSI_DISABLE();
 8002d6e:	4a23      	ldr	r2, [pc, #140]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d70:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002d72:	2101      	movs	r1, #1
 8002d74:	438b      	bics	r3, r1
 8002d76:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002d78:	f7ff fce0 	bl	800273c <HAL_GetTick>
 8002d7c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	079b      	lsls	r3, r3, #30
 8002d84:	d5ca      	bpl.n	8002d1c <HAL_RCC_OscConfig+0x1b4>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002d86:	f7ff fcd9 	bl	800273c <HAL_GetTick>
 8002d8a:	1b40      	subs	r0, r0, r5
 8002d8c:	2802      	cmp	r0, #2
 8002d8e:	d9f6      	bls.n	8002d7e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8002d90:	2003      	movs	r0, #3
 8002d92:	e028      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002d94:	68a3      	ldr	r3, [r4, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d02e      	beq.n	8002df8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	e023      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d9e:	4a17      	ldr	r2, [pc, #92]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002da0:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002da2:	2101      	movs	r1, #1
 8002da4:	430b      	orrs	r3, r1
 8002da6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002da8:	e7cf      	b.n	8002d4a <HAL_RCC_OscConfig+0x1e2>
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002dac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dae:	2104      	movs	r1, #4
 8002db0:	430a      	orrs	r2, r1
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002db4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002db6:	3903      	subs	r1, #3
 8002db8:	430a      	orrs	r2, r1
 8002dba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002dbc:	e7c5      	b.n	8002d4a <HAL_RCC_OscConfig+0x1e2>
  return HAL_OK;
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e011      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fcbb 	bl	800273c <HAL_GetTick>
 8002dc6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <HAL_RCC_OscConfig+0x294>)
 8002dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dcc:	079b      	lsls	r3, r3, #30
 8002dce:	d507      	bpl.n	8002de0 <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7ff fcb4 	bl	800273c <HAL_GetTick>
 8002dd4:	1b00      	subs	r0, r0, r4
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_RCC_OscConfig+0x2b8>)
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d9f5      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x260>
            return HAL_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	e002      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8002de0:	2000      	movs	r0, #0
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
    return HAL_ERROR;
 8002de4:	2001      	movs	r0, #1
}
 8002de6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e7fc      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
          return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e7fa      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8002df0:	2001      	movs	r0, #1
 8002df2:	e7f8      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
  return HAL_OK;
 8002df4:	2000      	movs	r0, #0
 8002df6:	e7f6      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
        return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e7f4      	b.n	8002de6 <HAL_RCC_OscConfig+0x27e>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	fffeffff 	.word	0xfffeffff
 8002e04:	fffbffff 	.word	0xfffbffff
 8002e08:	ffff80ff 	.word	0xffff80ff
 8002e0c:	ffffc7ff 	.word	0xffffc7ff
 8002e10:	02dc6c00 	.word	0x02dc6c00
 8002e14:	2000000c 	.word	0x2000000c
 8002e18:	20000014 	.word	0x20000014
 8002e1c:	fffffeff 	.word	0xfffffeff
 8002e20:	00001388 	.word	0x00001388

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b510      	push	{r4, lr}
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002e26:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	089b      	lsrs	r3, r3, #2
 8002e2c:	2107      	movs	r1, #7
 8002e2e:	4019      	ands	r1, r3
 8002e30:	3101      	adds	r1, #1
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002e32:	6893      	ldr	r3, [r2, #8]
 8002e34:	2238      	movs	r2, #56	@ 0x38
 8002e36:	421a      	tst	r2, r3
 8002e38:	d109      	bne.n	8002e4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	0ad2      	lsrs	r2, r2, #11
 8002e40:	2307      	movs	r3, #7
 8002e42:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002e44:	4811      	ldr	r0, [pc, #68]	@ (8002e8c <HAL_RCC_GetSysClockFreq+0x68>)
 8002e46:	40d8      	lsrs	r0, r3
  else
  {
    sysclockfreq = 0U;
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002e48:	f7fd f95e 	bl	8000108 <__udivsi3>
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8002e4c:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	2338      	movs	r3, #56	@ 0x38
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d010      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x58>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	2338      	movs	r3, #56	@ 0x38
 8002e60:	4013      	ands	r3, r2
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	d00c      	beq.n	8002e80 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e66:	4b08      	ldr	r3, [pc, #32]	@ (8002e88 <HAL_RCC_GetSysClockFreq+0x64>)
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	2338      	movs	r3, #56	@ 0x38
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	d001      	beq.n	8002e76 <HAL_RCC_GetSysClockFreq+0x52>
    sysclockfreq = 0U;
 8002e72:	2000      	movs	r0, #0
 8002e74:	e7e8      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = LSI_VALUE;
 8002e76:	20fa      	movs	r0, #250	@ 0xfa
 8002e78:	01c0      	lsls	r0, r0, #7
 8002e7a:	e7e5      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = HSE_VALUE;
 8002e7c:	4804      	ldr	r0, [pc, #16]	@ (8002e90 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002e7e:	e7e3      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = LSE_VALUE;
 8002e80:	2080      	movs	r0, #128	@ 0x80
 8002e82:	0200      	lsls	r0, r0, #8
 8002e84:	e7e0      	b.n	8002e48 <HAL_RCC_GetSysClockFreq+0x24>
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	02dc6c00 	.word	0x02dc6c00
 8002e90:	007a1200 	.word	0x007a1200

08002e94 <HAL_RCC_ClockConfig>:
{
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	0004      	movs	r4, r0
 8002e98:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002e9a:	2800      	cmp	r0, #0
 8002e9c:	d100      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xc>
 8002e9e:	e0aa      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b57      	ldr	r3, [pc, #348]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2307      	movs	r3, #7
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	428b      	cmp	r3, r1
 8002eaa:	d328      	bcc.n	8002efe <HAL_RCC_ClockConfig+0x6a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	079a      	lsls	r2, r3, #30
 8002eb0:	d510      	bpl.n	8002ed4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	075b      	lsls	r3, r3, #29
 8002eb4:	d507      	bpl.n	8002ec6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eb6:	4953      	ldr	r1, [pc, #332]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002eb8:	688a      	ldr	r2, [r1, #8]
 8002eba:	4b53      	ldr	r3, [pc, #332]	@ (8003008 <HAL_RCC_ClockConfig+0x174>)
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	23b0      	movs	r3, #176	@ 0xb0
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec6:	4a4f      	ldr	r2, [pc, #316]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002ec8:	6893      	ldr	r3, [r2, #8]
 8002eca:	4950      	ldr	r1, [pc, #320]	@ (800300c <HAL_RCC_ClockConfig+0x178>)
 8002ecc:	400b      	ands	r3, r1
 8002ece:	68e1      	ldr	r1, [r4, #12]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	07db      	lsls	r3, r3, #31
 8002ed8:	d552      	bpl.n	8002f80 <HAL_RCC_ClockConfig+0xec>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002eda:	4a4a      	ldr	r2, [pc, #296]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002edc:	6813      	ldr	r3, [r2, #0]
 8002ede:	211c      	movs	r1, #28
 8002ee0:	438b      	bics	r3, r1
 8002ee2:	68a1      	ldr	r1, [r4, #8]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6013      	str	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee8:	6863      	ldr	r3, [r4, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d01e      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x98>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d138      	bne.n	8002f64 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef2:	4a44      	ldr	r2, [pc, #272]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	0552      	lsls	r2, r2, #21
 8002ef8:	d41b      	bmi.n	8002f32 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002efa:	2001      	movs	r0, #1
 8002efc:	e063      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4a40      	ldr	r2, [pc, #256]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	2107      	movs	r1, #7
 8002f04:	438b      	bics	r3, r1
 8002f06:	432b      	orrs	r3, r5
 8002f08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f0a:	f7ff fc17 	bl	800273c <HAL_GetTick>
 8002f0e:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f10:	4b3b      	ldr	r3, [pc, #236]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	2307      	movs	r3, #7
 8002f16:	4013      	ands	r3, r2
 8002f18:	42ab      	cmp	r3, r5
 8002f1a:	d0c7      	beq.n	8002eac <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7ff fc0e 	bl	800273c <HAL_GetTick>
 8002f20:	1b80      	subs	r0, r0, r6
 8002f22:	4a3b      	ldr	r2, [pc, #236]	@ (8003010 <HAL_RCC_ClockConfig+0x17c>)
 8002f24:	4290      	cmp	r0, r2
 8002f26:	d9f3      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e04c      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	0392      	lsls	r2, r2, #14
 8002f30:	d563      	bpl.n	8002ffa <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f32:	4934      	ldr	r1, [pc, #208]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002f34:	688a      	ldr	r2, [r1, #8]
 8002f36:	2007      	movs	r0, #7
 8002f38:	4382      	bics	r2, r0
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002f3e:	f7ff fbfd 	bl	800273c <HAL_GetTick>
 8002f42:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2238      	movs	r2, #56	@ 0x38
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	6863      	ldr	r3, [r4, #4]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d015      	beq.n	8002f80 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7ff fbf2 	bl	800273c <HAL_GetTick>
 8002f58:	1b80      	subs	r0, r0, r6
 8002f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003010 <HAL_RCC_ClockConfig+0x17c>)
 8002f5c:	4298      	cmp	r0, r3
 8002f5e:	d9f1      	bls.n	8002f44 <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8002f60:	2003      	movs	r0, #3
 8002f62:	e030      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002f64:	2b03      	cmp	r3, #3
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002f68:	4a26      	ldr	r2, [pc, #152]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002f6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f6c:	0792      	lsls	r2, r2, #30
 8002f6e:	d4e0      	bmi.n	8002f32 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002f70:	2001      	movs	r0, #1
 8002f72:	e028      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f74:	4a23      	ldr	r2, [pc, #140]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002f76:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002f78:	0792      	lsls	r2, r2, #30
 8002f7a:	d4da      	bmi.n	8002f32 <HAL_RCC_ClockConfig+0x9e>
        return HAL_ERROR;
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	e022      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f80:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2307      	movs	r3, #7
 8002f86:	4013      	ands	r3, r2
 8002f88:	42ab      	cmp	r3, r5
 8002f8a:	d81d      	bhi.n	8002fc8 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	075b      	lsls	r3, r3, #29
 8002f90:	d506      	bpl.n	8002fa0 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002f94:	6893      	ldr	r3, [r2, #8]
 8002f96:	491f      	ldr	r1, [pc, #124]	@ (8003014 <HAL_RCC_ClockConfig+0x180>)
 8002f98:	400b      	ands	r3, r1
 8002f9a:	6921      	ldr	r1, [r4, #16]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002fa0:	f7ff ff40 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002fa4:	4b17      	ldr	r3, [pc, #92]	@ (8003004 <HAL_RCC_ClockConfig+0x170>)
 8002fa6:	689a      	ldr	r2, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fa8:	0a12      	lsrs	r2, r2, #8
 8002faa:	230f      	movs	r3, #15
 8002fac:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002fae:	4a1a      	ldr	r2, [pc, #104]	@ (8003018 <HAL_RCC_ClockConfig+0x184>)
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	589a      	ldr	r2, [r3, r2]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002fb4:	231f      	movs	r3, #31
 8002fb6:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002fb8:	40d8      	lsrs	r0, r3
 8002fba:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HAL_RCC_ClockConfig+0x188>)
 8002fbc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002fbe:	4b18      	ldr	r3, [pc, #96]	@ (8003020 <HAL_RCC_ClockConfig+0x18c>)
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	f7ff fb77 	bl	80026b4 <HAL_InitTick>
}
 8002fc6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	2107      	movs	r1, #7
 8002fce:	438b      	bics	r3, r1
 8002fd0:	432b      	orrs	r3, r5
 8002fd2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002fd4:	f7ff fbb2 	bl	800273c <HAL_GetTick>
 8002fd8:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_ClockConfig+0x16c>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2307      	movs	r3, #7
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	42ab      	cmp	r3, r5
 8002fe4:	d0d2      	beq.n	8002f8c <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe6:	f7ff fba9 	bl	800273c <HAL_GetTick>
 8002fea:	1b80      	subs	r0, r0, r6
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <HAL_RCC_ClockConfig+0x17c>)
 8002fee:	4298      	cmp	r0, r3
 8002ff0:	d9f3      	bls.n	8002fda <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	e7e7      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	e7e5      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	e7e3      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x132>
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	40022000 	.word	0x40022000
 8003004:	40021000 	.word	0x40021000
 8003008:	ffff84ff 	.word	0xffff84ff
 800300c:	fffff0ff 	.word	0xfffff0ff
 8003010:	00001388 	.word	0x00001388
 8003014:	ffff8fff 	.word	0xffff8fff
 8003018:	08003ce4 	.word	0x08003ce4
 800301c:	2000000c 	.word	0x2000000c
 8003020:	20000014 	.word	0x20000014

08003024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003024:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003026:	6a05      	ldr	r5, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003028:	6a03      	ldr	r3, [r0, #32]
 800302a:	2201      	movs	r2, #1
 800302c:	4393      	bics	r3, r2
 800302e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003030:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003032:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003034:	4c16      	ldr	r4, [pc, #88]	@ (8003090 <TIM_OC1_SetConfig+0x6c>)
 8003036:	4023      	ands	r3, r4
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003038:	680c      	ldr	r4, [r1, #0]
 800303a:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800303c:	2302      	movs	r3, #2
 800303e:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003040:	688b      	ldr	r3, [r1, #8]
 8003042:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003044:	4d13      	ldr	r5, [pc, #76]	@ (8003094 <TIM_OC1_SetConfig+0x70>)
 8003046:	42a8      	cmp	r0, r5
 8003048:	d005      	beq.n	8003056 <TIM_OC1_SetConfig+0x32>
 800304a:	4d13      	ldr	r5, [pc, #76]	@ (8003098 <TIM_OC1_SetConfig+0x74>)
 800304c:	42a8      	cmp	r0, r5
 800304e:	d002      	beq.n	8003056 <TIM_OC1_SetConfig+0x32>
 8003050:	4d12      	ldr	r5, [pc, #72]	@ (800309c <TIM_OC1_SetConfig+0x78>)
 8003052:	42a8      	cmp	r0, r5
 8003054:	d106      	bne.n	8003064 <TIM_OC1_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003056:	2508      	movs	r5, #8
 8003058:	43ab      	bics	r3, r5
 800305a:	001d      	movs	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800305c:	68cb      	ldr	r3, [r1, #12]
 800305e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003060:	2504      	movs	r5, #4
 8003062:	43ab      	bics	r3, r5
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	4d0b      	ldr	r5, [pc, #44]	@ (8003094 <TIM_OC1_SetConfig+0x70>)
 8003066:	42a8      	cmp	r0, r5
 8003068:	d005      	beq.n	8003076 <TIM_OC1_SetConfig+0x52>
 800306a:	4d0b      	ldr	r5, [pc, #44]	@ (8003098 <TIM_OC1_SetConfig+0x74>)
 800306c:	42a8      	cmp	r0, r5
 800306e:	d002      	beq.n	8003076 <TIM_OC1_SetConfig+0x52>
 8003070:	4d0a      	ldr	r5, [pc, #40]	@ (800309c <TIM_OC1_SetConfig+0x78>)
 8003072:	42a8      	cmp	r0, r5
 8003074:	d105      	bne.n	8003082 <TIM_OC1_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003076:	4d0a      	ldr	r5, [pc, #40]	@ (80030a0 <TIM_OC1_SetConfig+0x7c>)
 8003078:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800307a:	694d      	ldr	r5, [r1, #20]
 800307c:	4315      	orrs	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800307e:	698a      	ldr	r2, [r1, #24]
 8003080:	432a      	orrs	r2, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003082:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003084:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003086:	684a      	ldr	r2, [r1, #4]
 8003088:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800308a:	6203      	str	r3, [r0, #32]
}
 800308c:	bd30      	pop	{r4, r5, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	fffeff8c 	.word	0xfffeff8c
 8003094:	40012c00 	.word	0x40012c00
 8003098:	40014400 	.word	0x40014400
 800309c:	40014800 	.word	0x40014800
 80030a0:	fffffcff 	.word	0xfffffcff

080030a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030a8:	6a03      	ldr	r3, [r0, #32]
 80030aa:	4a16      	ldr	r2, [pc, #88]	@ (8003104 <TIM_OC3_SetConfig+0x60>)
 80030ac:	4013      	ands	r3, r2
 80030ae:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b2:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030b4:	4d14      	ldr	r5, [pc, #80]	@ (8003108 <TIM_OC3_SetConfig+0x64>)
 80030b6:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	680d      	ldr	r5, [r1, #0]
 80030ba:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030bc:	4b13      	ldr	r3, [pc, #76]	@ (800310c <TIM_OC3_SetConfig+0x68>)
 80030be:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030c0:	688b      	ldr	r3, [r1, #8]
 80030c2:	021b      	lsls	r3, r3, #8
 80030c4:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030c6:	4c12      	ldr	r4, [pc, #72]	@ (8003110 <TIM_OC3_SetConfig+0x6c>)
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d006      	beq.n	80030da <TIM_OC3_SetConfig+0x36>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030cc:	4c11      	ldr	r4, [pc, #68]	@ (8003114 <TIM_OC3_SetConfig+0x70>)
 80030ce:	42a0      	cmp	r0, r4
 80030d0:	d00a      	beq.n	80030e8 <TIM_OC3_SetConfig+0x44>
 80030d2:	4c11      	ldr	r4, [pc, #68]	@ (8003118 <TIM_OC3_SetConfig+0x74>)
 80030d4:	42a0      	cmp	r0, r4
 80030d6:	d10f      	bne.n	80030f8 <TIM_OC3_SetConfig+0x54>
 80030d8:	e006      	b.n	80030e8 <TIM_OC3_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC3NP;
 80030da:	4c10      	ldr	r4, [pc, #64]	@ (800311c <TIM_OC3_SetConfig+0x78>)
 80030dc:	401c      	ands	r4, r3
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030de:	68cb      	ldr	r3, [r1, #12]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	4323      	orrs	r3, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 80030e4:	4c0e      	ldr	r4, [pc, #56]	@ (8003120 <TIM_OC3_SetConfig+0x7c>)
 80030e6:	4023      	ands	r3, r4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030e8:	4c0e      	ldr	r4, [pc, #56]	@ (8003124 <TIM_OC3_SetConfig+0x80>)
 80030ea:	4022      	ands	r2, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030ec:	694c      	ldr	r4, [r1, #20]
 80030ee:	0124      	lsls	r4, r4, #4
 80030f0:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030f2:	698a      	ldr	r2, [r1, #24]
 80030f4:	0112      	lsls	r2, r2, #4
 80030f6:	4322      	orrs	r2, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f8:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030fa:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fc:	684a      	ldr	r2, [r1, #4]
 80030fe:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003100:	6203      	str	r3, [r0, #32]
}
 8003102:	bd30      	pop	{r4, r5, pc}
 8003104:	fffffeff 	.word	0xfffffeff
 8003108:	fffeff8c 	.word	0xfffeff8c
 800310c:	fffffdff 	.word	0xfffffdff
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40014400 	.word	0x40014400
 8003118:	40014800 	.word	0x40014800
 800311c:	fffff7ff 	.word	0xfffff7ff
 8003120:	fffffbff 	.word	0xfffffbff
 8003124:	ffffcfff 	.word	0xffffcfff

08003128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003128:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312a:	6a04      	ldr	r4, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312c:	6a03      	ldr	r3, [r0, #32]
 800312e:	4a11      	ldr	r2, [pc, #68]	@ (8003174 <TIM_OC4_SetConfig+0x4c>)
 8003130:	4013      	ands	r3, r2
 8003132:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003136:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003138:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <TIM_OC4_SetConfig+0x50>)
 800313a:	4013      	ands	r3, r2

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800313c:	680a      	ldr	r2, [r1, #0]
 800313e:	0212      	lsls	r2, r2, #8
 8003140:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003142:	4b0e      	ldr	r3, [pc, #56]	@ (800317c <TIM_OC4_SetConfig+0x54>)
 8003144:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003146:	688b      	ldr	r3, [r1, #8]
 8003148:	031b      	lsls	r3, r3, #12
 800314a:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314c:	4c0c      	ldr	r4, [pc, #48]	@ (8003180 <TIM_OC4_SetConfig+0x58>)
 800314e:	42a0      	cmp	r0, r4
 8003150:	d005      	beq.n	800315e <TIM_OC4_SetConfig+0x36>
 8003152:	4c0c      	ldr	r4, [pc, #48]	@ (8003184 <TIM_OC4_SetConfig+0x5c>)
 8003154:	42a0      	cmp	r0, r4
 8003156:	d002      	beq.n	800315e <TIM_OC4_SetConfig+0x36>
 8003158:	4c0b      	ldr	r4, [pc, #44]	@ (8003188 <TIM_OC4_SetConfig+0x60>)
 800315a:	42a0      	cmp	r0, r4
 800315c:	d104      	bne.n	8003168 <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800315e:	4c0b      	ldr	r4, [pc, #44]	@ (800318c <TIM_OC4_SetConfig+0x64>)
 8003160:	402c      	ands	r4, r5

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003162:	694d      	ldr	r5, [r1, #20]
 8003164:	01ad      	lsls	r5, r5, #6
 8003166:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003168:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800316a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800316c:	684a      	ldr	r2, [r1, #4]
 800316e:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003170:	6203      	str	r3, [r0, #32]
}
 8003172:	bd30      	pop	{r4, r5, pc}
 8003174:	ffffefff 	.word	0xffffefff
 8003178:	feff8cff 	.word	0xfeff8cff
 800317c:	ffffdfff 	.word	0xffffdfff
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800
 800318c:	ffffbfff 	.word	0xffffbfff

08003190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003190:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003194:	6a03      	ldr	r3, [r0, #32]
 8003196:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <TIM_OC5_SetConfig+0x4c>)
 8003198:	4013      	ands	r3, r2
 800319a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800319e:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031a0:	4d0f      	ldr	r5, [pc, #60]	@ (80031e0 <TIM_OC5_SetConfig+0x50>)
 80031a2:	402b      	ands	r3, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	680d      	ldr	r5, [r1, #0]
 80031a6:	431d      	orrs	r5, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031a8:	4b0e      	ldr	r3, [pc, #56]	@ (80031e4 <TIM_OC5_SetConfig+0x54>)
 80031aa:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031ac:	688b      	ldr	r3, [r1, #8]
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b2:	4c0d      	ldr	r4, [pc, #52]	@ (80031e8 <TIM_OC5_SetConfig+0x58>)
 80031b4:	42a0      	cmp	r0, r4
 80031b6:	d005      	beq.n	80031c4 <TIM_OC5_SetConfig+0x34>
 80031b8:	4c0c      	ldr	r4, [pc, #48]	@ (80031ec <TIM_OC5_SetConfig+0x5c>)
 80031ba:	42a0      	cmp	r0, r4
 80031bc:	d002      	beq.n	80031c4 <TIM_OC5_SetConfig+0x34>
 80031be:	4c0c      	ldr	r4, [pc, #48]	@ (80031f0 <TIM_OC5_SetConfig+0x60>)
 80031c0:	42a0      	cmp	r0, r4
 80031c2:	d104      	bne.n	80031ce <TIM_OC5_SetConfig+0x3e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031c4:	4c05      	ldr	r4, [pc, #20]	@ (80031dc <TIM_OC5_SetConfig+0x4c>)
 80031c6:	4014      	ands	r4, r2
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031c8:	694a      	ldr	r2, [r1, #20]
 80031ca:	0212      	lsls	r2, r2, #8
 80031cc:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ce:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031d0:	6545      	str	r5, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031d2:	684a      	ldr	r2, [r1, #4]
 80031d4:	6582      	str	r2, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d6:	6203      	str	r3, [r0, #32]
}
 80031d8:	bd30      	pop	{r4, r5, pc}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	fffeffff 	.word	0xfffeffff
 80031e0:	fffeff8f 	.word	0xfffeff8f
 80031e4:	fffdffff 	.word	0xfffdffff
 80031e8:	40012c00 	.word	0x40012c00
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800

080031f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	6a04      	ldr	r4, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80031f8:	6a03      	ldr	r3, [r0, #32]
 80031fa:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <TIM_OC6_SetConfig+0x4c>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003200:	6845      	ldr	r5, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003202:	6d43      	ldr	r3, [r0, #84]	@ 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003204:	4a0f      	ldr	r2, [pc, #60]	@ (8003244 <TIM_OC6_SetConfig+0x50>)
 8003206:	4013      	ands	r3, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003208:	680a      	ldr	r2, [r1, #0]
 800320a:	0212      	lsls	r2, r2, #8
 800320c:	431a      	orrs	r2, r3

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800320e:	4b0e      	ldr	r3, [pc, #56]	@ (8003248 <TIM_OC6_SetConfig+0x54>)
 8003210:	401c      	ands	r4, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003212:	688b      	ldr	r3, [r1, #8]
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	4323      	orrs	r3, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003218:	4c0c      	ldr	r4, [pc, #48]	@ (800324c <TIM_OC6_SetConfig+0x58>)
 800321a:	42a0      	cmp	r0, r4
 800321c:	d005      	beq.n	800322a <TIM_OC6_SetConfig+0x36>
 800321e:	4c0c      	ldr	r4, [pc, #48]	@ (8003250 <TIM_OC6_SetConfig+0x5c>)
 8003220:	42a0      	cmp	r0, r4
 8003222:	d002      	beq.n	800322a <TIM_OC6_SetConfig+0x36>
 8003224:	4c0b      	ldr	r4, [pc, #44]	@ (8003254 <TIM_OC6_SetConfig+0x60>)
 8003226:	42a0      	cmp	r0, r4
 8003228:	d104      	bne.n	8003234 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800322a:	4c0b      	ldr	r4, [pc, #44]	@ (8003258 <TIM_OC6_SetConfig+0x64>)
 800322c:	402c      	ands	r4, r5
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800322e:	694d      	ldr	r5, [r1, #20]
 8003230:	02ad      	lsls	r5, r5, #10
 8003232:	4325      	orrs	r5, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003236:	6542      	str	r2, [r0, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003238:	684a      	ldr	r2, [r1, #4]
 800323a:	65c2      	str	r2, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323c:	6203      	str	r3, [r0, #32]
}
 800323e:	bd30      	pop	{r4, r5, pc}
 8003240:	ffefffff 	.word	0xffefffff
 8003244:	feff8fff 	.word	0xfeff8fff
 8003248:	ffdfffff 	.word	0xffdfffff
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	fffbffff 	.word	0xfffbffff

0800325c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800325e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003260:	6a04      	ldr	r4, [r0, #32]
 8003262:	2501      	movs	r5, #1
 8003264:	43ac      	bics	r4, r5
 8003266:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003268:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800326a:	35ef      	adds	r5, #239	@ 0xef
 800326c:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800326e:	0112      	lsls	r2, r2, #4
 8003270:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003272:	240a      	movs	r4, #10
 8003274:	43a3      	bics	r3, r4
  tmpccer |= TIM_ICPolarity;
 8003276:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003278:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800327a:	6203      	str	r3, [r0, #32]
}
 800327c:	bd30      	pop	{r4, r5, pc}
	...

08003280 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003280:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003282:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003284:	6a04      	ldr	r4, [r0, #32]
 8003286:	2510      	movs	r5, #16
 8003288:	43ac      	bics	r4, r5
 800328a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800328e:	4d05      	ldr	r5, [pc, #20]	@ (80032a4 <TIM_TI2_ConfigInputStage+0x24>)
 8003290:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003292:	0312      	lsls	r2, r2, #12
 8003294:	4322      	orrs	r2, r4

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003296:	24a0      	movs	r4, #160	@ 0xa0
 8003298:	43a3      	bics	r3, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 800329a:	0109      	lsls	r1, r1, #4
 800329c:	4319      	orrs	r1, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80032a0:	6201      	str	r1, [r0, #32]
}
 80032a2:	bd30      	pop	{r4, r5, pc}
 80032a4:	ffff0fff 	.word	0xffff0fff

080032a8 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032a8:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032aa:	4a03      	ldr	r2, [pc, #12]	@ (80032b8 <TIM_ITRx_SetConfig+0x10>)
 80032ac:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ae:	430b      	orrs	r3, r1
 80032b0:	2207      	movs	r2, #7
 80032b2:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032b4:	6083      	str	r3, [r0, #8]
}
 80032b6:	4770      	bx	lr
 80032b8:	ffcfff8f 	.word	0xffcfff8f

080032bc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80032bc:	233d      	movs	r3, #61	@ 0x3d
 80032be:	5cc3      	ldrb	r3, [r0, r3]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d122      	bne.n	800330a <HAL_TIM_Base_Start_IT+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80032c4:	333c      	adds	r3, #60	@ 0x3c
 80032c6:	2202      	movs	r2, #2
 80032c8:	54c2      	strb	r2, [r0, r3]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ca:	6802      	ldr	r2, [r0, #0]
 80032cc:	68d3      	ldr	r3, [r2, #12]
 80032ce:	2101      	movs	r1, #1
 80032d0:	430b      	orrs	r3, r1
 80032d2:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d4:	6803      	ldr	r3, [r0, #0]
 80032d6:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <HAL_TIM_Base_Start_IT+0x5c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d008      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x32>
 80032dc:	4a0f      	ldr	r2, [pc, #60]	@ (800331c <HAL_TIM_Base_Start_IT+0x60>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d005      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x32>
    __HAL_TIM_ENABLE(htim);
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	430a      	orrs	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80032ea:	2000      	movs	r0, #0
 80032ec:	e00e      	b.n	800330c <HAL_TIM_Base_Start_IT+0x50>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	490b      	ldr	r1, [pc, #44]	@ (8003320 <HAL_TIM_Base_Start_IT+0x64>)
 80032f2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	2a06      	cmp	r2, #6
 80032f6:	d00a      	beq.n	800330e <HAL_TIM_Base_Start_IT+0x52>
 80032f8:	3907      	subs	r1, #7
 80032fa:	428a      	cmp	r2, r1
 80032fc:	d009      	beq.n	8003312 <HAL_TIM_Base_Start_IT+0x56>
      __HAL_TIM_ENABLE(htim);
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003306:	2000      	movs	r0, #0
 8003308:	e000      	b.n	800330c <HAL_TIM_Base_Start_IT+0x50>
    return HAL_ERROR;
 800330a:	2001      	movs	r0, #1
}
 800330c:	4770      	bx	lr
  return HAL_OK;
 800330e:	2000      	movs	r0, #0
 8003310:	e7fc      	b.n	800330c <HAL_TIM_Base_Start_IT+0x50>
 8003312:	2000      	movs	r0, #0
 8003314:	e7fa      	b.n	800330c <HAL_TIM_Base_Start_IT+0x50>
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40000400 	.word	0x40000400
 8003320:	00010007 	.word	0x00010007

08003324 <HAL_TIM_OC_MspInit>:
}
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_OnePulse_MspInit>:
}
 8003326:	4770      	bx	lr

08003328 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003328:	4770      	bx	lr

0800332a <HAL_TIM_IC_CaptureCallback>:
}
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800332c:	4770      	bx	lr

0800332e <HAL_TIM_TriggerCallback>:
}
 800332e:	4770      	bx	lr

08003330 <HAL_TIM_IRQHandler>:
{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003334:	6803      	ldr	r3, [r0, #0]
 8003336:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003338:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800333a:	07a2      	lsls	r2, r4, #30
 800333c:	d50e      	bpl.n	800335c <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800333e:	07b2      	lsls	r2, r6, #30
 8003340:	d50c      	bpl.n	800335c <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003342:	2203      	movs	r2, #3
 8003344:	4252      	negs	r2, r2
 8003346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003348:	2301      	movs	r3, #1
 800334a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334c:	6803      	ldr	r3, [r0, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	079b      	lsls	r3, r3, #30
 8003352:	d057      	beq.n	8003404 <HAL_TIM_IRQHandler+0xd4>
          HAL_TIM_IC_CaptureCallback(htim);
 8003354:	f7ff ffe9 	bl	800332a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003358:	2300      	movs	r3, #0
 800335a:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800335c:	0763      	lsls	r3, r4, #29
 800335e:	d512      	bpl.n	8003386 <HAL_TIM_IRQHandler+0x56>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003360:	0773      	lsls	r3, r6, #29
 8003362:	d510      	bpl.n	8003386 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	2205      	movs	r2, #5
 8003368:	4252      	negs	r2, r2
 800336a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336c:	2302      	movs	r3, #2
 800336e:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	23c0      	movs	r3, #192	@ 0xc0
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	421a      	tst	r2, r3
 800337a:	d049      	beq.n	8003410 <HAL_TIM_IRQHandler+0xe0>
        HAL_TIM_IC_CaptureCallback(htim);
 800337c:	0028      	movs	r0, r5
 800337e:	f7ff ffd4 	bl	800332a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	2300      	movs	r3, #0
 8003384:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003386:	0723      	lsls	r3, r4, #28
 8003388:	d510      	bpl.n	80033ac <HAL_TIM_IRQHandler+0x7c>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800338a:	0733      	lsls	r3, r6, #28
 800338c:	d50e      	bpl.n	80033ac <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800338e:	682b      	ldr	r3, [r5, #0]
 8003390:	2209      	movs	r2, #9
 8003392:	4252      	negs	r2, r2
 8003394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003396:	2304      	movs	r3, #4
 8003398:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	079b      	lsls	r3, r3, #30
 80033a0:	d03d      	beq.n	800341e <HAL_TIM_IRQHandler+0xee>
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	0028      	movs	r0, r5
 80033a4:	f7ff ffc1 	bl	800332a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a8:	2300      	movs	r3, #0
 80033aa:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033ac:	06e3      	lsls	r3, r4, #27
 80033ae:	d512      	bpl.n	80033d6 <HAL_TIM_IRQHandler+0xa6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033b0:	06f3      	lsls	r3, r6, #27
 80033b2:	d510      	bpl.n	80033d6 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033b4:	682b      	ldr	r3, [r5, #0]
 80033b6:	2211      	movs	r2, #17
 80033b8:	4252      	negs	r2, r2
 80033ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033bc:	2308      	movs	r3, #8
 80033be:	772b      	strb	r3, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033c0:	682b      	ldr	r3, [r5, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	23c0      	movs	r3, #192	@ 0xc0
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	421a      	tst	r2, r3
 80033ca:	d02f      	beq.n	800342c <HAL_TIM_IRQHandler+0xfc>
        HAL_TIM_IC_CaptureCallback(htim);
 80033cc:	0028      	movs	r0, r5
 80033ce:	f7ff ffac 	bl	800332a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d2:	2300      	movs	r3, #0
 80033d4:	772b      	strb	r3, [r5, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d6:	07e3      	lsls	r3, r4, #31
 80033d8:	d501      	bpl.n	80033de <HAL_TIM_IRQHandler+0xae>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033da:	07f3      	lsls	r3, r6, #31
 80033dc:	d42d      	bmi.n	800343a <HAL_TIM_IRQHandler+0x10a>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80033de:	2382      	movs	r3, #130	@ 0x82
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	421c      	tst	r4, r3
 80033e4:	d001      	beq.n	80033ea <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033e6:	0633      	lsls	r3, r6, #24
 80033e8:	d42f      	bmi.n	800344a <HAL_TIM_IRQHandler+0x11a>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80033ea:	05e3      	lsls	r3, r4, #23
 80033ec:	d501      	bpl.n	80033f2 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ee:	0633      	lsls	r3, r6, #24
 80033f0:	d432      	bmi.n	8003458 <HAL_TIM_IRQHandler+0x128>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033f2:	0663      	lsls	r3, r4, #25
 80033f4:	d501      	bpl.n	80033fa <HAL_TIM_IRQHandler+0xca>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033f6:	0673      	lsls	r3, r6, #25
 80033f8:	d435      	bmi.n	8003466 <HAL_TIM_IRQHandler+0x136>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033fa:	06a4      	lsls	r4, r4, #26
 80033fc:	d501      	bpl.n	8003402 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033fe:	06b6      	lsls	r6, r6, #26
 8003400:	d439      	bmi.n	8003476 <HAL_TIM_IRQHandler+0x146>
}
 8003402:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	f7ff ff90 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	0028      	movs	r0, r5
 800340a:	f7ff ff8f 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
 800340e:	e7a3      	b.n	8003358 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003410:	0028      	movs	r0, r5
 8003412:	f7ff ff89 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003416:	0028      	movs	r0, r5
 8003418:	f7ff ff88 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
 800341c:	e7b1      	b.n	8003382 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341e:	0028      	movs	r0, r5
 8003420:	f7ff ff82 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003424:	0028      	movs	r0, r5
 8003426:	f7ff ff81 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
 800342a:	e7bd      	b.n	80033a8 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342c:	0028      	movs	r0, r5
 800342e:	f7ff ff7b 	bl	8003328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003432:	0028      	movs	r0, r5
 8003434:	f7ff ff7a 	bl	800332c <HAL_TIM_PWM_PulseFinishedCallback>
 8003438:	e7cb      	b.n	80033d2 <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800343a:	682b      	ldr	r3, [r5, #0]
 800343c:	2202      	movs	r2, #2
 800343e:	4252      	negs	r2, r2
 8003440:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003442:	0028      	movs	r0, r5
 8003444:	f7fe fb1e 	bl	8001a84 <HAL_TIM_PeriodElapsedCallback>
 8003448:	e7c9      	b.n	80033de <HAL_TIM_IRQHandler+0xae>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	4a0e      	ldr	r2, [pc, #56]	@ (8003488 <HAL_TIM_IRQHandler+0x158>)
 800344e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003450:	0028      	movs	r0, r5
 8003452:	f000 fac0 	bl	80039d6 <HAL_TIMEx_BreakCallback>
 8003456:	e7c8      	b.n	80033ea <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003458:	682b      	ldr	r3, [r5, #0]
 800345a:	4a0c      	ldr	r2, [pc, #48]	@ (800348c <HAL_TIM_IRQHandler+0x15c>)
 800345c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800345e:	0028      	movs	r0, r5
 8003460:	f000 faba 	bl	80039d8 <HAL_TIMEx_Break2Callback>
 8003464:	e7c5      	b.n	80033f2 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	2241      	movs	r2, #65	@ 0x41
 800346a:	4252      	negs	r2, r2
 800346c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800346e:	0028      	movs	r0, r5
 8003470:	f7ff ff5d 	bl	800332e <HAL_TIM_TriggerCallback>
 8003474:	e7c1      	b.n	80033fa <HAL_TIM_IRQHandler+0xca>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003476:	682b      	ldr	r3, [r5, #0]
 8003478:	2221      	movs	r2, #33	@ 0x21
 800347a:	4252      	negs	r2, r2
 800347c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800347e:	0028      	movs	r0, r5
 8003480:	f000 faa8 	bl	80039d4 <HAL_TIMEx_CommutCallback>
}
 8003484:	e7bd      	b.n	8003402 <HAL_TIM_IRQHandler+0xd2>
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	ffffdf7f 	.word	0xffffdf7f
 800348c:	fffffeff 	.word	0xfffffeff

08003490 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003490:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003492:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <TIM_Base_SetConfig+0x78>)
 8003494:	4290      	cmp	r0, r2
 8003496:	d002      	beq.n	800349e <TIM_Base_SetConfig+0xe>
 8003498:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <TIM_Base_SetConfig+0x7c>)
 800349a:	4290      	cmp	r0, r2
 800349c:	d103      	bne.n	80034a6 <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800349e:	2270      	movs	r2, #112	@ 0x70
 80034a0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80034a2:	684a      	ldr	r2, [r1, #4]
 80034a4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034a6:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <TIM_Base_SetConfig+0x78>)
 80034a8:	4290      	cmp	r0, r2
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x34>
 80034ac:	4a17      	ldr	r2, [pc, #92]	@ (800350c <TIM_Base_SetConfig+0x7c>)
 80034ae:	4290      	cmp	r0, r2
 80034b0:	d008      	beq.n	80034c4 <TIM_Base_SetConfig+0x34>
 80034b2:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <TIM_Base_SetConfig+0x80>)
 80034b4:	4290      	cmp	r0, r2
 80034b6:	d005      	beq.n	80034c4 <TIM_Base_SetConfig+0x34>
 80034b8:	4a16      	ldr	r2, [pc, #88]	@ (8003514 <TIM_Base_SetConfig+0x84>)
 80034ba:	4290      	cmp	r0, r2
 80034bc:	d002      	beq.n	80034c4 <TIM_Base_SetConfig+0x34>
 80034be:	4a16      	ldr	r2, [pc, #88]	@ (8003518 <TIM_Base_SetConfig+0x88>)
 80034c0:	4290      	cmp	r0, r2
 80034c2:	d103      	bne.n	80034cc <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c4:	4a15      	ldr	r2, [pc, #84]	@ (800351c <TIM_Base_SetConfig+0x8c>)
 80034c6:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c8:	68ca      	ldr	r2, [r1, #12]
 80034ca:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	2280      	movs	r2, #128	@ 0x80
 80034ce:	4393      	bics	r3, r2
 80034d0:	694a      	ldr	r2, [r1, #20]
 80034d2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034d4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034d6:	688b      	ldr	r3, [r1, #8]
 80034d8:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80034da:	680b      	ldr	r3, [r1, #0]
 80034dc:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034de:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <TIM_Base_SetConfig+0x78>)
 80034e0:	4298      	cmp	r0, r3
 80034e2:	d005      	beq.n	80034f0 <TIM_Base_SetConfig+0x60>
 80034e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <TIM_Base_SetConfig+0x84>)
 80034e6:	4298      	cmp	r0, r3
 80034e8:	d002      	beq.n	80034f0 <TIM_Base_SetConfig+0x60>
 80034ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <TIM_Base_SetConfig+0x88>)
 80034ec:	4298      	cmp	r0, r3
 80034ee:	d101      	bne.n	80034f4 <TIM_Base_SetConfig+0x64>
    TIMx->RCR = Structure->RepetitionCounter;
 80034f0:	690b      	ldr	r3, [r1, #16]
 80034f2:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80034f4:	2301      	movs	r3, #1
 80034f6:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034f8:	6902      	ldr	r2, [r0, #16]
 80034fa:	4213      	tst	r3, r2
 80034fc:	d003      	beq.n	8003506 <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034fe:	6903      	ldr	r3, [r0, #16]
 8003500:	2201      	movs	r2, #1
 8003502:	4393      	bics	r3, r2
 8003504:	6103      	str	r3, [r0, #16]
}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400
 8003510:	40002000 	.word	0x40002000
 8003514:	40014400 	.word	0x40014400
 8003518:	40014800 	.word	0x40014800
 800351c:	fffffcff 	.word	0xfffffcff

08003520 <HAL_TIM_Base_Init>:
{
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003524:	d02a      	beq.n	800357c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003526:	233d      	movs	r3, #61	@ 0x3d
 8003528:	5cc3      	ldrb	r3, [r0, r3]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800352e:	253d      	movs	r5, #61	@ 0x3d
 8003530:	2302      	movs	r3, #2
 8003532:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	0021      	movs	r1, r4
 8003536:	c901      	ldmia	r1!, {r0}
 8003538:	f7ff ffaa 	bl	8003490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	2301      	movs	r3, #1
 800353e:	2248      	movs	r2, #72	@ 0x48
 8003540:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003542:	3a0a      	subs	r2, #10
 8003544:	54a3      	strb	r3, [r4, r2]
 8003546:	3201      	adds	r2, #1
 8003548:	54a3      	strb	r3, [r4, r2]
 800354a:	3201      	adds	r2, #1
 800354c:	54a3      	strb	r3, [r4, r2]
 800354e:	3201      	adds	r2, #1
 8003550:	54a3      	strb	r3, [r4, r2]
 8003552:	3201      	adds	r2, #1
 8003554:	54a3      	strb	r3, [r4, r2]
 8003556:	3201      	adds	r2, #1
 8003558:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800355a:	3201      	adds	r2, #1
 800355c:	54a3      	strb	r3, [r4, r2]
 800355e:	3201      	adds	r2, #1
 8003560:	54a3      	strb	r3, [r4, r2]
 8003562:	3201      	adds	r2, #1
 8003564:	54a3      	strb	r3, [r4, r2]
 8003566:	3201      	adds	r2, #1
 8003568:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 800356a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800356c:	2000      	movs	r0, #0
}
 800356e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003570:	333c      	adds	r3, #60	@ 0x3c
 8003572:	2200      	movs	r2, #0
 8003574:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003576:	f7fe fff5 	bl	8002564 <HAL_TIM_Base_MspInit>
 800357a:	e7d8      	b.n	800352e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800357c:	2001      	movs	r0, #1
 800357e:	e7f6      	b.n	800356e <HAL_TIM_Base_Init+0x4e>

08003580 <HAL_TIM_OC_Init>:
{
 8003580:	b570      	push	{r4, r5, r6, lr}
 8003582:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003584:	d02a      	beq.n	80035dc <HAL_TIM_OC_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003586:	233d      	movs	r3, #61	@ 0x3d
 8003588:	5cc3      	ldrb	r3, [r0, r3]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d020      	beq.n	80035d0 <HAL_TIM_OC_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800358e:	253d      	movs	r5, #61	@ 0x3d
 8003590:	2302      	movs	r3, #2
 8003592:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003594:	0021      	movs	r1, r4
 8003596:	c901      	ldmia	r1!, {r0}
 8003598:	f7ff ff7a 	bl	8003490 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800359c:	2301      	movs	r3, #1
 800359e:	2248      	movs	r2, #72	@ 0x48
 80035a0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a2:	3a0a      	subs	r2, #10
 80035a4:	54a3      	strb	r3, [r4, r2]
 80035a6:	3201      	adds	r2, #1
 80035a8:	54a3      	strb	r3, [r4, r2]
 80035aa:	3201      	adds	r2, #1
 80035ac:	54a3      	strb	r3, [r4, r2]
 80035ae:	3201      	adds	r2, #1
 80035b0:	54a3      	strb	r3, [r4, r2]
 80035b2:	3201      	adds	r2, #1
 80035b4:	54a3      	strb	r3, [r4, r2]
 80035b6:	3201      	adds	r2, #1
 80035b8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	3201      	adds	r2, #1
 80035bc:	54a3      	strb	r3, [r4, r2]
 80035be:	3201      	adds	r2, #1
 80035c0:	54a3      	strb	r3, [r4, r2]
 80035c2:	3201      	adds	r2, #1
 80035c4:	54a3      	strb	r3, [r4, r2]
 80035c6:	3201      	adds	r2, #1
 80035c8:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80035ca:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80035cc:	2000      	movs	r0, #0
}
 80035ce:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80035d0:	333c      	adds	r3, #60	@ 0x3c
 80035d2:	2200      	movs	r2, #0
 80035d4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OC_MspInit(htim);
 80035d6:	f7ff fea5 	bl	8003324 <HAL_TIM_OC_MspInit>
 80035da:	e7d8      	b.n	800358e <HAL_TIM_OC_Init+0xe>
    return HAL_ERROR;
 80035dc:	2001      	movs	r0, #1
 80035de:	e7f6      	b.n	80035ce <HAL_TIM_OC_Init+0x4e>

080035e0 <HAL_TIM_OnePulse_Init>:
{
 80035e0:	b570      	push	{r4, r5, r6, lr}
 80035e2:	0004      	movs	r4, r0
 80035e4:	000d      	movs	r5, r1
  if (htim == NULL)
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d027      	beq.n	800363a <HAL_TIM_OnePulse_Init+0x5a>
  if (htim->State == HAL_TIM_STATE_RESET)
 80035ea:	233d      	movs	r3, #61	@ 0x3d
 80035ec:	5cc3      	ldrb	r3, [r0, r3]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d01d      	beq.n	800362e <HAL_TIM_OnePulse_Init+0x4e>
  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	263d      	movs	r6, #61	@ 0x3d
 80035f4:	2302      	movs	r3, #2
 80035f6:	55a3      	strb	r3, [r4, r6]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f8:	0021      	movs	r1, r4
 80035fa:	c901      	ldmia	r1!, {r0}
 80035fc:	f7ff ff48 	bl	8003490 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003600:	6822      	ldr	r2, [r4, #0]
 8003602:	6813      	ldr	r3, [r2, #0]
 8003604:	2108      	movs	r1, #8
 8003606:	438b      	bics	r3, r1
 8003608:	6013      	str	r3, [r2, #0]
  htim->Instance->CR1 |= OnePulseMode;
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	6813      	ldr	r3, [r2, #0]
 800360e:	432b      	orrs	r3, r5
 8003610:	6013      	str	r3, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003612:	2301      	movs	r3, #1
 8003614:	2248      	movs	r2, #72	@ 0x48
 8003616:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	3a0a      	subs	r2, #10
 800361a:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	3201      	adds	r2, #1
 800361e:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	3205      	adds	r2, #5
 8003622:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003624:	3201      	adds	r2, #1
 8003626:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003628:	55a3      	strb	r3, [r4, r6]
  return HAL_OK;
 800362a:	2000      	movs	r0, #0
}
 800362c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800362e:	333c      	adds	r3, #60	@ 0x3c
 8003630:	2200      	movs	r2, #0
 8003632:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_OnePulse_MspInit(htim);
 8003634:	f7ff fe77 	bl	8003326 <HAL_TIM_OnePulse_MspInit>
 8003638:	e7db      	b.n	80035f2 <HAL_TIM_OnePulse_Init+0x12>
    return HAL_ERROR;
 800363a:	2001      	movs	r0, #1
 800363c:	e7f6      	b.n	800362c <HAL_TIM_OnePulse_Init+0x4c>
	...

08003640 <TIM_OC2_SetConfig>:
{
 8003640:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 8003642:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003644:	6a03      	ldr	r3, [r0, #32]
 8003646:	2410      	movs	r4, #16
 8003648:	43a3      	bics	r3, r4
 800364a:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800364c:	6845      	ldr	r5, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800364e:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003650:	4c14      	ldr	r4, [pc, #80]	@ (80036a4 <TIM_OC2_SetConfig+0x64>)
 8003652:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003654:	680c      	ldr	r4, [r1, #0]
 8003656:	0224      	lsls	r4, r4, #8
 8003658:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 800365a:	2320      	movs	r3, #32
 800365c:	439a      	bics	r2, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800365e:	688b      	ldr	r3, [r1, #8]
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	4313      	orrs	r3, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003664:	4a10      	ldr	r2, [pc, #64]	@ (80036a8 <TIM_OC2_SetConfig+0x68>)
 8003666:	4290      	cmp	r0, r2
 8003668:	d006      	beq.n	8003678 <TIM_OC2_SetConfig+0x38>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366a:	4a10      	ldr	r2, [pc, #64]	@ (80036ac <TIM_OC2_SetConfig+0x6c>)
 800366c:	4290      	cmp	r0, r2
 800366e:	d00b      	beq.n	8003688 <TIM_OC2_SetConfig+0x48>
 8003670:	4a0f      	ldr	r2, [pc, #60]	@ (80036b0 <TIM_OC2_SetConfig+0x70>)
 8003672:	4290      	cmp	r0, r2
 8003674:	d110      	bne.n	8003698 <TIM_OC2_SetConfig+0x58>
 8003676:	e007      	b.n	8003688 <TIM_OC2_SetConfig+0x48>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003678:	2280      	movs	r2, #128	@ 0x80
 800367a:	4393      	bics	r3, r2
 800367c:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800367e:	68cb      	ldr	r3, [r1, #12]
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003684:	3a40      	subs	r2, #64	@ 0x40
 8003686:	4393      	bics	r3, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003688:	4a0a      	ldr	r2, [pc, #40]	@ (80036b4 <TIM_OC2_SetConfig+0x74>)
 800368a:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800368c:	694a      	ldr	r2, [r1, #20]
 800368e:	0092      	lsls	r2, r2, #2
 8003690:	432a      	orrs	r2, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003692:	698d      	ldr	r5, [r1, #24]
 8003694:	00ad      	lsls	r5, r5, #2
 8003696:	4315      	orrs	r5, r2
  TIMx->CR2 = tmpcr2;
 8003698:	6045      	str	r5, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800369a:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800369c:	684a      	ldr	r2, [r1, #4]
 800369e:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80036a0:	6203      	str	r3, [r0, #32]
}
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	feff8cff 	.word	0xfeff8cff
 80036a8:	40012c00 	.word	0x40012c00
 80036ac:	40014400 	.word	0x40014400
 80036b0:	40014800 	.word	0x40014800
 80036b4:	fffff3ff 	.word	0xfffff3ff

080036b8 <HAL_TIM_OC_ConfigChannel>:
{
 80036b8:	b510      	push	{r4, lr}
 80036ba:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80036bc:	233c      	movs	r3, #60	@ 0x3c
 80036be:	5cc3      	ldrb	r3, [r0, r3]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d02b      	beq.n	800371c <HAL_TIM_OC_ConfigChannel+0x64>
 80036c4:	233c      	movs	r3, #60	@ 0x3c
 80036c6:	2001      	movs	r0, #1
 80036c8:	54e0      	strb	r0, [r4, r3]
  switch (Channel)
 80036ca:	2a14      	cmp	r2, #20
 80036cc:	d821      	bhi.n	8003712 <HAL_TIM_OC_ConfigChannel+0x5a>
 80036ce:	0092      	lsls	r2, r2, #2
 80036d0:	4b13      	ldr	r3, [pc, #76]	@ (8003720 <HAL_TIM_OC_ConfigChannel+0x68>)
 80036d2:	589b      	ldr	r3, [r3, r2]
 80036d4:	469f      	mov	pc, r3
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d6:	6820      	ldr	r0, [r4, #0]
 80036d8:	f7ff fca4 	bl	8003024 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80036dc:	2000      	movs	r0, #0
      break;
 80036de:	e019      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f7ff ffad 	bl	8003640 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2000      	movs	r0, #0
      break;
 80036e8:	e014      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	f7ff fcda 	bl	80030a4 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2000      	movs	r0, #0
      break;
 80036f2:	e00f      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	f7ff fd17 	bl	8003128 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80036fa:	2000      	movs	r0, #0
      break;
 80036fc:	e00a      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036fe:	6820      	ldr	r0, [r4, #0]
 8003700:	f7ff fd46 	bl	8003190 <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2000      	movs	r0, #0
      break;
 8003706:	e005      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003708:	6820      	ldr	r0, [r4, #0]
 800370a:	f7ff fd73 	bl	80031f4 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2000      	movs	r0, #0
      break;
 8003710:	e000      	b.n	8003714 <HAL_TIM_OC_ConfigChannel+0x5c>
  switch (Channel)
 8003712:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003714:	233c      	movs	r3, #60	@ 0x3c
 8003716:	2200      	movs	r2, #0
 8003718:	54e2      	strb	r2, [r4, r3]
}
 800371a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800371c:	2002      	movs	r0, #2
 800371e:	e7fc      	b.n	800371a <HAL_TIM_OC_ConfigChannel+0x62>
 8003720:	08003d24 	.word	0x08003d24

08003724 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003724:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003726:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	4d03      	ldr	r5, [pc, #12]	@ (8003738 <TIM_ETR_SetConfig+0x14>)
 800372a:	402c      	ands	r4, r5

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4313      	orrs	r3, r2
 8003730:	430b      	orrs	r3, r1
 8003732:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003734:	6083      	str	r3, [r0, #8]
}
 8003736:	bd30      	pop	{r4, r5, pc}
 8003738:	ffff00ff 	.word	0xffff00ff

0800373c <HAL_TIM_ConfigClockSource>:
{
 800373c:	b510      	push	{r4, lr}
 800373e:	0004      	movs	r4, r0
 8003740:	0008      	movs	r0, r1
  __HAL_LOCK(htim);
 8003742:	233c      	movs	r3, #60	@ 0x3c
 8003744:	5ce3      	ldrb	r3, [r4, r3]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d100      	bne.n	800374c <HAL_TIM_ConfigClockSource+0x10>
 800374a:	e077      	b.n	800383c <HAL_TIM_ConfigClockSource+0x100>
 800374c:	233c      	movs	r3, #60	@ 0x3c
 800374e:	2201      	movs	r2, #1
 8003750:	54e2      	strb	r2, [r4, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8003752:	3301      	adds	r3, #1
 8003754:	3201      	adds	r2, #1
 8003756:	54e2      	strb	r2, [r4, r3]
  tmpsmcr = htim->Instance->SMCR;
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800375c:	4938      	ldr	r1, [pc, #224]	@ (8003840 <HAL_TIM_ConfigClockSource+0x104>)
 800375e:	400b      	ands	r3, r1
  htim->Instance->SMCR = tmpsmcr;
 8003760:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8003762:	6801      	ldr	r1, [r0, #0]
 8003764:	2960      	cmp	r1, #96	@ 0x60
 8003766:	d04f      	beq.n	8003808 <HAL_TIM_ConfigClockSource+0xcc>
 8003768:	d829      	bhi.n	80037be <HAL_TIM_ConfigClockSource+0x82>
 800376a:	2940      	cmp	r1, #64	@ 0x40
 800376c:	d057      	beq.n	800381e <HAL_TIM_ConfigClockSource+0xe2>
 800376e:	d90c      	bls.n	800378a <HAL_TIM_ConfigClockSource+0x4e>
 8003770:	2950      	cmp	r1, #80	@ 0x50
 8003772:	d122      	bne.n	80037ba <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 8003774:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003776:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	f7ff fd6f 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800377e:	6820      	ldr	r0, [r4, #0]
 8003780:	2150      	movs	r1, #80	@ 0x50
 8003782:	f7ff fd91 	bl	80032a8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2000      	movs	r0, #0
      break;
 8003788:	e005      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 800378a:	2920      	cmp	r1, #32
 800378c:	d00e      	beq.n	80037ac <HAL_TIM_ConfigClockSource+0x70>
 800378e:	d909      	bls.n	80037a4 <HAL_TIM_ConfigClockSource+0x68>
 8003790:	2930      	cmp	r1, #48	@ 0x30
 8003792:	d00b      	beq.n	80037ac <HAL_TIM_ConfigClockSource+0x70>
      status = HAL_ERROR;
 8003794:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8003796:	233d      	movs	r3, #61	@ 0x3d
 8003798:	2201      	movs	r2, #1
 800379a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 800379c:	3b01      	subs	r3, #1
 800379e:	2200      	movs	r2, #0
 80037a0:	54e2      	strb	r2, [r4, r3]
}
 80037a2:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 80037a4:	2900      	cmp	r1, #0
 80037a6:	d001      	beq.n	80037ac <HAL_TIM_ConfigClockSource+0x70>
 80037a8:	2910      	cmp	r1, #16
 80037aa:	d104      	bne.n	80037b6 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	f7ff fd7b 	bl	80032a8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80037b2:	2000      	movs	r0, #0
      break;
 80037b4:	e7ef      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
 80037b8:	e7ed      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
 80037ba:	2001      	movs	r0, #1
 80037bc:	e7eb      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	0152      	lsls	r2, r2, #5
 80037c2:	4291      	cmp	r1, r2
 80037c4:	d036      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0xf8>
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	0192      	lsls	r2, r2, #6
 80037ca:	4291      	cmp	r1, r2
 80037cc:	d10d      	bne.n	80037ea <HAL_TIM_ConfigClockSource+0xae>
                        sClockSourceConfig->ClockPrescaler,
 80037ce:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 80037d0:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 80037d2:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	f7ff ffa5 	bl	8003724 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	6891      	ldr	r1, [r2, #8]
 80037de:	2380      	movs	r3, #128	@ 0x80
 80037e0:	01db      	lsls	r3, r3, #7
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2000      	movs	r0, #0
      break;
 80037e8:	e7d5      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80037ea:	2970      	cmp	r1, #112	@ 0x70
 80037ec:	d124      	bne.n	8003838 <HAL_TIM_ConfigClockSource+0xfc>
                        sClockSourceConfig->ClockPrescaler,
 80037ee:	6881      	ldr	r1, [r0, #8]
                        sClockSourceConfig->ClockPolarity,
 80037f0:	6842      	ldr	r2, [r0, #4]
                        sClockSourceConfig->ClockFilter);
 80037f2:	68c3      	ldr	r3, [r0, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	f7ff ff95 	bl	8003724 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80037fa:	6822      	ldr	r2, [r4, #0]
 80037fc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037fe:	2177      	movs	r1, #119	@ 0x77
 8003800:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8003802:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2000      	movs	r0, #0
      break;
 8003806:	e7c6      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 8003808:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 800380a:	68c2      	ldr	r2, [r0, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800380c:	6820      	ldr	r0, [r4, #0]
 800380e:	f7ff fd37 	bl	8003280 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003812:	6820      	ldr	r0, [r4, #0]
 8003814:	2160      	movs	r1, #96	@ 0x60
 8003816:	f7ff fd47 	bl	80032a8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800381a:	2000      	movs	r0, #0
      break;
 800381c:	e7bb      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
                               sClockSourceConfig->ClockPolarity,
 800381e:	6841      	ldr	r1, [r0, #4]
                               sClockSourceConfig->ClockFilter);
 8003820:	68c2      	ldr	r2, [r0, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003822:	6820      	ldr	r0, [r4, #0]
 8003824:	f7ff fd1a 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003828:	6820      	ldr	r0, [r4, #0]
 800382a:	2140      	movs	r1, #64	@ 0x40
 800382c:	f7ff fd3c 	bl	80032a8 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003830:	2000      	movs	r0, #0
      break;
 8003832:	e7b0      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8003834:	2000      	movs	r0, #0
 8003836:	e7ae      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
      status = HAL_ERROR;
 8003838:	2001      	movs	r0, #1
 800383a:	e7ac      	b.n	8003796 <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 800383c:	2002      	movs	r0, #2
 800383e:	e7b0      	b.n	80037a2 <HAL_TIM_ConfigClockSource+0x66>
 8003840:	ffce0088 	.word	0xffce0088

08003844 <TIM_SlaveTimer_SetConfig>:
{
 8003844:	b570      	push	{r4, r5, r6, lr}
 8003846:	000c      	movs	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 8003848:	6801      	ldr	r1, [r0, #0]
 800384a:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800384c:	4b2c      	ldr	r3, [pc, #176]	@ (8003900 <TIM_SlaveTimer_SetConfig+0xbc>)
 800384e:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003850:	6863      	ldr	r3, [r4, #4]
 8003852:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003854:	4a2b      	ldr	r2, [pc, #172]	@ (8003904 <TIM_SlaveTimer_SetConfig+0xc0>)
 8003856:	4013      	ands	r3, r2
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003858:	6822      	ldr	r2, [r4, #0]
 800385a:	4313      	orrs	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800385c:	608b      	str	r3, [r1, #8]
  switch (sSlaveConfig->InputTrigger)
 800385e:	6863      	ldr	r3, [r4, #4]
 8003860:	2b50      	cmp	r3, #80	@ 0x50
 8003862:	d033      	beq.n	80038cc <TIM_SlaveTimer_SetConfig+0x88>
 8003864:	d90b      	bls.n	800387e <TIM_SlaveTimer_SetConfig+0x3a>
 8003866:	2b60      	cmp	r3, #96	@ 0x60
 8003868:	d037      	beq.n	80038da <TIM_SlaveTimer_SetConfig+0x96>
 800386a:	2b70      	cmp	r3, #112	@ 0x70
 800386c:	d144      	bne.n	80038f8 <TIM_SlaveTimer_SetConfig+0xb4>
                        sSlaveConfig->TriggerPrescaler,
 800386e:	68e1      	ldr	r1, [r4, #12]
                        sSlaveConfig->TriggerPolarity,
 8003870:	68a2      	ldr	r2, [r4, #8]
                        sSlaveConfig->TriggerFilter);
 8003872:	6923      	ldr	r3, [r4, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003874:	6800      	ldr	r0, [r0, #0]
 8003876:	f7ff ff55 	bl	8003724 <TIM_ETR_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2000      	movs	r0, #0
      break;
 800387c:	e010      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 800387e:	2b40      	cmp	r3, #64	@ 0x40
 8003880:	d00f      	beq.n	80038a2 <TIM_SlaveTimer_SetConfig+0x5e>
 8003882:	d901      	bls.n	8003888 <TIM_SlaveTimer_SetConfig+0x44>
      status = HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e00b      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 8003888:	2b20      	cmp	r3, #32
 800388a:	d02d      	beq.n	80038e8 <TIM_SlaveTimer_SetConfig+0xa4>
 800388c:	d903      	bls.n	8003896 <TIM_SlaveTimer_SetConfig+0x52>
 800388e:	2b30      	cmp	r3, #48	@ 0x30
 8003890:	d130      	bne.n	80038f4 <TIM_SlaveTimer_SetConfig+0xb0>
 8003892:	2000      	movs	r0, #0
 8003894:	e004      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d028      	beq.n	80038ec <TIM_SlaveTimer_SetConfig+0xa8>
 800389a:	2b10      	cmp	r3, #16
 800389c:	d128      	bne.n	80038f0 <TIM_SlaveTimer_SetConfig+0xac>
 800389e:	2000      	movs	r0, #0
}
 80038a0:	bd70      	pop	{r4, r5, r6, pc}
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d029      	beq.n	80038fc <TIM_SlaveTimer_SetConfig+0xb8>
      tmpccer = htim->Instance->CCER;
 80038a8:	6803      	ldr	r3, [r0, #0]
 80038aa:	6a1d      	ldr	r5, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	2101      	movs	r1, #1
 80038b0:	438a      	bics	r2, r1
 80038b2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80038b4:	6801      	ldr	r1, [r0, #0]
 80038b6:	698a      	ldr	r2, [r1, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b8:	23f0      	movs	r3, #240	@ 0xf0
 80038ba:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80038bc:	6923      	ldr	r3, [r4, #16]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 80038c2:	618b      	str	r3, [r1, #24]
      htim->Instance->CCER = tmpccer;
 80038c4:	6803      	ldr	r3, [r0, #0]
 80038c6:	621d      	str	r5, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80038c8:	2000      	movs	r0, #0
      break;
 80038ca:	e7e9      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
                               sSlaveConfig->TriggerPolarity,
 80038cc:	68a1      	ldr	r1, [r4, #8]
                               sSlaveConfig->TriggerFilter);
 80038ce:	6922      	ldr	r2, [r4, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d0:	6800      	ldr	r0, [r0, #0]
 80038d2:	f7ff fcc3 	bl	800325c <TIM_TI1_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2000      	movs	r0, #0
      break;
 80038d8:	e7e2      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
                               sSlaveConfig->TriggerPolarity,
 80038da:	68a1      	ldr	r1, [r4, #8]
                               sSlaveConfig->TriggerFilter);
 80038dc:	6922      	ldr	r2, [r4, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	6800      	ldr	r0, [r0, #0]
 80038e0:	f7ff fcce 	bl	8003280 <TIM_TI2_ConfigInputStage>
  HAL_StatusTypeDef status = HAL_OK;
 80038e4:	2000      	movs	r0, #0
      break;
 80038e6:	e7db      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
  switch (sSlaveConfig->InputTrigger)
 80038e8:	2000      	movs	r0, #0
 80038ea:	e7d9      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
 80038ec:	2000      	movs	r0, #0
 80038ee:	e7d7      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
      status = HAL_ERROR;
 80038f0:	2001      	movs	r0, #1
 80038f2:	e7d5      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
 80038f4:	2001      	movs	r0, #1
 80038f6:	e7d3      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7d1      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
        return HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
 80038fe:	e7cf      	b.n	80038a0 <TIM_SlaveTimer_SetConfig+0x5c>
 8003900:	ffcfff8f 	.word	0xffcfff8f
 8003904:	fffefff8 	.word	0xfffefff8

08003908 <HAL_TIM_SlaveConfigSynchro>:
{
 8003908:	b510      	push	{r4, lr}
 800390a:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800390c:	233c      	movs	r3, #60	@ 0x3c
 800390e:	5cc3      	ldrb	r3, [r0, r3]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d022      	beq.n	800395a <HAL_TIM_SlaveConfigSynchro+0x52>
 8003914:	233c      	movs	r3, #60	@ 0x3c
 8003916:	2201      	movs	r2, #1
 8003918:	54c2      	strb	r2, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	3301      	adds	r3, #1
 800391c:	3201      	adds	r2, #1
 800391e:	54c2      	strb	r2, [r0, r3]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003920:	f7ff ff90 	bl	8003844 <TIM_SlaveTimer_SetConfig>
 8003924:	2800      	cmp	r0, #0
 8003926:	d110      	bne.n	800394a <HAL_TIM_SlaveConfigSynchro+0x42>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	68d3      	ldr	r3, [r2, #12]
 800392c:	2140      	movs	r1, #64	@ 0x40
 800392e:	438b      	bics	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	68d3      	ldr	r3, [r2, #12]
 8003936:	490a      	ldr	r1, [pc, #40]	@ (8003960 <HAL_TIM_SlaveConfigSynchro+0x58>)
 8003938:	400b      	ands	r3, r1
 800393a:	60d3      	str	r3, [r2, #12]
  htim->State = HAL_TIM_STATE_READY;
 800393c:	233d      	movs	r3, #61	@ 0x3d
 800393e:	2201      	movs	r2, #1
 8003940:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(htim);
 8003942:	3b01      	subs	r3, #1
 8003944:	2200      	movs	r2, #0
 8003946:	54e2      	strb	r2, [r4, r3]
}
 8003948:	bd10      	pop	{r4, pc}
    htim->State = HAL_TIM_STATE_READY;
 800394a:	233d      	movs	r3, #61	@ 0x3d
 800394c:	2201      	movs	r2, #1
 800394e:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(htim);
 8003950:	3b01      	subs	r3, #1
 8003952:	2200      	movs	r2, #0
 8003954:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8003956:	2001      	movs	r0, #1
 8003958:	e7f6      	b.n	8003948 <HAL_TIM_SlaveConfigSynchro+0x40>
  __HAL_LOCK(htim);
 800395a:	2002      	movs	r0, #2
 800395c:	e7f4      	b.n	8003948 <HAL_TIM_SlaveConfigSynchro+0x40>
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	ffffbfff 	.word	0xffffbfff

08003964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003964:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	233c      	movs	r3, #60	@ 0x3c
 8003968:	5cc3      	ldrb	r3, [r0, r3]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d029      	beq.n	80039c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800396e:	233c      	movs	r3, #60	@ 0x3c
 8003970:	2201      	movs	r2, #1
 8003972:	54c2      	strb	r2, [r0, r3]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003974:	3301      	adds	r3, #1
 8003976:	3201      	adds	r2, #1
 8003978:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800397a:	6802      	ldr	r2, [r0, #0]
 800397c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800397e:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003980:	4c11      	ldr	r4, [pc, #68]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003982:	42a2      	cmp	r2, r4
 8003984:	d018      	beq.n	80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003986:	2470      	movs	r4, #112	@ 0x70
 8003988:	43a3      	bics	r3, r4
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398a:	680c      	ldr	r4, [r1, #0]
 800398c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800398e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003990:	6803      	ldr	r3, [r0, #0]
 8003992:	4a0d      	ldr	r2, [pc, #52]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d002      	beq.n	800399e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8003998:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d104      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	4395      	bics	r5, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a2:	688a      	ldr	r2, [r1, #8]
 80039a4:	432a      	orrs	r2, r5

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	233d      	movs	r3, #61	@ 0x3d
 80039aa:	2201      	movs	r2, #1
 80039ac:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80039ae:	3b01      	subs	r3, #1
 80039b0:	2200      	movs	r2, #0
 80039b2:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80039b4:	2000      	movs	r0, #0
}
 80039b6:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039b8:	4c05      	ldr	r4, [pc, #20]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80039ba:	4023      	ands	r3, r4
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039bc:	684c      	ldr	r4, [r1, #4]
 80039be:	4323      	orrs	r3, r4
 80039c0:	e7e1      	b.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80039c2:	2002      	movs	r0, #2
 80039c4:	e7f7      	b.n	80039b6 <HAL_TIMEx_MasterConfigSynchronization+0x52>
 80039c6:	46c0      	nop			@ (mov r8, r8)
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	ff0fffff 	.word	0xff0fffff

080039d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039d8:	4770      	bx	lr
	...

080039dc <malloc>:
 80039dc:	b510      	push	{r4, lr}
 80039de:	4b03      	ldr	r3, [pc, #12]	@ (80039ec <malloc+0x10>)
 80039e0:	0001      	movs	r1, r0
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	f000 f826 	bl	8003a34 <_malloc_r>
 80039e8:	bd10      	pop	{r4, pc}
 80039ea:	46c0      	nop			@ (mov r8, r8)
 80039ec:	20000018 	.word	0x20000018

080039f0 <sbrk_aligned>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a30 <sbrk_aligned+0x40>)
 80039f4:	000d      	movs	r5, r1
 80039f6:	6831      	ldr	r1, [r6, #0]
 80039f8:	0004      	movs	r4, r0
 80039fa:	2900      	cmp	r1, #0
 80039fc:	d102      	bne.n	8003a04 <sbrk_aligned+0x14>
 80039fe:	f000 f8b1 	bl	8003b64 <_sbrk_r>
 8003a02:	6030      	str	r0, [r6, #0]
 8003a04:	0029      	movs	r1, r5
 8003a06:	0020      	movs	r0, r4
 8003a08:	f000 f8ac 	bl	8003b64 <_sbrk_r>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d103      	bne.n	8003a18 <sbrk_aligned+0x28>
 8003a10:	2501      	movs	r5, #1
 8003a12:	426d      	negs	r5, r5
 8003a14:	0028      	movs	r0, r5
 8003a16:	bd70      	pop	{r4, r5, r6, pc}
 8003a18:	2303      	movs	r3, #3
 8003a1a:	1cc5      	adds	r5, r0, #3
 8003a1c:	439d      	bics	r5, r3
 8003a1e:	42a8      	cmp	r0, r5
 8003a20:	d0f8      	beq.n	8003a14 <sbrk_aligned+0x24>
 8003a22:	1a29      	subs	r1, r5, r0
 8003a24:	0020      	movs	r0, r4
 8003a26:	f000 f89d 	bl	8003b64 <_sbrk_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1f2      	bne.n	8003a14 <sbrk_aligned+0x24>
 8003a2e:	e7ef      	b.n	8003a10 <sbrk_aligned+0x20>
 8003a30:	2000091c 	.word	0x2000091c

08003a34 <_malloc_r>:
 8003a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a36:	2203      	movs	r2, #3
 8003a38:	1ccb      	adds	r3, r1, #3
 8003a3a:	4393      	bics	r3, r2
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	0005      	movs	r5, r0
 8003a40:	001f      	movs	r7, r3
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d234      	bcs.n	8003ab0 <_malloc_r+0x7c>
 8003a46:	270c      	movs	r7, #12
 8003a48:	42b9      	cmp	r1, r7
 8003a4a:	d833      	bhi.n	8003ab4 <_malloc_r+0x80>
 8003a4c:	0028      	movs	r0, r5
 8003a4e:	f000 f871 	bl	8003b34 <__malloc_lock>
 8003a52:	4e37      	ldr	r6, [pc, #220]	@ (8003b30 <_malloc_r+0xfc>)
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	001c      	movs	r4, r3
 8003a58:	2c00      	cmp	r4, #0
 8003a5a:	d12f      	bne.n	8003abc <_malloc_r+0x88>
 8003a5c:	0039      	movs	r1, r7
 8003a5e:	0028      	movs	r0, r5
 8003a60:	f7ff ffc6 	bl	80039f0 <sbrk_aligned>
 8003a64:	0004      	movs	r4, r0
 8003a66:	1c43      	adds	r3, r0, #1
 8003a68:	d15f      	bne.n	8003b2a <_malloc_r+0xf6>
 8003a6a:	6834      	ldr	r4, [r6, #0]
 8003a6c:	9400      	str	r4, [sp, #0]
 8003a6e:	9b00      	ldr	r3, [sp, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d14a      	bne.n	8003b0a <_malloc_r+0xd6>
 8003a74:	2c00      	cmp	r4, #0
 8003a76:	d052      	beq.n	8003b1e <_malloc_r+0xea>
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	0028      	movs	r0, r5
 8003a7c:	18e3      	adds	r3, r4, r3
 8003a7e:	9900      	ldr	r1, [sp, #0]
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	f000 f86f 	bl	8003b64 <_sbrk_r>
 8003a86:	9b01      	ldr	r3, [sp, #4]
 8003a88:	4283      	cmp	r3, r0
 8003a8a:	d148      	bne.n	8003b1e <_malloc_r+0xea>
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	0028      	movs	r0, r5
 8003a90:	1aff      	subs	r7, r7, r3
 8003a92:	0039      	movs	r1, r7
 8003a94:	f7ff ffac 	bl	80039f0 <sbrk_aligned>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d040      	beq.n	8003b1e <_malloc_r+0xea>
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	19db      	adds	r3, r3, r7
 8003aa0:	6023      	str	r3, [r4, #0]
 8003aa2:	6833      	ldr	r3, [r6, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	2a00      	cmp	r2, #0
 8003aa8:	d133      	bne.n	8003b12 <_malloc_r+0xde>
 8003aaa:	9b00      	ldr	r3, [sp, #0]
 8003aac:	6033      	str	r3, [r6, #0]
 8003aae:	e019      	b.n	8003ae4 <_malloc_r+0xb0>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	dac9      	bge.n	8003a48 <_malloc_r+0x14>
 8003ab4:	230c      	movs	r3, #12
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	2000      	movs	r0, #0
 8003aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003abc:	6821      	ldr	r1, [r4, #0]
 8003abe:	1bc9      	subs	r1, r1, r7
 8003ac0:	d420      	bmi.n	8003b04 <_malloc_r+0xd0>
 8003ac2:	290b      	cmp	r1, #11
 8003ac4:	d90a      	bls.n	8003adc <_malloc_r+0xa8>
 8003ac6:	19e2      	adds	r2, r4, r7
 8003ac8:	6027      	str	r7, [r4, #0]
 8003aca:	42a3      	cmp	r3, r4
 8003acc:	d104      	bne.n	8003ad8 <_malloc_r+0xa4>
 8003ace:	6032      	str	r2, [r6, #0]
 8003ad0:	6863      	ldr	r3, [r4, #4]
 8003ad2:	6011      	str	r1, [r2, #0]
 8003ad4:	6053      	str	r3, [r2, #4]
 8003ad6:	e005      	b.n	8003ae4 <_malloc_r+0xb0>
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e7f9      	b.n	8003ad0 <_malloc_r+0x9c>
 8003adc:	6862      	ldr	r2, [r4, #4]
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	d10e      	bne.n	8003b00 <_malloc_r+0xcc>
 8003ae2:	6032      	str	r2, [r6, #0]
 8003ae4:	0028      	movs	r0, r5
 8003ae6:	f000 f82d 	bl	8003b44 <__malloc_unlock>
 8003aea:	0020      	movs	r0, r4
 8003aec:	2207      	movs	r2, #7
 8003aee:	300b      	adds	r0, #11
 8003af0:	1d23      	adds	r3, r4, #4
 8003af2:	4390      	bics	r0, r2
 8003af4:	1ac2      	subs	r2, r0, r3
 8003af6:	4298      	cmp	r0, r3
 8003af8:	d0df      	beq.n	8003aba <_malloc_r+0x86>
 8003afa:	1a1b      	subs	r3, r3, r0
 8003afc:	50a3      	str	r3, [r4, r2]
 8003afe:	e7dc      	b.n	8003aba <_malloc_r+0x86>
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	e7ef      	b.n	8003ae4 <_malloc_r+0xb0>
 8003b04:	0023      	movs	r3, r4
 8003b06:	6864      	ldr	r4, [r4, #4]
 8003b08:	e7a6      	b.n	8003a58 <_malloc_r+0x24>
 8003b0a:	9c00      	ldr	r4, [sp, #0]
 8003b0c:	6863      	ldr	r3, [r4, #4]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	e7ad      	b.n	8003a6e <_malloc_r+0x3a>
 8003b12:	001a      	movs	r2, r3
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	42a3      	cmp	r3, r4
 8003b18:	d1fb      	bne.n	8003b12 <_malloc_r+0xde>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	e7da      	b.n	8003ad4 <_malloc_r+0xa0>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	0028      	movs	r0, r5
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f000 f80e 	bl	8003b44 <__malloc_unlock>
 8003b28:	e7c6      	b.n	8003ab8 <_malloc_r+0x84>
 8003b2a:	6007      	str	r7, [r0, #0]
 8003b2c:	e7da      	b.n	8003ae4 <_malloc_r+0xb0>
 8003b2e:	46c0      	nop			@ (mov r8, r8)
 8003b30:	20000920 	.word	0x20000920

08003b34 <__malloc_lock>:
 8003b34:	b510      	push	{r4, lr}
 8003b36:	4802      	ldr	r0, [pc, #8]	@ (8003b40 <__malloc_lock+0xc>)
 8003b38:	f000 f850 	bl	8003bdc <__retarget_lock_acquire_recursive>
 8003b3c:	bd10      	pop	{r4, pc}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	20000a60 	.word	0x20000a60

08003b44 <__malloc_unlock>:
 8003b44:	b510      	push	{r4, lr}
 8003b46:	4802      	ldr	r0, [pc, #8]	@ (8003b50 <__malloc_unlock+0xc>)
 8003b48:	f000 f849 	bl	8003bde <__retarget_lock_release_recursive>
 8003b4c:	bd10      	pop	{r4, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	20000a60 	.word	0x20000a60

08003b54 <memset>:
 8003b54:	0003      	movs	r3, r0
 8003b56:	1882      	adds	r2, r0, r2
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	7019      	strb	r1, [r3, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_sbrk_r>:
 8003b64:	2300      	movs	r3, #0
 8003b66:	b570      	push	{r4, r5, r6, lr}
 8003b68:	4d06      	ldr	r5, [pc, #24]	@ (8003b84 <_sbrk_r+0x20>)
 8003b6a:	0004      	movs	r4, r0
 8003b6c:	0008      	movs	r0, r1
 8003b6e:	602b      	str	r3, [r5, #0]
 8003b70:	f7fe fbda 	bl	8002328 <_sbrk>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d103      	bne.n	8003b80 <_sbrk_r+0x1c>
 8003b78:	682b      	ldr	r3, [r5, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d000      	beq.n	8003b80 <_sbrk_r+0x1c>
 8003b7e:	6023      	str	r3, [r4, #0]
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	46c0      	nop			@ (mov r8, r8)
 8003b84:	20000a5c 	.word	0x20000a5c

08003b88 <__errno>:
 8003b88:	4b01      	ldr	r3, [pc, #4]	@ (8003b90 <__errno+0x8>)
 8003b8a:	6818      	ldr	r0, [r3, #0]
 8003b8c:	4770      	bx	lr
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	20000018 	.word	0x20000018

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	2600      	movs	r6, #0
 8003b98:	4c0c      	ldr	r4, [pc, #48]	@ (8003bcc <__libc_init_array+0x38>)
 8003b9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003bd0 <__libc_init_array+0x3c>)
 8003b9c:	1b64      	subs	r4, r4, r5
 8003b9e:	10a4      	asrs	r4, r4, #2
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	2600      	movs	r6, #0
 8003ba6:	f000 f825 	bl	8003bf4 <_init>
 8003baa:	4c0a      	ldr	r4, [pc, #40]	@ (8003bd4 <__libc_init_array+0x40>)
 8003bac:	4d0a      	ldr	r5, [pc, #40]	@ (8003bd8 <__libc_init_array+0x44>)
 8003bae:	1b64      	subs	r4, r4, r5
 8003bb0:	10a4      	asrs	r4, r4, #2
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	00b3      	lsls	r3, r6, #2
 8003bba:	58eb      	ldr	r3, [r5, r3]
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	00b3      	lsls	r3, r6, #2
 8003bc4:	58eb      	ldr	r3, [r5, r3]
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	08003d78 	.word	0x08003d78
 8003bd0:	08003d78 	.word	0x08003d78
 8003bd4:	08003d7c 	.word	0x08003d7c
 8003bd8:	08003d78 	.word	0x08003d78

08003bdc <__retarget_lock_acquire_recursive>:
 8003bdc:	4770      	bx	lr

08003bde <__retarget_lock_release_recursive>:
 8003bde:	4770      	bx	lr

08003be0 <memcpy>:
 8003be0:	2300      	movs	r3, #0
 8003be2:	b510      	push	{r4, lr}
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d100      	bne.n	8003bea <memcpy+0xa>
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	5ccc      	ldrb	r4, [r1, r3]
 8003bec:	54c4      	strb	r4, [r0, r3]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	e7f8      	b.n	8003be4 <memcpy+0x4>
	...

08003bf4 <_init>:
 8003bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bfa:	bc08      	pop	{r3}
 8003bfc:	469e      	mov	lr, r3
 8003bfe:	4770      	bx	lr

08003c00 <_fini>:
 8003c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c02:	46c0      	nop			@ (mov r8, r8)
 8003c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c06:	bc08      	pop	{r3}
 8003c08:	469e      	mov	lr, r3
 8003c0a:	4770      	bx	lr
