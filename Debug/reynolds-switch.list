
reynolds-switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003c70  08003c70  00004c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb0  08003cb0  00005068  2**0
                  CONTENTS
  4 .ARM          00000000  08003cb0  08003cb0  00005068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cb0  08003cb0  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb0  08003cb0  00004cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb4  08003cb4  00004cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003cb8  00005000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000068  08003d20  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  08003d20  00005a74  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159c7  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358b  00000000  00000000  0001aa57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000740b  00000000  00000000  0001dfe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e40  00000000  00000000  000253f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df2  00000000  00000000  00026230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001406d  00000000  00000000  00027022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001605a  00000000  00000000  0003b08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cc17  00000000  00000000  000510e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cdd00  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000287c  00000000  00000000  000cdd44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000d05c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c58 	.word	0x08003c58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003c58 	.word	0x08003c58

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			@ (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			@ (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__gnu_thumb1_case_uhi>:
 8000144:	b403      	push	{r0, r1}
 8000146:	4671      	mov	r1, lr
 8000148:	0849      	lsrs	r1, r1, #1
 800014a:	0040      	lsls	r0, r0, #1
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	5a09      	ldrh	r1, [r1, r0]
 8000150:	0049      	lsls	r1, r1, #1
 8000152:	448e      	add	lr, r1
 8000154:	bc03      	pop	{r0, r1}
 8000156:	4770      	bx	lr

08000158 <__udivsi3>:
 8000158:	2200      	movs	r2, #0
 800015a:	0843      	lsrs	r3, r0, #1
 800015c:	428b      	cmp	r3, r1
 800015e:	d374      	bcc.n	800024a <__udivsi3+0xf2>
 8000160:	0903      	lsrs	r3, r0, #4
 8000162:	428b      	cmp	r3, r1
 8000164:	d35f      	bcc.n	8000226 <__udivsi3+0xce>
 8000166:	0a03      	lsrs	r3, r0, #8
 8000168:	428b      	cmp	r3, r1
 800016a:	d344      	bcc.n	80001f6 <__udivsi3+0x9e>
 800016c:	0b03      	lsrs	r3, r0, #12
 800016e:	428b      	cmp	r3, r1
 8000170:	d328      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d30d      	bcc.n	8000194 <__udivsi3+0x3c>
 8000178:	22ff      	movs	r2, #255	@ 0xff
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	ba12      	rev	r2, r2
 800017e:	0c03      	lsrs	r3, r0, #16
 8000180:	428b      	cmp	r3, r1
 8000182:	d302      	bcc.n	800018a <__udivsi3+0x32>
 8000184:	1212      	asrs	r2, r2, #8
 8000186:	0209      	lsls	r1, r1, #8
 8000188:	d065      	beq.n	8000256 <__udivsi3+0xfe>
 800018a:	0b03      	lsrs	r3, r0, #12
 800018c:	428b      	cmp	r3, r1
 800018e:	d319      	bcc.n	80001c4 <__udivsi3+0x6c>
 8000190:	e000      	b.n	8000194 <__udivsi3+0x3c>
 8000192:	0a09      	lsrs	r1, r1, #8
 8000194:	0bc3      	lsrs	r3, r0, #15
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x46>
 800019a:	03cb      	lsls	r3, r1, #15
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b83      	lsrs	r3, r0, #14
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x52>
 80001a6:	038b      	lsls	r3, r1, #14
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b43      	lsrs	r3, r0, #13
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x5e>
 80001b2:	034b      	lsls	r3, r1, #13
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x6a>
 80001be:	030b      	lsls	r3, r1, #12
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0ac3      	lsrs	r3, r0, #11
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x76>
 80001ca:	02cb      	lsls	r3, r1, #11
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a83      	lsrs	r3, r0, #10
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x82>
 80001d6:	028b      	lsls	r3, r1, #10
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a43      	lsrs	r3, r0, #9
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x8e>
 80001e2:	024b      	lsls	r3, r1, #9
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0a03      	lsrs	r3, r0, #8
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x9a>
 80001ee:	020b      	lsls	r3, r1, #8
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	d2cd      	bcs.n	8000192 <__udivsi3+0x3a>
 80001f6:	09c3      	lsrs	r3, r0, #7
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xa8>
 80001fc:	01cb      	lsls	r3, r1, #7
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0983      	lsrs	r3, r0, #6
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xb4>
 8000208:	018b      	lsls	r3, r1, #6
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0943      	lsrs	r3, r0, #5
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xc0>
 8000214:	014b      	lsls	r3, r1, #5
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0903      	lsrs	r3, r0, #4
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xcc>
 8000220:	010b      	lsls	r3, r1, #4
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	08c3      	lsrs	r3, r0, #3
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xd8>
 800022c:	00cb      	lsls	r3, r1, #3
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0883      	lsrs	r3, r0, #2
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xe4>
 8000238:	008b      	lsls	r3, r1, #2
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0843      	lsrs	r3, r0, #1
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xf0>
 8000244:	004b      	lsls	r3, r1, #1
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	1a41      	subs	r1, r0, r1
 800024c:	d200      	bcs.n	8000250 <__udivsi3+0xf8>
 800024e:	4601      	mov	r1, r0
 8000250:	4152      	adcs	r2, r2
 8000252:	4610      	mov	r0, r2
 8000254:	4770      	bx	lr
 8000256:	e7ff      	b.n	8000258 <__udivsi3+0x100>
 8000258:	b501      	push	{r0, lr}
 800025a:	2000      	movs	r0, #0
 800025c:	f000 f806 	bl	800026c <__aeabi_idiv0>
 8000260:	bd02      	pop	{r1, pc}
 8000262:	46c0      	nop			@ (mov r8, r8)

08000264 <__aeabi_uidivmod>:
 8000264:	2900      	cmp	r1, #0
 8000266:	d0f7      	beq.n	8000258 <__udivsi3+0x100>
 8000268:	e776      	b.n	8000158 <__udivsi3>
 800026a:	4770      	bx	lr

0800026c <__aeabi_idiv0>:
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			@ (mov r8, r8)

08000270 <nutone_app_config>:
							deadline_timer_t *timer_fsm_fan,
							deadline_timer_t *timer_fsm_white,
							deadline_timer_t *timer_fsm_vyv,
							deadline_timer_t *timer_fsm_vyv_timeout,
							deadline_timer_t *timer_fsm_vyv_safe)
{
 8000270:	b510      	push	{r4, lr}
 8000272:	0004      	movs	r4, r0
 8000274:	9804      	ldr	r0, [sp, #16]
	nutone_app_hand->motion_hand = motion_hand;
 8000276:	6062      	str	r2, [r4, #4]
	nutone_app_hand->nutone_dev = nutone_dev;
	nutone_app_hand->button_white = button_white;
	nutone_app_hand->button_fan = button_fan;
 8000278:	60a3      	str	r3, [r4, #8]
	nutone_app_hand->button_white = button_white;
 800027a:	9a02      	ldr	r2, [sp, #8]
	nutone_app_hand->button_vyv = button_vyv;
 800027c:	9b03      	ldr	r3, [sp, #12]
	nutone_app_hand->nutone_dev = nutone_dev;
 800027e:	6021      	str	r1, [r4, #0]
	nutone_app_hand->button_white = button_white;
 8000280:	60e2      	str	r2, [r4, #12]
	nutone_app_hand->button_vyv = button_vyv;
 8000282:	6123      	str	r3, [r4, #16]
	nutone_app_hand->led_signal_hand = led_signal_hand;
 8000284:	61e0      	str	r0, [r4, #28]
	led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 8000286:	6800      	ldr	r0, [r0, #0]
 8000288:	f000 fb3e 	bl	8000908 <led_signal_start>
	nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
	nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;

	nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;

	nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 800028c:	2000      	movs	r0, #0
	nutone_app_hand->timer_fsm_white = timer_fsm_white;
 800028e:	9b06      	ldr	r3, [sp, #24]
 8000290:	6223      	str	r3, [r4, #32]
	nutone_app_hand->timer_fsm_vyv = timer_fsm_vyv;
 8000292:	9b07      	ldr	r3, [sp, #28]
 8000294:	6263      	str	r3, [r4, #36]	@ 0x24
	nutone_app_hand->timer_fsm_vyv_safe = timer_fsm_vyv_safe;
 8000296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000298:	62e3      	str	r3, [r4, #44]	@ 0x2c
	nutone_app_hand->timer_fsm_vyv_timeout = timer_fsm_vyv_timeout;
 800029a:	9b08      	ldr	r3, [sp, #32]
 800029c:	62a3      	str	r3, [r4, #40]	@ 0x28
	nutone_app_hand->timer_fsm_fan = timer_fsm_fan;
 800029e:	9b05      	ldr	r3, [sp, #20]
 80002a0:	6323      	str	r3, [r4, #48]	@ 0x30
	nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 80002a2:	4b03      	ldr	r3, [pc, #12]	@ (80002b0 <nutone_app_config+0x40>)
 80002a4:	6363      	str	r3, [r4, #52]	@ 0x34
	nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 80002a6:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <nutone_app_config+0x44>)
 80002a8:	63a3      	str	r3, [r4, #56]	@ 0x38
	nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 80002aa:	343c      	adds	r4, #60	@ 0x3c
 80002ac:	7020      	strb	r0, [r4, #0]

	return 0;
}
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	01010000 	.word	0x01010000
 80002b4:	00010101 	.word	0x00010101

080002b8 <nutone_white_fsm>:
	}
	return 0;
}

uint8_t nutone_white_fsm(nutone_app_t *nutone_app_hand)
{
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}

	button_isr_status_t button_isr_status;
	button_edge_t edge;
	deadline_timer_expired_t deadline_expired;

	button_t *button = nutone_app_hand->button_white->button;
 80002ba:	68c3      	ldr	r3, [r0, #12]
{
 80002bc:	b089      	sub	sp, #36	@ 0x24
	button_check_isr_request(*button, &button_isr_status, &edge);
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	aa07      	add	r2, sp, #28
 80002c2:	261d      	movs	r6, #29
 80002c4:	9203      	str	r2, [sp, #12]
 80002c6:	001a      	movs	r2, r3
 80002c8:	4669      	mov	r1, sp
{
 80002ca:	0004      	movs	r4, r0
	button_check_isr_request(*button, &button_isr_status, &edge);
 80002cc:	446e      	add	r6, sp
 80002ce:	9604      	str	r6, [sp, #16]
 80002d0:	3210      	adds	r2, #16
 80002d2:	caa1      	ldmia	r2!, {r0, r5, r7}
 80002d4:	c1a1      	stmia	r1!, {r0, r5, r7}
 80002d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002d8:	f000 fa9b 	bl	8000812 <button_check_isr_request>

	volatile button_status_t button_status = BUTTON_OFF;
 80002dc:	466b      	mov	r3, sp
 80002de:	2200      	movs	r2, #0
 80002e0:	0025      	movs	r5, r4
 80002e2:	779a      	strb	r2, [r3, #30]

	}
#endif //WHILE_TEST_SELECTION_IN_IDDLE

#ifndef WHILE_TEST_SELECTION_IN_IDDLE
	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80002e4:	7f1b      	ldrb	r3, [r3, #28]
 80002e6:	353b      	adds	r5, #59	@ 0x3b
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d114      	bne.n	8000316 <nutone_white_fsm+0x5e>
	{
		if(edge == BUTTON_EDGE_NEGATIVE)
 80002ec:	7831      	ldrb	r1, [r6, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	d111      	bne.n	8000316 <nutone_white_fsm+0x5e>
		{
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 80002f2:	3305      	adds	r3, #5
 80002f4:	702b      	strb	r3, [r5, #0]
			nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 80002f6:	68e3      	ldr	r3, [r4, #12]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	711a      	strb	r2, [r3, #4]
			}

			break;
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 80002fc:	0023      	movs	r3, r4
 80002fe:	2201      	movs	r2, #1
 8000300:	3339      	adds	r3, #57	@ 0x39
 8000302:	701a      	strb	r2, [r3, #0]

			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_white);
 8000304:	6a20      	ldr	r0, [r4, #32]
 8000306:	f001 f893 	bl	8001430 <deadline_timer_force_expiration>
			//this is done in another fsm
			nutone_set_command(nutone_app_hand->nutone_dev,
 800030a:	2104      	movs	r1, #4
 800030c:	6820      	ldr	r0, [r4, #0]
 800030e:	f000 ff15 	bl	800113c <nutone_set_command>
													NUTONE_CMD_WHITE_TURN_OFF);
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;

			break;
		default:
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 8000312:	2300      	movs	r3, #0
 8000314:	e046      	b.n	80003a4 <nutone_white_fsm+0xec>
	switch(nutone_app_hand->fsm_state_white)
 8000316:	7828      	ldrb	r0, [r5, #0]
 8000318:	2807      	cmp	r0, #7
 800031a:	d8fa      	bhi.n	8000312 <nutone_white_fsm+0x5a>
 800031c:	f7ff fef4 	bl	8000108 <__gnu_thumb1_case_sqi>
 8000320:	32441c04 	.word	0x32441c04
 8000324:	ee0f4f4a 	.word	0xee0f4f4a
			if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8000328:	2b02      	cmp	r3, #2
 800032a:	d108      	bne.n	800033e <nutone_white_fsm+0x86>
				if(edge == BUTTON_EDGE_POSITIVE)
 800032c:	7833      	ldrb	r3, [r6, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d105      	bne.n	800033e <nutone_white_fsm+0x86>
					nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 8000332:	2200      	movs	r2, #0
					nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 8000334:	3b01      	subs	r3, #1
 8000336:	702b      	strb	r3, [r5, #0]
					nutone_app_hand->button_white->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 8000338:	68e3      	ldr	r3, [r4, #12]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	711a      	strb	r2, [r3, #4]
			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 800033e:	0023      	movs	r3, r4
 8000340:	3334      	adds	r3, #52	@ 0x34
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d104      	bne.n	8000352 <nutone_white_fsm+0x9a>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 8000348:	2301      	movs	r3, #1
 800034a:	702b      	strb	r3, [r5, #0]
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 800034c:	2300      	movs	r3, #0
 800034e:	3434      	adds	r4, #52	@ 0x34
 8000350:	7023      	strb	r3, [r4, #0]

	return 0;



}
 8000352:	2000      	movs	r0, #0
 8000354:	b009      	add	sp, #36	@ 0x24
 8000356:	bdf0      	pop	{r4, r5, r6, r7, pc}
			button_get_status(nutone_app_hand->button_white->button,
 8000358:	221e      	movs	r2, #30
 800035a:	68e3      	ldr	r3, [r4, #12]
 800035c:	446a      	add	r2, sp
 800035e:	0011      	movs	r1, r2
 8000360:	6818      	ldr	r0, [r3, #0]
 8000362:	f000 fa19 	bl	8000798 <button_get_status>
			if(button_status == BUTTON_ON)
 8000366:	466b      	mov	r3, sp
 8000368:	0022      	movs	r2, r4
 800036a:	7f99      	ldrb	r1, [r3, #30]
 800036c:	3234      	adds	r2, #52	@ 0x34
 800036e:	2300      	movs	r3, #0
 8000370:	2901      	cmp	r1, #1
 8000372:	d105      	bne.n	8000380 <nutone_white_fsm+0xc8>
				nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_BUSY;
 8000374:	3439      	adds	r4, #57	@ 0x39
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_FOR_LIGHT;
 8000376:	3102      	adds	r1, #2
				nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_BUSY;
 8000378:	7023      	strb	r3, [r4, #0]
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_FOR_LIGHT;
 800037a:	7029      	strb	r1, [r5, #0]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 800037c:	7013      	strb	r3, [r2, #0]
 800037e:	e7e8      	b.n	8000352 <nutone_white_fsm+0x9a>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 8000380:	702b      	strb	r3, [r5, #0]
 8000382:	e7fb      	b.n	800037c <nutone_white_fsm+0xc4>
			nutone_get_cmd_status(*nutone_app_hand->nutone_dev, &cmd_status);
 8000384:	6823      	ldr	r3, [r4, #0]
 8000386:	241f      	movs	r4, #31
 8000388:	001a      	movs	r2, r3
 800038a:	4669      	mov	r1, sp
 800038c:	446c      	add	r4, sp
 800038e:	9402      	str	r4, [sp, #8]
 8000390:	3210      	adds	r2, #16
 8000392:	ca41      	ldmia	r2!, {r0, r6}
 8000394:	c141      	stmia	r1!, {r0, r6}
 8000396:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000398:	f000 fed3 	bl	8001142 <nutone_get_cmd_status>
			if(cmd_status == NUTONE_CMD_STE_READY)
 800039c:	7823      	ldrb	r3, [r4, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1d7      	bne.n	8000352 <nutone_white_fsm+0x9a>
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_TURN_ON_LIGHT;
 80003a2:	3302      	adds	r3, #2
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80003a4:	702b      	strb	r3, [r5, #0]
			break;
 80003a6:	e7d4      	b.n	8000352 <nutone_white_fsm+0x9a>
			nutone_set_command(nutone_app_hand->nutone_dev,
 80003a8:	2103      	movs	r1, #3
 80003aa:	6820      	ldr	r0, [r4, #0]
 80003ac:	f000 fec6 	bl	800113c <nutone_set_command>
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 80003b0:	2304      	movs	r3, #4
 80003b2:	e7f7      	b.n	80003a4 <nutone_white_fsm+0xec>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_white);
 80003b4:	6a20      	ldr	r0, [r4, #32]
 80003b6:	f001 f840 	bl	800143a <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_EXPIRATION;
 80003ba:	2305      	movs	r3, #5
 80003bc:	e7f2      	b.n	80003a4 <nutone_white_fsm+0xec>
			deadline_timer_check(nutone_app_hand->timer_fsm_white,
 80003be:	261f      	movs	r6, #31
 80003c0:	446e      	add	r6, sp
 80003c2:	0031      	movs	r1, r6
 80003c4:	6a20      	ldr	r0, [r4, #32]
 80003c6:	f001 f86d 	bl	80014a4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80003ca:	7833      	ldrb	r3, [r6, #0]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d10b      	bne.n	80003e8 <nutone_white_fsm+0x130>
				nutone_app_hand->signals.white_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 80003d0:	0022      	movs	r2, r4
 80003d2:	3239      	adds	r2, #57	@ 0x39
 80003d4:	7013      	strb	r3, [r2, #0]
				deadline_timer_force_expiration(nutone_app_hand->timer_fsm_white);
 80003d6:	6a20      	ldr	r0, [r4, #32]
 80003d8:	f001 f82a 	bl	8001430 <deadline_timer_force_expiration>
				nutone_set_command(nutone_app_hand->nutone_dev,
 80003dc:	2104      	movs	r1, #4
 80003de:	6820      	ldr	r0, [r4, #0]
 80003e0:	f000 feac 	bl	800113c <nutone_set_command>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_WAIT_MOTION;
 80003e4:	2306      	movs	r3, #6
 80003e6:	702b      	strb	r3, [r5, #0]
			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 80003e8:	3434      	adds	r4, #52	@ 0x34
 80003ea:	7823      	ldrb	r3, [r4, #0]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d1b0      	bne.n	8000352 <nutone_white_fsm+0x9a>
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 80003f0:	2300      	movs	r3, #0
 80003f2:	7023      	strb	r3, [r4, #0]
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 80003f4:	e7dc      	b.n	80003b0 <nutone_white_fsm+0xf8>

080003f6 <nutone_vyv_fsm>:
	deadline_timer_expired_t deadline_timeout_expired;

//	button_check_isr_request(*nutone_app_hand->button_vyv->button, &button_isr_status, &edge);
//	pyd1598_check_isr_request(*nutone_app_hand->motion_hand->motion_sensor, &motion_isr_status);

	pyd1598_sensor_t *sensor = nutone_app_hand->motion_hand->motion_sensor;
 80003f6:	6843      	ldr	r3, [r0, #4]
{
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	pyd1598_check_isr_request(*sensor, &motion_isr_status);
 80003fa:	681d      	ldr	r5, [r3, #0]
 80003fc:	235d      	movs	r3, #93	@ 0x5d
 80003fe:	0029      	movs	r1, r5
{
 8000400:	0004      	movs	r4, r0
 8000402:	b099      	sub	sp, #100	@ 0x64
	pyd1598_check_isr_request(*sensor, &motion_isr_status);
 8000404:	446b      	add	r3, sp
 8000406:	2250      	movs	r2, #80	@ 0x50
 8000408:	3110      	adds	r1, #16
 800040a:	4668      	mov	r0, sp
 800040c:	9314      	str	r3, [sp, #80]	@ 0x50
 800040e:	f003 fc19 	bl	8003c44 <memcpy>
 8000412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000414:	f000 fa9a 	bl	800094c <pyd1598_check_isr_request>

	button_t *button = nutone_app_hand->button_vyv->button;
 8000418:	6923      	ldr	r3, [r4, #16]
	button_check_isr_request(*button, &button_isr_status, &edge);
 800041a:	aa17      	add	r2, sp, #92	@ 0x5c
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	265b      	movs	r6, #91	@ 0x5b
 8000420:	9204      	str	r2, [sp, #16]
 8000422:	001a      	movs	r2, r3
 8000424:	4669      	mov	r1, sp
 8000426:	446e      	add	r6, sp
 8000428:	9603      	str	r6, [sp, #12]
 800042a:	3210      	adds	r2, #16
 800042c:	caa1      	ldmia	r2!, {r0, r5, r7}
 800042e:	c1a1      	stmia	r1!, {r0, r5, r7}
 8000430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000432:	f000 f9ee 	bl	8000812 <button_check_isr_request>



	if(	nutone_app_hand->nutone_dev->current_light_mode ==
 8000436:	6823      	ldr	r3, [r4, #0]
 8000438:	0025      	movs	r5, r4
 800043a:	7d99      	ldrb	r1, [r3, #22]
 800043c:	353c      	adds	r5, #60	@ 0x3c
 800043e:	1e4a      	subs	r2, r1, #1
 8000440:	1e50      	subs	r0, r2, #1
 8000442:	4182      	sbcs	r2, r0
 8000444:	0020      	movs	r0, r4
 8000446:	3038      	adds	r0, #56	@ 0x38
 8000448:	7002      	strb	r2, [r0, #0]
	else
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
	}

	if(nutone_app_hand->signals.uv_abort == MOTION_ABORT_TRUE)
 800044a:	0022      	movs	r2, r4
 800044c:	3236      	adds	r2, #54	@ 0x36
 800044e:	7810      	ldrb	r0, [r2, #0]
 8000450:	2800      	cmp	r0, #0
 8000452:	d103      	bne.n	800045c <nutone_vyv_fsm+0x66>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000454:	300b      	adds	r0, #11
 8000456:	7028      	strb	r0, [r5, #0]
		nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 8000458:	380a      	subs	r0, #10
 800045a:	7010      	strb	r0, [r2, #0]
	}

	if(nutone_app_hand->signals.uv_abort_white_button == MOTION_ABORT_TRUE)
 800045c:	0022      	movs	r2, r4
 800045e:	3237      	adds	r2, #55	@ 0x37
 8000460:	7810      	ldrb	r0, [r2, #0]
 8000462:	2800      	cmp	r0, #0
 8000464:	d103      	bne.n	800046e <nutone_vyv_fsm+0x78>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT_WHITE_BUTTON;
 8000466:	300c      	adds	r0, #12
 8000468:	7028      	strb	r0, [r5, #0]
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_FALSE;
 800046a:	380b      	subs	r0, #11
 800046c:	7010      	strb	r0, [r2, #0]

#endif //WHILE_TEST_SELECTION_IN_IDDLE


#ifndef WHILE_TEST_SELECTION_IN_IDDLE
	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 800046e:	7832      	ldrb	r2, [r6, #0]
 8000470:	2a02      	cmp	r2, #2
 8000472:	d107      	bne.n	8000484 <nutone_vyv_fsm+0x8e>
	{
		if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_OFF)
 8000474:	6920      	ldr	r0, [r4, #16]
 8000476:	6800      	ldr	r0, [r0, #0]
 8000478:	78c6      	ldrb	r6, [r0, #3]
 800047a:	2e00      	cmp	r6, #0
 800047c:	d102      	bne.n	8000484 <nutone_vyv_fsm+0x8e>
		{
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
			nutone_app_hand->button_vyv->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 800047e:	7106      	strb	r6, [r0, #4]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
			}

			break;
		case MOTION_LIGHT_UV_ABORT:
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8000480:	230a      	movs	r3, #10
 8000482:	e036      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
	switch(nutone_app_hand->fsm_state_uyu)
 8000484:	7828      	ldrb	r0, [r5, #0]
 8000486:	280c      	cmp	r0, #12
 8000488:	d900      	bls.n	800048c <nutone_vyv_fsm+0x96>
 800048a:	e0bd      	b.n	8000608 <nutone_vyv_fsm+0x212>
 800048c:	f7ff fe50 	bl	8000130 <__gnu_thumb1_case_shi>
 8000490:	0021000d 	.word	0x0021000d
 8000494:	003300bc 	.word	0x003300bc
 8000498:	0050004b 	.word	0x0050004b
 800049c:	006e005e 	.word	0x006e005e
 80004a0:	007d0074 	.word	0x007d0074
 80004a4:	fff80093 	.word	0xfff80093
 80004a8:	00ae      	.short	0x00ae
			if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80004aa:	2a02      	cmp	r2, #2
 80004ac:	d107      	bne.n	80004be <nutone_vyv_fsm+0xc8>
				if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_ON)
 80004ae:	6923      	ldr	r3, [r4, #16]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	78da      	ldrb	r2, [r3, #3]
 80004b4:	2a01      	cmp	r2, #1
 80004b6:	d102      	bne.n	80004be <nutone_vyv_fsm+0xc8>
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 80004b8:	702a      	strb	r2, [r5, #0]
					nutone_app_hand->button_vyv->button->edge_attended = PYD1598_WAKEUP_ISR_ATTENDED;
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80004be:	3435      	adds	r4, #53	@ 0x35
 80004c0:	7823      	ldrb	r3, [r4, #0]
 80004c2:	2b02      	cmp	r3, #2
 80004c4:	d101      	bne.n	80004ca <nutone_vyv_fsm+0xd4>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80004c6:	2300      	movs	r3, #0
 80004c8:	7023      	strb	r3, [r4, #0]
			__NOP();//Do nothing
 80004ca:	46c0      	nop			@ (mov r8, r8)




	return 0;
}
 80004cc:	2000      	movs	r0, #0
 80004ce:	b019      	add	sp, #100	@ 0x64
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_BUSY;
 80004d2:	0023      	movs	r3, r4
 80004d4:	2200      	movs	r2, #0
 80004d6:	333a      	adds	r3, #58	@ 0x3a
 80004d8:	701a      	strb	r2, [r3, #0]
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_timeout);
 80004da:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80004dc:	f000 ffad 	bl	800143a <deadline_timer_set_initial_time>
			led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 80004e0:	69e3      	ldr	r3, [r4, #28]
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f000 fa10 	bl	8000908 <led_signal_start>
			nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_BLINK;
 80004e8:	2202      	movs	r2, #2
 80004ea:	69e3      	ldr	r3, [r4, #28]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	725a      	strb	r2, [r3, #9]
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 80004f0:	2303      	movs	r3, #3
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 80004f2:	702b      	strb	r3, [r5, #0]
			break;
 80004f4:	e7ea      	b.n	80004cc <nutone_vyv_fsm+0xd6>
			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80004f6:	0026      	movs	r6, r4
 80004f8:	3635      	adds	r6, #53	@ 0x35
 80004fa:	7833      	ldrb	r3, [r6, #0]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d101      	bne.n	8000504 <nutone_vyv_fsm+0x10e>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000500:	2300      	movs	r3, #0
 8000502:	7033      	strb	r3, [r6, #0]
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_timeout,
 8000504:	275f      	movs	r7, #95	@ 0x5f
 8000506:	446f      	add	r7, sp
 8000508:	0039      	movs	r1, r7
 800050a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800050c:	f000 ffca 	bl	80014a4 <deadline_timer_check>
			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000510:	783b      	ldrb	r3, [r7, #0]
 8000512:	2b01      	cmp	r3, #1
 8000514:	d1da      	bne.n	80004cc <nutone_vyv_fsm+0xd6>
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000516:	2200      	movs	r2, #0
 8000518:	7032      	strb	r2, [r6, #0]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 800051a:	3204      	adds	r2, #4
 800051c:	702a      	strb	r2, [r5, #0]
				nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_SOLID;
 800051e:	69e2      	ldr	r2, [r4, #28]
 8000520:	6812      	ldr	r2, [r2, #0]
 8000522:	7253      	strb	r3, [r2, #9]
 8000524:	e7d2      	b.n	80004cc <nutone_vyv_fsm+0xd6>
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_safe);
 8000526:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8000528:	f000 ff87 	bl	800143a <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 800052c:	2305      	movs	r3, #5
 800052e:	e7e0      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8000530:	2304      	movs	r3, #4
			if(nutone_app_hand->signals.wait == MOTION_UV_WAIT_TRUE)
 8000532:	2901      	cmp	r1, #1
 8000534:	d0dd      	beq.n	80004f2 <nutone_vyv_fsm+0xfc>
				deadline_timer_check(nutone_app_hand->timer_fsm_vyv_safe,
 8000536:	265e      	movs	r6, #94	@ 0x5e
 8000538:	446e      	add	r6, sp
 800053a:	0031      	movs	r1, r6
 800053c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800053e:	f000 ffb1 	bl	80014a4 <deadline_timer_check>
				if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000542:	7833      	ldrb	r3, [r6, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d12b      	bne.n	80005a0 <nutone_vyv_fsm+0x1aa>
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_LIGHT;
 8000548:	3305      	adds	r3, #5
 800054a:	e7d2      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
			nutone_get_cmd_status(*nutone_app_hand->nutone_dev, &cmd_status);
 800054c:	245f      	movs	r4, #95	@ 0x5f
 800054e:	001a      	movs	r2, r3
 8000550:	4669      	mov	r1, sp
 8000552:	446c      	add	r4, sp
 8000554:	9402      	str	r4, [sp, #8]
 8000556:	3210      	adds	r2, #16
 8000558:	ca41      	ldmia	r2!, {r0, r6}
 800055a:	c141      	stmia	r1!, {r0, r6}
 800055c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800055e:	f000 fdf0 	bl	8001142 <nutone_get_cmd_status>
			if(cmd_status == NUTONE_CMD_STE_READY)
 8000562:	7823      	ldrb	r3, [r4, #0]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1b1      	bne.n	80004cc <nutone_vyv_fsm+0xd6>
				nutone_app_hand->fsm_state_uyu  = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8000568:	3307      	adds	r3, #7
 800056a:	e7c2      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
			nutone_set_command(nutone_app_hand->nutone_dev,
 800056c:	0018      	movs	r0, r3
 800056e:	2105      	movs	r1, #5
 8000570:	f000 fde4 	bl	800113c <nutone_set_command>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMER;
 8000574:	2308      	movs	r3, #8
 8000576:	e7bc      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
			nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000578:	0023      	movs	r3, r4
 800057a:	2200      	movs	r2, #0
 800057c:	3335      	adds	r3, #53	@ 0x35
 800057e:	701a      	strb	r2, [r3, #0]
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv);
 8000580:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000582:	f000 ff5a 	bl	800143a <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8000586:	2309      	movs	r3, #9
 8000588:	e7b3      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv,
 800058a:	265f      	movs	r6, #95	@ 0x5f
 800058c:	446e      	add	r6, sp
 800058e:	0031      	movs	r1, r6
 8000590:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000592:	f000 ff87 	bl	80014a4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8000596:	7833      	ldrb	r3, [r6, #0]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d101      	bne.n	80005a0 <nutone_vyv_fsm+0x1aa>
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 800059c:	3309      	adds	r3, #9
 800059e:	702b      	strb	r3, [r5, #0]
					if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 80005a0:	0023      	movs	r3, r4
 80005a2:	3335      	adds	r3, #53	@ 0x35
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d000      	beq.n	80005ac <nutone_vyv_fsm+0x1b6>
 80005aa:	e78f      	b.n	80004cc <nutone_vyv_fsm+0xd6>
						nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80005ac:	2300      	movs	r3, #0
 80005ae:	3435      	adds	r4, #53	@ 0x35
 80005b0:	7023      	strb	r3, [r4, #0]
						nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 80005b2:	330b      	adds	r3, #11
 80005b4:	e79d      	b.n	80004f2 <nutone_vyv_fsm+0xfc>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005b6:	2600      	movs	r6, #0
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 80005b8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005ba:	f000 ff39 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 80005be:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80005c0:	f000 ff36 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 80005c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005c6:	f000 ff33 	bl	8001430 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005ca:	6923      	ldr	r3, [r4, #16]
			nutone_set_command(nutone_app_hand->nutone_dev,
 80005cc:	2106      	movs	r1, #6
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	70de      	strb	r6, [r3, #3]
			nutone_set_command(nutone_app_hand->nutone_dev,
 80005d2:	6820      	ldr	r0, [r4, #0]
 80005d4:	f000 fdb2 	bl	800113c <nutone_set_command>
			nutone_app_hand->signals.vyv_fsm_status = MOTION_LIGHT_FSM_STATUS_READY;
 80005d8:	0023      	movs	r3, r4
 80005da:	2201      	movs	r2, #1
 80005dc:	333a      	adds	r3, #58	@ 0x3a
 80005de:	701a      	strb	r2, [r3, #0]
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 80005e0:	69e3      	ldr	r3, [r4, #28]
 80005e2:	6818      	ldr	r0, [r3, #0]
 80005e4:	f000 f994 	bl	8000910 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 80005e8:	702e      	strb	r6, [r5, #0]
			break;
 80005ea:	e76f      	b.n	80004cc <nutone_vyv_fsm+0xd6>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80005ec:	2600      	movs	r6, #0
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 80005ee:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80005f0:	f000 ff1e 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 80005f4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80005f6:	f000 ff1b 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 80005fa:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80005fc:	f000 ff18 	bl	8001430 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 8000600:	6923      	ldr	r3, [r4, #16]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	70de      	strb	r6, [r3, #3]
 8000606:	e7e7      	b.n	80005d8 <nutone_vyv_fsm+0x1e2>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 8000608:	2300      	movs	r3, #0
 800060a:	e772      	b.n	80004f2 <nutone_vyv_fsm+0xfc>

0800060c <nutone_app_fsm>:
{
 800060c:	b510      	push	{r4, lr}
 800060e:	0004      	movs	r4, r0
	nutone_white_fsm(nutone_app_hand);
 8000610:	f7ff fe52 	bl	80002b8 <nutone_white_fsm>
	nutone_vyv_fsm(nutone_app_hand);
 8000614:	0020      	movs	r0, r4
 8000616:	f7ff feee 	bl	80003f6 <nutone_vyv_fsm>
	nutone_fsm(nutone_app_hand->nutone_dev);
 800061a:	6820      	ldr	r0, [r4, #0]
 800061c:	f000 fdbc 	bl	8001198 <nutone_fsm>
}
 8000620:	2000      	movs	r0, #0
 8000622:	bd10      	pop	{r4, pc}

08000624 <nutone_app_check_button_event>:


}

void nutone_app_check_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8000624:	b573      	push	{r0, r1, r4, r5, r6, lr}
	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8000626:	7c8b      	ldrb	r3, [r1, #18]
{
 8000628:	0004      	movs	r4, r0
 800062a:	000d      	movs	r5, r1
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10d      	bne.n	800064c <nutone_app_check_button_event+0x28>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 8000630:	466b      	mov	r3, sp
 8000632:	1dde      	adds	r6, r3, #7
 8000634:	0031      	movs	r1, r6
 8000636:	f000 ff35 	bl	80014a4 <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 800063a:	7833      	ldrb	r3, [r6, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d105      	bne.n	800064c <nutone_app_check_button_event+0x28>
		{
			button_debounce_fsm(button);
 8000640:	0028      	movs	r0, r5
 8000642:	f000 f8be 	bl	80007c2 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 8000646:	0020      	movs	r0, r4
 8000648:	f000 fef7 	bl	800143a <deadline_timer_set_initial_time>
		}
	}
}
 800064c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

08000650 <nutone_app_check_events>:
{
 8000650:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile pyd1598_motion_isr_status_t motion_isr_status = PYD1598_MOTION_ISR_ATTENDED;
 8000652:	251d      	movs	r5, #29
 8000654:	2600      	movs	r6, #0
{
 8000656:	b08b      	sub	sp, #44	@ 0x2c
	volatile pyd1598_motion_isr_status_t motion_isr_status = PYD1598_MOTION_ISR_ATTENDED;
 8000658:	ab02      	add	r3, sp, #8
 800065a:	18ed      	adds	r5, r5, r3
	pyd1598_read_wakeup_signal(nutone_app_hand->motion_hand->motion_sensor,
 800065c:	6843      	ldr	r3, [r0, #4]
{
 800065e:	0004      	movs	r4, r0
	pyd1598_read_wakeup_signal(nutone_app_hand->motion_hand->motion_sensor,
 8000660:	0029      	movs	r1, r5
 8000662:	6818      	ldr	r0, [r3, #0]
	volatile pyd1598_motion_isr_status_t motion_isr_status = PYD1598_MOTION_ISR_ATTENDED;
 8000664:	702e      	strb	r6, [r5, #0]
	pyd1598_read_wakeup_signal(nutone_app_hand->motion_hand->motion_sensor,
 8000666:	f000 f97d 	bl	8000964 <pyd1598_read_wakeup_signal>
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 800066a:	782b      	ldrb	r3, [r5, #0]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d106      	bne.n	800067e <nutone_app_check_events+0x2e>
		nutone_app_hand->signals.motion_light = MOTION_ISR_UNATTENDED;
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <nutone_app_check_events+0xb4>)
		motion_isr_status = PYD1598_MOTION_ISR_ATTENDED;
 8000672:	702e      	strb	r6, [r5, #0]
		nutone_app_hand->signals.motion_light = MOTION_ISR_UNATTENDED;
 8000674:	86a3      	strh	r3, [r4, #52]	@ 0x34
		nutone_app_hand->motion_hand->motion_sensor->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8000676:	6863      	ldr	r3, [r4, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3358      	adds	r3, #88	@ 0x58
 800067c:	701e      	strb	r6, [r3, #0]
	button_check_isr_request(*button_vyv, &button_isr_stat, &check_edge);
 800067e:	261f      	movs	r6, #31
 8000680:	251e      	movs	r5, #30
	nutone_app_check_button_event(nutone_app_hand->button_white->btn_timer,
 8000682:	68e3      	ldr	r3, [r4, #12]
 8000684:	6819      	ldr	r1, [r3, #0]
 8000686:	6858      	ldr	r0, [r3, #4]
 8000688:	f7ff ffcc 	bl	8000624 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_vyv->btn_timer,
 800068c:	6923      	ldr	r3, [r4, #16]
 800068e:	6819      	ldr	r1, [r3, #0]
 8000690:	6858      	ldr	r0, [r3, #4]
 8000692:	f7ff ffc7 	bl	8000624 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_fan->btn_timer,
 8000696:	68a3      	ldr	r3, [r4, #8]
 8000698:	6858      	ldr	r0, [r3, #4]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	f7ff ffc2 	bl	8000624 <nutone_app_check_button_event>
	button_t *button_vyv = nutone_app_hand->button_vyv->button;
 80006a0:	6923      	ldr	r3, [r4, #16]
	button_check_isr_request(*button_vyv, &button_isr_stat, &check_edge);
 80006a2:	aa02      	add	r2, sp, #8
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	18b6      	adds	r6, r6, r2
 80006a8:	aa02      	add	r2, sp, #8
 80006aa:	18ad      	adds	r5, r5, r2
 80006ac:	001a      	movs	r2, r3
 80006ae:	4669      	mov	r1, sp
 80006b0:	9604      	str	r6, [sp, #16]
 80006b2:	9503      	str	r5, [sp, #12]
 80006b4:	9607      	str	r6, [sp, #28]
 80006b6:	3210      	adds	r2, #16
 80006b8:	cac1      	ldmia	r2!, {r0, r6, r7}
 80006ba:	c1c1      	stmia	r1!, {r0, r6, r7}
 80006bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006be:	f000 f8a8 	bl	8000812 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80006c2:	782b      	ldrb	r3, [r5, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d106      	bne.n	80006d6 <nutone_app_check_events+0x86>
		if(nutone_app_hand->button_vyv->button->push_status != BUTTON_PUSH_ON)
 80006c8:	6923      	ldr	r3, [r4, #16]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	78da      	ldrb	r2, [r3, #3]
 80006ce:	2a01      	cmp	r2, #1
 80006d0:	d016      	beq.n	8000700 <nutone_app_check_events+0xb0>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_ON;
 80006d2:	2201      	movs	r2, #1
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 80006d4:	70da      	strb	r2, [r3, #3]
	button_t *button = nutone_app_hand->button_white->button;
 80006d6:	68e3      	ldr	r3, [r4, #12]
	button_check_isr_request(*button, &button_isr_stat, &check_edge);
 80006d8:	9a07      	ldr	r2, [sp, #28]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	9204      	str	r2, [sp, #16]
 80006de:	001a      	movs	r2, r3
 80006e0:	4669      	mov	r1, sp
 80006e2:	9503      	str	r5, [sp, #12]
 80006e4:	3210      	adds	r2, #16
 80006e6:	cac1      	ldmia	r2!, {r0, r6, r7}
 80006e8:	c1c1      	stmia	r1!, {r0, r6, r7}
 80006ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ec:	f000 f891 	bl	8000812 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80006f0:	782b      	ldrb	r3, [r5, #0]
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d102      	bne.n	80006fc <nutone_app_check_events+0xac>
		nutone_app_hand->signals.uv_abort_white_button = MOTION_ABORT_TRUE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	3437      	adds	r4, #55	@ 0x37
 80006fa:	7023      	strb	r3, [r4, #0]
}
 80006fc:	b00b      	add	sp, #44	@ 0x2c
 80006fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 8000700:	2200      	movs	r2, #0
 8000702:	e7e7      	b.n	80006d4 <nutone_app_check_events+0x84>
 8000704:	00000202 	.word	0x00000202

08000708 <nutone_app_set_outputs>:


void nutone_app_set_outputs(nutone_app_t *nutone_app_hand)
{
 8000708:	b510      	push	{r4, lr}
 800070a:	0004      	movs	r4, r0
	output_fsm_ctrl(nutone_app_hand->nutone_dev->lights->relay,
 800070c:	6803      	ldr	r3, [r0, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	cb03      	ldmia	r3!, {r0, r1}
 8000712:	f000 fee1 	bl	80014d8 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->lights->deadline_timer);

	output_fsm_ctrl(nutone_app_hand->nutone_dev->fan->relay,
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	cb03      	ldmia	r3!, {r0, r1}
 800071c:	f000 fedc 	bl	80014d8 <output_fsm_ctrl>
					nutone_app_hand->nutone_dev->fan->deadline_timer);

	output_led_indicator(nutone_app_hand->led_signal_hand->led_signal,
 8000720:	69e3      	ldr	r3, [r4, #28]
 8000722:	cb03      	ldmia	r3!, {r0, r1}
 8000724:	f000 ff36 	bl	8001594 <output_led_indicator>
							nutone_app_hand->led_signal_hand->led_signal_timer);

}
 8000728:	bd10      	pop	{r4, pc}

0800072a <nutone_app_process>:
{
 800072a:	b510      	push	{r4, lr}
 800072c:	0004      	movs	r4, r0
	nutone_app_check_events(nutone_app_hand);
 800072e:	f7ff ff8f 	bl	8000650 <nutone_app_check_events>
	nutone_app_fsm(nutone_app_hand);
 8000732:	0020      	movs	r0, r4
 8000734:	f7ff ff6a 	bl	800060c <nutone_app_fsm>
	nutone_app_set_outputs(nutone_app_hand);
 8000738:	0020      	movs	r0, r4
 800073a:	f7ff ffe5 	bl	8000708 <nutone_app_set_outputs>
}
 800073e:	2000      	movs	r0, #0
 8000740:	bd10      	pop	{r4, pc}

08000742 <button_setup>:
#include "BoardSupport/button.h"

const button_logic_t INITIAL_LOGIC = BUTTON_LOGIC_POSITIVE;

uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 8000742:	b513      	push	{r0, r1, r4, lr}
 8000744:	0003      	movs	r3, r0
 8000746:	4668      	mov	r0, sp
 8000748:	6042      	str	r2, [r0, #4]

	button->hardware_input = hardware_input;
 800074a:	001a      	movs	r2, r3
{
 800074c:	9100      	str	r1, [sp, #0]
	button->hardware_input = hardware_input;
 800074e:	3208      	adds	r2, #8
 8000750:	c812      	ldmia	r0!, {r1, r4}
 8000752:	c212      	stmia	r2!, {r1, r4}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	button->edge_attended = BUTTON_ISR_ATTENDED;
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
	button->debounce_idx = 0;
 8000754:	2000      	movs	r0, #0
	button->debounce_count_limit = 1;
 8000756:	2201      	movs	r2, #1
	button->debounce_idx = 0;
 8000758:	6158      	str	r0, [r3, #20]
	button->debounce_count_limit = 1;
 800075a:	619a      	str	r2, [r3, #24]
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 800075c:	7058      	strb	r0, [r3, #1]
	button->push_status = BUTTON_PUSH_OFF;//For push button only

//	button->logic = BUTTON_LOGIC_POSITIVE;
	button->logic = BUTTON_LOGIC_NEGATIVE;
 800075e:	8058      	strh	r0, [r3, #2]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 8000760:	7118      	strb	r0, [r3, #4]
	button->type = BUTTON_TYPE_TOGGLE;
 8000762:	821a      	strh	r2, [r3, #16]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000764:	749a      	strb	r2, [r3, #18]

	return 0;

}
 8000766:	bd16      	pop	{r1, r2, r4, pc}

08000768 <button_positive_edge_detected>:


uint8_t button_positive_edge_detected(button_t *button)
{

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000768:	7c83      	ldrb	r3, [r0, #18]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d106      	bne.n	800077c <button_positive_edge_detected+0x14>
	{
		if(button->logic == BUTTON_LOGIC_POSITIVE)
 800076e:	7882      	ldrb	r2, [r0, #2]
 8000770:	2a01      	cmp	r2, #1
 8000772:	d100      	bne.n	8000776 <button_positive_edge_detected+0xe>
		{
			button->edge = BUTTON_EDGE_POSITIVE;
 8000774:	3301      	adds	r3, #1
 8000776:	7043      	strb	r3, [r0, #1]
		}
		else
		{
			button->edge = BUTTON_EDGE_NEGATIVE;
		}
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000778:	2300      	movs	r3, #0
 800077a:	7483      	strb	r3, [r0, #18]
	}
	return 0;
}
 800077c:	2000      	movs	r0, #0
 800077e:	4770      	bx	lr

08000780 <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000780:	7c83      	ldrb	r3, [r0, #18]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d106      	bne.n	8000794 <button_negative_edge_detected+0x14>
	{
		if(button->logic == BUTTON_LOGIC_POSITIVE)
 8000786:	7883      	ldrb	r3, [r0, #2]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d000      	beq.n	800078e <button_negative_edge_detected+0xe>
		{
			button->edge = BUTTON_EDGE_NEGATIVE;
		}
		else
		{
			button->edge = BUTTON_EDGE_POSITIVE;
 800078c:	2302      	movs	r3, #2
 800078e:	7043      	strb	r3, [r0, #1]
		}
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000790:	2300      	movs	r3, #0
 8000792:	7483      	strb	r3, [r0, #18]
	}
	return 0;
}
 8000794:	2000      	movs	r0, #0
 8000796:	4770      	bx	lr

08000798 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	0004      	movs	r4, r0
 800079c:	000d      	movs	r5, r1
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 800079e:	8981      	ldrh	r1, [r0, #12]
 80007a0:	6880      	ldr	r0, [r0, #8]
 80007a2:	f002 fa7d 	bl	8002ca0 <HAL_GPIO_ReadPin>
												button->hardware_input.pin);


	if(button->logic == BUTTON_LOGIC_POSITIVE)
 80007a6:	78a2      	ldrb	r2, [r4, #2]
 80007a8:	1e43      	subs	r3, r0, #1
 80007aa:	2a01      	cmp	r2, #1
 80007ac:	d106      	bne.n	80007bc <button_get_status+0x24>
	{
		if(pin_value == GPIO_PIN_SET)
 80007ae:	425a      	negs	r2, r3
 80007b0:	4153      	adcs	r3, r2
			button->status = BUTTON_OFF;
		}
	}
	else
	{
		if(pin_value == GPIO_PIN_SET)
 80007b2:	b2db      	uxtb	r3, r3
//	}

	*status = button->status;

	return 0;
}
 80007b4:	2000      	movs	r0, #0
			button->status = BUTTON_OFF;
 80007b6:	7023      	strb	r3, [r4, #0]
	*status = button->status;
 80007b8:	702b      	strb	r3, [r5, #0]
}
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
		if(pin_value == GPIO_PIN_SET)
 80007bc:	1e5a      	subs	r2, r3, #1
 80007be:	4193      	sbcs	r3, r2
 80007c0:	e7f7      	b.n	80007b2 <button_get_status+0x1a>

080007c2 <button_debounce_fsm>:
{
 80007c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 80007c4:	7c43      	ldrb	r3, [r0, #17]
{
 80007c6:	0004      	movs	r4, r0
	button_edge_t edge = button->edge;
 80007c8:	7846      	ldrb	r6, [r0, #1]
	uint32_t debounce_idx = button->debounce_idx;
 80007ca:	6945      	ldr	r5, [r0, #20]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 80007cc:	6982      	ldr	r2, [r0, #24]
	switch(debounce_fsm_state)
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d010      	beq.n	80007f4 <button_debounce_fsm+0x32>
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d013      	beq.n	80007fe <button_debounce_fsm+0x3c>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <button_debounce_fsm+0x24>
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	2000      	movs	r0, #0
	button->edge = edge;
 80007de:	7066      	strb	r6, [r4, #1]
	button->debounce_idx = debounce_idx;
 80007e0:	6165      	str	r5, [r4, #20]
	button->debounce_fsm_state = debounce_fsm_state;
 80007e2:	7463      	strb	r3, [r4, #17]
}
 80007e4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80007e6:	7c83      	ldrb	r3, [r0, #18]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1f6      	bne.n	80007da <button_debounce_fsm+0x18>
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80007ec:	4253      	negs	r3, r2
 80007ee:	415a      	adcs	r2, r3
 80007f0:	1c53      	adds	r3, r2, #1
 80007f2:	e7f3      	b.n	80007dc <button_debounce_fsm+0x1a>
			if(debounce_idx >= debounce_count_limit)
 80007f4:	4295      	cmp	r5, r2
 80007f6:	d300      	bcc.n	80007fa <button_debounce_fsm+0x38>
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80007f8:	2302      	movs	r3, #2
			debounce_idx++;
 80007fa:	3501      	adds	r5, #1
			break;
 80007fc:	e7ee      	b.n	80007dc <button_debounce_fsm+0x1a>
			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80007fe:	7103      	strb	r3, [r0, #4]
			button->debounce_idx = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	6143      	str	r3, [r0, #20]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000804:	3301      	adds	r3, #1
 8000806:	7483      	strb	r3, [r0, #18]
			button_get_status(button, &button_status);
 8000808:	466b      	mov	r3, sp
 800080a:	1dd9      	adds	r1, r3, #7
 800080c:	f7ff ffc4 	bl	8000798 <button_get_status>
			break;
 8000810:	e7e3      	b.n	80007da <button_debounce_fsm+0x18>

08000812 <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 8000812:	b084      	sub	sp, #16
 8000814:	b510      	push	{r4, lr}
 8000816:	9305      	str	r3, [sp, #20]
	*button_isr_status = button.edge_attended;
 8000818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
{
 800081a:	0a04      	lsrs	r4, r0, #8
	*button_isr_status = button.edge_attended;
 800081c:	7019      	strb	r1, [r3, #0]
	*edge = button.edge;
 800081e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
{
 8000820:	9002      	str	r0, [sp, #8]
 8000822:	9103      	str	r1, [sp, #12]
	return 0;
}
 8000824:	2000      	movs	r0, #0
{
 8000826:	9204      	str	r2, [sp, #16]
	*edge = button.edge;
 8000828:	701c      	strb	r4, [r3, #0]
}
 800082a:	bc10      	pop	{r4}
 800082c:	bc08      	pop	{r3}
 800082e:	b004      	add	sp, #16
 8000830:	4718      	bx	r3

08000832 <led_signal_setup>:
 */

#include "BoardSupport/led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 8000832:	b513      	push	{r0, r1, r4, lr}
 8000834:	0003      	movs	r3, r0
 8000836:	4668      	mov	r0, sp
 8000838:	6042      	str	r2, [r0, #4]
	led_signal->gpio = gpio;
 800083a:	001a      	movs	r2, r3
{
 800083c:	9100      	str	r1, [sp, #0]
	led_signal->gpio = gpio;
 800083e:	c812      	ldmia	r0!, {r1, r4}
 8000840:	c212      	stmia	r2!, {r1, r4}
	led_signal->type = LED_SIGNAL_OFF;
 8000842:	2000      	movs	r0, #0
 8000844:	7258      	strb	r0, [r3, #9]

	return 0;
}
 8000846:	bd16      	pop	{r1, r2, r4, pc}

08000848 <led_signal_type_selector>:


uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
	led_signal->type = type;
 8000848:	7241      	strb	r1, [r0, #9]
	return 0;
}
 800084a:	2000      	movs	r0, #0
 800084c:	4770      	bx	lr

0800084e <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 800084e:	b510      	push	{r4, lr}
	led_signal_fsm_state_t state = led_signal->state;
 8000850:	7a82      	ldrb	r2, [r0, #10]
{
 8000852:	0004      	movs	r4, r0
	led_signal_ctrl_t control = led_signal->control;
 8000854:	7a01      	ldrb	r1, [r0, #8]


	switch(state)
 8000856:	2a01      	cmp	r2, #1
 8000858:	d009      	beq.n	800086e <led_signal_solid_fsm+0x20>
 800085a:	2a02      	cmp	r2, #2
 800085c:	d00d      	beq.n	800087a <led_signal_solid_fsm+0x2c>
 800085e:	2a00      	cmp	r2, #0
 8000860:	d10f      	bne.n	8000882 <led_signal_solid_fsm+0x34>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000862:	424b      	negs	r3, r1
 8000864:	4159      	adcs	r1, r3
 8000866:	b2cb      	uxtb	r3, r1
	}

	led_signal->state = state;

	return 0;
}
 8000868:	2000      	movs	r0, #0
	led_signal->state = state;
 800086a:	72a3      	strb	r3, [r4, #10]
}
 800086c:	bd10      	pop	{r4, pc}
	return 0;
}

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 800086e:	8881      	ldrh	r1, [r0, #4]
 8000870:	6800      	ldr	r0, [r0, #0]
 8000872:	f002 fa1b 	bl	8002cac <HAL_GPIO_WritePin>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000876:	2302      	movs	r3, #2
 8000878:	e7f6      	b.n	8000868 <led_signal_solid_fsm+0x1a>
				state = LED_SIGNAL_STATE_END;
 800087a:	2304      	movs	r3, #4
			if(control == LED_SIGNAL_CTRL_STOP)
 800087c:	2901      	cmp	r1, #1
 800087e:	d1fa      	bne.n	8000876 <led_signal_solid_fsm+0x28>
 8000880:	e7f2      	b.n	8000868 <led_signal_solid_fsm+0x1a>
	return 0;
}

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000882:	8881      	ldrh	r1, [r0, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	6800      	ldr	r0, [r0, #0]
 8000888:	f002 fa10 	bl	8002cac <HAL_GPIO_WritePin>
			state = LED_SIGNAL_STATE_IDDLE;
 800088c:	2300      	movs	r3, #0
			break;
 800088e:	e7eb      	b.n	8000868 <led_signal_solid_fsm+0x1a>

08000890 <led_signal_togle_fsm>:
{
 8000890:	b570      	push	{r4, r5, r6, lr}
	led_signal_fsm_state_t state = led_signal->state;
 8000892:	7a82      	ldrb	r2, [r0, #10]
{
 8000894:	0004      	movs	r4, r0
	led_signal_ctrl_t control = led_signal->control;
 8000896:	7a05      	ldrb	r5, [r0, #8]
	switch(state)
 8000898:	2a01      	cmp	r2, #1
 800089a:	d009      	beq.n	80008b0 <led_signal_togle_fsm+0x20>
 800089c:	2a03      	cmp	r2, #3
 800089e:	d00d      	beq.n	80008bc <led_signal_togle_fsm+0x2c>
 80008a0:	2a00      	cmp	r2, #0
 80008a2:	d113      	bne.n	80008cc <led_signal_togle_fsm+0x3c>
			if(control == LED_SIGNAL_CTRL_START)
 80008a4:	426a      	negs	r2, r5
 80008a6:	4155      	adcs	r5, r2
 80008a8:	b2eb      	uxtb	r3, r5
}
 80008aa:	2000      	movs	r0, #0
	led_signal->state = state;
 80008ac:	72a3      	strb	r3, [r4, #10]
}
 80008ae:	bd70      	pop	{r4, r5, r6, pc}
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 80008b0:	8881      	ldrh	r1, [r0, #4]
 80008b2:	6800      	ldr	r0, [r0, #0]
 80008b4:	f002 f9fa 	bl	8002cac <HAL_GPIO_WritePin>
			state = LED_SIGNAL_STATE_TOGLE;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e7f6      	b.n	80008aa <led_signal_togle_fsm+0x1a>
	return 0;
}

uint8_t led_signal_toggle(led_signal_t led_signal)
{
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 80008bc:	8881      	ldrh	r1, [r0, #4]
 80008be:	6800      	ldr	r0, [r0, #0]
 80008c0:	f002 f9fa 	bl	8002cb8 <HAL_GPIO_TogglePin>
				state = LED_SIGNAL_STATE_END;
 80008c4:	2304      	movs	r3, #4
			if(control == LED_SIGNAL_CTRL_STOP)
 80008c6:	2d01      	cmp	r5, #1
 80008c8:	d1f6      	bne.n	80008b8 <led_signal_togle_fsm+0x28>
 80008ca:	e7ee      	b.n	80008aa <led_signal_togle_fsm+0x1a>
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 80008cc:	8881      	ldrh	r1, [r0, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	6800      	ldr	r0, [r0, #0]
 80008d2:	f002 f9eb 	bl	8002cac <HAL_GPIO_WritePin>
			state = LED_SIGNAL_STATE_IDDLE;
 80008d6:	2300      	movs	r3, #0
			break;
 80008d8:	e7e7      	b.n	80008aa <led_signal_togle_fsm+0x1a>

080008da <led_signal_fsm>:
{
 80008da:	b570      	push	{r4, r5, r6, lr}
	led_signal_type_t type = led_signal->type;
 80008dc:	7a45      	ldrb	r5, [r0, #9]
{
 80008de:	0004      	movs	r4, r0
	switch(type)
 80008e0:	2d01      	cmp	r5, #1
 80008e2:	d00b      	beq.n	80008fc <led_signal_fsm+0x22>
 80008e4:	2d02      	cmp	r5, #2
 80008e6:	d00c      	beq.n	8000902 <led_signal_fsm+0x28>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d105      	bne.n	80008f8 <led_signal_fsm+0x1e>
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 80008ec:	8881      	ldrh	r1, [r0, #4]
 80008ee:	002a      	movs	r2, r5
 80008f0:	6800      	ldr	r0, [r0, #0]
 80008f2:	f002 f9db 	bl	8002cac <HAL_GPIO_WritePin>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 80008f6:	72a5      	strb	r5, [r4, #10]
}
 80008f8:	2000      	movs	r0, #0
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
			led_signal_solid_fsm(led_signal);
 80008fc:	f7ff ffa7 	bl	800084e <led_signal_solid_fsm>
			break;
 8000900:	e7fa      	b.n	80008f8 <led_signal_fsm+0x1e>
			led_signal_togle_fsm(led_signal);
 8000902:	f7ff ffc5 	bl	8000890 <led_signal_togle_fsm>
			break;
 8000906:	e7f7      	b.n	80008f8 <led_signal_fsm+0x1e>

08000908 <led_signal_start>:
{
 8000908:	0003      	movs	r3, r0
	led_signal->control = LED_SIGNAL_CTRL_START;
 800090a:	2000      	movs	r0, #0
 800090c:	7218      	strb	r0, [r3, #8]
}
 800090e:	4770      	bx	lr

08000910 <led_signal_stop>:
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000910:	2301      	movs	r3, #1
 8000912:	7203      	strb	r3, [r0, #8]
}
 8000914:	2000      	movs	r0, #0
 8000916:	4770      	bx	lr

08000918 <pyd1598_direct_link_setup>:

}

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800091a:	466b      	mov	r3, sp
 800091c:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 800091e:	0002      	movs	r2, r0
{
 8000920:	9100      	str	r1, [sp, #0]
	direct_link->hardware_inteface = hardware_inteface;
 8000922:	3224      	adds	r2, #36	@ 0x24
 8000924:	cb12      	ldmia	r3!, {r1, r4}
 8000926:	c212      	stmia	r2!, {r1, r4}
	direct_link->source_value.pir_lpf = 0;
	direct_link->source_value.temperature = 0;

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
	direct_link->datagram_bufffer = 0;
 8000928:	2500      	movs	r5, #0
	direct_link->config.threshold = 0;
 800092a:	2300      	movs	r3, #0
	direct_link->datagram_bufffer = 0;
 800092c:	2400      	movs	r4, #0
	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 800092e:	7383      	strb	r3, [r0, #14]
	direct_link->datagram_bufffer = 0;
 8000930:	6104      	str	r4, [r0, #16]
 8000932:	6145      	str	r5, [r0, #20]
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 8000934:	7703      	strb	r3, [r0, #28]
	direct_link->config.threshold = 0;
 8000936:	6003      	str	r3, [r0, #0]
	direct_link->config.op_mode = 0;
 8000938:	6043      	str	r3, [r0, #4]
	direct_link->source_value.pir_bpf = 0;
 800093a:	6083      	str	r3, [r0, #8]
	direct_link->source_value.temperature = 0;
 800093c:	8183      	strh	r3, [r0, #12]
	direct_link->start_fsm = 0;
	direct_link->time_update_idx = 0;
	direct_link->readout_state = PYD1598_READOUT_IDLE;
 800093e:	8403      	strh	r3, [r0, #32]
	direct_link->time_update_idx = 0;
 8000940:	3003      	adds	r0, #3
 8000942:	77c3      	strb	r3, [r0, #31]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 8000944:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000946 <pyd1598_request_write>:

/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
	sensor->serin.start_fsm = true;
 8000946:	2301      	movs	r3, #1
 8000948:	7543      	strb	r3, [r0, #21]
}
 800094a:	4770      	bx	lr

0800094c <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 800094c:	b084      	sub	sp, #16
 800094e:	9000      	str	r0, [sp, #0]
 8000950:	9202      	str	r2, [sp, #8]
 8000952:	9303      	str	r3, [sp, #12]
 8000954:	9101      	str	r1, [sp, #4]
	*motion_isr_status = sensor.motion_sensed;
 8000956:	ab16      	add	r3, sp, #88	@ 0x58
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
	return 0;
}
 800095c:	2000      	movs	r0, #0
	*motion_isr_status = sensor.motion_sensed;
 800095e:	7013      	strb	r3, [r2, #0]
}
 8000960:	b004      	add	sp, #16
 8000962:	4770      	bx	lr

08000964 <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								volatile pyd1598_motion_isr_status_t *motion_isr_status)
{
 8000964:	b510      	push	{r4, lr}

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 8000966:	0004      	movs	r4, r0
 8000968:	3443      	adds	r4, #67	@ 0x43
 800096a:	7823      	ldrb	r3, [r4, #0]
 800096c:	2200      	movs	r2, #0
 800096e:	2b02      	cmp	r3, #2
 8000970:	d105      	bne.n	800097e <pyd1598_read_wakeup_signal+0x1a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8000972:	7022      	strb	r2, [r4, #0]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 8000974:	700b      	strb	r3, [r1, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 8000976:	3058      	adds	r0, #88	@ 0x58
 8000978:	7003      	strb	r3, [r0, #0]
	{
		sensor->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
	}

	return 0;
}
 800097a:	2000      	movs	r0, #0
 800097c:	bd10      	pop	{r4, pc}
 800097e:	0013      	movs	r3, r2
 8000980:	e7f9      	b.n	8000976 <pyd1598_read_wakeup_signal+0x12>

08000982 <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 8000982:	0002      	movs	r2, r0
	uint32_t old_config = 0;
	uint32_t new_config = 0;

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8000984:	688b      	ldr	r3, [r1, #8]
	serin->config.threshold = new_threshold;
 8000986:	7008      	strb	r0, [r1, #0]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8000988:	03db      	lsls	r3, r3, #15
 800098a:	0bd8      	lsrs	r0, r3, #15

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 800098c:	0452      	lsls	r2, r2, #17

	//Adding data to the datagram copy
	new_config |= old_config;
 800098e:	4310      	orrs	r0, r2

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8000990:	6088      	str	r0, [r1, #8]
}
 8000992:	2000      	movs	r0, #0
 8000994:	4770      	bx	lr
	...

08000998 <pyd1598_serin_add_blind_time>:
	new_blind_time &= 0x0F;
 8000998:	230f      	movs	r3, #15
 800099a:	4018      	ands	r0, r3
	old_config &= mask;
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <pyd1598_serin_add_blind_time+0x18>)
	old_config = *datagram;
 800099e:	688b      	ldr	r3, [r1, #8]
	serin->config.blind_time = new_blind_time;
 80009a0:	7048      	strb	r0, [r1, #1]
	old_config &= mask;
 80009a2:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 80009a4:	0340      	lsls	r0, r0, #13
	new_config |= old_config;
 80009a6:	4303      	orrs	r3, r0
	*datagram = new_config;
 80009a8:	608b      	str	r3, [r1, #8]
}
 80009aa:	2000      	movs	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	01fe1fff 	.word	0x01fe1fff

080009b4 <pyd1598_serin_add_pulse_counter>:
	pulse_counter &= 0x03;
 80009b4:	2303      	movs	r3, #3
 80009b6:	4018      	ands	r0, r3
	old_config &= mask;
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <pyd1598_serin_add_pulse_counter+0x18>)
	old_config = *datagram;
 80009ba:	688b      	ldr	r3, [r1, #8]
	serin->config.pulse_counter = pulse_counter;
 80009bc:	7088      	strb	r0, [r1, #2]
	old_config &= mask;
 80009be:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 80009c0:	02c0      	lsls	r0, r0, #11
	new_config |= old_config;
 80009c2:	4303      	orrs	r3, r0
	*datagram = new_config;
 80009c4:	608b      	str	r3, [r1, #8]
}
 80009c6:	2000      	movs	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	01ffe7ff 	.word	0x01ffe7ff

080009d0 <pyd1598_serin_add_window_time>:
	window_time &= 0x03;
 80009d0:	2303      	movs	r3, #3
 80009d2:	4018      	ands	r0, r3
	old_config &= mask;
 80009d4:	4a04      	ldr	r2, [pc, #16]	@ (80009e8 <pyd1598_serin_add_window_time+0x18>)
	old_config = *datagram;
 80009d6:	688b      	ldr	r3, [r1, #8]
	serin->config.window_time = window_time;
 80009d8:	70c8      	strb	r0, [r1, #3]
	old_config &= mask;
 80009da:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 80009dc:	0240      	lsls	r0, r0, #9
	new_config |= old_config;
 80009de:	4303      	orrs	r3, r0
	*datagram = new_config;
 80009e0:	608b      	str	r3, [r1, #8]
}
 80009e2:	2000      	movs	r0, #0
 80009e4:	4770      	bx	lr
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	01fff9ff 	.word	0x01fff9ff

080009ec <pyd1598_serin_add_operation_mode>:
	old_config = *datagram;
 80009ec:	688b      	ldr	r3, [r1, #8]
	old_config &= mask;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <pyd1598_serin_add_operation_mode+0x14>)
	serin->config.op_mode = new_op_mode;
 80009f0:	7108      	strb	r0, [r1, #4]
	old_config &= mask;
 80009f2:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 80009f4:	01c0      	lsls	r0, r0, #7
	new_config |= old_config;
 80009f6:	4303      	orrs	r3, r0
	*datagram = new_config;
 80009f8:	608b      	str	r3, [r1, #8]
}
 80009fa:	2000      	movs	r0, #0
 80009fc:	4770      	bx	lr
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	01fffe7f 	.word	0x01fffe7f

08000a04 <pyd1598_serin_add_signal_source>:
	signal_source &= 0x03;
 8000a04:	2303      	movs	r3, #3
 8000a06:	4018      	ands	r0, r3
	old_config &= mask;
 8000a08:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <pyd1598_serin_add_signal_source+0x18>)
	old_config = *datagram;
 8000a0a:	688b      	ldr	r3, [r1, #8]
	serin->config.signal_source = signal_source;
 8000a0c:	7148      	strb	r0, [r1, #5]
	old_config &= mask;
 8000a0e:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 8000a10:	0140      	lsls	r0, r0, #5
	new_config |= old_config;
 8000a12:	4303      	orrs	r3, r0
	*datagram = new_config;
 8000a14:	608b      	str	r3, [r1, #8]
}
 8000a16:	2000      	movs	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	01ffff9f 	.word	0x01ffff9f

08000a20 <pyd1598_serin_add_hpf_cutoff>:
	new_hpf_cutoff &= 0x03;
 8000a20:	2303      	movs	r3, #3
 8000a22:	4018      	ands	r0, r3
	old_config &= mask;
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <pyd1598_serin_add_hpf_cutoff+0x18>)
	old_config = *datagram;
 8000a26:	688b      	ldr	r3, [r1, #8]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 8000a28:	7188      	strb	r0, [r1, #6]
	old_config &= mask;
 8000a2a:	4013      	ands	r3, r2
	new_config |= (((uint32_t) data) << shift);
 8000a2c:	0080      	lsls	r0, r0, #2
	new_config |= old_config;
 8000a2e:	4303      	orrs	r3, r0
	*datagram = new_config;
 8000a30:	608b      	str	r3, [r1, #8]
}
 8000a32:	2000      	movs	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	01fffffb 	.word	0x01fffffb

08000a3c <pyd1598_serin_add_count_mode>:
	new_count_mode &= 0x03;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	4003      	ands	r3, r0
	old_config &= mask;
 8000a40:	4a03      	ldr	r2, [pc, #12]	@ (8000a50 <pyd1598_serin_add_count_mode+0x14>)
	old_config = *datagram;
 8000a42:	6888      	ldr	r0, [r1, #8]
	serin->config.count_mode = new_count_mode;
 8000a44:	71cb      	strb	r3, [r1, #7]
	old_config &= mask;
 8000a46:	4010      	ands	r0, r2
	new_config |= old_config;
 8000a48:	4318      	orrs	r0, r3
	*datagram = new_config;
 8000a4a:	6088      	str	r0, [r1, #8]
}
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	4770      	bx	lr
 8000a50:	01fffffd 	.word	0x01fffffd

08000a54 <pyd1598_serin_add_all_conf>:
{
 8000a54:	b513      	push	{r0, r1, r4, lr}
 8000a56:	9000      	str	r0, [sp, #0]
 8000a58:	9101      	str	r1, [sp, #4]
	pyd1598_serin_add_threshold(config.threshold, serin);
 8000a5a:	b2c0      	uxtb	r0, r0
 8000a5c:	0011      	movs	r1, r2
{
 8000a5e:	0014      	movs	r4, r2
	pyd1598_serin_add_threshold(config.threshold, serin);
 8000a60:	f7ff ff8f 	bl	8000982 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 8000a64:	466b      	mov	r3, sp
 8000a66:	0021      	movs	r1, r4
 8000a68:	7858      	ldrb	r0, [r3, #1]
 8000a6a:	f7ff ff95 	bl	8000998 <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 8000a6e:	466b      	mov	r3, sp
 8000a70:	0021      	movs	r1, r4
 8000a72:	7898      	ldrb	r0, [r3, #2]
 8000a74:	f7ff ff9e 	bl	80009b4 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8000a78:	466b      	mov	r3, sp
 8000a7a:	0021      	movs	r1, r4
 8000a7c:	78d8      	ldrb	r0, [r3, #3]
 8000a7e:	f7ff ffa7 	bl	80009d0 <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8000a82:	466b      	mov	r3, sp
 8000a84:	0021      	movs	r1, r4
 8000a86:	7918      	ldrb	r0, [r3, #4]
 8000a88:	f7ff ffb0 	bl	80009ec <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8000a8c:	466b      	mov	r3, sp
 8000a8e:	0021      	movs	r1, r4
 8000a90:	7958      	ldrb	r0, [r3, #5]
 8000a92:	f7ff ffb7 	bl	8000a04 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8000a96:	466b      	mov	r3, sp
 8000a98:	0021      	movs	r1, r4
 8000a9a:	7998      	ldrb	r0, [r3, #6]
 8000a9c:	f7ff ffc0 	bl	8000a20 <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8000aa0:	466b      	mov	r3, sp
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	79d8      	ldrb	r0, [r3, #7]
 8000aa6:	f7ff ffc9 	bl	8000a3c <pyd1598_serin_add_count_mode>
}
 8000aaa:	2000      	movs	r0, #0
 8000aac:	bd16      	pop	{r1, r2, r4, pc}

08000aae <pyd1598_serin_setup>:
{
 8000aae:	b082      	sub	sp, #8
 8000ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ab2:	0004      	movs	r4, r0
 8000ab4:	4668      	mov	r0, sp
 8000ab6:	9307      	str	r3, [sp, #28]
	serin->config = initial_config;
 8000ab8:	0023      	movs	r3, r4
{
 8000aba:	9100      	str	r1, [sp, #0]
 8000abc:	6042      	str	r2, [r0, #4]
	serin->config = initial_config;
 8000abe:	c806      	ldmia	r0!, {r1, r2}
 8000ac0:	c306      	stmia	r3!, {r1, r2}
	pyd1598_serin_add_all_conf(serin->config, serin);
 8000ac2:	0022      	movs	r2, r4
 8000ac4:	6861      	ldr	r1, [r4, #4]
 8000ac6:	6820      	ldr	r0, [r4, #0]
 8000ac8:	f7ff ffc4 	bl	8000a54 <pyd1598_serin_add_all_conf>
	serin->hardware_inteface = hardware_inteface;
 8000acc:	0023      	movs	r3, r4
{
 8000ace:	ad07      	add	r5, sp, #28
	serin->hardware_inteface = hardware_inteface;
 8000ad0:	3318      	adds	r3, #24
 8000ad2:	cd06      	ldmia	r5!, {r1, r2}
 8000ad4:	c306      	stmia	r3!, {r1, r2}
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8000ad6:	2380      	movs	r3, #128	@ 0x80
 8000ad8:	045b      	lsls	r3, r3, #17
 8000ada:	60e3      	str	r3, [r4, #12]
	serin->data_idx = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	6123      	str	r3, [r4, #16]
	serin->state = PYD1598_SERIN_IDLE;
 8000ae0:	82a3      	strh	r3, [r4, #20]
}
 8000ae2:	bc37      	pop	{r0, r1, r2, r4, r5}
 8000ae4:	bc08      	pop	{r3}
 8000ae6:	b002      	add	sp, #8
 8000ae8:	4718      	bx	r3

08000aea <pyd1598_setup>:
{
 8000aea:	b082      	sub	sp, #8
 8000aec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000aee:	0004      	movs	r4, r0
 8000af0:	0018      	movs	r0, r3
 8000af2:	9307      	str	r3, [sp, #28]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8000af4:	9b08      	ldr	r3, [sp, #32]
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	0003      	movs	r3, r0
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff ffd7 	bl	8000aae <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 8000b00:	0020      	movs	r0, r4
 8000b02:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000b06:	3020      	adds	r0, #32
 8000b08:	f7ff ff06 	bl	8000918 <pyd1598_direct_link_setup>
	sensor->current_config.threshold = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	6523      	str	r3, [r4, #80]	@ 0x50
	sensor->current_config.op_mode = 0;
 8000b10:	6563      	str	r3, [r4, #84]	@ 0x54
}
 8000b12:	bc1f      	pop	{r0, r1, r2, r3, r4}
 8000b14:	bc08      	pop	{r3}
 8000b16:	b002      	add	sp, #8
 8000b18:	4718      	bx	r3

08000b1a <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8000b1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b1c:	0004      	movs	r4, r0
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
 8000b1e:	b28d      	uxth	r5, r1
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000b20:	0029      	movs	r1, r5
 8000b22:	2200      	movs	r2, #0
 8000b24:	f002 f8c2 	bl	8002cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000b28:	0029      	movs	r1, r5
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f002 f8bd 	bl	8002cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000b32:	0029      	movs	r1, r5
 8000b34:	2200      	movs	r2, #0
 8000b36:	0020      	movs	r0, r4
 8000b38:	f002 f8b8 	bl	8002cac <HAL_GPIO_WritePin>
}
 8000b3c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b3e <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8000b3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b40:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
}
 8000b42:	b28d      	uxth	r5, r1
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000b44:	0029      	movs	r1, r5
 8000b46:	2200      	movs	r2, #0
 8000b48:	f002 f8b0 	bl	8002cac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8000b4c:	0029      	movs	r1, r5
 8000b4e:	2201      	movs	r2, #1
 8000b50:	0020      	movs	r0, r4
 8000b52:	f002 f8ab 	bl	8002cac <HAL_GPIO_WritePin>
}
 8000b56:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000b58 <pyd1598_serin_set_end_of_msg>:

void pyd1598_serin_set_end_of_msg(pyd1598_hardware_interface_t gpio)
{
 8000b58:	b507      	push	{r0, r1, r2, lr}
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	b289      	uxth	r1, r1
 8000b5e:	f002 f8a5 	bl	8002cac <HAL_GPIO_WritePin>
}
 8000b62:	bd07      	pop	{r0, r1, r2, pc}

08000b64 <pyd1598_direct_link_set_as_output>:

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8000b64:	b507      	push	{r0, r1, r2, lr}
 8000b66:	0c0a      	lsrs	r2, r1, #16
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8000b68:	b252      	sxtb	r2, r2
 8000b6a:	b289      	uxth	r1, r1
 8000b6c:	f000 fd64 	bl	8001638 <HAL_DIRECT_LINK_conf_as_output>
}
 8000b70:	bd07      	pop	{r0, r1, r2, pc}

08000b72 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8000b72:	b507      	push	{r0, r1, r2, lr}
 8000b74:	0c0a      	lsrs	r2, r1, #16
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8000b76:	b252      	sxtb	r2, r2
 8000b78:	b289      	uxth	r1, r1
 8000b7a:	f000 fd1e 	bl	80015ba <HAL_DIRECT_LINK_conf_as_input>
}
 8000b7e:	bd07      	pop	{r0, r1, r2, pc}

08000b80 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8000b80:	b507      	push	{r0, r1, r2, lr}
 8000b82:	0c0a      	lsrs	r2, r1, #16
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8000b84:	b252      	sxtb	r2, r2
 8000b86:	b289      	uxth	r1, r1
 8000b88:	f000 fd32 	bl	80015f0 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8000b8c:	bd07      	pop	{r0, r1, r2, pc}

08000b8e <pyd1598_serin_send_datagram_fsm>:
{
 8000b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8000b90:	250a      	movs	r5, #10
	volatile bool start_fsm = serin->start_fsm;
 8000b92:	260b      	movs	r6, #11
{
 8000b94:	b08b      	sub	sp, #44	@ 0x2c
 8000b96:	9100      	str	r1, [sp, #0]
 8000b98:	9201      	str	r2, [sp, #4]
	volatile pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8000b9a:	7d03      	ldrb	r3, [r0, #20]
 8000b9c:	446d      	add	r5, sp
 8000b9e:	702b      	strb	r3, [r5, #0]
	volatile uint32_t data_idx = serin->data_idx;
 8000ba0:	6903      	ldr	r3, [r0, #16]
	volatile bool start_fsm = serin->start_fsm;
 8000ba2:	446e      	add	r6, sp
	volatile uint32_t data_idx = serin->data_idx;
 8000ba4:	9303      	str	r3, [sp, #12]
	volatile bool start_fsm = serin->start_fsm;
 8000ba6:	7d43      	ldrb	r3, [r0, #21]
	volatile pyd1598_config_t config = serin->config;
 8000ba8:	0001      	movs	r1, r0
	volatile bool start_fsm = serin->start_fsm;
 8000baa:	7033      	strb	r3, [r6, #0]
	volatile pyd1598_config_t config = serin->config;
 8000bac:	ab06      	add	r3, sp, #24
 8000bae:	001a      	movs	r2, r3
{
 8000bb0:	0004      	movs	r4, r0
	volatile pyd1598_config_t config = serin->config;
 8000bb2:	c981      	ldmia	r1!, {r0, r7}
 8000bb4:	c281      	stmia	r2!, {r0, r7}
	volatile uint32_t mask = serin->mask;
 8000bb6:	68e2      	ldr	r2, [r4, #12]
	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8000bb8:	3110      	adds	r1, #16
	volatile uint32_t mask = serin->mask;
 8000bba:	9204      	str	r2, [sp, #16]
	volatile uint32_t conf_datagram = serin->conf_datagram;
 8000bbc:	68a2      	ldr	r2, [r4, #8]
 8000bbe:	9205      	str	r2, [sp, #20]
	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8000bc0:	aa08      	add	r2, sp, #32
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	c984      	ldmia	r1!, {r2, r7}
 8000bc6:	c084      	stmia	r0!, {r2, r7}
	switch(state)
 8000bc8:	7829      	ldrb	r1, [r5, #0]
 8000bca:	b2c8      	uxtb	r0, r1
 8000bcc:	2905      	cmp	r1, #5
 8000bce:	d853      	bhi.n	8000c78 <pyd1598_serin_send_datagram_fsm+0xea>
 8000bd0:	f7ff faa4 	bl	800011c <__gnu_thumb1_case_uqi>
 8000bd4:	38241c03 	.word	0x38241c03
 8000bd8:	4b42      	.short	0x4b42
			if(start_fsm == true)
 8000bda:	7833      	ldrb	r3, [r6, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00b      	beq.n	8000bf8 <pyd1598_serin_send_datagram_fsm+0x6a>
				pyd1598_direct_link_set_as_output(data_link_pin);
 8000be0:	9800      	ldr	r0, [sp, #0]
 8000be2:	9901      	ldr	r1, [sp, #4]
 8000be4:	f7ff ffbe 	bl	8000b64 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000be8:	9800      	ldr	r0, [sp, #0]
 8000bea:	9901      	ldr	r1, [sp, #4]
 8000bec:	f7ff ffb4 	bl	8000b58 <pyd1598_serin_set_end_of_msg>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	702b      	strb	r3, [r5, #0]
				start_fsm = false;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	7033      	strb	r3, [r6, #0]
	serin->state = state;
 8000bf8:	782b      	ldrb	r3, [r5, #0]
 8000bfa:	7523      	strb	r3, [r4, #20]
	serin->data_idx = data_idx;
 8000bfc:	9b03      	ldr	r3, [sp, #12]
 8000bfe:	6123      	str	r3, [r4, #16]
	serin->mask = mask;
 8000c00:	9b04      	ldr	r3, [sp, #16]
 8000c02:	60e3      	str	r3, [r4, #12]
	serin->start_fsm = start_fsm;
 8000c04:	7833      	ldrb	r3, [r6, #0]
 8000c06:	7563      	strb	r3, [r4, #21]
}
 8000c08:	b00b      	add	sp, #44	@ 0x2c
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_idx = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	9303      	str	r3, [sp, #12]
			mask = PYD1598_SERIN_BIT_24_MASK;
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	045b      	lsls	r3, r3, #17
 8000c14:	9304      	str	r3, [sp, #16]
			state = PYD1598_SERIN_SEND_MSG;
 8000c16:	2302      	movs	r3, #2
			state = PYD1598_SERIN_IDLE;
 8000c18:	702b      	strb	r3, [r5, #0]
			break;
 8000c1a:	e7ed      	b.n	8000bf8 <pyd1598_serin_send_datagram_fsm+0x6a>
			if((conf_datagram & mask) == 0)
 8000c1c:	9b05      	ldr	r3, [sp, #20]
 8000c1e:	9904      	ldr	r1, [sp, #16]
				pyd1598_serin_set_zero_pulse(output);
 8000c20:	9808      	ldr	r0, [sp, #32]
			if((conf_datagram & mask) == 0)
 8000c22:	4219      	tst	r1, r3
 8000c24:	d10a      	bne.n	8000c3c <pyd1598_serin_send_datagram_fsm+0xae>
				pyd1598_serin_set_zero_pulse(output);
 8000c26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000c28:	f7ff ff77 	bl	8000b1a <pyd1598_serin_set_zero_pulse>
			mask >>= 1;
 8000c2c:	9b04      	ldr	r3, [sp, #16]
 8000c2e:	085b      	lsrs	r3, r3, #1
 8000c30:	9304      	str	r3, [sp, #16]
			if(mask == 0)
 8000c32:	9b04      	ldr	r3, [sp, #16]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d114      	bne.n	8000c62 <pyd1598_serin_send_datagram_fsm+0xd4>
				state = PYD1598_SERIN_SEND_DOWN;
 8000c38:	3303      	adds	r3, #3
 8000c3a:	e7ed      	b.n	8000c18 <pyd1598_serin_send_datagram_fsm+0x8a>
				pyd1598_serin_set_one_pulse(output);
 8000c3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8000c3e:	f7ff ff7e 	bl	8000b3e <pyd1598_serin_set_one_pulse>
 8000c42:	e7f3      	b.n	8000c2c <pyd1598_serin_send_datagram_fsm+0x9e>
			pyd1598_direct_link_set_as_output(data_link_pin);
 8000c44:	9800      	ldr	r0, [sp, #0]
 8000c46:	9901      	ldr	r1, [sp, #4]
 8000c48:	f7ff ff8c 	bl	8000b64 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000c4c:	9800      	ldr	r0, [sp, #0]
 8000c4e:	9901      	ldr	r1, [sp, #4]
 8000c50:	f7ff ff82 	bl	8000b58 <pyd1598_serin_set_end_of_msg>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 8000c54:	2304      	movs	r3, #4
 8000c56:	e7df      	b.n	8000c18 <pyd1598_serin_send_datagram_fsm+0x8a>
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8000c58:	9b03      	ldr	r3, [sp, #12]
 8000c5a:	2b22      	cmp	r3, #34	@ 0x22
 8000c5c:	d901      	bls.n	8000c62 <pyd1598_serin_send_datagram_fsm+0xd4>
				state = PYD1598_SERIN_END_COM;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	e7da      	b.n	8000c18 <pyd1598_serin_send_datagram_fsm+0x8a>
				data_idx++;
 8000c62:	9b03      	ldr	r3, [sp, #12]
 8000c64:	3301      	adds	r3, #1
 8000c66:	9303      	str	r3, [sp, #12]
 8000c68:	e7c6      	b.n	8000bf8 <pyd1598_serin_send_datagram_fsm+0x6a>
			if(config.op_mode == PYD1598_FORCE_READOUT)
 8000c6a:	791a      	ldrb	r2, [r3, #4]
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d105      	bne.n	8000c7c <pyd1598_serin_send_datagram_fsm+0xee>
				pyd1598_direct_link_set_as_input(data_link_pin);
 8000c70:	9800      	ldr	r0, [sp, #0]
 8000c72:	9901      	ldr	r1, [sp, #4]
 8000c74:	f7ff ff7d 	bl	8000b72 <pyd1598_direct_link_set_as_input>
			state = PYD1598_SERIN_IDLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e7cd      	b.n	8000c18 <pyd1598_serin_send_datagram_fsm+0x8a>
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000c7c:	791a      	ldrb	r2, [r3, #4]
 8000c7e:	2a01      	cmp	r2, #1
 8000c80:	d002      	beq.n	8000c88 <pyd1598_serin_send_datagram_fsm+0xfa>
					(config.op_mode == PYD1598_WAKE_UP) )
 8000c82:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d1f7      	bne.n	8000c78 <pyd1598_serin_send_datagram_fsm+0xea>
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8000c88:	9800      	ldr	r0, [sp, #0]
 8000c8a:	9901      	ldr	r1, [sp, #4]
 8000c8c:	f7ff ff78 	bl	8000b80 <pyd1598_direct_link_set_as_interrupt_input>
			state = PYD1598_SERIN_IDLE;
 8000c90:	e7f2      	b.n	8000c78 <pyd1598_serin_send_datagram_fsm+0xea>
	...

08000c94 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8000c94:	b513      	push	{r0, r1, r4, lr}
 8000c96:	9101      	str	r1, [sp, #4]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8000c98:	b289      	uxth	r1, r1
{
 8000c9a:	0014      	movs	r4, r2
 8000c9c:	9000      	str	r0, [sp, #0]
	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8000c9e:	f001 ffff 	bl	8002ca0 <HAL_GPIO_ReadPin>

	if(pin_value == GPIO_PIN_SET)
 8000ca2:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <pyd1598_direct_link_read_pin+0x58>)
 8000ca4:	2801      	cmp	r0, #1
 8000ca6:	d115      	bne.n	8000cd4 <pyd1598_direct_link_read_pin+0x40>
	{
		*buffer  |= readout_mask;
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	6821      	ldr	r1, [r4, #0]
 8000cac:	6858      	ldr	r0, [r3, #4]
 8000cae:	4311      	orrs	r1, r2
 8000cb0:	6862      	ldr	r2, [r4, #4]
 8000cb2:	4302      	orrs	r2, r0
	}
	else if(pin_value == GPIO_PIN_RESET)
	{
		*buffer  &= ~readout_mask;
 8000cb4:	c406      	stmia	r4!, {r1, r2}
	else
	{
		__NOP();
	}

	readout_mask = (readout_mask >> 1);
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	07c8      	lsls	r0, r1, #31
 8000cbc:	0852      	lsrs	r2, r2, #1
 8000cbe:	4302      	orrs	r2, r0

	if(readout_mask == ((uint64_t) 0))
 8000cc0:	0010      	movs	r0, r2
	readout_mask = (readout_mask >> 1);
 8000cc2:	0849      	lsrs	r1, r1, #1
	if(readout_mask == ((uint64_t) 0))
 8000cc4:	4308      	orrs	r0, r1
 8000cc6:	d101      	bne.n	8000ccc <pyd1598_direct_link_read_pin+0x38>
 8000cc8:	0002      	movs	r2, r0
 8000cca:	2180      	movs	r1, #128	@ 0x80
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	}
	return 0;

}
 8000ccc:	2000      	movs	r0, #0
	readout_mask = (readout_mask >> 1);
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	6059      	str	r1, [r3, #4]
}
 8000cd2:	bd16      	pop	{r1, r2, r4, pc}
	else if(pin_value == GPIO_PIN_RESET)
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d106      	bne.n	8000ce6 <pyd1598_direct_link_read_pin+0x52>
		*buffer  &= ~readout_mask;
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	6821      	ldr	r1, [r4, #0]
 8000cdc:	6858      	ldr	r0, [r3, #4]
 8000cde:	4391      	bics	r1, r2
 8000ce0:	6862      	ldr	r2, [r4, #4]
 8000ce2:	4382      	bics	r2, r0
 8000ce4:	e7e6      	b.n	8000cb4 <pyd1598_direct_link_read_pin+0x20>
		__NOP();
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	e7e5      	b.n	8000cb6 <pyd1598_direct_link_read_pin+0x22>
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	20000000 	.word	0x20000000

08000cf0 <pyd1598_dl_readout_fsm>:
{
 8000cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000cf2:	6902      	ldr	r2, [r0, #16]
 8000cf4:	6943      	ldr	r3, [r0, #20]
{
 8000cf6:	b087      	sub	sp, #28
	volatile uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000cf8:	9204      	str	r2, [sp, #16]
 8000cfa:	9305      	str	r3, [sp, #20]
	volatile pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8000cfc:	7f43      	ldrb	r3, [r0, #29]
 8000cfe:	aa02      	add	r2, sp, #8
 8000d00:	7093      	strb	r3, [r2, #2]
	volatile pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000d02:	7fc3      	ldrb	r3, [r0, #31]
	volatile pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000d04:	ad03      	add	r5, sp, #12
	volatile pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000d06:	70d3      	strb	r3, [r2, #3]
	volatile pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	7fdb      	ldrb	r3, [r3, #31]
{
 8000d0e:	0004      	movs	r4, r0
	volatile pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000d10:	702b      	strb	r3, [r5, #0]
	volatile uint8_t time_update_idx = direct_link->time_update_idx;
 8000d12:	1cc3      	adds	r3, r0, #3
 8000d14:	7fdb      	ldrb	r3, [r3, #31]
	volatile pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000d16:	1cd7      	adds	r7, r2, #3
	volatile uint8_t time_update_idx = direct_link->time_update_idx;
 8000d18:	7153      	strb	r3, [r2, #5]
	volatile bool start_fsm = direct_link->start_fsm;
 8000d1a:	1c83      	adds	r3, r0, #2
 8000d1c:	7fdb      	ldrb	r3, [r3, #31]
{
 8000d1e:	000e      	movs	r6, r1
	volatile bool start_fsm = direct_link->start_fsm;
 8000d20:	7193      	strb	r3, [r2, #6]
	volatile pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8000d22:	1d03      	adds	r3, r0, #4
 8000d24:	7fdb      	ldrb	r3, [r3, #31]
 8000d26:	71d3      	strb	r3, [r2, #7]
	switch(readout_state)
 8000d28:	782b      	ldrb	r3, [r5, #0]
 8000d2a:	b2d8      	uxtb	r0, r3
 8000d2c:	2b04      	cmp	r3, #4
 8000d2e:	d900      	bls.n	8000d32 <pyd1598_dl_readout_fsm+0x42>
 8000d30:	e09e      	b.n	8000e70 <pyd1598_dl_readout_fsm+0x180>
 8000d32:	f7ff f9f3 	bl	800011c <__gnu_thumb1_case_uqi>
 8000d36:	2c03      	.short	0x2c03
 8000d38:	6980      	.short	0x6980
 8000d3a:	94          	.byte	0x94
 8000d3b:	00          	.byte	0x00
			if(start_fsm == true)
 8000d3c:	ab02      	add	r3, sp, #8
 8000d3e:	799b      	ldrb	r3, [r3, #6]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d049      	beq.n	8000dd8 <pyd1598_dl_readout_fsm+0xe8>
				if(op_mode == PYD1598_FORCE_READOUT)
 8000d44:	2900      	cmp	r1, #0
 8000d46:	d109      	bne.n	8000d5c <pyd1598_dl_readout_fsm+0x6c>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000d48:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000d4a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000d4c:	f7ff ff0a 	bl	8000b64 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000d50:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000d52:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000d54:	f7ff fef3 	bl	8000b3e <pyd1598_serin_set_one_pulse>
						readout_state = PYD1598_READOUT_GET_MSG;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e011      	b.n	8000d80 <pyd1598_dl_readout_fsm+0x90>
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000d5c:	1e4b      	subs	r3, r1, #1
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d80f      	bhi.n	8000d82 <pyd1598_dl_readout_fsm+0x92>
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000d62:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000d64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000d66:	f7ff fefd 	bl	8000b64 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000d6a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000d6c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000d6e:	f7ff fef3 	bl	8000b58 <pyd1598_serin_set_end_of_msg>
					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8000d72:	2e01      	cmp	r6, #1
 8000d74:	d0f0      	beq.n	8000d58 <pyd1598_dl_readout_fsm+0x68>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
 8000d76:	ab02      	add	r3, sp, #8
 8000d78:	789b      	ldrb	r3, [r3, #2]
					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d1ec      	bne.n	8000d58 <pyd1598_dl_readout_fsm+0x68>
						readout_state = PYD1598_READOUT_END_COM;
 8000d7e:	3303      	adds	r3, #3
						readout_state = PYD1598_READOUT_GET_MSG;
 8000d80:	702b      	strb	r3, [r5, #0]
				start_fsm = false;
 8000d82:	2300      	movs	r3, #0
 8000d84:	aa02      	add	r2, sp, #8
 8000d86:	7193      	strb	r3, [r2, #6]
				readout_status = READOUT_BUSY;
 8000d88:	3301      	adds	r3, #1
			readout_status = READOUT_READY;
 8000d8a:	703b      	strb	r3, [r7, #0]
			break;
 8000d8c:	e024      	b.n	8000dd8 <pyd1598_dl_readout_fsm+0xe8>
			datagram_bufffer = 0;
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2300      	movs	r3, #0
			for(idx = 0; idx < 40; idx++)
 8000d92:	2600      	movs	r6, #0
			datagram_bufffer = 0;
 8000d94:	9204      	str	r2, [sp, #16]
 8000d96:	9305      	str	r3, [sp, #20]
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000d98:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000d9a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000d9c:	f7ff fecf 	bl	8000b3e <pyd1598_serin_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000da0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000da2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000da4:	f7ff fee5 	bl	8000b72 <pyd1598_direct_link_set_as_input>
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8000da8:	0033      	movs	r3, r6
 8000daa:	aa04      	add	r2, sp, #16
 8000dac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000dae:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000db0:	f7ff ff70 	bl	8000c94 <pyd1598_direct_link_read_pin>
				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000db4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000db6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000db8:	f7ff fece 	bl	8000b58 <pyd1598_serin_set_end_of_msg>
			for(idx = 0; idx < 40; idx++)
 8000dbc:	3601      	adds	r6, #1
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000dbe:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000dc0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000dc2:	f7ff fecf 	bl	8000b64 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8000dc6:	2e28      	cmp	r6, #40	@ 0x28
 8000dc8:	d1e6      	bne.n	8000d98 <pyd1598_dl_readout_fsm+0xa8>
			time_update_idx = 0;
 8000dca:	2200      	movs	r2, #0
 8000dcc:	ab02      	add	r3, sp, #8
 8000dce:	715a      	strb	r2, [r3, #5]
			readout_status = READOUT_BUSY;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	703b      	strb	r3, [r7, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8000dd4:	3302      	adds	r3, #2
				readout_state = PYD1598_READOUT_END_COM;
 8000dd6:	702b      	strb	r3, [r5, #0]
	direct_link->readout_state = readout_state;
 8000dd8:	782b      	ldrb	r3, [r5, #0]
 8000dda:	9a01      	ldr	r2, [sp, #4]
 8000ddc:	77d3      	strb	r3, [r2, #31]
	direct_link->readout_status = readout_status;
 8000dde:	783b      	ldrb	r3, [r7, #0]
 8000de0:	77e3      	strb	r3, [r4, #31]
	direct_link->time_update_idx = time_update_idx;
 8000de2:	ab02      	add	r3, sp, #8
 8000de4:	795a      	ldrb	r2, [r3, #5]
 8000de6:	1ce3      	adds	r3, r4, #3
 8000de8:	77da      	strb	r2, [r3, #31]
	direct_link->start_fsm = start_fsm;
 8000dea:	ab02      	add	r3, sp, #8
 8000dec:	799a      	ldrb	r2, [r3, #6]
 8000dee:	1ca3      	adds	r3, r4, #2
 8000df0:	77da      	strb	r2, [r3, #31]
	direct_link->datagram_bufffer = datagram_bufffer;
 8000df2:	9a04      	ldr	r2, [sp, #16]
 8000df4:	9b05      	ldr	r3, [sp, #20]
 8000df6:	6122      	str	r2, [r4, #16]
 8000df8:	6163      	str	r3, [r4, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 8000dfa:	ab02      	add	r3, sp, #8
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	3404      	adds	r4, #4
 8000e02:	77e3      	strb	r3, [r4, #31]
}
 8000e04:	b007      	add	sp, #28
 8000e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000e08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e0a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e0c:	f7ff feaa 	bl	8000b64 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000e10:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e12:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e14:	f7ff fea0 	bl	8000b58 <pyd1598_serin_set_end_of_msg>
			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000e18:	1e73      	subs	r3, r6, #1
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d81a      	bhi.n	8000e54 <pyd1598_dl_readout_fsm+0x164>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000e1e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e20:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e22:	f7ff fead 	bl	8000b80 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 8000e26:	2300      	movs	r3, #0
				time_update_idx = 0;
 8000e28:	aa02      	add	r2, sp, #8
				readout_status = READOUT_READY;
 8000e2a:	703b      	strb	r3, [r7, #0]
				readout_state = PYD1598_READOUT_IDLE;
 8000e2c:	702b      	strb	r3, [r5, #0]
				time_update_idx = 0;
 8000e2e:	7153      	strb	r3, [r2, #5]
				if(op_mode == PYD1598_WAKE_UP)
 8000e30:	2e02      	cmp	r6, #2
 8000e32:	d100      	bne.n	8000e36 <pyd1598_dl_readout_fsm+0x146>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000e34:	71d6      	strb	r6, [r2, #7]
			time_update_idx++;
 8000e36:	ab02      	add	r3, sp, #8
 8000e38:	795b      	ldrb	r3, [r3, #5]
 8000e3a:	aa02      	add	r2, sp, #8
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	7153      	strb	r3, [r2, #5]
			if(time_update_idx >= 11)
 8000e42:	7953      	ldrb	r3, [r2, #5]
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d9c7      	bls.n	8000dd8 <pyd1598_dl_readout_fsm+0xe8>
				time_update_idx = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	7153      	strb	r3, [r2, #5]
				readout_status = READOUT_BUSY;
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	703b      	strb	r3, [r7, #0]
				readout_state = PYD1598_READOUT_END_COM;
 8000e50:	3303      	adds	r3, #3
 8000e52:	e7c0      	b.n	8000dd6 <pyd1598_dl_readout_fsm+0xe6>
				readout_status = READOUT_BUSY;
 8000e54:	2301      	movs	r3, #1
 8000e56:	703b      	strb	r3, [r7, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 8000e58:	18db      	adds	r3, r3, r3
 8000e5a:	702b      	strb	r3, [r5, #0]
 8000e5c:	e7eb      	b.n	8000e36 <pyd1598_dl_readout_fsm+0x146>
			if(op_mode == PYD1598_FORCE_READOUT)
 8000e5e:	2900      	cmp	r1, #0
 8000e60:	d109      	bne.n	8000e76 <pyd1598_dl_readout_fsm+0x186>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000e62:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e64:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e66:	f7ff fe84 	bl	8000b72 <pyd1598_direct_link_set_as_input>
			readout_status = READOUT_READY;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	703b      	strb	r3, [r7, #0]
			readout_state = PYD1598_READOUT_IDLE;
 8000e6e:	702b      	strb	r3, [r5, #0]
			readout_state = PYD1598_READOUT_IDLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	702b      	strb	r3, [r5, #0]
 8000e74:	e789      	b.n	8000d8a <pyd1598_dl_readout_fsm+0x9a>
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000e76:	1e4b      	subs	r3, r1, #1
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d8f6      	bhi.n	8000e6a <pyd1598_dl_readout_fsm+0x17a>
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000e7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000e7e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000e80:	f7ff fe7e 	bl	8000b80 <pyd1598_direct_link_set_as_interrupt_input>
				if(op_mode == PYD1598_WAKE_UP)
 8000e84:	2e02      	cmp	r6, #2
 8000e86:	d1f0      	bne.n	8000e6a <pyd1598_dl_readout_fsm+0x17a>
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000e88:	ab02      	add	r3, sp, #8
 8000e8a:	71de      	strb	r6, [r3, #7]
 8000e8c:	e7ed      	b.n	8000e6a <pyd1598_dl_readout_fsm+0x17a>

08000e8e <relay_ask_off_pulse_fsm>:

uint8_t relay_ask_off_pulse_fsm(relay_t *relay)
{
	uint8_t status = 0;

	if(relay->fsm_run_off == RELAY_RUN_FALSE)
 8000e8e:	1cc3      	adds	r3, r0, #3
 8000e90:	7fdb      	ldrb	r3, [r3, #31]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d101      	bne.n	8000e9a <relay_ask_off_pulse_fsm+0xc>
	{
		relay->fsm_run_on = RELAY_RUN_FALSE;
		relay->fsm_run_off = RELAY_RUN_TRUE;
		relay->fsm_init = RELAY_INIT_TRUE;
		relay->fsm_state = RELAY_STATE_IDLE;
 8000e96:	33ff      	adds	r3, #255	@ 0xff
 8000e98:	6203      	str	r3, [r0, #32]
		status = 0;
	}

	return status;
}
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	4770      	bx	lr

08000e9e <relay_ask_on_pulse_fsm>:
{
	uint8_t status = 0;


	//TODO: (high) Test this change (conditional) intensively
	if(relay->fsm_run_on == RELAY_RUN_FALSE)
 8000e9e:	1c83      	adds	r3, r0, #2
 8000ea0:	7fdb      	ldrb	r3, [r3, #31]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d102      	bne.n	8000eac <relay_ask_on_pulse_fsm+0xe>
	{
		relay->fsm_run_on = RELAY_RUN_TRUE;
		relay->fsm_run_off = RELAY_RUN_FALSE;
		relay->fsm_init = RELAY_INIT_TRUE;
		relay->fsm_state = RELAY_STATE_IDLE;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	6203      	str	r3, [r0, #32]
	}
	return status;
}
 8000eac:	2000      	movs	r0, #0
 8000eae:	4770      	bx	lr

08000eb0 <relay_check_init_fsm>:
uint8_t relay_check_init_fsm(relay_t relay, relay_fsm_init_t *init)
{
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	9000      	str	r0, [sp, #0]
 8000eb4:	9202      	str	r2, [sp, #8]
 8000eb6:	9303      	str	r3, [sp, #12]
 8000eb8:	9101      	str	r1, [sp, #4]
	*init = relay.fsm_init;
 8000eba:	ab01      	add	r3, sp, #4
 8000ebc:	7fdb      	ldrb	r3, [r3, #31]
 8000ebe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
	return 0;
}
 8000ec0:	2000      	movs	r0, #0
	*init = relay.fsm_init;
 8000ec2:	7013      	strb	r3, [r2, #0]
}
 8000ec4:	b004      	add	sp, #16
 8000ec6:	4770      	bx	lr

08000ec8 <relay_acknowledge_init_fsm>:

uint8_t relay_acknowledge_init_fsm(relay_t *relay)
{
	relay->fsm_init = RELAY_INIT_FALSE;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	3004      	adds	r0, #4
 8000ecc:	77c3      	strb	r3, [r0, #31]
	return 0;
}
 8000ece:	2000      	movs	r0, #0
 8000ed0:	4770      	bx	lr

08000ed2 <relay_on>:

	return 0;
}

uint8_t relay_on(relay_t *relay)
{
 8000ed2:	b510      	push	{r4, lr}
 8000ed4:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8000ed6:	8901      	ldrh	r1, [r0, #8]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6840      	ldr	r0, [r0, #4]
 8000edc:	f001 fee6 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8000ee0:	68e0      	ldr	r0, [r4, #12]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	8a21      	ldrh	r1, [r4, #16]
 8000ee6:	f001 fee1 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_SET);

	relay->relay_status = RELAY_ON;
 8000eea:	2302      	movs	r3, #2
 8000eec:	33ff      	adds	r3, #255	@ 0xff
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_ON;
	return 0;
}
 8000eee:	2000      	movs	r0, #0
	relay->relay_status = RELAY_ON;
 8000ef0:	8023      	strh	r3, [r4, #0]
}
 8000ef2:	bd10      	pop	{r4, pc}

08000ef4 <relay_off>:

uint8_t relay_off(relay_t *relay)
{
 8000ef4:	b510      	push	{r4, lr}
 8000ef6:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8000ef8:	8901      	ldrh	r1, [r0, #8]
 8000efa:	2201      	movs	r2, #1
 8000efc:	6840      	ldr	r0, [r0, #4]
 8000efe:	f001 fed5 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8000f02:	68e0      	ldr	r0, [r4, #12]
 8000f04:	2200      	movs	r2, #0
 8000f06:	8a21      	ldrh	r1, [r4, #16]
 8000f08:	f001 fed0 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->relay_status = RELAY_OFF;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	8020      	strh	r0, [r4, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_OFF;
	return 0;
}
 8000f10:	bd10      	pop	{r4, pc}

08000f12 <relay_deenergize>:


uint8_t relay_deenergize(relay_t *relay)
{
 8000f12:	b510      	push	{r4, lr}
 8000f14:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8000f16:	8901      	ldrh	r1, [r0, #8]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6840      	ldr	r0, [r0, #4]
 8000f1c:	f001 fec6 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8000f20:	68e0      	ldr	r0, [r4, #12]
 8000f22:	2200      	movs	r2, #0
 8000f24:	8a21      	ldrh	r1, [r4, #16]
 8000f26:	f001 fec1 	bl	8002cac <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->power_status = RELAY_POWER_STATUS_DEENERGIZED;
 8000f2a:	2302      	movs	r3, #2
	return 0;
}
 8000f2c:	2000      	movs	r0, #0
	relay->power_status = RELAY_POWER_STATUS_DEENERGIZED;
 8000f2e:	7063      	strb	r3, [r4, #1]
}
 8000f30:	bd10      	pop	{r4, pc}

08000f32 <relay_setup>:
{
 8000f32:	b082      	sub	sp, #8
 8000f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f36:	0004      	movs	r4, r0
 8000f38:	4668      	mov	r0, sp
 8000f3a:	9307      	str	r3, [sp, #28]
 8000f3c:	9100      	str	r1, [sp, #0]
 8000f3e:	6042      	str	r2, [r0, #4]
	relay->hardware_output_1 = hardware_output_1;
 8000f40:	1d23      	adds	r3, r4, #4
 8000f42:	c822      	ldmia	r0!, {r1, r5}
 8000f44:	c322      	stmia	r3!, {r1, r5}
{
 8000f46:	aa07      	add	r2, sp, #28
	relay->hardware_output_2 = hardware_output_2;
 8000f48:	ca03      	ldmia	r2!, {r0, r1}
 8000f4a:	c303      	stmia	r3!, {r0, r1}
	relay_deenergize(relay);
 8000f4c:	0020      	movs	r0, r4
 8000f4e:	f7ff ffe0 	bl	8000f12 <relay_deenergize>
	relay->fsm_run_on = RELAY_RUN_FALSE;
 8000f52:	2301      	movs	r3, #1
	relay->relay_status = RELAY_OFF;
 8000f54:	2000      	movs	r0, #0
	relay->fsm_run_on = RELAY_RUN_FALSE;
 8000f56:	1ca2      	adds	r2, r4, #2
	relay->relay_status = RELAY_OFF;
 8000f58:	7020      	strb	r0, [r4, #0]
	relay->fsm_run_on = RELAY_RUN_FALSE;
 8000f5a:	77d3      	strb	r3, [r2, #31]
	relay->fsm_run_off = RELAY_RUN_FALSE;
 8000f5c:	1ce2      	adds	r2, r4, #3
 8000f5e:	77d3      	strb	r3, [r2, #31]
	relay->fsm_pulse_counts = 1;
 8000f60:	61a3      	str	r3, [r4, #24]
}
 8000f62:	bc3e      	pop	{r1, r2, r3, r4, r5}
 8000f64:	bc08      	pop	{r3}
 8000f66:	b002      	add	sp, #8
 8000f68:	4718      	bx	r3

08000f6a <relay_pulse_fsm>:
{
 8000f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile relay_fsm_state_t state = relay->fsm_state;
 8000f6c:	1c43      	adds	r3, r0, #1
{
 8000f6e:	b087      	sub	sp, #28
	volatile relay_fsm_state_t state = relay->fsm_state;
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	7fdb      	ldrb	r3, [r3, #31]
 8000f74:	aa02      	add	r2, sp, #8
 8000f76:	7153      	strb	r3, [r2, #5]
	volatile uint32_t fsm_pulse_counts = relay->fsm_pulse_counts;
 8000f78:	6983      	ldr	r3, [r0, #24]
	volatile relay_fsm_status_t fsm_status = relay->fsm_status;
 8000f7a:	1d96      	adds	r6, r2, #6
	volatile uint32_t fsm_pulse_counts = relay->fsm_pulse_counts;
 8000f7c:	9304      	str	r3, [sp, #16]
	volatile uint32_t fsm_pulse_idx = relay->fsm_pulse_idx;
 8000f7e:	69c3      	ldr	r3, [r0, #28]
	volatile relay_fsm_init_t fsm_init = relay->fsm_init;
 8000f80:	1dd7      	adds	r7, r2, #7
	volatile uint32_t fsm_pulse_idx = relay->fsm_pulse_idx;
 8000f82:	9305      	str	r3, [sp, #20]
	volatile relay_fsm_status_t fsm_status = relay->fsm_status;
 8000f84:	7d03      	ldrb	r3, [r0, #20]
	volatile relay_fsm_state_t state = relay->fsm_state;
 8000f86:	1d55      	adds	r5, r2, #5
	volatile relay_fsm_status_t fsm_status = relay->fsm_status;
 8000f88:	7033      	strb	r3, [r6, #0]
	volatile relay_fsm_init_t fsm_init = relay->fsm_init;
 8000f8a:	1d03      	adds	r3, r0, #4
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	7fdb      	ldrb	r3, [r3, #31]
{
 8000f90:	0004      	movs	r4, r0
	volatile relay_fsm_init_t fsm_init = relay->fsm_init;
 8000f92:	703b      	strb	r3, [r7, #0]
	switch(state)
 8000f94:	782a      	ldrb	r2, [r5, #0]
 8000f96:	b2d3      	uxtb	r3, r2
 8000f98:	2a02      	cmp	r2, #2
 8000f9a:	d014      	beq.n	8000fc6 <relay_pulse_fsm+0x5c>
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d02c      	beq.n	8000ffa <relay_pulse_fsm+0x90>
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11d      	bne.n	8000fe0 <relay_pulse_fsm+0x76>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	7033      	strb	r3, [r6, #0]
			if(new_status == RELAY_ON)
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d107      	bne.n	8000fbc <relay_pulse_fsm+0x52>
				relay_on(relay);
 8000fac:	f7ff ff91 	bl	8000ed2 <relay_on>
			if(fsm_pulse_counts == 0)
 8000fb0:	9b04      	ldr	r3, [sp, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d105      	bne.n	8000fc2 <relay_pulse_fsm+0x58>
				state = RELAY_STATE_DEENERGIZING;
 8000fb6:	3303      	adds	r3, #3
			state = RELAY_STATE_IDLE;
 8000fb8:	702b      	strb	r3, [r5, #0]
			break;
 8000fba:	e011      	b.n	8000fe0 <relay_pulse_fsm+0x76>
				relay_off(relay);
 8000fbc:	f7ff ff9a 	bl	8000ef4 <relay_off>
 8000fc0:	e7f6      	b.n	8000fb0 <relay_pulse_fsm+0x46>
				state = RELAY_STATE_WAIT;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e7f8      	b.n	8000fb8 <relay_pulse_fsm+0x4e>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	7033      	strb	r3, [r6, #0]
			fsm_pulse_idx++;
 8000fca:	9b05      	ldr	r3, [sp, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	9305      	str	r3, [sp, #20]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8000fd0:	9a05      	ldr	r2, [sp, #20]
 8000fd2:	9b04      	ldr	r3, [sp, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d903      	bls.n	8000fe0 <relay_pulse_fsm+0x76>
				state = RELAY_STATE_DEENERGIZING;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	702b      	strb	r3, [r5, #0]
				fsm_pulse_idx = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9305      	str	r3, [sp, #20]
}
 8000fe0:	2000      	movs	r0, #0
	relay->fsm_state = state;
 8000fe2:	782b      	ldrb	r3, [r5, #0]
 8000fe4:	1c62      	adds	r2, r4, #1
 8000fe6:	77d3      	strb	r3, [r2, #31]
	relay->fsm_init = fsm_init;
 8000fe8:	783b      	ldrb	r3, [r7, #0]
 8000fea:	1d22      	adds	r2, r4, #4
 8000fec:	77d3      	strb	r3, [r2, #31]
	relay->fsm_pulse_idx = fsm_pulse_idx;
 8000fee:	9b05      	ldr	r3, [sp, #20]
 8000ff0:	61e3      	str	r3, [r4, #28]
	relay->fsm_status = fsm_status;
 8000ff2:	7833      	ldrb	r3, [r6, #0]
 8000ff4:	7523      	strb	r3, [r4, #20]
}
 8000ff6:	b007      	add	sp, #28
 8000ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			relay_deenergize(relay);
 8000ffa:	f7ff ff8a 	bl	8000f12 <relay_deenergize>
			fsm_status = RELAY_STATE_STATUS_READY;
 8000ffe:	2300      	movs	r3, #0
 8001000:	7033      	strb	r3, [r6, #0]
 8001002:	e7d9      	b.n	8000fb8 <relay_pulse_fsm+0x4e>

08001004 <relay_on_pulse_fsm>:
{
 8001004:	b570      	push	{r4, r5, r6, lr}
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001006:	1c85      	adds	r5, r0, #2
 8001008:	7feb      	ldrb	r3, [r5, #31]
{
 800100a:	0004      	movs	r4, r0
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10b      	bne.n	8001028 <relay_on_pulse_fsm+0x24>
		(relay->fsm_run_off != RELAY_RUN_TRUE) )
 8001010:	1cc3      	adds	r3, r0, #3
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001012:	7fdb      	ldrb	r3, [r3, #31]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d007      	beq.n	8001028 <relay_on_pulse_fsm+0x24>
		relay_pulse_fsm(relay, RELAY_ON);
 8001018:	2101      	movs	r1, #1
 800101a:	f7ff ffa6 	bl	8000f6a <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 800101e:	7d23      	ldrb	r3, [r4, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <relay_on_pulse_fsm+0x24>
			relay->fsm_run_on = RELAY_RUN_FALSE;
 8001024:	3301      	adds	r3, #1
 8001026:	77eb      	strb	r3, [r5, #31]
}
 8001028:	2000      	movs	r0, #0
 800102a:	bd70      	pop	{r4, r5, r6, pc}

0800102c <relay_off_pulse_fsm>:
{
 800102c:	b570      	push	{r4, r5, r6, lr}
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 800102e:	1cc5      	adds	r5, r0, #3
 8001030:	7fe9      	ldrb	r1, [r5, #31]
{
 8001032:	0004      	movs	r4, r0
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 8001034:	2900      	cmp	r1, #0
 8001036:	d10a      	bne.n	800104e <relay_off_pulse_fsm+0x22>
			(relay->fsm_run_on != RELAY_RUN_TRUE) )
 8001038:	1c83      	adds	r3, r0, #2
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 800103a:	7fdb      	ldrb	r3, [r3, #31]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d006      	beq.n	800104e <relay_off_pulse_fsm+0x22>
		relay_pulse_fsm(relay, RELAY_OFF);
 8001040:	f7ff ff93 	bl	8000f6a <relay_pulse_fsm>
		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 8001044:	7d23      	ldrb	r3, [r4, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <relay_off_pulse_fsm+0x22>
			relay->fsm_run_off = RELAY_RUN_FALSE;
 800104a:	3301      	adds	r3, #1
 800104c:	77eb      	strb	r3, [r5, #31]
}
 800104e:	2000      	movs	r0, #0
 8001050:	bd70      	pop	{r4, r5, r6, pc}

08001052 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8001052:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;

	switch_mask <<= pin;
 8001054:	2601      	movs	r6, #1
{
 8001056:	001f      	movs	r7, r3

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001058:	6803      	ldr	r3, [r0, #0]
 800105a:	00cd      	lsls	r5, r1, #3
 800105c:	195b      	adds	r3, r3, r5
{
 800105e:	0004      	movs	r4, r0
 8001060:	9201      	str	r2, [sp, #4]
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001062:	6818      	ldr	r0, [r3, #0]
	switch_mask <<= pin;
 8001064:	408e      	lsls	r6, r1
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001066:	8899      	ldrh	r1, [r3, #4]
 8001068:	f001 fe1a 	bl	8002ca0 <HAL_GPIO_ReadPin>
							(switch_selector->switch_selector_gpio + pin)->pin);

	if(pin_value == GPIO_PIN_SET)
 800106c:	6823      	ldr	r3, [r4, #0]
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 800106e:	195b      	adds	r3, r3, r5
	if(pin_value == GPIO_PIN_SET)
 8001070:	2801      	cmp	r0, #1
 8001072:	d10c      	bne.n	800108e <switch_selector_read_bit+0x3c>
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 8001074:	7198      	strb	r0, [r3, #6]

		switch_selector->value |= switch_mask;
 8001076:	68a3      	ldr	r3, [r4, #8]
 8001078:	4333      	orrs	r3, r6
 800107a:	60a3      	str	r3, [r4, #8]
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;

		switch_selector->value &= ~switch_mask;
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	9a01      	ldr	r2, [sp, #4]
 8001080:	195b      	adds	r3, r3, r5
 8001082:	799b      	ldrb	r3, [r3, #6]

	*value = switch_selector->value;

	return 0;
}
 8001084:	2000      	movs	r0, #0
	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 8001086:	7013      	strb	r3, [r2, #0]
	*value = switch_selector->value;
 8001088:	68a3      	ldr	r3, [r4, #8]
 800108a:	603b      	str	r3, [r7, #0]
}
 800108c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 800108e:	2200      	movs	r2, #0
 8001090:	719a      	strb	r2, [r3, #6]
		switch_selector->value &= ~switch_mask;
 8001092:	68a3      	ldr	r3, [r4, #8]
 8001094:	43b3      	bics	r3, r6
 8001096:	e7f0      	b.n	800107a <switch_selector_read_bit+0x28>

08001098 <switch_selector_setup>:
{
 8001098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800109a:	0005      	movs	r5, r0
 800109c:	000f      	movs	r7, r1
 800109e:	0016      	movs	r6, r2
		return 2;
 80010a0:	2002      	movs	r0, #2
	if(switch_size > 32)
 80010a2:	2a20      	cmp	r2, #32
 80010a4:	d80a      	bhi.n	80010bc <switch_selector_setup+0x24>
	switch_selector->value = 0;
 80010a6:	2400      	movs	r4, #0
	switch_selector->switch_size = switch_size;
 80010a8:	712a      	strb	r2, [r5, #4]
	switch_selector->value = 0;
 80010aa:	60ac      	str	r4, [r5, #8]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 80010ac:	00d0      	lsls	r0, r2, #3
 80010ae:	f002 fcc7 	bl	8003a40 <malloc>
 80010b2:	6028      	str	r0, [r5, #0]
	for(idx = 0; idx < switch_size; idx++)
 80010b4:	b2e1      	uxtb	r1, r4
 80010b6:	42a6      	cmp	r6, r4
 80010b8:	d101      	bne.n	80010be <switch_selector_setup+0x26>
 80010ba:	2000      	movs	r0, #0
}
 80010bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if((switch_selector_gpio + idx) != NULL)
 80010be:	00e0      	lsls	r0, r4, #3
 80010c0:	3401      	adds	r4, #1
 80010c2:	2f00      	cmp	r7, #0
 80010c4:	d00a      	beq.n	80010dc <switch_selector_setup+0x44>
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 80010c6:	682a      	ldr	r2, [r5, #0]
 80010c8:	1812      	adds	r2, r2, r0
 80010ca:	cf09      	ldmia	r7!, {r0, r3}
 80010cc:	c209      	stmia	r2!, {r0, r3}
		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 80010ce:	466a      	mov	r2, sp
 80010d0:	0028      	movs	r0, r5
 80010d2:	ab01      	add	r3, sp, #4
 80010d4:	3203      	adds	r2, #3
 80010d6:	f7ff ffbc 	bl	8001052 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 80010da:	e7eb      	b.n	80010b4 <switch_selector_setup+0x1c>
			status = 1;
 80010dc:	2001      	movs	r0, #1
 80010de:	e7ed      	b.n	80010bc <switch_selector_setup+0x24>

080010e0 <nutone_setup>:

void nutone_setup(nutone_t *exhaust_fan, nutone_relay_handler_t *lights,
											nutone_relay_handler_t *fan,
											deadline_timer_t *ctrl_timer,
											deadline_timer_t *vyv_timeoff)
{
 80010e0:	b570      	push	{r4, r5, r6, lr}
 80010e2:	001d      	movs	r5, r3
	exhaust_fan->lights = lights;
	exhaust_fan->fan = fan;

	exhaust_fan->ctrl_timer = ctrl_timer;
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 80010e4:	2610      	movs	r6, #16
	exhaust_fan->ctrl_timer = ctrl_timer;
 80010e6:	6083      	str	r3, [r0, #8]
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 80010e8:	23fa      	movs	r3, #250	@ 0xfa
{
 80010ea:	0004      	movs	r4, r0
 80010ec:	b08a      	sub	sp, #40	@ 0x28
	exhaust_fan->lights = lights;
 80010ee:	6001      	str	r1, [r0, #0]
	exhaust_fan->fan = fan;
 80010f0:	6042      	str	r2, [r0, #4]
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 80010f2:	a906      	add	r1, sp, #24
 80010f4:	0032      	movs	r2, r6
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 80010f6:	005b      	lsls	r3, r3, #1
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 80010f8:	4668      	mov	r0, sp
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 80010fa:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 80010fc:	f002 fda2 	bl	8003c44 <memcpy>
 8001100:	9a04      	ldr	r2, [sp, #16]
 8001102:	9b05      	ldr	r3, [sp, #20]
 8001104:	0028      	movs	r0, r5
 8001106:	f000 f977 	bl	80013f8 <deadline_timer_setup>
//	exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;

	exhaust_fan->vyv_timeoff = vyv_timeoff;
 800110a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
	deadline.msec = NUTONE_VYV_TIMEOUT;
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 800110c:	0032      	movs	r2, r6
	exhaust_fan->vyv_timeoff = vyv_timeoff;
 800110e:	60e3      	str	r3, [r4, #12]
	deadline.msec = NUTONE_VYV_TIMEOUT;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <nutone_setup+0x54>)
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 8001112:	a906      	add	r1, sp, #24
 8001114:	4668      	mov	r0, sp
	deadline.msec = NUTONE_VYV_TIMEOUT;
 8001116:	9306      	str	r3, [sp, #24]
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 8001118:	f002 fd94 	bl	8003c44 <memcpy>
 800111c:	9a04      	ldr	r2, [sp, #16]
 800111e:	9b05      	ldr	r3, [sp, #20]
 8001120:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001122:	f000 f969 	bl	80013f8 <deadline_timer_setup>

	exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
	exhaust_fan->light_on_pulses_idx = 0;

	exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
	exhaust_fan->command = NUTONE_CMD_NONE;
 8001126:	2300      	movs	r3, #0
	exhaust_fan->light_on_pulses_idx = 0;
 8001128:	4a03      	ldr	r2, [pc, #12]	@ (8001138 <nutone_setup+0x58>)
	exhaust_fan->command = NUTONE_CMD_NONE;
 800112a:	8263      	strh	r3, [r4, #18]
	exhaust_fan->light_on_pulses_idx = 0;
 800112c:	6162      	str	r2, [r4, #20]

	exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 800112e:	7423      	strb	r3, [r4, #16]


}
 8001130:	b00a      	add	sp, #40	@ 0x28
 8001132:	bd70      	pop	{r4, r5, r6, pc}
 8001134:	00002710 	.word	0x00002710
 8001138:	02000300 	.word	0x02000300

0800113c <nutone_set_command>:

}

uint8_t nutone_set_command(nutone_t *exhaust_fan, nutone_command_e command)
{
	exhaust_fan->command = command;
 800113c:	7481      	strb	r1, [r0, #18]
	return 0;
}
 800113e:	2000      	movs	r0, #0
 8001140:	4770      	bx	lr

08001142 <nutone_get_cmd_status>:

uint8_t nutone_get_cmd_status(nutone_t exhaust_fan,
												nutone_cmd_state_t *cmd_status)
{
 8001142:	b084      	sub	sp, #16
 8001144:	9303      	str	r3, [sp, #12]
	*cmd_status = exhaust_fan.cmd_state;
 8001146:	466b      	mov	r3, sp
{
 8001148:	9000      	str	r0, [sp, #0]
 800114a:	9202      	str	r2, [sp, #8]
 800114c:	9101      	str	r1, [sp, #4]
	*cmd_status = exhaust_fan.cmd_state;
 800114e:	7cdb      	ldrb	r3, [r3, #19]
 8001150:	9a06      	ldr	r2, [sp, #24]
	return 0;
}
 8001152:	2000      	movs	r0, #0
	*cmd_status = exhaust_fan.cmd_state;
 8001154:	7013      	strb	r3, [r2, #0]
}
 8001156:	b004      	add	sp, #16
 8001158:	4770      	bx	lr

0800115a <nutone_select_state>:


//#define NO_MEMORY

uint8_t nutone_select_state(nutone_t *exhaust_fan)
{
 800115a:	b500      	push	{lr}
	if(exhaust_fan->cmd_state != NUTONE_CMD_STE_READY)
 800115c:	7cc1      	ldrb	r1, [r0, #19]
{
 800115e:	0003      	movs	r3, r0
	if(exhaust_fan->cmd_state != NUTONE_CMD_STE_READY)
 8001160:	2900      	cmp	r1, #0
 8001162:	d117      	bne.n	8001194 <nutone_select_state+0x3a>
	{
		return 1;
	}
	switch(exhaust_fan->command)
 8001164:	7c80      	ldrb	r0, [r0, #18]
 8001166:	3801      	subs	r0, #1
 8001168:	2805      	cmp	r0, #5
 800116a:	d809      	bhi.n	8001180 <nutone_select_state+0x26>
 800116c:	2280      	movs	r2, #128	@ 0x80
 800116e:	0052      	lsls	r2, r2, #1
 8001170:	f7fe ffd4 	bl	800011c <__gnu_thumb1_case_uqi>
 8001174:	0c0a0803 	.word	0x0c0a0803
 8001178:	0c0e      	.short	0x0c0e
	{
		case NUTONE_CMD_FAN_TURN_ON:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_ON;
 800117a:	2001      	movs	r0, #1
			break;
		case NUTONE_CMD_VYV_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_L_SET_ON;
 800117c:	7418      	strb	r0, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
			exhaust_fan->command = NUTONE_CMD_NONE;
 800117e:	825a      	strh	r2, [r3, #18]
			break;
	}


	return 0;
}
 8001180:	0008      	movs	r0, r1
 8001182:	bd00      	pop	{pc}
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_OFF;
 8001184:	2003      	movs	r0, #3
 8001186:	e7f9      	b.n	800117c <nutone_select_state+0x22>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_L_SET_ON;
 8001188:	200d      	movs	r0, #13
 800118a:	e7f7      	b.n	800117c <nutone_select_state+0x22>
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 800118c:	200f      	movs	r0, #15
 800118e:	e7f5      	b.n	800117c <nutone_select_state+0x22>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_L_SET_ON;
 8001190:	200e      	movs	r0, #14
 8001192:	e7f3      	b.n	800117c <nutone_select_state+0x22>
		return 1;
 8001194:	2101      	movs	r1, #1
 8001196:	e7f3      	b.n	8001180 <nutone_select_state+0x26>

08001198 <nutone_fsm>:
{
 8001198:	b537      	push	{r0, r1, r2, r4, r5, lr}
	deadline_timer_expired_t is_expired = TIMER_EXPIRED_FALSE;
 800119a:	2300      	movs	r3, #0
 800119c:	466a      	mov	r2, sp
 800119e:	7153      	strb	r3, [r2, #5]
	deadline_timer_expired_t is_expired_vyv = TIMER_EXPIRED_FALSE;
 80011a0:	7193      	strb	r3, [r2, #6]
{
 80011a2:	0004      	movs	r4, r0
	switch(exhaust_fan->fsm_state)
 80011a4:	7c00      	ldrb	r0, [r0, #16]
 80011a6:	2811      	cmp	r0, #17
 80011a8:	d81d      	bhi.n	80011e6 <nutone_fsm+0x4e>
 80011aa:	f7fe ffcb 	bl	8000144 <__gnu_thumb1_case_uhi>
 80011ae:	0012      	.short	0x0012
 80011b0:	001e0017 	.word	0x001e0017
 80011b4:	002d0027 	.word	0x002d0027
 80011b8:	003f0031 	.word	0x003f0031
 80011bc:	004d0048 	.word	0x004d0048
 80011c0:	007b006e 	.word	0x007b006e
 80011c4:	00890084 	.word	0x00890084
 80011c8:	00ce00b2 	.word	0x00ce00b2
 80011cc:	00f000ea 	.word	0x00f000ea
 80011d0:	00fe      	.short	0x00fe
			nutone_select_state(exhaust_fan);
 80011d2:	0020      	movs	r0, r4
 80011d4:	f7ff ffc1 	bl	800115a <nutone_select_state>
}
 80011d8:	2000      	movs	r0, #0
 80011da:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			relay_ask_on_pulse_fsm(exhaust_fan->fan->relay);
 80011dc:	6863      	ldr	r3, [r4, #4]
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f7ff fe5d 	bl	8000e9e <relay_ask_on_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_ON;
 80011e4:	2302      	movs	r3, #2
			exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80011e6:	7423      	strb	r3, [r4, #16]
			break;
 80011e8:	e7f6      	b.n	80011d8 <nutone_fsm+0x40>
			if(exhaust_fan->fan->relay->fsm_run_on == RELAY_RUN_FALSE)
 80011ea:	6863      	ldr	r3, [r4, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3302      	adds	r3, #2
 80011f0:	7fdb      	ldrb	r3, [r3, #31]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d1f0      	bne.n	80011d8 <nutone_fsm+0x40>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80011f6:	2300      	movs	r3, #0
 80011f8:	74e3      	strb	r3, [r4, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80011fa:	e7f4      	b.n	80011e6 <nutone_fsm+0x4e>
			relay_ask_off_pulse_fsm(exhaust_fan->fan->relay);
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	6818      	ldr	r0, [r3, #0]
 8001200:	f7ff fe45 	bl	8000e8e <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_OFF;
 8001204:	2304      	movs	r3, #4
 8001206:	e7ee      	b.n	80011e6 <nutone_fsm+0x4e>
			if(exhaust_fan->fan->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001208:	6863      	ldr	r3, [r4, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3303      	adds	r3, #3
 800120e:	e7ef      	b.n	80011f0 <nutone_fsm+0x58>
			exhaust_fan->light_on_pulses_idx = 0;
 8001210:	23c0      	movs	r3, #192	@ 0xc0
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	82a3      	strh	r3, [r4, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8001216:	68a0      	ldr	r0, [r4, #8]
 8001218:	f000 f90f 	bl	800143a <deadline_timer_set_initial_time>
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 800121c:	22fa      	movs	r2, #250	@ 0xfa
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 800121e:	4b75      	ldr	r3, [pc, #468]	@ (80013f4 <nutone_fsm+0x25c>)
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 8001220:	0052      	lsls	r2, r2, #1
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8001222:	82e3      	strh	r3, [r4, #22]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 8001224:	68a3      	ldr	r3, [r4, #8]
 8001226:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8001228:	2306      	movs	r3, #6
 800122a:	e7dc      	b.n	80011e6 <nutone_fsm+0x4e>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	6818      	ldr	r0, [r3, #0]
 8001230:	f7ff fe35 	bl	8000e9e <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8001234:	68a0      	ldr	r0, [r4, #8]
 8001236:	f000 f900 	bl	800143a <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 800123a:	2308      	movs	r3, #8
 800123c:	e7d3      	b.n	80011e6 <nutone_fsm+0x4e>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	f7ff fe24 	bl	8000e8e <relay_ask_off_pulse_fsm>
 8001246:	e7f5      	b.n	8001234 <nutone_fsm+0x9c>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired);
 8001248:	68a0      	ldr	r0, [r4, #8]
 800124a:	1d51      	adds	r1, r2, #5
 800124c:	f000 f92a 	bl	80014a4 <deadline_timer_check>
			if(is_expired != TIMER_EXPIRED_TRUE)
 8001250:	466b      	mov	r3, sp
 8001252:	795b      	ldrb	r3, [r3, #5]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d1bf      	bne.n	80011d8 <nutone_fsm+0x40>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 8001258:	6823      	ldr	r3, [r4, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	781a      	ldrb	r2, [r3, #0]
 800125e:	2a01      	cmp	r2, #1
 8001260:	d10e      	bne.n	8001280 <nutone_fsm+0xe8>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 8001262:	3302      	adds	r3, #2
 8001264:	7fdb      	ldrb	r3, [r3, #31]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d1b6      	bne.n	80011d8 <nutone_fsm+0x40>
					if((exhaust_fan->light_on_pulses_idx) >=
 800126a:	7d22      	ldrb	r2, [r4, #20]
 800126c:	7d61      	ldrb	r1, [r4, #21]
 800126e:	3306      	adds	r3, #6
 8001270:	4291      	cmp	r1, r2
 8001272:	d801      	bhi.n	8001278 <nutone_fsm+0xe0>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001274:	2300      	movs	r3, #0
 8001276:	74e3      	strb	r3, [r4, #19]
					exhaust_fan->light_on_pulses_idx++;
 8001278:	3201      	adds	r2, #1
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 800127a:	7423      	strb	r3, [r4, #16]
					exhaust_fan->light_on_pulses_idx++;
 800127c:	7522      	strb	r2, [r4, #20]
 800127e:	e7ab      	b.n	80011d8 <nutone_fsm+0x40>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001280:	3303      	adds	r3, #3
 8001282:	7fdb      	ldrb	r3, [r3, #31]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1a7      	bne.n	80011d8 <nutone_fsm+0x40>
 8001288:	e7ce      	b.n	8001228 <nutone_fsm+0x90>
			exhaust_fan->light_on_pulses_idx = 0;
 800128a:	2580      	movs	r5, #128	@ 0x80
 800128c:	00ad      	lsls	r5, r5, #2
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 800128e:	68a0      	ldr	r0, [r4, #8]
			exhaust_fan->light_on_pulses_idx = 0;
 8001290:	82a5      	strh	r5, [r4, #20]
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8001292:	f000 f8d2 	bl	800143a <deadline_timer_set_initial_time>
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8001296:	22fa      	movs	r2, #250	@ 0xfa
 8001298:	68a3      	ldr	r3, [r4, #8]
 800129a:	0052      	lsls	r2, r2, #1
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 800129c:	82e5      	strh	r5, [r4, #22]
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 800129e:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 80012a0:	230b      	movs	r3, #11
 80012a2:	e7a0      	b.n	80011e6 <nutone_fsm+0x4e>
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	f7ff fdf9 	bl	8000e9e <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80012ac:	68a0      	ldr	r0, [r4, #8]
 80012ae:	f000 f8c4 	bl	800143a <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 80012b2:	230c      	movs	r3, #12
 80012b4:	e797      	b.n	80011e6 <nutone_fsm+0x4e>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	6818      	ldr	r0, [r3, #0]
 80012ba:	f7ff fde8 	bl	8000e8e <relay_ask_off_pulse_fsm>
 80012be:	e7f5      	b.n	80012ac <nutone_fsm+0x114>
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired_vyv);
 80012c0:	68a0      	ldr	r0, [r4, #8]
 80012c2:	1d91      	adds	r1, r2, #6
 80012c4:	f000 f8ee 	bl	80014a4 <deadline_timer_check>
			if(is_expired_vyv != TIMER_EXPIRED_TRUE)
 80012c8:	466b      	mov	r3, sp
 80012ca:	799b      	ldrb	r3, [r3, #6]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d000      	beq.n	80012d2 <nutone_fsm+0x13a>
 80012d0:	e782      	b.n	80011d8 <nutone_fsm+0x40>
			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	2a01      	cmp	r2, #1
 80012da:	d113      	bne.n	8001304 <nutone_fsm+0x16c>
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 80012dc:	3302      	adds	r3, #2
 80012de:	7fdb      	ldrb	r3, [r3, #31]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d000      	beq.n	80012e6 <nutone_fsm+0x14e>
 80012e4:	e778      	b.n	80011d8 <nutone_fsm+0x40>
					if((exhaust_fan->light_on_pulses_idx) >=
 80012e6:	7d22      	ldrb	r2, [r4, #20]
 80012e8:	7d63      	ldrb	r3, [r4, #21]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d307      	bcc.n	80012fe <nutone_fsm+0x166>
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80012ee:	2300      	movs	r3, #0
 80012f0:	74e3      	strb	r3, [r4, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80012f2:	7423      	strb	r3, [r4, #16]
						exhaust_fan->light_on_pulses_idx = 0;
 80012f4:	7523      	strb	r3, [r4, #20]
					exhaust_fan->light_on_pulses_idx++;
 80012f6:	7d23      	ldrb	r3, [r4, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	7523      	strb	r3, [r4, #20]
 80012fc:	e76c      	b.n	80011d8 <nutone_fsm+0x40>
						exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 80012fe:	230b      	movs	r3, #11
 8001300:	7423      	strb	r3, [r4, #16]
 8001302:	e7f8      	b.n	80012f6 <nutone_fsm+0x15e>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8001304:	3303      	adds	r3, #3
 8001306:	7fdb      	ldrb	r3, [r3, #31]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d000      	beq.n	800130e <nutone_fsm+0x176>
 800130c:	e764      	b.n	80011d8 <nutone_fsm+0x40>
					exhaust_fan->fsm_state = NUTONE_STE_VYV_ON;
 800130e:	3309      	adds	r3, #9
 8001310:	e769      	b.n	80011e6 <nutone_fsm+0x4e>
			exhaust_fan->ctrl_timer->deadline.msec =
 8001312:	22fa      	movs	r2, #250	@ 0xfa
 8001314:	68a3      	ldr	r3, [r4, #8]
 8001316:	0052      	lsls	r2, r2, #1
 8001318:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 800131a:	2200      	movs	r2, #0
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 800131c:	7da3      	ldrb	r3, [r4, #22]
			exhaust_fan->light_on_pulses_idx = 0;
 800131e:	7522      	strb	r2, [r4, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001320:	2b01      	cmp	r3, #1
 8001322:	d105      	bne.n	8001330 <nutone_fsm+0x198>
				exhaust_fan->light_on_pulses = 1;
 8001324:	7563      	strb	r3, [r4, #21]
 8001326:	2307      	movs	r3, #7
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001328:	7423      	strb	r3, [r4, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 800132a:	4b32      	ldr	r3, [pc, #200]	@ (80013f4 <nutone_fsm+0x25c>)
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 800132c:	82e3      	strh	r3, [r4, #22]
			break;
 800132e:	e753      	b.n	80011d8 <nutone_fsm+0x40>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f7      	beq.n	8001324 <nutone_fsm+0x18c>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001334:	7de3      	ldrb	r3, [r4, #23]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d103      	bne.n	8001342 <nutone_fsm+0x1aa>
					exhaust_fan->light_on_pulses = 1;
 800133a:	3301      	adds	r3, #1
 800133c:	7563      	strb	r3, [r4, #21]
				exhaust_fan->light_on_pulses = 1;
 800133e:	2306      	movs	r3, #6
 8001340:	e7f2      	b.n	8001328 <nutone_fsm+0x190>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001342:	2b01      	cmp	r3, #1
 8001344:	d1fb      	bne.n	800133e <nutone_fsm+0x1a6>
					exhaust_fan->light_on_pulses = 0;
 8001346:	7562      	strb	r2, [r4, #21]
 8001348:	e7f9      	b.n	800133e <nutone_fsm+0x1a6>
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 800134a:	22fa      	movs	r2, #250	@ 0xfa
 800134c:	68a3      	ldr	r3, [r4, #8]
 800134e:	0052      	lsls	r2, r2, #1
 8001350:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 8001352:	2300      	movs	r3, #0
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001354:	7da2      	ldrb	r2, [r4, #22]
			exhaust_fan->light_on_pulses_idx = 0;
 8001356:	7523      	strb	r3, [r4, #20]
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8001358:	2a01      	cmp	r2, #1
 800135a:	d107      	bne.n	800136c <nutone_fsm+0x1d4>
				exhaust_fan->light_on_pulses = 0;
 800135c:	7563      	strb	r3, [r4, #21]
 800135e:	2307      	movs	r3, #7
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8001360:	7423      	strb	r3, [r4, #16]
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001362:	2380      	movs	r3, #128	@ 0x80
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	e7e1      	b.n	800132c <nutone_fsm+0x194>
 8001368:	2301      	movs	r3, #1
 800136a:	e7f7      	b.n	800135c <nutone_fsm+0x1c4>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 800136c:	2a00      	cmp	r2, #0
 800136e:	d0fb      	beq.n	8001368 <nutone_fsm+0x1d0>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8001370:	7de3      	ldrb	r3, [r4, #23]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <nutone_fsm+0x1e2>
					exhaust_fan->light_on_pulses = 1;
 8001376:	7563      	strb	r3, [r4, #21]
 8001378:	e001      	b.n	800137e <nutone_fsm+0x1e6>
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 800137a:	2b01      	cmp	r3, #1
 800137c:	d0fb      	beq.n	8001376 <nutone_fsm+0x1de>
				exhaust_fan->light_on_pulses = 0;
 800137e:	2306      	movs	r3, #6
 8001380:	e7ee      	b.n	8001360 <nutone_fsm+0x1c8>
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8001382:	6823      	ldr	r3, [r4, #0]
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f7ff fd82 	bl	8000e8e <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNING_OFF;
 800138a:	2310      	movs	r3, #16
 800138c:	e72b      	b.n	80011e6 <nutone_fsm+0x4e>
			if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3303      	adds	r3, #3
 8001394:	7fdb      	ldrb	r3, [r3, #31]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d000      	beq.n	800139c <nutone_fsm+0x204>
 800139a:	e71d      	b.n	80011d8 <nutone_fsm+0x40>
				deadline_timer_set_initial_time(exhaust_fan->vyv_timeoff);
 800139c:	68e0      	ldr	r0, [r4, #12]
 800139e:	f000 f84c 	bl	800143a <deadline_timer_set_initial_time>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80013a2:	2300      	movs	r3, #0
 80013a4:	74e3      	strb	r3, [r4, #19]
				exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNED_OFF;
 80013a6:	3311      	adds	r3, #17
 80013a8:	e71d      	b.n	80011e6 <nutone_fsm+0x4e>
			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 80013aa:	7da3      	ldrb	r3, [r4, #22]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d106      	bne.n	80013be <nutone_fsm+0x226>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80013b0:	2381      	movs	r3, #129	@ 0x81
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	82e3      	strh	r3, [r4, #22]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	7423      	strb	r3, [r4, #16]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80013ba:	74e3      	strb	r3, [r4, #19]
 80013bc:	e70c      	b.n	80011d8 <nutone_fsm+0x40>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d103      	bne.n	80013ca <nutone_fsm+0x232>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80013c2:	3301      	adds	r3, #1
 80013c4:	82e3      	strh	r3, [r4, #22]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e7f7      	b.n	80013ba <nutone_fsm+0x222>
				nutone_select_state(exhaust_fan);
 80013ca:	0020      	movs	r0, r4
 80013cc:	f7ff fec5 	bl	800115a <nutone_select_state>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 80013d0:	7de3      	ldrb	r3, [r4, #23]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d000      	beq.n	80013d8 <nutone_fsm+0x240>
 80013d6:	e70e      	b.n	80011f6 <nutone_fsm+0x5e>
					deadline_timer_check(exhaust_fan->vyv_timeoff,
 80013d8:	466b      	mov	r3, sp
 80013da:	1ddd      	adds	r5, r3, #7
 80013dc:	0029      	movs	r1, r5
 80013de:	68e0      	ldr	r0, [r4, #12]
 80013e0:	f000 f860 	bl	80014a4 <deadline_timer_check>
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 80013e4:	782b      	ldrb	r3, [r5, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d000      	beq.n	80013ec <nutone_fsm+0x254>
 80013ea:	e6f5      	b.n	80011d8 <nutone_fsm+0x40>
 80013ec:	7ce3      	ldrb	r3, [r4, #19]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0de      	beq.n	80013b0 <nutone_fsm+0x218>
 80013f2:	e6f1      	b.n	80011d8 <nutone_fsm+0x40>
 80013f4:	00000201 	.word	0x00000201

080013f8 <deadline_timer_setup>:
#include "Middleware/deadline_timer.h"

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 80013f8:	b082      	sub	sp, #8
 80013fa:	9301      	str	r3, [sp, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 80013fc:	0003      	movs	r3, r0
{
 80013fe:	0001      	movs	r1, r0
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 8001400:	2000      	movs	r0, #0
 8001402:	3360      	adds	r3, #96	@ 0x60
 8001404:	7018      	strb	r0, [r3, #0]
{
 8001406:	9200      	str	r2, [sp, #0]
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
	timer->counts = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	2200      	movs	r2, #0
 800140c:	600a      	str	r2, [r1, #0]
 800140e:	604b      	str	r3, [r1, #4]
 8001410:	630a      	str	r2, [r1, #48]	@ 0x30
 8001412:	634b      	str	r3, [r1, #52]	@ 0x34
 8001414:	648a      	str	r2, [r1, #72]	@ 0x48
 8001416:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8001418:	9b03      	ldr	r3, [sp, #12]
	return 0;
}

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
	timer->msec = new_time.msec;
 800141a:	9a02      	ldr	r2, [sp, #8]
	timer->msec = 0;
 800141c:	6088      	str	r0, [r1, #8]
	timer->sec = 0;
 800141e:	60c8      	str	r0, [r1, #12]
	timer->msec = 0;
 8001420:	6388      	str	r0, [r1, #56]	@ 0x38
	timer->sec = 0;
 8001422:	63c8      	str	r0, [r1, #60]	@ 0x3c
	timer->msec = 0;
 8001424:	6508      	str	r0, [r1, #80]	@ 0x50
	timer->sec = 0;
 8001426:	6548      	str	r0, [r1, #84]	@ 0x54
	timer->msec = new_time.msec;
 8001428:	620a      	str	r2, [r1, #32]
	timer->sec = new_time.sec;
 800142a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800142c:	b002      	add	sp, #8
 800142e:	4770      	bx	lr

08001430 <deadline_timer_force_expiration>:
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 8001430:	2301      	movs	r3, #1
 8001432:	3060      	adds	r0, #96	@ 0x60
 8001434:	7003      	strb	r3, [r0, #0]
}
 8001436:	2000      	movs	r0, #0
 8001438:	4770      	bx	lr

0800143a <deadline_timer_set_initial_time>:
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 800143a:	6802      	ldr	r2, [r0, #0]
 800143c:	6843      	ldr	r3, [r0, #4]
 800143e:	6302      	str	r2, [r0, #48]	@ 0x30
 8001440:	6343      	str	r3, [r0, #52]	@ 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 8001442:	6883      	ldr	r3, [r0, #8]
 8001444:	6383      	str	r3, [r0, #56]	@ 0x38
}
 8001446:	2000      	movs	r0, #0
 8001448:	4770      	bx	lr
	...

0800144c <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 800144c:	b530      	push	{r4, r5, lr}

	timer->msec++;
	timer->counts++;
 800144e:	6802      	ldr	r2, [r0, #0]
 8001450:	6843      	ldr	r3, [r0, #4]
 8001452:	2401      	movs	r4, #1
 8001454:	2500      	movs	r5, #0
 8001456:	1912      	adds	r2, r2, r4
 8001458:	416b      	adcs	r3, r5
	timer->msec++;
 800145a:	6881      	ldr	r1, [r0, #8]
	timer->counts++;
 800145c:	6002      	str	r2, [r0, #0]
 800145e:	6043      	str	r3, [r0, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 8001460:	4b03      	ldr	r3, [pc, #12]	@ (8001470 <deadline_timer_increment+0x24>)
	timer->msec++;
 8001462:	3101      	adds	r1, #1
	if(timer->msec >= DEADLINE_MAX_MSEC )
 8001464:	4299      	cmp	r1, r3
 8001466:	d900      	bls.n	800146a <deadline_timer_increment+0x1e>
	{
//		timer->sec++;
		timer->msec = 0;
 8001468:	2100      	movs	r1, #0
//	{
//		timer->counts = 0;
//	}

	return 0;
}
 800146a:	6081      	str	r1, [r0, #8]
 800146c:	2000      	movs	r0, #0
 800146e:	bd30      	pop	{r4, r5, pc}
 8001470:	3b9ac9ff 	.word	0x3b9ac9ff

08001474 <deadline_timer_count>:
{
 8001474:	b510      	push	{r4, lr}
	deadline_timer_increment(&deadline_timer->time_current);
 8001476:	f7ff ffe9 	bl	800144c <deadline_timer_increment>
}
 800147a:	2000      	movs	r0, #0
 800147c:	bd10      	pop	{r4, pc}

0800147e <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 800147e:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status = 0;
	int64_t remaining = 0;
	int32_t deadline_difference = 0;

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 8001480:	2500      	movs	r5, #0
 8001482:	0004      	movs	r4, r0
 8001484:	0016      	movs	r6, r2
 8001486:	002f      	movs	r7, r5
 8001488:	1ba4      	subs	r4, r4, r6
 800148a:	41bd      	sbcs	r5, r7

	if(remaining < 0)
 800148c:	42bd      	cmp	r5, r7
 800148e:	da01      	bge.n	8001494 <deadline_timer_compare_check+0x16>
	{
		remaining = (max_time - time_initial) + time_current;
 8001490:	1a80      	subs	r0, r0, r2
 8001492:	18c4      	adds	r4, r0, r3

	}
	deadline_difference = (uint32_t) remaining;

	if(deadline_difference >= deadline)
 8001494:	2000      	movs	r0, #0
 8001496:	0003      	movs	r3, r0
 8001498:	428c      	cmp	r4, r1
 800149a:	4143      	adcs	r3, r0
 800149c:	9a05      	ldr	r2, [sp, #20]
 800149e:	7013      	strb	r3, [r2, #0]
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
	}

	return status;
}
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080014a4 <deadline_timer_check>:
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 80014a6:	270f      	movs	r7, #15
	*deadline_expired = TIMER_EXPIRED_FALSE;
 80014a8:	2600      	movs	r6, #0
{
 80014aa:	b085      	sub	sp, #20
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 80014ac:	446f      	add	r7, sp
	*deadline_expired = TIMER_EXPIRED_FALSE;
 80014ae:	700e      	strb	r6, [r1, #0]
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 80014b0:	703e      	strb	r6, [r7, #0]
	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80014b2:	9700      	str	r7, [sp, #0]
{
 80014b4:	000d      	movs	r5, r1
	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80014b6:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 80014b8:	6a01      	ldr	r1, [r0, #32]
{
 80014ba:	0004      	movs	r4, r0
	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80014bc:	4b05      	ldr	r3, [pc, #20]	@ (80014d4 <deadline_timer_check+0x30>)
 80014be:	6880      	ldr	r0, [r0, #8]
 80014c0:	f7ff ffdd 	bl	800147e <deadline_timer_compare_check>
}
 80014c4:	0030      	movs	r0, r6
	*deadline_expired = deadline_expired_msec;
 80014c6:	783b      	ldrb	r3, [r7, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 80014c8:	3460      	adds	r4, #96	@ 0x60
	*deadline_expired = deadline_expired_msec;
 80014ca:	702b      	strb	r3, [r5, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 80014cc:	7023      	strb	r3, [r4, #0]
}
 80014ce:	b005      	add	sp, #20
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	3b9aca00 	.word	0x3b9aca00

080014d8 <output_fsm_ctrl>:




void output_fsm_ctrl(relay_t *actuator, deadline_timer_t *deadline_timer)
{
 80014d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	relay_fsm_init_t init = RELAY_INIT_FALSE;
 80014da:	261e      	movs	r6, #30
 80014dc:	2301      	movs	r3, #1
{
 80014de:	b089      	sub	sp, #36	@ 0x24
	relay_fsm_init_t init = RELAY_INIT_FALSE;
 80014e0:	446e      	add	r6, sp
 80014e2:	7033      	strb	r3, [r6, #0]
	volatile deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == RELAY_RUN_TRUE)
 80014e4:	1c83      	adds	r3, r0, #2
 80014e6:	7fdb      	ldrb	r3, [r3, #31]
{
 80014e8:	0004      	movs	r4, r0
 80014ea:	000d      	movs	r5, r1
	if(actuator->fsm_run_on == RELAY_RUN_TRUE)
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d125      	bne.n	800153c <output_fsm_ctrl+0x64>
	{
		relay_check_init_fsm(*actuator, &init);
 80014f0:	0003      	movs	r3, r0
 80014f2:	466a      	mov	r2, sp
 80014f4:	9605      	str	r6, [sp, #20]
 80014f6:	3310      	adds	r3, #16
 80014f8:	cb83      	ldmia	r3!, {r0, r1, r7}
 80014fa:	c283      	stmia	r2!, {r0, r1, r7}
 80014fc:	cb03      	ldmia	r3!, {r0, r1}
 80014fe:	c203      	stmia	r2!, {r0, r1}
 8001500:	68e3      	ldr	r3, [r4, #12]
 8001502:	6820      	ldr	r0, [r4, #0]
 8001504:	6861      	ldr	r1, [r4, #4]
 8001506:	68a2      	ldr	r2, [r4, #8]
 8001508:	f7ff fcd2 	bl	8000eb0 <relay_check_init_fsm>

		if(init == RELAY_INIT_TRUE)
 800150c:	7833      	ldrb	r3, [r6, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d105      	bne.n	800151e <output_fsm_ctrl+0x46>
		{
			deadline_timer_set_initial_time(deadline_timer);
 8001512:	0028      	movs	r0, r5
 8001514:	f7ff ff91 	bl	800143a <deadline_timer_set_initial_time>
			relay_acknowledge_init_fsm(actuator);
 8001518:	0020      	movs	r0, r4
 800151a:	f7ff fcd5 	bl	8000ec8 <relay_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 800151e:	271f      	movs	r7, #31
 8001520:	446f      	add	r7, sp
 8001522:	0039      	movs	r1, r7
 8001524:	0028      	movs	r0, r5
 8001526:	f7ff ffbd 	bl	80014a4 <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 800152a:	783b      	ldrb	r3, [r7, #0]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d105      	bne.n	800153c <output_fsm_ctrl+0x64>
		{
			relay_on_pulse_fsm(actuator);
 8001530:	0020      	movs	r0, r4
 8001532:	f7ff fd67 	bl	8001004 <relay_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 8001536:	0028      	movs	r0, r5
 8001538:	f7ff ff7f 	bl	800143a <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == RELAY_RUN_TRUE)
 800153c:	1ce3      	adds	r3, r4, #3
 800153e:	7fdb      	ldrb	r3, [r3, #31]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d125      	bne.n	8001590 <output_fsm_ctrl+0xb8>
	{
	  relay_check_init_fsm(*actuator, &init);
 8001544:	0023      	movs	r3, r4
 8001546:	466a      	mov	r2, sp
 8001548:	9605      	str	r6, [sp, #20]
 800154a:	3310      	adds	r3, #16
 800154c:	cb83      	ldmia	r3!, {r0, r1, r7}
 800154e:	c283      	stmia	r2!, {r0, r1, r7}
 8001550:	cb03      	ldmia	r3!, {r0, r1}
 8001552:	c203      	stmia	r2!, {r0, r1}
 8001554:	68e3      	ldr	r3, [r4, #12]
 8001556:	6820      	ldr	r0, [r4, #0]
 8001558:	6861      	ldr	r1, [r4, #4]
 800155a:	68a2      	ldr	r2, [r4, #8]
 800155c:	f7ff fca8 	bl	8000eb0 <relay_check_init_fsm>

	  if(init == RELAY_INIT_TRUE)
 8001560:	7833      	ldrb	r3, [r6, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d105      	bne.n	8001572 <output_fsm_ctrl+0x9a>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 8001566:	0028      	movs	r0, r5
 8001568:	f7ff ff67 	bl	800143a <deadline_timer_set_initial_time>
		  relay_acknowledge_init_fsm(actuator);
 800156c:	0020      	movs	r0, r4
 800156e:	f7ff fcab 	bl	8000ec8 <relay_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 8001572:	261f      	movs	r6, #31
 8001574:	446e      	add	r6, sp
 8001576:	0031      	movs	r1, r6
 8001578:	0028      	movs	r0, r5
 800157a:	f7ff ff93 	bl	80014a4 <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 800157e:	7833      	ldrb	r3, [r6, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <output_fsm_ctrl+0xb8>
	  {
		  relay_off_pulse_fsm(actuator);
 8001584:	0020      	movs	r0, r4
 8001586:	f7ff fd51 	bl	800102c <relay_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 800158a:	0028      	movs	r0, r5
 800158c:	f7ff ff55 	bl	800143a <deadline_timer_set_initial_time>
	  }
	}
}
 8001590:	b009      	add	sp, #36	@ 0x24
 8001592:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001594 <output_led_indicator>:


void output_led_indicator(led_signal_t *led_signal,
								deadline_timer_t *deadline_timer)
{
 8001594:	b573      	push	{r0, r1, r4, r5, r6, lr}
	deadline_timer_expired_t indicator_timer_expired;
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 8001596:	466b      	mov	r3, sp
{
 8001598:	000c      	movs	r4, r1
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 800159a:	1dde      	adds	r6, r3, #7
{
 800159c:	0005      	movs	r5, r0
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 800159e:	0031      	movs	r1, r6
 80015a0:	0020      	movs	r0, r4
 80015a2:	f7ff ff7f 	bl	80014a4 <deadline_timer_check>

	if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 80015a6:	7833      	ldrb	r3, [r6, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <output_led_indicator+0x24>
	{
		led_signal_fsm(led_signal);
 80015ac:	0028      	movs	r0, r5
 80015ae:	f7ff f994 	bl	80008da <led_signal_fsm>
		deadline_timer_set_initial_time(deadline_timer);
 80015b2:	0020      	movs	r0, r4
 80015b4:	f7ff ff41 	bl	800143a <deadline_timer_set_initial_time>
	}
}
 80015b8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080015ba <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80015ba:	b530      	push	{r4, r5, lr}
 80015bc:	000d      	movs	r5, r1
 80015be:	0004      	movs	r4, r0
 80015c0:	b087      	sub	sp, #28
 80015c2:	0010      	movs	r0, r2
	HAL_NVIC_DisableIRQ(irq_type);
 80015c4:	f001 fa1a 	bl	80029fc <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	2214      	movs	r2, #20
 80015ca:	2100      	movs	r1, #0
 80015cc:	a801      	add	r0, sp, #4
 80015ce:	f002 faf3 	bl	8003bb8 <memset>

	HAL_GPIO_DeInit(port, pin);
 80015d2:	0029      	movs	r1, r5
 80015d4:	0020      	movs	r0, r4
 80015d6:	f001 faef 	bl	8002bb8 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80015dc:	0020      	movs	r0, r4
 80015de:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = pin;
 80015e0:	9501      	str	r5, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80015e6:	f001 fa33 	bl	8002a50 <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 80015ea:	b007      	add	sp, #28
 80015ec:	bd30      	pop	{r4, r5, pc}
	...

080015f0 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	0005      	movs	r5, r0
 80015f4:	000e      	movs	r6, r1
 80015f6:	b086      	sub	sp, #24
 80015f8:	0014      	movs	r4, r2
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	2100      	movs	r1, #0
 80015fc:	2214      	movs	r2, #20
 80015fe:	a801      	add	r0, sp, #4
 8001600:	f002 fada 	bl	8003bb8 <memset>
	HAL_GPIO_DeInit(port, pin);
 8001604:	0031      	movs	r1, r6
 8001606:	0028      	movs	r0, r5
 8001608:	f001 fad6 	bl	8002bb8 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800160c:	9601      	str	r6, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2600      	movs	r6, #0
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x44>)
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001612:	0028      	movs	r0, r5
 8001614:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001616:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	9603      	str	r6, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800161a:	f001 fa19 	bl	8002a50 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 800161e:	2203      	movs	r2, #3
 8001620:	0031      	movs	r1, r6
 8001622:	0020      	movs	r0, r4
 8001624:	f001 f9b4 	bl	8002990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 8001628:	0020      	movs	r0, r4
 800162a:	f001 f9db 	bl	80029e4 <HAL_NVIC_EnableIRQ>


}
 800162e:	b006      	add	sp, #24
 8001630:	bd70      	pop	{r4, r5, r6, pc}
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	10110000 	.word	0x10110000

08001638 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	0016      	movs	r6, r2
 800163c:	0004      	movs	r4, r0
 800163e:	000d      	movs	r5, r1
 8001640:	b086      	sub	sp, #24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	2214      	movs	r2, #20
 8001644:	2100      	movs	r1, #0
 8001646:	a801      	add	r0, sp, #4
 8001648:	f002 fab6 	bl	8003bb8 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 800164c:	0030      	movs	r0, r6
 800164e:	f001 f9d5 	bl	80029fc <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 8001652:	0029      	movs	r1, r5
 8001654:	0020      	movs	r0, r4
 8001656:	f001 faaf 	bl	8002bb8 <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001660:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001664:	0020      	movs	r0, r4
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	3303      	adds	r3, #3
 8001668:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pin = pin;
 800166a:	9501      	str	r5, [sp, #4]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800166c:	f001 f9f0 	bl	8002a50 <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_DIRECT_LINK_conf_as_output+0x48>)
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	6811      	ldr	r1, [r2, #0]
 8001678:	430b      	orrs	r3, r1
 800167a:	6013      	str	r3, [r2, #0]

}
 800167c:	b006      	add	sp, #24
 800167e:	bd70      	pop	{r4, r5, r6, pc}
 8001680:	40010000 	.word	0x40010000

08001684 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2704      	movs	r7, #4
{
 8001688:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	2214      	movs	r2, #20
 800168c:	2100      	movs	r1, #0
 800168e:	a805      	add	r0, sp, #20
 8001690:	f002 fa92 	bl	8003bb8 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001694:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b46      	ldr	r3, [pc, #280]	@ (80017b4 <MX_GPIO_Init+0x130>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 800169a:	24c0      	movs	r4, #192	@ 0xc0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 800169c:	26a0      	movs	r6, #160	@ 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80016a0:	0224      	lsls	r4, r4, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	433a      	orrs	r2, r7
 80016a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 80016a8:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	403a      	ands	r2, r7
 80016ac:	9201      	str	r2, [sp, #4]
 80016ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80016b2:	4841      	ldr	r0, [pc, #260]	@ (80017b8 <MX_GPIO_Init+0x134>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b4:	430a      	orrs	r2, r1
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ba:	400a      	ands	r2, r1
 80016bc:	9202      	str	r2, [sp, #8]
 80016be:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	391e      	subs	r1, #30
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c4:	432a      	orrs	r2, r5
 80016c6:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016ca:	402a      	ands	r2, r5
 80016cc:	9203      	str	r2, [sp, #12]
 80016ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d2:	430a      	orrs	r2, r1
 80016d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80016d8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	400b      	ands	r3, r1
 80016dc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80016de:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80016e2:	f001 fae3 	bl	8002cac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 80016e6:	0030      	movs	r0, r6
 80016e8:	2200      	movs	r2, #0
 80016ea:	4934      	ldr	r1, [pc, #208]	@ (80017bc <MX_GPIO_Init+0x138>)
 80016ec:	f001 fade 	bl	8002cac <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2140      	movs	r1, #64	@ 0x40
 80016f4:	4832      	ldr	r0, [pc, #200]	@ (80017c0 <MX_GPIO_Init+0x13c>)
 80016f6:	f001 fad9 	bl	8002cac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 80016fa:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	a905      	add	r1, sp, #20
 8001700:	482d      	ldr	r0, [pc, #180]	@ (80017b8 <MX_GPIO_Init+0x134>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001708:	f001 f9a2 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800170c:	a905      	add	r1, sp, #20
 800170e:	482d      	ldr	r0, [pc, #180]	@ (80017c4 <MX_GPIO_Init+0x140>)
  GPIO_InitStruct.Pin = Button_Pin;
 8001710:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001712:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001716:	f001 f99b 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 800171a:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MX_GPIO_Init+0x138>)
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	0030      	movs	r0, r6
 800171e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8001720:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001722:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f001 f992 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <MX_GPIO_Init+0x144>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 800172e:	0030      	movs	r0, r6
 8001730:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001732:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8001734:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 8001738:	f001 f98a 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 800173c:	2382      	movs	r3, #130	@ 0x82
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001742:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <MX_GPIO_Init+0x148>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	0030      	movs	r0, r6
 8001746:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001748:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f001 f980 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8001750:	2360      	movs	r3, #96	@ 0x60
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	0030      	movs	r0, r6
 8001754:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8001756:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001758:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	f001 f978 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8001760:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8001762:	a905      	add	r1, sp, #20
 8001764:	4816      	ldr	r0, [pc, #88]	@ (80017c0 <MX_GPIO_Init+0x13c>)
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8001766:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 800176e:	f001 f96f 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001776:	4b16      	ldr	r3, [pc, #88]	@ (80017d0 <MX_GPIO_Init+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8001778:	a905      	add	r1, sp, #20
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <MX_GPIO_Init+0x13c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8001780:	f001 f966 	bl	8002a50 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8001784:	2380      	movs	r3, #128	@ 0x80
 8001786:	4a13      	ldr	r2, [pc, #76]	@ (80017d4 <MX_GPIO_Init+0x150>)
 8001788:	045b      	lsls	r3, r3, #17
 800178a:	6811      	ldr	r1, [r2, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800178c:	2006      	movs	r0, #6
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 800178e:	430b      	orrs	r3, r1
 8001790:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001792:	0021      	movs	r1, r4
 8001794:	0022      	movs	r2, r4
 8001796:	f001 f8fb 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800179a:	2006      	movs	r0, #6
 800179c:	f001 f922 	bl	80029e4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80017a0:	0022      	movs	r2, r4
 80017a2:	0021      	movs	r1, r4
 80017a4:	2007      	movs	r0, #7
 80017a6:	f001 f8f3 	bl	8002990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80017aa:	2007      	movs	r0, #7
 80017ac:	f001 f91a 	bl	80029e4 <HAL_NVIC_EnableIRQ>

}
 80017b0:	b00b      	add	sp, #44	@ 0x2c
 80017b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b4:	40021000 	.word	0x40021000
 80017b8:	50000800 	.word	0x50000800
 80017bc:	00000583 	.word	0x00000583
 80017c0:	50000400 	.word	0x50000400
 80017c4:	50001400 	.word	0x50001400
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10310000 	.word	0x10310000
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40010000 	.word	0x40010000

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b500      	push	{lr}
 80017da:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017dc:	2218      	movs	r2, #24
 80017de:	2100      	movs	r1, #0
 80017e0:	a806      	add	r0, sp, #24
 80017e2:	f002 f9e9 	bl	8003bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e6:	2214      	movs	r2, #20
 80017e8:	2100      	movs	r1, #0
 80017ea:	4668      	mov	r0, sp
 80017ec:	f002 f9e4 	bl	8003bb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	33fe      	adds	r3, #254	@ 0xfe
 80017f6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f8:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fa:	3bc0      	subs	r3, #192	@ 0xc0
 80017fc:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f001 fa77 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001802:	2800      	cmp	r0, #0
 8001804:	d001      	beq.n	800180a <SystemClock_Config+0x32>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001806:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	e7fe      	b.n	8001808 <SystemClock_Config+0x30>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800180c:	9001      	str	r0, [sp, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800180e:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001810:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001812:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001814:	2101      	movs	r1, #1
 8001816:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	9300      	str	r3, [sp, #0]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800181a:	f001 fbcd 	bl	8002fb8 <HAL_RCC_ClockConfig>
 800181e:	2800      	cmp	r0, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x4e>
 8001822:	b672      	cpsid	i
  while (1)
 8001824:	e7fe      	b.n	8001824 <SystemClock_Config+0x4c>
}
 8001826:	b00d      	add	sp, #52	@ 0x34
 8001828:	bd00      	pop	{pc}

0800182a <sense_button_event>:
{
 800182a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 800182c:	7c8b      	ldrb	r3, [r1, #18]
{
 800182e:	0004      	movs	r4, r0
 8001830:	000d      	movs	r5, r1
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <sense_button_event+0x28>
		deadline_timer_check(deadline_events, &timer_expired);
 8001836:	466b      	mov	r3, sp
 8001838:	1dde      	adds	r6, r3, #7
 800183a:	0031      	movs	r1, r6
 800183c:	f7ff fe32 	bl	80014a4 <deadline_timer_check>
		if(timer_expired == TIMER_EXPIRED_TRUE)
 8001840:	7833      	ldrb	r3, [r6, #0]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d105      	bne.n	8001852 <sense_button_event+0x28>
			button_debounce_fsm(button);
 8001846:	0028      	movs	r0, r5
 8001848:	f7fe ffbb 	bl	80007c2 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 800184c:	0020      	movs	r0, r4
 800184e:	f7ff fdf4 	bl	800143a <deadline_timer_set_initial_time>
}
 8001852:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08001854 <events_detection_uv_waits>:
{
 8001854:	b5f0      	push	{r4, r5, r6, r7, lr}
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8001856:	271d      	movs	r7, #29
{
 8001858:	b08b      	sub	sp, #44	@ 0x2c
 800185a:	9307      	str	r3, [sp, #28]
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 800185c:	ab02      	add	r3, sp, #8
 800185e:	18ff      	adds	r7, r7, r3
{
 8001860:	000e      	movs	r6, r1
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8001862:	0039      	movs	r1, r7
{
 8001864:	0005      	movs	r5, r0
 8001866:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8001868:	9206      	str	r2, [sp, #24]
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 800186a:	f7ff f87b 	bl	8000964 <pyd1598_read_wakeup_signal>
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 800186e:	783b      	ldrb	r3, [r7, #0]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d108      	bne.n	8001886 <events_detection_uv_waits+0x32>
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001874:	9a11      	ldr	r2, [sp, #68]	@ 0x44
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001876:	3558      	adds	r5, #88	@ 0x58
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001878:	7013      	strb	r3, [r2, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 800187a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800187c:	7013      	strb	r3, [r2, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 800187e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8001880:	7013      	strb	r3, [r2, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001882:	2300      	movs	r3, #0
 8001884:	702b      	strb	r3, [r5, #0]
	sense_button_event(deadline_events, button_lamp_1);
 8001886:	0030      	movs	r0, r6
 8001888:	9906      	ldr	r1, [sp, #24]
 800188a:	f7ff ffce 	bl	800182a <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 800188e:	0030      	movs	r0, r6
 8001890:	9907      	ldr	r1, [sp, #28]
 8001892:	f7ff ffca 	bl	800182a <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001896:	0021      	movs	r1, r4
 8001898:	0030      	movs	r0, r6
 800189a:	f7ff ffc6 	bl	800182a <sense_button_event>
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 800189e:	231f      	movs	r3, #31
 80018a0:	251e      	movs	r5, #30
 80018a2:	aa02      	add	r2, sp, #8
 80018a4:	189b      	adds	r3, r3, r2
 80018a6:	9304      	str	r3, [sp, #16]
 80018a8:	0023      	movs	r3, r4
 80018aa:	18ad      	adds	r5, r5, r2
 80018ac:	466a      	mov	r2, sp
 80018ae:	9503      	str	r5, [sp, #12]
 80018b0:	3310      	adds	r3, #16
 80018b2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80018b4:	c243      	stmia	r2!, {r0, r1, r6}
 80018b6:	68e3      	ldr	r3, [r4, #12]
 80018b8:	6820      	ldr	r0, [r4, #0]
 80018ba:	6861      	ldr	r1, [r4, #4]
 80018bc:	68a2      	ldr	r2, [r4, #8]
 80018be:	f7fe ffa8 	bl	8000812 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80018c2:	782b      	ldrb	r3, [r5, #0]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d104      	bne.n	80018d2 <events_detection_uv_waits+0x7e>
		if(button_lamp_uv->push_status != BUTTON_PUSH_ON)
 80018c8:	78e3      	ldrb	r3, [r4, #3]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d003      	beq.n	80018d6 <events_detection_uv_waits+0x82>
			button_lamp_uv->push_status = BUTTON_PUSH_ON;
 80018ce:	2301      	movs	r3, #1
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 80018d0:	70e3      	strb	r3, [r4, #3]
}
 80018d2:	b00b      	add	sp, #44	@ 0x2c
 80018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e7fa      	b.n	80018d0 <events_detection_uv_waits+0x7c>

080018da <motion_light_control_fsm>:
{
 80018da:	b5f0      	push	{r4, r5, r6, r7, lr}
	button_edge_t edge = button->edge;
 80018dc:	271e      	movs	r7, #30
{
 80018de:	b08b      	sub	sp, #44	@ 0x2c
 80018e0:	9007      	str	r0, [sp, #28]
 80018e2:	9306      	str	r3, [sp, #24]
	button_edge_t edge = button->edge;
 80018e4:	ab02      	add	r3, sp, #8
 80018e6:	18ff      	adds	r7, r7, r3
 80018e8:	784b      	ldrb	r3, [r1, #1]
	button_check_isr_request(*button, &button_isr_status, &edge);
 80018ea:	aa02      	add	r2, sp, #8
	button_edge_t edge = button->edge;
 80018ec:	703b      	strb	r3, [r7, #0]
	button_check_isr_request(*button, &button_isr_status, &edge);
 80018ee:	231d      	movs	r3, #29
 80018f0:	189b      	adds	r3, r3, r2
 80018f2:	9303      	str	r3, [sp, #12]
 80018f4:	000b      	movs	r3, r1
 80018f6:	466a      	mov	r2, sp
{
 80018f8:	000d      	movs	r5, r1
	button_check_isr_request(*button, &button_isr_status, &edge);
 80018fa:	9704      	str	r7, [sp, #16]
 80018fc:	3310      	adds	r3, #16
{
 80018fe:	9c10      	ldr	r4, [sp, #64]	@ 0x40
	button_check_isr_request(*button, &button_isr_status, &edge);
 8001900:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001902:	c243      	stmia	r2!, {r0, r1, r6}
 8001904:	68eb      	ldr	r3, [r5, #12]
 8001906:	6828      	ldr	r0, [r5, #0]
 8001908:	6869      	ldr	r1, [r5, #4]
 800190a:	68aa      	ldr	r2, [r5, #8]
 800190c:	f7fe ff81 	bl	8000812 <button_check_isr_request>
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001910:	ab02      	add	r3, sp, #8
 8001912:	7f5b      	ldrb	r3, [r3, #29]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d00f      	beq.n	8001938 <motion_light_control_fsm+0x5e>
 8001918:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d102      	bne.n	8001926 <motion_light_control_fsm+0x4c>
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001920:	7823      	ldrb	r3, [r4, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d012      	beq.n	800194c <motion_light_control_fsm+0x72>
	switch(*fsm_state)
 8001926:	7820      	ldrb	r0, [r4, #0]
 8001928:	2807      	cmp	r0, #7
 800192a:	d855      	bhi.n	80019d8 <motion_light_control_fsm+0xfe>
 800192c:	f7fe fbf6 	bl	800011c <__gnu_thumb1_case_uqi>
 8001930:	542e1913 	.word	0x542e1913
 8001934:	4e543934 	.word	0x4e543934
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001938:	2300      	movs	r3, #0
 800193a:	aa02      	add	r2, sp, #8
 800193c:	7753      	strb	r3, [r2, #29]
			if(edge == BUTTON_EDGE_NEGATIVE)
 800193e:	783a      	ldrb	r2, [r7, #0]
 8001940:	3307      	adds	r3, #7
 8001942:	2a01      	cmp	r2, #1
 8001944:	d000      	beq.n	8001948 <motion_light_control_fsm+0x6e>
 8001946:	3b06      	subs	r3, #6
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001948:	7023      	strb	r3, [r4, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 800194a:	e7ec      	b.n	8001926 <motion_light_control_fsm+0x4c>
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 800194c:	2201      	movs	r2, #1
 800194e:	7022      	strb	r2, [r4, #0]
			*motion_sensed = MOTION_ISR_ATTENDED;
 8001950:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8001952:	7013      	strb	r3, [r2, #0]
 8001954:	e7e7      	b.n	8001926 <motion_light_control_fsm+0x4c>
			__NOP();//Do nothing
 8001956:	46c0      	nop			@ (mov r8, r8)
	button->edge_attended = button_isr_status;
 8001958:	ab02      	add	r3, sp, #8
 800195a:	7f5b      	ldrb	r3, [r3, #29]
 800195c:	712b      	strb	r3, [r5, #4]
}
 800195e:	b00b      	add	sp, #44	@ 0x2c
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
			button_status_t button_status = BUTTON_OFF;
 8001962:	2600      	movs	r6, #0
 8001964:	ab02      	add	r3, sp, #8
 8001966:	77de      	strb	r6, [r3, #31]
			button_get_status(button, &button_status);
 8001968:	231f      	movs	r3, #31
 800196a:	aa02      	add	r2, sp, #8
 800196c:	189b      	adds	r3, r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	0028      	movs	r0, r5
 8001972:	f7fe ff11 	bl	8000798 <button_get_status>
			if(button_status == BUTTON_ON)
 8001976:	ab02      	add	r3, sp, #8
 8001978:	7fdb      	ldrb	r3, [r3, #31]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d104      	bne.n	8001988 <motion_light_control_fsm+0xae>
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 800197e:	3301      	adds	r3, #1
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001980:	7023      	strb	r3, [r4, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8001984:	701e      	strb	r6, [r3, #0]
 8001986:	e7e7      	b.n	8001958 <motion_light_control_fsm+0x7e>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001988:	2307      	movs	r3, #7
 800198a:	e7f9      	b.n	8001980 <motion_light_control_fsm+0xa6>
			relay_ask_on_pulse_fsm(light);
 800198c:	9807      	ldr	r0, [sp, #28]
 800198e:	f7ff fa86 	bl	8000e9e <relay_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 8001992:	2304      	movs	r3, #4
			*fsm_state = MOTION_LIGHT_IDLE;
 8001994:	7023      	strb	r3, [r4, #0]
			break;
 8001996:	e7df      	b.n	8001958 <motion_light_control_fsm+0x7e>
			deadline_timer_set_initial_time(deadline_timer);
 8001998:	9806      	ldr	r0, [sp, #24]
 800199a:	f7ff fd4e 	bl	800143a <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 800199e:	2305      	movs	r3, #5
 80019a0:	e7f8      	b.n	8001994 <motion_light_control_fsm+0xba>
			deadline_timer_check(deadline_timer, &deadline_expired);
 80019a2:	271f      	movs	r7, #31
 80019a4:	ab02      	add	r3, sp, #8
 80019a6:	18ff      	adds	r7, r7, r3
 80019a8:	0039      	movs	r1, r7
 80019aa:	9806      	ldr	r0, [sp, #24]
 80019ac:	f7ff fd7a 	bl	80014a4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80019b0:	783b      	ldrb	r3, [r7, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <motion_light_control_fsm+0xe0>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 80019b6:	3306      	adds	r3, #6
 80019b8:	7023      	strb	r3, [r4, #0]
			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 80019ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d1ca      	bne.n	8001958 <motion_light_control_fsm+0x7e>
				*motion_sensed = MOTION_ISR_ATTENDED;
 80019c2:	2300      	movs	r3, #0
 80019c4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80019c6:	7013      	strb	r3, [r2, #0]
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 80019c8:	3301      	adds	r3, #1
 80019ca:	e7e3      	b.n	8001994 <motion_light_control_fsm+0xba>
			deadline_timer_force_expiration(deadline_timer);
 80019cc:	9806      	ldr	r0, [sp, #24]
 80019ce:	f7ff fd2f 	bl	8001430 <deadline_timer_force_expiration>
			relay_ask_off_pulse_fsm(light);
 80019d2:	9807      	ldr	r0, [sp, #28]
 80019d4:	f7ff fa5b 	bl	8000e8e <relay_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	e7db      	b.n	8001994 <motion_light_control_fsm+0xba>

080019dc <motion_uv_ctrl_wait_fsm>:
{
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b09d      	sub	sp, #116	@ 0x74
 80019e0:	9317      	str	r3, [sp, #92]	@ 0x5c
 80019e2:	ab28      	add	r3, sp, #160	@ 0xa0
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	9018      	str	r0, [sp, #96]	@ 0x60
 80019e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80019ea:	9216      	str	r2, [sp, #88]	@ 0x58
	button_edge_t edge = button_uv->edge;
 80019ec:	784a      	ldrb	r2, [r1, #1]
 80019ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80019f0:	701a      	strb	r2, [r3, #0]
	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 80019f2:	9304      	str	r3, [sp, #16]
 80019f4:	235b      	movs	r3, #91	@ 0x5b
 80019f6:	aa04      	add	r2, sp, #16
 80019f8:	189b      	adds	r3, r3, r2
 80019fa:	9303      	str	r3, [sp, #12]
 80019fc:	000b      	movs	r3, r1
 80019fe:	466a      	mov	r2, sp
{
 8001a00:	000d      	movs	r5, r1
	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001a02:	3310      	adds	r3, #16
{
 8001a04:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8001a06:	9f26      	ldr	r7, [sp, #152]	@ 0x98
	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001a08:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001a0a:	c243      	stmia	r2!, {r0, r1, r6}
 8001a0c:	6869      	ldr	r1, [r5, #4]
 8001a0e:	68aa      	ldr	r2, [r5, #8]
 8001a10:	68eb      	ldr	r3, [r5, #12]
 8001a12:	6828      	ldr	r0, [r5, #0]
 8001a14:	f7fe fefd 	bl	8000812 <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8001a18:	235d      	movs	r3, #93	@ 0x5d
 8001a1a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8001a1c:	aa04      	add	r2, sp, #16
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	3110      	adds	r1, #16
 8001a22:	2250      	movs	r2, #80	@ 0x50
 8001a24:	4668      	mov	r0, sp
 8001a26:	9314      	str	r3, [sp, #80]	@ 0x50
 8001a28:	f002 f90c 	bl	8003c44 <memcpy>
 8001a2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8001a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a30:	f7fe ff8c 	bl	800094c <pyd1598_check_isr_request>
	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001a34:	225b      	movs	r2, #91	@ 0x5b
 8001a36:	ab04      	add	r3, sp, #16
 8001a38:	189b      	adds	r3, r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d109      	bne.n	8001a54 <motion_uv_ctrl_wait_fsm+0x78>
		if(button_uv->push_status == BUTTON_PUSH_ON)
 8001a40:	78eb      	ldrb	r3, [r5, #3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d000      	beq.n	8001a48 <motion_uv_ctrl_wait_fsm+0x6c>
			*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001a46:	230b      	movs	r3, #11
 8001a48:	7023      	strb	r3, [r4, #0]
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001a4a:	235b      	movs	r3, #91	@ 0x5b
 8001a4c:	aa04      	add	r2, sp, #16
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
	if(*uv_abort == MOTION_ABORT_TRUE)
 8001a54:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d104      	bne.n	8001a66 <motion_uv_ctrl_wait_fsm+0x8a>
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001a5c:	330b      	adds	r3, #11
		*uv_abort = MOTION_ABORT_FALSE;
 8001a5e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001a60:	7023      	strb	r3, [r4, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 8001a62:	3b0a      	subs	r3, #10
 8001a64:	7013      	strb	r3, [r2, #0]
	switch(*fsm_state)
 8001a66:	7820      	ldrb	r0, [r4, #0]
 8001a68:	280b      	cmp	r0, #11
 8001a6a:	d900      	bls.n	8001a6e <motion_uv_ctrl_wait_fsm+0x92>
 8001a6c:	e080      	b.n	8001b70 <motion_uv_ctrl_wait_fsm+0x194>
 8001a6e:	f7fe fb55 	bl	800011c <__gnu_thumb1_case_uqi>
 8001a72:	0e06      	.short	0x0e06
 8001a74:	38331d7f 	.word	0x38331d7f
 8001a78:	5a55507f 	.word	0x5a55507f
 8001a7c:	6a6c      	.short	0x6a6c
			__NOP();//Do nothing
 8001a7e:	46c0      	nop			@ (mov r8, r8)
	button_uv->edge_attended = button_isr_status;
 8001a80:	235b      	movs	r3, #91	@ 0x5b
 8001a82:	aa04      	add	r2, sp, #16
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	712b      	strb	r3, [r5, #4]
}
 8001a8a:	b01d      	add	sp, #116	@ 0x74
 8001a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			deadline_timer_set_initial_time(deadline_timeout);
 8001a8e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8001a90:	f7ff fcd3 	bl	800143a <deadline_timer_set_initial_time>
			deadline_timer_set_initial_time(deadline_wait_timeout);
 8001a94:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8001a96:	f7ff fcd0 	bl	800143a <deadline_timer_set_initial_time>
			led_signal_start(signal);
 8001a9a:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8001a9c:	f7fe ff34 	bl	8000908 <led_signal_start>
			signal->type = LED_SIGNAL_BLINK;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8001aa4:	7253      	strb	r3, [r2, #9]
			*fsm_state = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 8001aa6:	3301      	adds	r3, #1
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001aa8:	7023      	strb	r3, [r4, #0]
			break;
 8001aaa:	e7e9      	b.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001aac:	783b      	ldrb	r3, [r7, #0]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d101      	bne.n	8001ab6 <motion_uv_ctrl_wait_fsm+0xda>
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	703b      	strb	r3, [r7, #0]
			deadline_timer_check(deadline_timeout, &deadline_timeout_expired);
 8001ab6:	265f      	movs	r6, #95	@ 0x5f
 8001ab8:	ab04      	add	r3, sp, #16
 8001aba:	18f6      	adds	r6, r6, r3
 8001abc:	0031      	movs	r1, r6
 8001abe:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8001ac0:	f7ff fcf0 	bl	80014a4 <deadline_timer_check>
			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001ac4:	7833      	ldrb	r3, [r6, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d1da      	bne.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001aca:	2200      	movs	r2, #0
 8001acc:	703a      	strb	r2, [r7, #0]
				*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001ace:	3204      	adds	r2, #4
 8001ad0:	7022      	strb	r2, [r4, #0]
				signal->type = LED_SIGNAL_SOLID;
 8001ad2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8001ad4:	7253      	strb	r3, [r2, #9]
 8001ad6:	e7d3      	b.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
			deadline_timer_set_initial_time(deadline_safe_timer);
 8001ad8:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8001ada:	f7ff fcae 	bl	800143a <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	e7e2      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8001ae2:	265e      	movs	r6, #94	@ 0x5e
 8001ae4:	ab04      	add	r3, sp, #16
 8001ae6:	18f6      	adds	r6, r6, r3
 8001ae8:	0031      	movs	r1, r6
 8001aea:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8001aec:	f7ff fcda 	bl	80014a4 <deadline_timer_check>
			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001af0:	7833      	ldrb	r3, [r6, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <motion_uv_ctrl_wait_fsm+0x11e>
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8001af6:	3306      	adds	r3, #6
 8001af8:	e7d6      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001afa:	783b      	ldrb	r3, [r7, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d103      	bne.n	8001b08 <motion_uv_ctrl_wait_fsm+0x12c>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8001b00:	2300      	movs	r3, #0
 8001b02:	703b      	strb	r3, [r7, #0]
					*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001b04:	330b      	adds	r3, #11
 8001b06:	e7cf      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
					if(wait == MOTION_UV_WAIT_TRUE)
 8001b08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1b8      	bne.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
						*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001b0e:	3304      	adds	r3, #4
 8001b10:	e7ca      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
			relay_ask_on_pulse_fsm(light_uv);
 8001b12:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8001b14:	f7ff f9c3 	bl	8000e9e <relay_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	e7c5      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
			deadline_timer_set_initial_time(deadline_timer);
 8001b1c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001b1e:	f7ff fc8c 	bl	800143a <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8001b22:	2309      	movs	r3, #9
 8001b24:	e7c0      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
			deadline_timer_check(deadline_timer, &deadline_expired);
 8001b26:	265f      	movs	r6, #95	@ 0x5f
 8001b28:	ab04      	add	r3, sp, #16
 8001b2a:	18f6      	adds	r6, r6, r3
 8001b2c:	0031      	movs	r1, r6
 8001b2e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001b30:	f7ff fcb8 	bl	80014a4 <deadline_timer_check>
			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001b34:	7833      	ldrb	r3, [r6, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d101      	bne.n	8001b3e <motion_uv_ctrl_wait_fsm+0x162>
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001b3a:	3309      	adds	r3, #9
 8001b3c:	7023      	strb	r3, [r4, #0]
			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001b3e:	783b      	ldrb	r3, [r7, #0]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d19d      	bne.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
 8001b44:	e7dc      	b.n	8001b00 <motion_uv_ctrl_wait_fsm+0x124>
			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001b46:	230a      	movs	r3, #10
 8001b48:	e7ae      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>
			button_uv->push_status = BUTTON_PUSH_OFF;
 8001b4a:	2600      	movs	r6, #0
			deadline_timer_force_expiration(deadline_timer);
 8001b4c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8001b4e:	f7ff fc6f 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_timeout);
 8001b52:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8001b54:	f7ff fc6c 	bl	8001430 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_wait_timeout);
 8001b58:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8001b5a:	f7ff fc69 	bl	8001430 <deadline_timer_force_expiration>
			relay_ask_off_pulse_fsm(light_uv);
 8001b5e:	9818      	ldr	r0, [sp, #96]	@ 0x60
			button_uv->push_status = BUTTON_PUSH_OFF;
 8001b60:	70ee      	strb	r6, [r5, #3]
			relay_ask_off_pulse_fsm(light_uv);
 8001b62:	f7ff f994 	bl	8000e8e <relay_ask_off_pulse_fsm>
			led_signal_stop(signal);
 8001b66:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8001b68:	f7fe fed2 	bl	8000910 <led_signal_stop>
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001b6c:	7026      	strb	r6, [r4, #0]
			break;
 8001b6e:	e787      	b.n	8001a80 <motion_uv_ctrl_wait_fsm+0xa4>
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e799      	b.n	8001aa8 <motion_uv_ctrl_wait_fsm+0xcc>

08001b74 <direct_light_control_fsm>:
{
 8001b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b76:	b08b      	sub	sp, #44	@ 0x2c
 8001b78:	9007      	str	r0, [sp, #28]
 8001b7a:	001d      	movs	r5, r3
	button_edge_t edge = button->edge;
 8001b7c:	784b      	ldrb	r3, [r1, #1]
 8001b7e:	aa02      	add	r2, sp, #8
 8001b80:	7793      	strb	r3, [r2, #30]
	button_status_t button_status = BUTTON_OFF;
 8001b82:	0013      	movs	r3, r2
 8001b84:	2200      	movs	r2, #0
 8001b86:	77da      	strb	r2, [r3, #31]
	button_check_isr_request(*button, &button_isr_status, &edge);
 8001b88:	231e      	movs	r3, #30
 8001b8a:	261d      	movs	r6, #29
 8001b8c:	aa02      	add	r2, sp, #8
 8001b8e:	189b      	adds	r3, r3, r2
 8001b90:	9304      	str	r3, [sp, #16]
 8001b92:	000b      	movs	r3, r1
 8001b94:	18b6      	adds	r6, r6, r2
 8001b96:	466a      	mov	r2, sp
{
 8001b98:	000c      	movs	r4, r1
	button_check_isr_request(*button, &button_isr_status, &edge);
 8001b9a:	9603      	str	r6, [sp, #12]
 8001b9c:	3310      	adds	r3, #16
 8001b9e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001ba0:	c283      	stmia	r2!, {r0, r1, r7}
 8001ba2:	68e3      	ldr	r3, [r4, #12]
 8001ba4:	6820      	ldr	r0, [r4, #0]
 8001ba6:	6861      	ldr	r1, [r4, #4]
 8001ba8:	68a2      	ldr	r2, [r4, #8]
 8001baa:	f7fe fe32 	bl	8000812 <button_check_isr_request>
	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8001bae:	7833      	ldrb	r3, [r6, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d113      	bne.n	8001bdc <direct_light_control_fsm+0x68>
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	7032      	strb	r2, [r6, #0]
		if(edge == BUTTON_EDGE_NEGATIVE)
 8001bb8:	aa02      	add	r2, sp, #8
 8001bba:	7f92      	ldrb	r2, [r2, #30]
 8001bbc:	2a01      	cmp	r2, #1
 8001bbe:	d106      	bne.n	8001bce <direct_light_control_fsm+0x5a>
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	702b      	strb	r3, [r5, #0]
			relay_ask_off_pulse_fsm(light);
 8001bc4:	9807      	ldr	r0, [sp, #28]
 8001bc6:	f7ff f962 	bl	8000e8e <relay_ask_off_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e004      	b.n	8001bd8 <direct_light_control_fsm+0x64>
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8001bce:	702b      	strb	r3, [r5, #0]
			relay_ask_on_pulse_fsm(light);
 8001bd0:	9807      	ldr	r0, [sp, #28]
 8001bd2:	f7ff f964 	bl	8000e9e <relay_ask_on_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 8001bd6:	2301      	movs	r3, #1
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001bd8:	702b      	strb	r3, [r5, #0]
			break;
 8001bda:	e007      	b.n	8001bec <direct_light_control_fsm+0x78>
	switch(*fsm_state)
 8001bdc:	7828      	ldrb	r0, [r5, #0]
 8001bde:	2803      	cmp	r0, #3
 8001be0:	d8f3      	bhi.n	8001bca <direct_light_control_fsm+0x56>
 8001be2:	f7fe fa91 	bl	8000108 <__gnu_thumb1_case_sqi>
 8001be6:	0702      	.short	0x0702
 8001be8:	eff5      	.short	0xeff5
			__NOP();//Do nothing
 8001bea:	46c0      	nop			@ (mov r8, r8)
	button->edge_attended = button_isr_status;
 8001bec:	7833      	ldrb	r3, [r6, #0]
 8001bee:	7123      	strb	r3, [r4, #4]
}
 8001bf0:	b00b      	add	sp, #44	@ 0x2c
 8001bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			button_get_status(button, &button_status);
 8001bf4:	231f      	movs	r3, #31
 8001bf6:	aa02      	add	r2, sp, #8
 8001bf8:	189b      	adds	r3, r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0020      	movs	r0, r4
 8001bfe:	f7fe fdcb 	bl	8000798 <button_get_status>
			if(button_status == BUTTON_OFF)
 8001c02:	ab02      	add	r3, sp, #8
 8001c04:	7fdb      	ldrb	r3, [r3, #31]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <direct_light_control_fsm+0x78>
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001c0a:	3303      	adds	r3, #3
 8001c0c:	e7e4      	b.n	8001bd8 <direct_light_control_fsm+0x64>
	...

08001c10 <main>:
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b0d9      	sub	sp, #356	@ 0x164
  HAL_Init();
 8001c14:	f000 fe84 	bl	8002920 <HAL_Init>
  SystemClock_Config();
 8001c18:	f7ff fdde 	bl	80017d8 <SystemClock_Config>
  MX_GPIO_Init();
 8001c1c:	f7ff fd32 	bl	8001684 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c20:	f000 fcd0 	bl	80025c4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001c24:	f000 fd6a 	bl	80026fc <MX_TIM14_Init>
  MX_TIM3_Init();
 8001c28:	f000 fd0a 	bl	8002640 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001c2c:	f000 fd98 	bl	8002760 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001c30:	f000 fd7c 	bl	800272c <MX_TIM16_Init>
  general_clock.counts = 0;
 8001c34:	2000      	movs	r0, #0
 8001c36:	2100      	movs	r1, #0
  general_clock.msec = 0;
 8001c38:	2200      	movs	r2, #0
  general_clock.counts = 0;
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	@ (8001e64 <main+0x254>)
 8001c3c:	6018      	str	r0, [r3, #0]
 8001c3e:	6059      	str	r1, [r3, #4]
  general_clock.msec = 0;
 8001c40:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001c42:	23a0      	movs	r3, #160	@ 0xa0
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001c44:	30c8      	adds	r0, #200	@ 0xc8
 8001c46:	a902      	add	r1, sp, #8
 8001c48:	1809      	adds	r1, r1, r0
 8001c4a:	3220      	adds	r2, #32
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001c4c:	05db      	lsls	r3, r3, #23
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001c4e:	800a      	strh	r2, [r1, #0]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001c50:	21d0      	movs	r1, #208	@ 0xd0
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001c52:	9333      	str	r3, [sp, #204]	@ 0xcc
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 8001c54:	9335      	str	r3, [sp, #212]	@ 0xd4
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001c56:	2340      	movs	r3, #64	@ 0x40
 8001c58:	aa02      	add	r2, sp, #8
 8001c5a:	1852      	adds	r2, r2, r1
 8001c5c:	8013      	strh	r3, [r2, #0]
  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8001c5e:	a933      	add	r1, sp, #204	@ 0xcc
 8001c60:	2202      	movs	r2, #2
 8001c62:	a82d      	add	r0, sp, #180	@ 0xb4
 8001c64:	f7ff fa18 	bl	8001098 <switch_selector_setup>
  switch(switch_selector.value)
 8001c68:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8001c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e68 <main+0x258>)
 8001c6c:	2803      	cmp	r0, #3
 8001c6e:	d900      	bls.n	8001c72 <main+0x62>
 8001c70:	e0f0      	b.n	8001e54 <main+0x244>
 8001c72:	2203      	movs	r2, #3
 8001c74:	2107      	movs	r1, #7
 8001c76:	f7fe fa51 	bl	800011c <__gnu_thumb1_case_uqi>
 8001c7a:	0302      	.short	0x0302
 8001c7c:	03eb      	.short	0x03eb
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001c7e:	2106      	movs	r1, #6
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001c80:	7019      	strb	r1, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001c82:	70da      	strb	r2, [r3, #3]
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001c84:	2200      	movs	r2, #0
 8001c86:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8001c88:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001c8a:	715a      	strb	r2, [r3, #5]
  setin_pin.pin = SERIN_Pin;
 8001c8c:	2280      	movs	r2, #128	@ 0x80
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8001c8e:	2101      	movs	r1, #1
  setin_pin.pin = SERIN_Pin;
 8001c90:	ac0b      	add	r4, sp, #44	@ 0x2c
 8001c92:	01d2      	lsls	r2, r2, #7
 8001c94:	80a2      	strh	r2, [r4, #4]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8001c96:	7199      	strb	r1, [r3, #6]
  motion_initial_conf.pulse_counter = PYD1598_PC_2_PULSES;
 8001c98:	7099      	strb	r1, [r3, #2]
  direct_link_pin.pin = DIRLINK_Pin;
 8001c9a:	aa0d      	add	r2, sp, #52	@ 0x34
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001c9c:	3106      	adds	r1, #6
  setin_pin.port = SERIN_GPIO_Port;
 8001c9e:	4d73      	ldr	r5, [pc, #460]	@ (8001e6c <main+0x25c>)
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001ca0:	71a1      	strb	r1, [r4, #6]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001ca2:	7191      	strb	r1, [r2, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001ca4:	2680      	movs	r6, #128	@ 0x80
  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001ca6:	a901      	add	r1, sp, #4
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001ca8:	2002      	movs	r0, #2
  setin_pin.port = SERIN_GPIO_Port;
 8001caa:	950b      	str	r5, [sp, #44]	@ 0x2c
  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001cac:	000d      	movs	r5, r1
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001cae:	4f70      	ldr	r7, [pc, #448]	@ (8001e70 <main+0x260>)
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001cb0:	7118      	strb	r0, [r3, #4]
  direct_link_pin.pin = DIRLINK_Pin;
 8001cb2:	8096      	strh	r6, [r2, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001cb4:	970d      	str	r7, [sp, #52]	@ 0x34
  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001cb6:	ca82      	ldmia	r2!, {r1, r7}
 8001cb8:	c582      	stmia	r5!, {r1, r7}
 8001cba:	2280      	movs	r2, #128	@ 0x80
 8001cbc:	781d      	ldrb	r5, [r3, #0]
 8001cbe:	78d9      	ldrb	r1, [r3, #3]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	0252      	lsls	r2, r2, #9
 8001cc4:	4315      	orrs	r5, r2
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001cca:	486a      	ldr	r0, [pc, #424]	@ (8001e74 <main+0x264>)
 8001ccc:	0609      	lsls	r1, r1, #24
 8001cce:	4329      	orrs	r1, r5
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	4b66      	ldr	r3, [pc, #408]	@ (8001e6c <main+0x25c>)
 8001cd4:	0004      	movs	r4, r0
 8001cd6:	f7fe ff08 	bl	8000aea <pyd1598_setup>
  HAL_Delay(1000);
 8001cda:	20fa      	movs	r0, #250	@ 0xfa
 8001cdc:	0080      	lsls	r0, r0, #2
 8001cde:	f000 fe3d 	bl	800295c <HAL_Delay>
  pyd1598_request_write(&motion_sensor);
 8001ce2:	0020      	movs	r0, r4
 8001ce4:	f7fe fe2f 	bl	8000946 <pyd1598_request_write>
  deadline.msec = 80;
 8001ce8:	2350      	movs	r3, #80	@ 0x50
 8001cea:	4c63      	ldr	r4, [pc, #396]	@ (8001e78 <main+0x268>)
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001cec:	4d63      	ldr	r5, [pc, #396]	@ (8001e7c <main+0x26c>)
 8001cee:	4964      	ldr	r1, [pc, #400]	@ (8001e80 <main+0x270>)
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4668      	mov	r0, sp
  deadline.msec = 80;
 8001cf4:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001cf6:	f001 ffa5 	bl	8003c44 <memcpy>
 8001cfa:	6863      	ldr	r3, [r4, #4]
 8001cfc:	6822      	ldr	r2, [r4, #0]
 8001cfe:	0028      	movs	r0, r5
 8001d00:	f7ff fb7a 	bl	80013f8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8001d04:	4d5f      	ldr	r5, [pc, #380]	@ (8001e84 <main+0x274>)
 8001d06:	495e      	ldr	r1, [pc, #376]	@ (8001e80 <main+0x270>)
 8001d08:	2210      	movs	r2, #16
 8001d0a:	4668      	mov	r0, sp
 8001d0c:	f001 ff9a 	bl	8003c44 <memcpy>
 8001d10:	6863      	ldr	r3, [r4, #4]
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	0028      	movs	r0, r5
 8001d16:	f7ff fb6f 	bl	80013f8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8001d1a:	4d5b      	ldr	r5, [pc, #364]	@ (8001e88 <main+0x278>)
 8001d1c:	4958      	ldr	r1, [pc, #352]	@ (8001e80 <main+0x270>)
 8001d1e:	2210      	movs	r2, #16
 8001d20:	4668      	mov	r0, sp
 8001d22:	f001 ff8f 	bl	8003c44 <memcpy>
 8001d26:	6822      	ldr	r2, [r4, #0]
 8001d28:	6863      	ldr	r3, [r4, #4]
 8001d2a:	0028      	movs	r0, r5
 8001d2c:	f7ff fb64 	bl	80013f8 <deadline_timer_setup>
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001d30:	2748      	movs	r7, #72	@ 0x48
  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8001d32:	2340      	movs	r3, #64	@ 0x40
 8001d34:	aa0f      	add	r2, sp, #60	@ 0x3c
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001d36:	ad02      	add	r5, sp, #8
  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8001d38:	8093      	strh	r3, [r2, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001d3a:	19ed      	adds	r5, r5, r7
 8001d3c:	33c0      	adds	r3, #192	@ 0xc0
 8001d3e:	802b      	strh	r3, [r5, #0]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8001d40:	2558      	movs	r5, #88	@ 0x58
 8001d42:	2101      	movs	r1, #1
 8001d44:	ab02      	add	r3, sp, #8
 8001d46:	195b      	adds	r3, r3, r5
 8001d48:	8019      	strh	r1, [r3, #0]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001d4a:	2180      	movs	r1, #128	@ 0x80
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001d4c:	25a0      	movs	r5, #160	@ 0xa0
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001d4e:	ab11      	add	r3, sp, #68	@ 0x44
 8001d50:	00c9      	lsls	r1, r1, #3
 8001d52:	8099      	strh	r1, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8001d54:	af15      	add	r7, sp, #84	@ 0x54
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001d56:	494d      	ldr	r1, [pc, #308]	@ (8001e8c <main+0x27c>)
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8001d58:	80be      	strh	r6, [r7, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001d5a:	ae19      	add	r6, sp, #100	@ 0x64
 8001d5c:	80b1      	strh	r1, [r6, #4]
  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8001d5e:	4944      	ldr	r1, [pc, #272]	@ (8001e70 <main+0x260>)
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001d60:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8001d62:	910f      	str	r1, [sp, #60]	@ 0x3c
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001d64:	4941      	ldr	r1, [pc, #260]	@ (8001e6c <main+0x25c>)
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001d66:	05ed      	lsls	r5, r5, #23
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001d68:	9a10      	ldr	r2, [sp, #64]	@ 0x40
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001d6a:	9119      	str	r1, [sp, #100]	@ 0x64
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	4940      	ldr	r1, [pc, #256]	@ (8001e70 <main+0x260>)
 8001d70:	002b      	movs	r3, r5
 8001d72:	a83d      	add	r0, sp, #244	@ 0xf4
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001d74:	9513      	str	r5, [sp, #76]	@ 0x4c
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8001d76:	9517      	str	r5, [sp, #92]	@ 0x5c
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8001d78:	9511      	str	r5, [sp, #68]	@ 0x44
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001d7a:	9515      	str	r5, [sp, #84]	@ 0x54
  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8001d7c:	f7ff f8d9 	bl	8000f32 <relay_setup>
  relay_setup(&light_2, light_2_output_a, light_2_output_b);
 8001d80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8001d82:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8001d84:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	a846      	add	r0, sp, #280	@ 0x118
 8001d8a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8001d8c:	f7ff f8d1 	bl	8000f32 <relay_setup>
  relay_setup(&light_uv, light_uv_output_a, light_uv_output_b);
 8001d90:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8001d92:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8001d94:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	a84f      	add	r0, sp, #316	@ 0x13c
 8001d9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001d9c:	f7ff f8c9 	bl	8000f32 <relay_setup>
  timer_buttons.msec = 100;
 8001da0:	4e3b      	ldr	r6, [pc, #236]	@ (8001e90 <main+0x280>)
 8001da2:	2364      	movs	r3, #100	@ 0x64
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001da4:	0031      	movs	r1, r6
 8001da6:	4f3b      	ldr	r7, [pc, #236]	@ (8001e94 <main+0x284>)
 8001da8:	3108      	adds	r1, #8
 8001daa:	2210      	movs	r2, #16
 8001dac:	4668      	mov	r0, sp
  timer_buttons.msec = 100;
 8001dae:	60b3      	str	r3, [r6, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001db0:	f001 ff48 	bl	8003c44 <memcpy>
 8001db4:	ce0c      	ldmia	r6!, {r2, r3}
 8001db6:	0038      	movs	r0, r7
 8001db8:	f7ff fb1e 	bl	80013f8 <deadline_timer_setup>
  button_input.pin = LAMP1_IN_Pin;
 8001dbc:	2380      	movs	r3, #128	@ 0x80
 8001dbe:	ae1b      	add	r6, sp, #108	@ 0x6c
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	80b3      	strh	r3, [r6, #4]
  button_setup(&button_light_1, button_input);
 8001dc4:	0029      	movs	r1, r5
 8001dc6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8001dc8:	4833      	ldr	r0, [pc, #204]	@ (8001e98 <main+0x288>)
  button_input.port = LAMP1_IN_GPIO_Port;
 8001dca:	951b      	str	r5, [sp, #108]	@ 0x6c
  button_setup(&button_light_1, button_input);
 8001dcc:	f7fe fcb9 	bl	8000742 <button_setup>
  button_input.pin = LAMP2_IN_Pin;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	80b3      	strh	r3, [r6, #4]
  button_setup(&button_light_2, button_input);
 8001dd4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8001dd6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8001dd8:	4830      	ldr	r0, [pc, #192]	@ (8001e9c <main+0x28c>)
 8001dda:	f7fe fcb2 	bl	8000742 <button_setup>
  button_input.pin = UV_IN_Pin;
 8001dde:	2304      	movs	r3, #4
 8001de0:	80b3      	strh	r3, [r6, #4]
  button_setup(&button_uv, button_input);
 8001de2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8001de4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8001de6:	482e      	ldr	r0, [pc, #184]	@ (8001ea0 <main+0x290>)
 8001de8:	f7fe fcab 	bl	8000742 <button_setup>
  signal_led_gpio.pin = LED_Pin;
 8001dec:	2002      	movs	r0, #2
 8001dee:	ab1d      	add	r3, sp, #116	@ 0x74
 8001df0:	8098      	strh	r0, [r3, #4]
  led_signal_setup(&signal_led, signal_led_gpio);
 8001df2:	0029      	movs	r1, r5
 8001df4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8001df6:	a830      	add	r0, sp, #192	@ 0xc0
  signal_led_gpio.port = LED_GPIO_Port;
 8001df8:	951d      	str	r5, [sp, #116]	@ 0x74
  led_signal_setup(&signal_led, signal_led_gpio);
 8001dfa:	f7fe fd1a 	bl	8000832 <led_signal_setup>
  deadline.sec = 0;
 8001dfe:	2200      	movs	r2, #0
  deadline.msec = 500;
 8001e00:	23fa      	movs	r3, #250	@ 0xfa
  deadline_timer_setup(&deadline_led_indicator, deadline);
 8001e02:	4d28      	ldr	r5, [pc, #160]	@ (8001ea4 <main+0x294>)
 8001e04:	491e      	ldr	r1, [pc, #120]	@ (8001e80 <main+0x270>)
  deadline.msec = 500;
 8001e06:	005b      	lsls	r3, r3, #1
  deadline.sec = 0;
 8001e08:	60e2      	str	r2, [r4, #12]
  deadline_timer_setup(&deadline_led_indicator, deadline);
 8001e0a:	4668      	mov	r0, sp
 8001e0c:	3210      	adds	r2, #16
  deadline.msec = 500;
 8001e0e:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_led_indicator, deadline);
 8001e10:	f001 ff18 	bl	8003c44 <memcpy>
 8001e14:	cc0c      	ldmia	r4!, {r2, r3}
 8001e16:	0028      	movs	r0, r5
 8001e18:	f7ff faee 	bl	80013f8 <deadline_timer_setup>
  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	a830      	add	r0, sp, #192	@ 0xc0
 8001e20:	f7fe fd12 	bl	8000848 <led_signal_type_selector>
    switch(switch_selector.value)
 8001e24:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
 8001e26:	4c20      	ldr	r4, [pc, #128]	@ (8001ea8 <main+0x298>)
 8001e28:	4920      	ldr	r1, [pc, #128]	@ (8001eac <main+0x29c>)
 8001e2a:	4a21      	ldr	r2, [pc, #132]	@ (8001eb0 <main+0x2a0>)
 8001e2c:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <main+0x2a4>)
 8001e2e:	2d02      	cmp	r5, #2
 8001e30:	d812      	bhi.n	8001e58 <main+0x248>
 8001e32:	27e1      	movs	r7, #225	@ 0xe1
 8001e34:	4e20      	ldr	r6, [pc, #128]	@ (8001eb8 <main+0x2a8>)
 8001e36:	4821      	ldr	r0, [pc, #132]	@ (8001ebc <main+0x2ac>)
 8001e38:	46b4      	mov	ip, r6
 8001e3a:	00bf      	lsls	r7, r7, #2
 8001e3c:	4e20      	ldr	r6, [pc, #128]	@ (8001ec0 <main+0x2b0>)
 8001e3e:	2d00      	cmp	r5, #0
 8001e40:	d042      	beq.n	8001ec8 <main+0x2b8>
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001e42:	2500      	movs	r5, #0
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001e44:	60a0      	str	r0, [r4, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001e46:	4660      	mov	r0, ip
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001e48:	608f      	str	r7, [r1, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8001e4a:	6085      	str	r5, [r0, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001e4c:	491d      	ldr	r1, [pc, #116]	@ (8001ec4 <main+0x2b4>)
 8001e4e:	e040      	b.n	8001ed2 <main+0x2c2>
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001e50:	7019      	strb	r1, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001e52:	70da      	strb	r2, [r3, #3]
		__NOP();
 8001e54:	46c0      	nop			@ (mov r8, r8)
	  break;
 8001e56:	e715      	b.n	8001c84 <main+0x74>
    switch(switch_selector.value)
 8001e58:	2d03      	cmp	r5, #3
 8001e5a:	d100      	bne.n	8001e5e <main+0x24e>
 8001e5c:	e120      	b.n	80020a0 <main+0x490>
    	  __NOP();
 8001e5e:	46c0      	nop			@ (mov r8, r8)
    	  break;
 8001e60:	e039      	b.n	8001ed6 <main+0x2c6>
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	200005d8 	.word	0x200005d8
 8001e68:	20000740 	.word	0x20000740
 8001e6c:	50000800 	.word	0x50000800
 8001e70:	50000400 	.word	0x50000400
 8001e74:	20000748 	.word	0x20000748
 8001e78:	20000728 	.word	0x20000728
 8001e7c:	200006c0 	.word	0x200006c0
 8001e80:	20000730 	.word	0x20000730
 8001e84:	20000658 	.word	0x20000658
 8001e88:	200005f0 	.word	0x200005f0
 8001e8c:	ffff8000 	.word	0xffff8000
 8001e90:	20000558 	.word	0x20000558
 8001e94:	20000570 	.word	0x20000570
 8001e98:	2000053c 	.word	0x2000053c
 8001e9c:	20000520 	.word	0x20000520
 8001ea0:	20000504 	.word	0x20000504
 8001ea4:	20000498 	.word	0x20000498
 8001ea8:	20000418 	.word	0x20000418
 8001eac:	20000288 	.word	0x20000288
 8001eb0:	20000308 	.word	0x20000308
 8001eb4:	20000208 	.word	0x20000208
 8001eb8:	20000390 	.word	0x20000390
 8001ebc:	000927c0 	.word	0x000927c0
 8001ec0:	00002710 	.word	0x00002710
 8001ec4:	00a4cb80 	.word	0x00a4cb80
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 8001ec8:	4665      	mov	r5, ip
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 8001eca:	608f      	str	r7, [r1, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 8001ecc:	49d5      	ldr	r1, [pc, #852]	@ (8002224 <main+0x614>)
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 8001ece:	60a0      	str	r0, [r4, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 8001ed0:	60a8      	str	r0, [r5, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001ed2:	6091      	str	r1, [r2, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8001ed4:	609e      	str	r6, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8001ed6:	0026      	movs	r6, r4
  light_1_state = MOTION_LIGHT_IDLE;
 8001ed8:	2500      	movs	r5, #0
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8001eda:	4bd3      	ldr	r3, [pc, #844]	@ (8002228 <main+0x618>)
 8001edc:	3608      	adds	r6, #8
 8001ede:	0031      	movs	r1, r6
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	4668      	mov	r0, sp
 8001ee4:	9308      	str	r3, [sp, #32]
 8001ee6:	f001 fead 	bl	8003c44 <memcpy>
 8001eea:	6822      	ldr	r2, [r4, #0]
 8001eec:	6863      	ldr	r3, [r4, #4]
 8001eee:	9808      	ldr	r0, [sp, #32]
 8001ef0:	f7ff fa82 	bl	80013f8 <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 8001ef4:	4bcd      	ldr	r3, [pc, #820]	@ (800222c <main+0x61c>)
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 8001ef6:	0031      	movs	r1, r6
  light_1_state = MOTION_LIGHT_IDLE;
 8001ef8:	701d      	strb	r5, [r3, #0]
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 8001efa:	4bcd      	ldr	r3, [pc, #820]	@ (8002230 <main+0x620>)
 8001efc:	2210      	movs	r2, #16
 8001efe:	4668      	mov	r0, sp
 8001f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f02:	f001 fe9f 	bl	8003c44 <memcpy>
 8001f06:	cc0c      	ldmia	r4!, {r2, r3}
 8001f08:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f0a:	f7ff fa75 	bl	80013f8 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 8001f0e:	4bc9      	ldr	r3, [pc, #804]	@ (8002234 <main+0x624>)
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 8001f10:	4cc9      	ldr	r4, [pc, #804]	@ (8002238 <main+0x628>)
  light_2_state = MOTION_LIGHT_IDLE;
 8001f12:	701d      	strb	r5, [r3, #0]
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 8001f14:	4dc9      	ldr	r5, [pc, #804]	@ (800223c <main+0x62c>)
 8001f16:	49ca      	ldr	r1, [pc, #808]	@ (8002240 <main+0x630>)
 8001f18:	2210      	movs	r2, #16
 8001f1a:	4668      	mov	r0, sp
 8001f1c:	f001 fe92 	bl	8003c44 <memcpy>
 8001f20:	cc0c      	ldmia	r4!, {r2, r3}
 8001f22:	0028      	movs	r0, r5
 8001f24:	f7ff fa68 	bl	80013f8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 8001f28:	4cc6      	ldr	r4, [pc, #792]	@ (8002244 <main+0x634>)
 8001f2a:	4fc7      	ldr	r7, [pc, #796]	@ (8002248 <main+0x638>)
 8001f2c:	49c7      	ldr	r1, [pc, #796]	@ (800224c <main+0x63c>)
 8001f2e:	2210      	movs	r2, #16
 8001f30:	4668      	mov	r0, sp
 8001f32:	f001 fe87 	bl	8003c44 <memcpy>
 8001f36:	cc0c      	ldmia	r4!, {r2, r3}
 8001f38:	0038      	movs	r0, r7
 8001f3a:	f7ff fa5d 	bl	80013f8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 8001f3e:	4cc4      	ldr	r4, [pc, #784]	@ (8002250 <main+0x640>)
 8001f40:	4ec4      	ldr	r6, [pc, #784]	@ (8002254 <main+0x644>)
 8001f42:	49c5      	ldr	r1, [pc, #788]	@ (8002258 <main+0x648>)
 8001f44:	2210      	movs	r2, #16
 8001f46:	4668      	mov	r0, sp
 8001f48:	f001 fe7c 	bl	8003c44 <memcpy>
 8001f4c:	cc0c      	ldmia	r4!, {r2, r3}
 8001f4e:	0030      	movs	r0, r6
 8001f50:	f7ff fa52 	bl	80013f8 <deadline_timer_setup>
  deadline.msec = 5000;
 8001f54:	4cc1      	ldr	r4, [pc, #772]	@ (800225c <main+0x64c>)
 8001f56:	4bc2      	ldr	r3, [pc, #776]	@ (8002260 <main+0x650>)
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8001f58:	0021      	movs	r1, r4
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	3108      	adds	r1, #8
 8001f5e:	4668      	mov	r0, sp
  deadline.msec = 5000;
 8001f60:	60a3      	str	r3, [r4, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8001f62:	f001 fe6f 	bl	8003c44 <memcpy>
 8001f66:	cc0c      	ldmia	r4!, {r2, r3}
 8001f68:	48be      	ldr	r0, [pc, #760]	@ (8002264 <main+0x654>)
 8001f6a:	f7ff fa45 	bl	80013f8 <deadline_timer_setup>
  if(switch_selector.value == MOTION_SWITCH_MODE_3)
 8001f6e:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d151      	bne.n	8002018 <main+0x408>
	  lights.relay = &light_2;
 8001f74:	ab46      	add	r3, sp, #280	@ 0x118
 8001f76:	9329      	str	r3, [sp, #164]	@ 0xa4
	  lights.deadline_timer = &deadline_timer_light_1;
 8001f78:	4bbb      	ldr	r3, [pc, #748]	@ (8002268 <main+0x658>)
	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 8001f7a:	4abc      	ldr	r2, [pc, #752]	@ (800226c <main+0x65c>)
	  lights.deadline_timer = &deadline_timer_light_1;
 8001f7c:	932a      	str	r3, [sp, #168]	@ 0xa8
	  fan.relay = &light_uv;
 8001f7e:	ab4f      	add	r3, sp, #316	@ 0x13c
 8001f80:	932b      	str	r3, [sp, #172]	@ 0xac
	  fan.deadline_timer = &deadline_timer_light_2;
 8001f82:	4bbb      	ldr	r3, [pc, #748]	@ (8002270 <main+0x660>)
	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 8001f84:	9200      	str	r2, [sp, #0]
	  fan.deadline_timer = &deadline_timer_light_2;
 8001f86:	932c      	str	r3, [sp, #176]	@ 0xb0
	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 8001f88:	aa2b      	add	r2, sp, #172	@ 0xac
 8001f8a:	4bba      	ldr	r3, [pc, #744]	@ (8002274 <main+0x664>)
 8001f8c:	a929      	add	r1, sp, #164	@ 0xa4
 8001f8e:	a837      	add	r0, sp, #220	@ 0xdc
 8001f90:	f7ff f8a6 	bl	80010e0 <nutone_setup>
	  button_white.button = &button_light_1;
 8001f94:	4bb8      	ldr	r3, [pc, #736]	@ (8002278 <main+0x668>)
	  led_signal_hand.led_signal = &signal_led;
 8001f96:	ac27      	add	r4, sp, #156	@ 0x9c
	  button_white.button = &button_light_1;
 8001f98:	9321      	str	r3, [sp, #132]	@ 0x84
	  button_white.btn_timer = &deadline_buttons;
 8001f9a:	4bb8      	ldr	r3, [pc, #736]	@ (800227c <main+0x66c>)
	  button_fan.button = &button_light_2;
 8001f9c:	49b8      	ldr	r1, [pc, #736]	@ (8002280 <main+0x670>)
	  button_white.btn_timer = &deadline_buttons;
 8001f9e:	9322      	str	r3, [sp, #136]	@ 0x88
	  button_fan.btn_timer = &deadline_buttons;
 8001fa0:	9320      	str	r3, [sp, #128]	@ 0x80
	  button_vyv.btn_timer = &deadline_buttons;
 8001fa2:	9324      	str	r3, [sp, #144]	@ 0x90
	  motion_sensor_hand.motion_sensor = &motion_sensor;
 8001fa4:	4bb7      	ldr	r3, [pc, #732]	@ (8002284 <main+0x674>)
	  button_vyv.button = &button_uv;
 8001fa6:	48b8      	ldr	r0, [pc, #736]	@ (8002288 <main+0x678>)
	  motion_sensor_hand.motion_sensor = &motion_sensor;
 8001fa8:	9325      	str	r3, [sp, #148]	@ 0x94
	  led_signal_hand.led_signal = &signal_led;
 8001faa:	ab30      	add	r3, sp, #192	@ 0xc0
 8001fac:	9327      	str	r3, [sp, #156]	@ 0x9c
	  led_signal_hand.led_signal_timer = &deadline_led_indicator;
 8001fae:	4bb7      	ldr	r3, [pc, #732]	@ (800228c <main+0x67c>)
	  button_white.button = &button_light_1;
 8001fb0:	aa21      	add	r2, sp, #132	@ 0x84
	  led_signal_hand.led_signal_timer = &deadline_led_indicator;
 8001fb2:	6063      	str	r3, [r4, #4]
	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 8001fb4:	9b08      	ldr	r3, [sp, #32]
	  button_fan.button = &button_light_2;
 8001fb6:	911f      	str	r1, [sp, #124]	@ 0x7c
	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 8001fb8:	9304      	str	r3, [sp, #16]
 8001fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
	  button_vyv.button = &button_uv;
 8001fbc:	a923      	add	r1, sp, #140	@ 0x8c
 8001fbe:	9023      	str	r0, [sp, #140]	@ 0x8c
	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 8001fc0:	9505      	str	r5, [sp, #20]
 8001fc2:	9303      	str	r3, [sp, #12]
 8001fc4:	9101      	str	r1, [sp, #4]
 8001fc6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001fc8:	a937      	add	r1, sp, #220	@ 0xdc
 8001fca:	9200      	str	r2, [sp, #0]
 8001fcc:	48b0      	ldr	r0, [pc, #704]	@ (8002290 <main+0x680>)
 8001fce:	aa25      	add	r2, sp, #148	@ 0x94
 8001fd0:	9402      	str	r4, [sp, #8]
 8001fd2:	9707      	str	r7, [sp, #28]
 8001fd4:	9606      	str	r6, [sp, #24]
 8001fd6:	f7fe f94b 	bl	8000270 <nutone_app_config>
	  led_signal_start(&signal_led);
 8001fda:	a830      	add	r0, sp, #192	@ 0xc0
 8001fdc:	f7fe fc94 	bl	8000908 <led_signal_start>
	  signal_led.type = LED_SIGNAL_BLINK;
 8001fe0:	21c1      	movs	r1, #193	@ 0xc1
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	aa02      	add	r2, sp, #8
 8001fe6:	1852      	adds	r2, r2, r1
	  relay_off(lights.relay);
 8001fe8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
	  signal_led.type = LED_SIGNAL_BLINK;
 8001fea:	7013      	strb	r3, [r2, #0]
	  relay_off(lights.relay);
 8001fec:	f7fe ff82 	bl	8000ef4 <relay_off>
	  HAL_Delay(100);
 8001ff0:	2064      	movs	r0, #100	@ 0x64
 8001ff2:	f000 fcb3 	bl	800295c <HAL_Delay>
	  relay_deenergize(lights.relay);
 8001ff6:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 8001ff8:	f7fe ff8b 	bl	8000f12 <relay_deenergize>
 8001ffc:	250a      	movs	r5, #10
		  HAL_Delay(1300);
 8001ffe:	48a5      	ldr	r0, [pc, #660]	@ (8002294 <main+0x684>)
	  for(idx = 0; idx < 10; idx++)
 8002000:	3d01      	subs	r5, #1
		  HAL_Delay(1300);
 8002002:	f000 fcab 	bl	800295c <HAL_Delay>
	  for(idx = 0; idx < 10; idx++)
 8002006:	b2ed      	uxtb	r5, r5
		  led_signal_fsm(led_signal_hand.led_signal);
 8002008:	6820      	ldr	r0, [r4, #0]
 800200a:	f7fe fc66 	bl	80008da <led_signal_fsm>
	  for(idx = 0; idx < 10; idx++)
 800200e:	2d00      	cmp	r5, #0
 8002010:	d1f5      	bne.n	8001ffe <main+0x3ee>
	  led_signal_stop(led_signal_hand.led_signal);
 8002012:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8002014:	f7fe fc7c 	bl	8000910 <led_signal_stop>
	HAL_TIM_Base_Start_IT(&htim1);
 8002018:	489f      	ldr	r0, [pc, #636]	@ (8002298 <main+0x688>)
 800201a:	f001 f997 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 800201e:	489f      	ldr	r0, [pc, #636]	@ (800229c <main+0x68c>)
 8002020:	f001 f994 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 8002024:	489e      	ldr	r0, [pc, #632]	@ (80022a0 <main+0x690>)
 8002026:	f001 f991 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2016      	movs	r0, #22
 800202e:	0011      	movs	r1, r2
 8002030:	f000 fcae 	bl	8002990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002034:	2016      	movs	r0, #22
 8002036:	f000 fcd5 	bl	80029e4 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim17);
 800203a:	489a      	ldr	r0, [pc, #616]	@ (80022a4 <main+0x694>)
 800203c:	f001 f986 	bl	800334c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 8002040:	2201      	movs	r2, #1
 8002042:	2100      	movs	r1, #0
 8002044:	2007      	movs	r0, #7
 8002046:	f000 fca3 	bl	8002990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800204a:	2007      	movs	r0, #7
 800204c:	f000 fcca 	bl	80029e4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2103      	movs	r1, #3
 8002054:	2006      	movs	r0, #6
 8002056:	f000 fc9b 	bl	8002990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800205a:	2006      	movs	r0, #6
 800205c:	f000 fcc2 	bl	80029e4 <HAL_NVIC_EnableIRQ>
  relay_ask_off_pulse_fsm(&light_1);
 8002060:	a83d      	add	r0, sp, #244	@ 0xf4
 8002062:	f7fe ff14 	bl	8000e8e <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_2);
 8002066:	a846      	add	r0, sp, #280	@ 0x118
 8002068:	f7fe ff11 	bl	8000e8e <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_uv);
 800206c:	a84f      	add	r0, sp, #316	@ 0x13c
 800206e:	f7fe ff0e 	bl	8000e8e <relay_ask_off_pulse_fsm>
  uv_state = MOTION_LIGHT_UV_IDLE;
 8002072:	2300      	movs	r3, #0
  abort_uv = MOTION_ABORT_FALSE;
 8002074:	2101      	movs	r1, #1
  uv_state = MOTION_LIGHT_UV_IDLE;
 8002076:	4a8c      	ldr	r2, [pc, #560]	@ (80022a8 <main+0x698>)
  led_signal_stop(&signal_led);
 8002078:	a830      	add	r0, sp, #192	@ 0xc0
  uv_state = MOTION_LIGHT_UV_IDLE;
 800207a:	7013      	strb	r3, [r2, #0]
  abort_uv = MOTION_ABORT_FALSE;
 800207c:	4a8b      	ldr	r2, [pc, #556]	@ (80022ac <main+0x69c>)
 800207e:	7011      	strb	r1, [r2, #0]
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 8002080:	4a8b      	ldr	r2, [pc, #556]	@ (80022b0 <main+0x6a0>)
 8002082:	7013      	strb	r3, [r2, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 8002084:	4a8b      	ldr	r2, [pc, #556]	@ (80022b4 <main+0x6a4>)
 8002086:	7013      	strb	r3, [r2, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 8002088:	4a8b      	ldr	r2, [pc, #556]	@ (80022b8 <main+0x6a8>)
 800208a:	7013      	strb	r3, [r2, #0]
  led_signal_stop(&signal_led);
 800208c:	f7fe fc40 	bl	8000910 <led_signal_stop>
	  switch(switch_selector.value)
 8002090:	982f      	ldr	r0, [sp, #188]	@ 0xbc
 8002092:	2803      	cmp	r0, #3
 8002094:	d900      	bls.n	8002098 <main+0x488>
 8002096:	e0c2      	b.n	800221e <main+0x60e>
 8002098:	f7fe f840 	bl	800011c <__gnu_thumb1_case_uqi>
 800209c:	bdb9750f 	.word	0xbdb9750f
		  timer_motion_light_2.msec = SURFACESHIELD_LAMP2_ON_TIME_MS;
 80020a0:	2500      	movs	r5, #0
    	  timer_motion_light_1.msec = SURFACESHIELD_LAMP1_ON_TIME_MS;
 80020a2:	4886      	ldr	r0, [pc, #536]	@ (80022bc <main+0x6ac>)
 80020a4:	60a0      	str	r0, [r4, #8]
		  timer_motion_light_2.msec = SURFACESHIELD_LAMP2_ON_TIME_MS;
 80020a6:	4886      	ldr	r0, [pc, #536]	@ (80022c0 <main+0x6b0>)
 80020a8:	6085      	str	r5, [r0, #8]
		  timer_motion_uv_safe.msec = SURFACESHIELD_LAMP_UV_SAFETY_TIME_MS;
 80020aa:	20e1      	movs	r0, #225	@ 0xe1
 80020ac:	0080      	lsls	r0, r0, #2
 80020ae:	6088      	str	r0, [r1, #8]
		  timer_motion_uv.msec = SURFACESHIELD_LAMP_UV_ON_TIME_MS;
 80020b0:	4984      	ldr	r1, [pc, #528]	@ (80022c4 <main+0x6b4>)
 80020b2:	6091      	str	r1, [r2, #8]
		  timer_motion_uv_timeout.msec = SURFACESHIELD_LAMP_UV_TIMEOUT_MS;
 80020b4:	4a84      	ldr	r2, [pc, #528]	@ (80022c8 <main+0x6b8>)
 80020b6:	609a      	str	r2, [r3, #8]
    	  __NOP();
 80020b8:	e6d1      	b.n	8001e5e <main+0x24e>
			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 80020ba:	4a7c      	ldr	r2, [pc, #496]	@ (80022ac <main+0x69c>)
 80020bc:	4d6e      	ldr	r5, [pc, #440]	@ (8002278 <main+0x668>)
 80020be:	9204      	str	r2, [sp, #16]
 80020c0:	4a7d      	ldr	r2, [pc, #500]	@ (80022b8 <main+0x6a8>)
 80020c2:	4c70      	ldr	r4, [pc, #448]	@ (8002284 <main+0x674>)
 80020c4:	9203      	str	r2, [sp, #12]
 80020c6:	4a7b      	ldr	r2, [pc, #492]	@ (80022b4 <main+0x6a4>)
 80020c8:	4f79      	ldr	r7, [pc, #484]	@ (80022b0 <main+0x6a0>)
 80020ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80020cc:	9202      	str	r2, [sp, #8]
 80020ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002288 <main+0x678>)
 80020d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002280 <main+0x670>)
 80020d2:	0020      	movs	r0, r4
 80020d4:	4969      	ldr	r1, [pc, #420]	@ (800227c <main+0x66c>)
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	9701      	str	r7, [sp, #4]
 80020da:	002a      	movs	r2, r5
 80020dc:	9308      	str	r3, [sp, #32]
 80020de:	f7ff fbb9 	bl	8001854 <events_detection_uv_waits>
			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80020e2:	4a52      	ldr	r2, [pc, #328]	@ (800222c <main+0x61c>)
 80020e4:	ae3d      	add	r6, sp, #244	@ 0xf4
 80020e6:	0029      	movs	r1, r5
 80020e8:	0030      	movs	r0, r6
 80020ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <main+0x618>)
 80020ec:	9200      	str	r2, [sp, #0]
 80020ee:	9701      	str	r7, [sp, #4]
 80020f0:	0022      	movs	r2, r4
 80020f2:	f7ff fbf2 	bl	80018da <motion_light_control_fsm>
			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 80020f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80020f8:	ad46      	add	r5, sp, #280	@ 0x118
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002234 <main+0x624>)
 80020fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002230 <main+0x620>)
 8002100:	9200      	str	r2, [sp, #0]
 8002102:	0028      	movs	r0, r5
 8002104:	0022      	movs	r2, r4
 8002106:	9908      	ldr	r1, [sp, #32]
 8002108:	f7ff fbe7 	bl	80018da <motion_light_control_fsm>
			  if((light_1.relay_status == RELAY_ON) ||
 800210c:	7833      	ldrb	r3, [r6, #0]
				  wait = MOTION_UV_WAIT_TRUE;
 800210e:	2200      	movs	r2, #0
			  if((light_1.relay_status == RELAY_ON) ||
 8002110:	2b01      	cmp	r3, #1
 8002112:	d004      	beq.n	800211e <main+0x50e>
 8002114:	782a      	ldrb	r2, [r5, #0]
 8002116:	3a01      	subs	r2, #1
 8002118:	1e53      	subs	r3, r2, #1
 800211a:	419a      	sbcs	r2, r3
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <main+0x6bc>)
			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8002120:	a830      	add	r0, sp, #192	@ 0xc0
 8002122:	701a      	strb	r2, [r3, #0]
 8002124:	9206      	str	r2, [sp, #24]
 8002126:	4a61      	ldr	r2, [pc, #388]	@ (80022ac <main+0x69c>)
 8002128:	4b44      	ldr	r3, [pc, #272]	@ (800223c <main+0x62c>)
 800212a:	9205      	str	r2, [sp, #20]
 800212c:	4a62      	ldr	r2, [pc, #392]	@ (80022b8 <main+0x6a8>)
 800212e:	4956      	ldr	r1, [pc, #344]	@ (8002288 <main+0x678>)
 8002130:	9204      	str	r2, [sp, #16]
 8002132:	4a5d      	ldr	r2, [pc, #372]	@ (80022a8 <main+0x698>)
 8002134:	9007      	str	r0, [sp, #28]
 8002136:	9203      	str	r2, [sp, #12]
 8002138:	4a4a      	ldr	r2, [pc, #296]	@ (8002264 <main+0x654>)
 800213a:	9202      	str	r2, [sp, #8]
 800213c:	4a45      	ldr	r2, [pc, #276]	@ (8002254 <main+0x644>)
 800213e:	9201      	str	r2, [sp, #4]
 8002140:	4a41      	ldr	r2, [pc, #260]	@ (8002248 <main+0x638>)
 8002142:	9200      	str	r2, [sp, #0]
 8002144:	0022      	movs	r2, r4
			  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 8002146:	2423      	movs	r4, #35	@ 0x23
			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8002148:	a84f      	add	r0, sp, #316	@ 0x13c
 800214a:	f7ff fc47 	bl	80019dc <motion_uv_ctrl_wait_fsm>
			  output_fsm_ctrl(&light_1, &deadline_timer_light_1);
 800214e:	0030      	movs	r0, r6
 8002150:	4945      	ldr	r1, [pc, #276]	@ (8002268 <main+0x658>)
 8002152:	f7ff f9c1 	bl	80014d8 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_2, &deadline_timer_light_2);
 8002156:	4946      	ldr	r1, [pc, #280]	@ (8002270 <main+0x660>)
 8002158:	a846      	add	r0, sp, #280	@ 0x118
 800215a:	f7ff f9bd 	bl	80014d8 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_uv, &deadline_timer_uv);
 800215e:	495c      	ldr	r1, [pc, #368]	@ (80022d0 <main+0x6c0>)
 8002160:	a84f      	add	r0, sp, #316	@ 0x13c
 8002162:	f7ff f9b9 	bl	80014d8 <output_fsm_ctrl>
			  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 8002166:	ab02      	add	r3, sp, #8
 8002168:	18e4      	adds	r4, r4, r3
 800216a:	0021      	movs	r1, r4
 800216c:	4847      	ldr	r0, [pc, #284]	@ (800228c <main+0x67c>)
 800216e:	f7ff f999 	bl	80014a4 <deadline_timer_check>
			  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8002172:	7823      	ldrb	r3, [r4, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d18b      	bne.n	8002090 <main+0x480>
				  led_signal_fsm(&signal_led);
 8002178:	a830      	add	r0, sp, #192	@ 0xc0
 800217a:	f7fe fbae 	bl	80008da <led_signal_fsm>
				  deadline_timer_set_initial_time(&deadline_led_indicator);
 800217e:	4843      	ldr	r0, [pc, #268]	@ (800228c <main+0x67c>)
 8002180:	f7ff f95b 	bl	800143a <deadline_timer_set_initial_time>
 8002184:	e784      	b.n	8002090 <main+0x480>
			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8002186:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <main+0x69c>)
 8002188:	4d3b      	ldr	r5, [pc, #236]	@ (8002278 <main+0x668>)
 800218a:	9304      	str	r3, [sp, #16]
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <main+0x6a8>)
 800218e:	4c3c      	ldr	r4, [pc, #240]	@ (8002280 <main+0x670>)
 8002190:	9303      	str	r3, [sp, #12]
 8002192:	4b48      	ldr	r3, [pc, #288]	@ (80022b4 <main+0x6a4>)
 8002194:	4f3b      	ldr	r7, [pc, #236]	@ (8002284 <main+0x674>)
 8002196:	9302      	str	r3, [sp, #8]
 8002198:	4b45      	ldr	r3, [pc, #276]	@ (80022b0 <main+0x6a0>)
 800219a:	002a      	movs	r2, r5
 800219c:	9308      	str	r3, [sp, #32]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <main+0x678>)
 80021a2:	0038      	movs	r0, r7
 80021a4:	4935      	ldr	r1, [pc, #212]	@ (800227c <main+0x66c>)
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	0023      	movs	r3, r4
 80021aa:	f7ff fb53 	bl	8001854 <events_detection_uv_waits>
			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80021ae:	9a08      	ldr	r2, [sp, #32]
 80021b0:	ae3d      	add	r6, sp, #244	@ 0xf4
 80021b2:	9201      	str	r2, [sp, #4]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <main+0x61c>)
 80021b6:	0029      	movs	r1, r5
 80021b8:	0030      	movs	r0, r6
 80021ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <main+0x618>)
 80021bc:	9200      	str	r2, [sp, #0]
			  direct_light_control_fsm(&light_2, &button_light_2,
 80021be:	ad46      	add	r5, sp, #280	@ 0x118
			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80021c0:	003a      	movs	r2, r7
 80021c2:	f7ff fb8a 	bl	80018da <motion_light_control_fsm>
			  direct_light_control_fsm(&light_2, &button_light_2,
 80021c6:	4b43      	ldr	r3, [pc, #268]	@ (80022d4 <main+0x6c4>)
 80021c8:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <main+0x620>)
 80021ca:	0021      	movs	r1, r4
 80021cc:	0028      	movs	r0, r5
 80021ce:	f7ff fcd1 	bl	8001b74 <direct_light_control_fsm>
			  if((light_1.relay_status == RELAY_ON) ||
 80021d2:	7833      	ldrb	r3, [r6, #0]
				  wait = MOTION_UV_WAIT_TRUE;
 80021d4:	2200      	movs	r2, #0
			  if((light_1.relay_status == RELAY_ON) ||
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d004      	beq.n	80021e4 <main+0x5d4>
 80021da:	782a      	ldrb	r2, [r5, #0]
 80021dc:	3a01      	subs	r2, #1
 80021de:	1e53      	subs	r3, r2, #1
 80021e0:	419a      	sbcs	r2, r3
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <main+0x6bc>)
			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 80021e6:	a830      	add	r0, sp, #192	@ 0xc0
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	9206      	str	r2, [sp, #24]
 80021ec:	4a2f      	ldr	r2, [pc, #188]	@ (80022ac <main+0x69c>)
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <main+0x62c>)
 80021f0:	9205      	str	r2, [sp, #20]
 80021f2:	4a31      	ldr	r2, [pc, #196]	@ (80022b8 <main+0x6a8>)
 80021f4:	4924      	ldr	r1, [pc, #144]	@ (8002288 <main+0x678>)
 80021f6:	9204      	str	r2, [sp, #16]
 80021f8:	4a2b      	ldr	r2, [pc, #172]	@ (80022a8 <main+0x698>)
 80021fa:	9007      	str	r0, [sp, #28]
 80021fc:	9203      	str	r2, [sp, #12]
 80021fe:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <main+0x654>)
 8002200:	9202      	str	r2, [sp, #8]
 8002202:	4a14      	ldr	r2, [pc, #80]	@ (8002254 <main+0x644>)
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	4a10      	ldr	r2, [pc, #64]	@ (8002248 <main+0x638>)
 8002208:	9200      	str	r2, [sp, #0]
 800220a:	003a      	movs	r2, r7
 800220c:	e79b      	b.n	8002146 <main+0x536>
			  signal_led.type = LED_SIGNAL_BLINK;
 800220e:	2202      	movs	r2, #2
 8002210:	ab30      	add	r3, sp, #192	@ 0xc0
 8002212:	725a      	strb	r2, [r3, #9]
			  break;
 8002214:	e73c      	b.n	8002090 <main+0x480>
			  nutone_app_process(&nutone_app_hand);
 8002216:	481e      	ldr	r0, [pc, #120]	@ (8002290 <main+0x680>)
 8002218:	f7fe fa87 	bl	800072a <nutone_app_process>
			  break;
 800221c:	e738      	b.n	8002090 <main+0x480>
			  __NOP();
 800221e:	46c0      	nop			@ (mov r8, r8)
			  break;
 8002220:	e736      	b.n	8002090 <main+0x480>
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	00124f80 	.word	0x00124f80
 8002228:	20000430 	.word	0x20000430
 800222c:	20000410 	.word	0x20000410
 8002230:	200003a8 	.word	0x200003a8
 8002234:	20000389 	.word	0x20000389
 8002238:	20000308 	.word	0x20000308
 800223c:	20000320 	.word	0x20000320
 8002240:	20000310 	.word	0x20000310
 8002244:	20000288 	.word	0x20000288
 8002248:	200002a0 	.word	0x200002a0
 800224c:	20000290 	.word	0x20000290
 8002250:	20000208 	.word	0x20000208
 8002254:	20000220 	.word	0x20000220
 8002258:	20000210 	.word	0x20000210
 800225c:	20000728 	.word	0x20000728
 8002260:	00001388 	.word	0x00001388
 8002264:	200001a0 	.word	0x200001a0
 8002268:	200006c0 	.word	0x200006c0
 800226c:	200000c8 	.word	0x200000c8
 8002270:	20000658 	.word	0x20000658
 8002274:	20000130 	.word	0x20000130
 8002278:	2000053c 	.word	0x2000053c
 800227c:	20000570 	.word	0x20000570
 8002280:	20000520 	.word	0x20000520
 8002284:	20000748 	.word	0x20000748
 8002288:	20000504 	.word	0x20000504
 800228c:	20000498 	.word	0x20000498
 8002290:	20000084 	.word	0x20000084
 8002294:	00000514 	.word	0x00000514
 8002298:	200008dc 	.word	0x200008dc
 800229c:	20000844 	.word	0x20000844
 80022a0:	200007f8 	.word	0x200007f8
 80022a4:	200007ac 	.word	0x200007ac
 80022a8:	20000198 	.word	0x20000198
 80022ac:	20000009 	.word	0x20000009
 80022b0:	20000502 	.word	0x20000502
 80022b4:	20000501 	.word	0x20000501
 80022b8:	20000500 	.word	0x20000500
 80022bc:	000927c0 	.word	0x000927c0
 80022c0:	20000390 	.word	0x20000390
 80022c4:	00a4cb80 	.word	0x00a4cb80
 80022c8:	00002710 	.word	0x00002710
 80022cc:	20000008 	.word	0x20000008
 80022d0:	200005f0 	.word	0x200005f0
 80022d4:	20000388 	.word	0x20000388

080022d8 <HAL_TIM_PeriodElapsedCallback>:
	if (htim == &htim17)
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_TIM_PeriodElapsedCallback+0x80>)
{
 80022da:	b510      	push	{r4, lr}
 80022dc:	0004      	movs	r4, r0
	if (htim == &htim17)
 80022de:	4298      	cmp	r0, r3
 80022e0:	d104      	bne.n	80022ec <HAL_TIM_PeriodElapsedCallback+0x14>
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022e4:	481e      	ldr	r0, [pc, #120]	@ (8002360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80022e6:	7919      	ldrb	r1, [r3, #4]
 80022e8:	f7fe fd02 	bl	8000cf0 <pyd1598_dl_readout_fsm>
	if (htim == &htim14)
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80022ee:	429c      	cmp	r4, r3
 80022f0:	d104      	bne.n	80022fc <HAL_TIM_PeriodElapsedCallback+0x24>
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 80022f2:	481a      	ldr	r0, [pc, #104]	@ (800235c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80022f4:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 80022f6:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80022f8:	f7fe fc49 	bl	8000b8e <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim16)
 80022fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80022fe:	429c      	cmp	r4, r3
 8002300:	d129      	bne.n	8002356 <HAL_TIM_PeriodElapsedCallback+0x7e>
		deadline_timer_count(&deadline_timer_light_1);
 8002302:	481a      	ldr	r0, [pc, #104]	@ (800236c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002304:	f7ff f8b6 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8002308:	4819      	ldr	r0, [pc, #100]	@ (8002370 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800230a:	f7ff f8b3 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 800230e:	4819      	ldr	r0, [pc, #100]	@ (8002374 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002310:	f7ff f8b0 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8002314:	4818      	ldr	r0, [pc, #96]	@ (8002378 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002316:	f7ff f8ad 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_1);
 800231a:	4818      	ldr	r0, [pc, #96]	@ (800237c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800231c:	f7ff f8aa 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8002320:	4817      	ldr	r0, [pc, #92]	@ (8002380 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002322:	f7ff f8a7 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8002326:	4817      	ldr	r0, [pc, #92]	@ (8002384 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002328:	f7ff f8a4 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 800232c:	4816      	ldr	r0, [pc, #88]	@ (8002388 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800232e:	f7ff f8a1 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_led_indicator);
 8002332:	4816      	ldr	r0, [pc, #88]	@ (800238c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002334:	f7ff f89e 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_timeout);
 8002338:	4815      	ldr	r0, [pc, #84]	@ (8002390 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800233a:	f7ff f89b 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 800233e:	4815      	ldr	r0, [pc, #84]	@ (8002394 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002340:	f7ff f898 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&ctrl_timer);
 8002344:	4814      	ldr	r0, [pc, #80]	@ (8002398 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002346:	f7ff f895 	bl	8001474 <deadline_timer_count>
		deadline_timer_count(&vyv_timeoff);
 800234a:	4814      	ldr	r0, [pc, #80]	@ (800239c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800234c:	f7ff f892 	bl	8001474 <deadline_timer_count>
		deadline_timer_increment(&general_clock);
 8002350:	4813      	ldr	r0, [pc, #76]	@ (80023a0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002352:	f7ff f87b 	bl	800144c <deadline_timer_increment>
}
 8002356:	bd10      	pop	{r4, pc}
 8002358:	200007ac 	.word	0x200007ac
 800235c:	20000748 	.word	0x20000748
 8002360:	20000768 	.word	0x20000768
 8002364:	20000844 	.word	0x20000844
 8002368:	200007f8 	.word	0x200007f8
 800236c:	200006c0 	.word	0x200006c0
 8002370:	20000658 	.word	0x20000658
 8002374:	200005f0 	.word	0x200005f0
 8002378:	20000570 	.word	0x20000570
 800237c:	20000430 	.word	0x20000430
 8002380:	200003a8 	.word	0x200003a8
 8002384:	20000320 	.word	0x20000320
 8002388:	200002a0 	.word	0x200002a0
 800238c:	20000498 	.word	0x20000498
 8002390:	20000220 	.word	0x20000220
 8002394:	200001a0 	.word	0x200001a0
 8002398:	20000130 	.word	0x20000130
 800239c:	200000c8 	.word	0x200000c8
 80023a0:	200005d8 	.word	0x200005d8

080023a4 <HAL_GPIO_EXTI_Rising_Callback>:
{
 80023a4:	b510      	push	{r4, lr}
	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 80023a6:	4a19      	ldr	r2, [pc, #100]	@ (800240c <HAL_GPIO_EXTI_Rising_Callback+0x68>)
{
 80023a8:	0004      	movs	r4, r0
	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 80023aa:	8812      	ldrh	r2, [r2, #0]
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 80023ae:	4282      	cmp	r2, r0
 80023b0:	d12a      	bne.n	8002408 <HAL_GPIO_EXTI_Rising_Callback+0x64>
		motion_sensor.direct_link.start_fsm = true;
 80023b2:	2201      	movs	r2, #1
 80023b4:	3341      	adds	r3, #65	@ 0x41
 80023b6:	701a      	strb	r2, [r3, #0]
		TIM17->CNT = 0;
 80023b8:	2200      	movs	r2, #0
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
	if(GPIO_Pin == button_light_1.hardware_input.pin)
 80023be:	4816      	ldr	r0, [pc, #88]	@ (8002418 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 80023c0:	8983      	ldrh	r3, [r0, #12]
 80023c2:	42a3      	cmp	r3, r4
 80023c4:	d107      	bne.n	80023d6 <HAL_GPIO_EXTI_Rising_Callback+0x32>
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023c6:	7c83      	ldrb	r3, [r0, #18]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d104      	bne.n	80023d6 <HAL_GPIO_EXTI_Rising_Callback+0x32>
			button_positive_edge_detected(&button_light_1);
 80023cc:	f7fe f9cc 	bl	8000768 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 80023d0:	4812      	ldr	r0, [pc, #72]	@ (800241c <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 80023d2:	f7ff f832 	bl	800143a <deadline_timer_set_initial_time>
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 80023d6:	4812      	ldr	r0, [pc, #72]	@ (8002420 <HAL_GPIO_EXTI_Rising_Callback+0x7c>)
 80023d8:	8983      	ldrh	r3, [r0, #12]
 80023da:	42a3      	cmp	r3, r4
 80023dc:	d107      	bne.n	80023ee <HAL_GPIO_EXTI_Rising_Callback+0x4a>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023de:	7c83      	ldrb	r3, [r0, #18]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d104      	bne.n	80023ee <HAL_GPIO_EXTI_Rising_Callback+0x4a>
			button_positive_edge_detected(&button_light_2);
 80023e4:	f7fe f9c0 	bl	8000768 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 80023e8:	480c      	ldr	r0, [pc, #48]	@ (800241c <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 80023ea:	f7ff f826 	bl	800143a <deadline_timer_set_initial_time>
	if(GPIO_Pin == button_uv.hardware_input.pin)
 80023ee:	480d      	ldr	r0, [pc, #52]	@ (8002424 <HAL_GPIO_EXTI_Rising_Callback+0x80>)
 80023f0:	8983      	ldrh	r3, [r0, #12]
 80023f2:	42a3      	cmp	r3, r4
 80023f4:	d107      	bne.n	8002406 <HAL_GPIO_EXTI_Rising_Callback+0x62>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023f6:	7c83      	ldrb	r3, [r0, #18]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d104      	bne.n	8002406 <HAL_GPIO_EXTI_Rising_Callback+0x62>
			button_positive_edge_detected(&button_uv);
 80023fc:	f7fe f9b4 	bl	8000768 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002400:	4806      	ldr	r0, [pc, #24]	@ (800241c <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002402:	f7ff f81a 	bl	800143a <deadline_timer_set_initial_time>
}
 8002406:	bd10      	pop	{r4, pc}
		__NOP();
 8002408:	46c0      	nop			@ (mov r8, r8)
 800240a:	e7d8      	b.n	80023be <HAL_GPIO_EXTI_Rising_Callback+0x1a>
 800240c:	20000790 	.word	0x20000790
 8002410:	20000748 	.word	0x20000748
 8002414:	40014800 	.word	0x40014800
 8002418:	2000053c 	.word	0x2000053c
 800241c:	20000570 	.word	0x20000570
 8002420:	20000520 	.word	0x20000520
 8002424:	20000504 	.word	0x20000504

08002428 <HAL_GPIO_EXTI_Falling_Callback>:
{
 8002428:	b510      	push	{r4, lr}
 800242a:	0004      	movs	r4, r0
	if(GPIO_Pin == button_light_1.hardware_input.pin)
 800242c:	4812      	ldr	r0, [pc, #72]	@ (8002478 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800242e:	8983      	ldrh	r3, [r0, #12]
 8002430:	42a3      	cmp	r3, r4
 8002432:	d107      	bne.n	8002444 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002434:	7c83      	ldrb	r3, [r0, #18]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d104      	bne.n	8002444 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
			button_negative_edge_detected(&button_light_1);
 800243a:	f7fe f9a1 	bl	8000780 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 800243e:	480f      	ldr	r0, [pc, #60]	@ (800247c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002440:	f7fe fffb 	bl	800143a <deadline_timer_set_initial_time>
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002444:	480e      	ldr	r0, [pc, #56]	@ (8002480 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8002446:	8983      	ldrh	r3, [r0, #12]
 8002448:	42a3      	cmp	r3, r4
 800244a:	d107      	bne.n	800245c <HAL_GPIO_EXTI_Falling_Callback+0x34>
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800244c:	7c83      	ldrb	r3, [r0, #18]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d104      	bne.n	800245c <HAL_GPIO_EXTI_Falling_Callback+0x34>
			button_negative_edge_detected(&button_light_2);
 8002452:	f7fe f995 	bl	8000780 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002456:	4809      	ldr	r0, [pc, #36]	@ (800247c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002458:	f7fe ffef 	bl	800143a <deadline_timer_set_initial_time>
	if(GPIO_Pin == button_uv.hardware_input.pin)
 800245c:	4809      	ldr	r0, [pc, #36]	@ (8002484 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 800245e:	8983      	ldrh	r3, [r0, #12]
 8002460:	42a3      	cmp	r3, r4
 8002462:	d107      	bne.n	8002474 <HAL_GPIO_EXTI_Falling_Callback+0x4c>
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002464:	7c83      	ldrb	r3, [r0, #18]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d104      	bne.n	8002474 <HAL_GPIO_EXTI_Falling_Callback+0x4c>
			button_negative_edge_detected(&button_uv);
 800246a:	f7fe f989 	bl	8000780 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 800246e:	4803      	ldr	r0, [pc, #12]	@ (800247c <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8002470:	f7fe ffe3 	bl	800143a <deadline_timer_set_initial_time>
}
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	2000053c 	.word	0x2000053c
 800247c:	20000570 	.word	0x20000570
 8002480:	20000520 	.word	0x20000520
 8002484:	20000504 	.word	0x20000504

08002488 <Error_Handler>:
 8002488:	b672      	cpsid	i
  while (1)
 800248a:	e7fe      	b.n	800248a <Error_Handler+0x2>

0800248c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800248c:	b507      	push	{r0, r1, r2, lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2101      	movs	r1, #1
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_MspInit+0x34>)
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002492:	2008      	movs	r0, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002494:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002496:	430a      	orrs	r2, r1
 8002498:	641a      	str	r2, [r3, #64]	@ 0x40
 800249a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800249c:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a0:	9200      	str	r2, [sp, #0]
 80024a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024a6:	0549      	lsls	r1, r1, #21
 80024a8:	430a      	orrs	r2, r1
 80024aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ae:	400b      	ands	r3, r1
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9b01      	ldr	r3, [sp, #4]
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80024b4:	f000 fa64 	bl	8002980 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 80024b8:	2010      	movs	r0, #16
 80024ba:	f000 fa61 	bl	8002980 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024be:	bd07      	pop	{r0, r1, r2, pc}
 80024c0:	40021000 	.word	0x40021000

080024c4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024c4:	e7fe      	b.n	80024c4 <NMI_Handler>
	...

080024c8 <HardFault_Handler>:
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c8:	23c0      	movs	r3, #192	@ 0xc0
 80024ca:	2180      	movs	r1, #128	@ 0x80
 80024cc:	4a08      	ldr	r2, [pc, #32]	@ (80024f0 <HardFault_Handler+0x28>)
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	03c9      	lsls	r1, r1, #15
 80024d2:	50d1      	str	r1, [r2, r3]
 80024d4:	2180      	movs	r1, #128	@ 0x80
 80024d6:	50d1      	str	r1, [r2, r3]
 80024d8:	3940      	subs	r1, #64	@ 0x40
 80024da:	50d1      	str	r1, [r2, r3]
  __ASM volatile ("dsb 0xF":::"memory");
 80024dc:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e0:	4b04      	ldr	r3, [pc, #16]	@ (80024f4 <HardFault_Handler+0x2c>)
 80024e2:	4a05      	ldr	r2, [pc, #20]	@ (80024f8 <HardFault_Handler+0x30>)
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80024ea:	46c0      	nop			@ (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 80024ec:	e7fd      	b.n	80024ea <HardFault_Handler+0x22>
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	e000e100 	.word	0xe000e100
 80024f4:	e000ed00 	.word	0xe000ed00
 80024f8:	05fa0004 	.word	0x05fa0004

080024fc <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80024fe:	4770      	bx	lr

08002500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002500:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002502:	f000 fa19 	bl	8002938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002506:	bd10      	pop	{r4, pc}

08002508 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002508:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 800250a:	2004      	movs	r0, #4
 800250c:	f000 fbdc 	bl	8002cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 8002510:	2008      	movs	r0, #8
 8002512:	f000 fbd9 	bl	8002cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002516:	bd10      	pop	{r4, pc}

08002518 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002518:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 800251a:	2080      	movs	r0, #128	@ 0x80
 800251c:	f000 fbd4 	bl	8002cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 8002520:	2080      	movs	r0, #128	@ 0x80
 8002522:	0080      	lsls	r0, r0, #2
 8002524:	f000 fbd0 	bl	8002cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002528:	bd10      	pop	{r4, pc}
	...

0800252c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800252c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800252e:	4802      	ldr	r0, [pc, #8]	@ (8002538 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 8002530:	f000 ff3e 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002534:	bd10      	pop	{r4, pc}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	200008dc 	.word	0x200008dc

0800253c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
 800253c:	b510      	push	{r4, lr}
 800253e:	f7ff fff5 	bl	800252c <TIM1_BRK_UP_TRG_COM_IRQHandler>
 8002542:	bd10      	pop	{r4, pc}

08002544 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002544:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002546:	4802      	ldr	r0, [pc, #8]	@ (8002550 <TIM14_IRQHandler+0xc>)
 8002548:	f000 ff32 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800254c:	bd10      	pop	{r4, pc}
 800254e:	46c0      	nop			@ (mov r8, r8)
 8002550:	20000844 	.word	0x20000844

08002554 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002556:	4802      	ldr	r0, [pc, #8]	@ (8002560 <TIM16_IRQHandler+0xc>)
 8002558:	f000 ff2a 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800255c:	bd10      	pop	{r4, pc}
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	200007f8 	.word	0x200007f8

08002564 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002564:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002566:	4802      	ldr	r0, [pc, #8]	@ (8002570 <TIM17_IRQHandler+0xc>)
 8002568:	f000 ff22 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800256c:	bd10      	pop	{r4, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)
 8002570:	200007ac 	.word	0x200007ac

08002574 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	490b      	ldr	r1, [pc, #44]	@ (80025a4 <_sbrk+0x30>)
 8002576:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <_sbrk+0x34>)
{
 8002578:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800257a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	490b      	ldr	r1, [pc, #44]	@ (80025ac <_sbrk+0x38>)
{
 800257e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002580:	6808      	ldr	r0, [r1, #0]
 8002582:	2800      	cmp	r0, #0
 8002584:	d101      	bne.n	800258a <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8002586:	480a      	ldr	r0, [pc, #40]	@ (80025b0 <_sbrk+0x3c>)
 8002588:	6008      	str	r0, [r1, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	6808      	ldr	r0, [r1, #0]
 800258c:	18c3      	adds	r3, r0, r3
 800258e:	4293      	cmp	r3, r2
 8002590:	d906      	bls.n	80025a0 <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8002592:	f001 fb2b 	bl	8003bec <__errno>
 8002596:	230c      	movs	r3, #12
 8002598:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800259a:	2001      	movs	r0, #1
 800259c:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800259e:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80025a0:	600b      	str	r3, [r1, #0]
  return (void *)prev_heap_end;
 80025a2:	e7fc      	b.n	800259e <_sbrk+0x2a>
 80025a4:	00000400 	.word	0x00000400
 80025a8:	20001800 	.word	0x20001800
 80025ac:	200007a8 	.word	0x200007a8
 80025b0:	20000a78 	.word	0x20000a78

080025b4 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025b4:	2280      	movs	r2, #128	@ 0x80
 80025b6:	4b02      	ldr	r3, [pc, #8]	@ (80025c0 <SystemInit+0xc>)
 80025b8:	0512      	lsls	r2, r2, #20
 80025ba:	609a      	str	r2, [r3, #8]
#endif
}
 80025bc:	4770      	bx	lr
 80025be:	46c0      	nop			@ (mov r8, r8)
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80025c4:	b510      	push	{r4, lr}
 80025c6:	b088      	sub	sp, #32

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c8:	2210      	movs	r2, #16
 80025ca:	2100      	movs	r1, #0
 80025cc:	a804      	add	r0, sp, #16
 80025ce:	f001 faf3 	bl	8003bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d2:	220c      	movs	r2, #12
 80025d4:	2100      	movs	r1, #0
 80025d6:	a801      	add	r0, sp, #4
 80025d8:	f001 faee 	bl	8003bb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025dc:	4c16      	ldr	r4, [pc, #88]	@ (8002638 <MX_TIM1_Init+0x74>)
 80025de:	4b17      	ldr	r3, [pc, #92]	@ (800263c <MX_TIM1_Init+0x78>)
  htim1.Init.Prescaler = 48-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
 80025e0:	22fa      	movs	r2, #250	@ 0xfa
  htim1.Instance = TIM1;
 80025e2:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 48-1;
 80025e4:	232f      	movs	r3, #47	@ 0x2f
 80025e6:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	2300      	movs	r3, #0
  htim1.Init.Period = 1000;
 80025ea:	0092      	lsls	r2, r2, #2
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ec:	0020      	movs	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ee:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = 1000;
 80025f0:	60e2      	str	r2, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f2:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80025f4:	6163      	str	r3, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f6:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025f8:	f000 ffcc 	bl	8003594 <HAL_TIM_Base_Init>
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM1_Init+0x40>
  {
    Error_Handler();
 8002600:	f7ff ff42 	bl	8002488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002604:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002606:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002608:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800260a:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800260c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800260e:	f001 f8bd 	bl	800378c <HAL_TIM_ConfigClockSource>
 8002612:	2800      	cmp	r0, #0
 8002614:	d001      	beq.n	800261a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8002616:	f7ff ff37 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800261a:	2340      	movs	r3, #64	@ 0x40
 800261c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800261e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002620:	0020      	movs	r0, r4
 8002622:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002624:	9302      	str	r3, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002626:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002628:	f001 f9d6 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	2800      	cmp	r0, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8002630:	f7ff ff2a 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002634:	b008      	add	sp, #32
 8002636:	bd10      	pop	{r4, pc}
 8002638:	200008dc 	.word	0x200008dc
 800263c:	40012c00 	.word	0x40012c00

08002640 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002640:	b530      	push	{r4, r5, lr}
 8002642:	b091      	sub	sp, #68	@ 0x44

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002644:	2214      	movs	r2, #20
 8002646:	2100      	movs	r1, #0
 8002648:	a804      	add	r0, sp, #16
 800264a:	f001 fab5 	bl	8003bb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800264e:	220c      	movs	r2, #12
 8002650:	2100      	movs	r1, #0
 8002652:	a801      	add	r0, sp, #4
 8002654:	f001 fab0 	bl	8003bb8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002658:	221c      	movs	r2, #28
 800265a:	2100      	movs	r1, #0
 800265c:	a809      	add	r0, sp, #36	@ 0x24
 800265e:	f001 faab 	bl	8003bb8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002662:	4c23      	ldr	r4, [pc, #140]	@ (80026f0 <MX_TIM3_Init+0xb0>)
 8002664:	4b23      	ldr	r3, [pc, #140]	@ (80026f4 <MX_TIM3_Init+0xb4>)
  htim3.Init.Prescaler = 47;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 65535;
 8002666:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <MX_TIM3_Init+0xb8>)
  htim3.Instance = TIM3;
 8002668:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 47;
 800266a:	232f      	movs	r3, #47	@ 0x2f
 800266c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266e:	2300      	movs	r3, #0
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002670:	0020      	movs	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002672:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 65535;
 8002674:	60e2      	str	r2, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002676:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002678:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800267a:	f000 ff8b 	bl	8003594 <HAL_TIM_Base_Init>
 800267e:	2800      	cmp	r0, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM3_Init+0x46>
  {
    Error_Handler();
 8002682:	f7ff ff01 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8002686:	0020      	movs	r0, r4
 8002688:	f000 ffae 	bl	80035e8 <HAL_TIM_OC_Init>
 800268c:	2800      	cmp	r0, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002690:	f7ff fefa 	bl	8002488 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8002694:	2108      	movs	r1, #8
 8002696:	0020      	movs	r0, r4
 8002698:	f000 ffd0 	bl	800363c <HAL_TIM_OnePulse_Init>
 800269c:	2800      	cmp	r0, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80026a0:	f7ff fef2 	bl	8002488 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80026a4:	2500      	movs	r5, #0
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80026a6:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80026a8:	0020      	movs	r0, r4
 80026aa:	a904      	add	r1, sp, #16
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80026ac:	9504      	str	r5, [sp, #16]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80026ae:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80026b0:	f001 f96c 	bl	800398c <HAL_TIM_SlaveConfigSynchro>
 80026b4:	42a8      	cmp	r0, r5
 80026b6:	d001      	beq.n	80026bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80026b8:	f7ff fee6 	bl	8002488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026bc:	0020      	movs	r0, r4
 80026be:	a901      	add	r1, sp, #4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026c0:	9501      	str	r5, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c2:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026c4:	f001 f988 	bl	80039d8 <HAL_TIMEx_MasterConfigSynchronization>
 80026c8:	2800      	cmp	r0, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80026cc:	f7ff fedc 	bl	8002488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026d0:	2200      	movs	r2, #0
  sConfigOC.Pulse = 130;
 80026d2:	2382      	movs	r3, #130	@ 0x82
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	0020      	movs	r0, r4
 80026d6:	a909      	add	r1, sp, #36	@ 0x24
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026d8:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 130;
 80026da:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026dc:	920b      	str	r2, [sp, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026de:	920d      	str	r2, [sp, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e0:	f001 f816 	bl	8003710 <HAL_TIM_OC_ConfigChannel>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80026e8:	f7ff fece 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026ec:	b011      	add	sp, #68	@ 0x44
 80026ee:	bd30      	pop	{r4, r5, pc}
 80026f0:	20000890 	.word	0x20000890
 80026f4:	40000400 	.word	0x40000400
 80026f8:	0000ffff 	.word	0x0000ffff

080026fc <MX_TIM14_Init>:
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80026fc:	4809      	ldr	r0, [pc, #36]	@ (8002724 <MX_TIM14_Init+0x28>)
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <MX_TIM14_Init+0x2c>)
{
 8002700:	b510      	push	{r4, lr}
  htim14.Instance = TIM14;
 8002702:	6003      	str	r3, [r0, #0]
  htim14.Init.Prescaler = 48-1;
 8002704:	232f      	movs	r3, #47	@ 0x2f
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 145;
 8002706:	2291      	movs	r2, #145	@ 0x91
  htim14.Init.Prescaler = 48-1;
 8002708:	6043      	str	r3, [r0, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270a:	2300      	movs	r3, #0
  htim14.Init.Period = 145;
 800270c:	60c2      	str	r2, [r0, #12]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800270e:	6083      	str	r3, [r0, #8]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002710:	6103      	str	r3, [r0, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002712:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002714:	f000 ff3e 	bl	8003594 <HAL_TIM_Base_Init>
 8002718:	2800      	cmp	r0, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM14_Init+0x24>
  {
    Error_Handler();
 800271c:	f7ff feb4 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002720:	bd10      	pop	{r4, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	20000844 	.word	0x20000844
 8002728:	40002000 	.word	0x40002000

0800272c <MX_TIM16_Init>:
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800272c:	480a      	ldr	r0, [pc, #40]	@ (8002758 <MX_TIM16_Init+0x2c>)
 800272e:	4b0b      	ldr	r3, [pc, #44]	@ (800275c <MX_TIM16_Init+0x30>)
{
 8002730:	b510      	push	{r4, lr}
  htim16.Instance = TIM16;
 8002732:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48-1;
 8002734:	232f      	movs	r3, #47	@ 0x2f
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 1000;
 8002736:	22fa      	movs	r2, #250	@ 0xfa
  htim16.Init.Prescaler = 48-1;
 8002738:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	2300      	movs	r3, #0
  htim16.Init.Period = 1000;
 800273c:	0092      	lsls	r2, r2, #2
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273e:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 1000;
 8002740:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002742:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002744:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002748:	f000 ff24 	bl	8003594 <HAL_TIM_Base_Init>
 800274c:	2800      	cmp	r0, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM16_Init+0x28>
  {
    Error_Handler();
 8002750:	f7ff fe9a 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	200007f8 	.word	0x200007f8
 800275c:	40014400 	.word	0x40014400

08002760 <MX_TIM17_Init>:
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002760:	4809      	ldr	r0, [pc, #36]	@ (8002788 <MX_TIM17_Init+0x28>)
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <MX_TIM17_Init+0x2c>)
{
 8002764:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8002766:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 48-1;
 8002768:	232f      	movs	r3, #47	@ 0x2f
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim17.Init.Period = 130;
 800276a:	2282      	movs	r2, #130	@ 0x82
  htim17.Init.Prescaler = 48-1;
 800276c:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276e:	2300      	movs	r3, #0
  htim17.Init.Period = 130;
 8002770:	60c2      	str	r2, [r0, #12]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002772:	6083      	str	r3, [r0, #8]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002774:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8002776:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800277a:	f000 ff0b 	bl	8003594 <HAL_TIM_Base_Init>
 800277e:	2800      	cmp	r0, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM17_Init+0x26>
  {
    Error_Handler();
 8002782:	f7ff fe81 	bl	8002488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002786:	bd10      	pop	{r4, pc}
 8002788:	200007ac 	.word	0x200007ac
 800278c:	40014800 	.word	0x40014800

08002790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002790:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  if(tim_baseHandle->Instance==TIM1)
 8002792:	6803      	ldr	r3, [r0, #0]
 8002794:	4a33      	ldr	r2, [pc, #204]	@ (8002864 <HAL_TIM_Base_MspInit+0xd4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d11a      	bne.n	80027d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	4b32      	ldr	r3, [pc, #200]	@ (8002868 <HAL_TIM_Base_MspInit+0xd8>)
 800279e:	0109      	lsls	r1, r1, #4
 80027a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80027a2:	200d      	movs	r0, #13
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a4:	430a      	orrs	r2, r1
 80027a6:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ac:	400b      	ands	r3, r1
 80027ae:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80027b0:	0011      	movs	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027b2:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80027b4:	f000 f8ec 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80027b8:	200d      	movs	r0, #13
 80027ba:	f000 f913 	bl	80029e4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80027be:	2200      	movs	r2, #0
 80027c0:	200e      	movs	r0, #14
 80027c2:	0011      	movs	r1, r2
 80027c4:	f000 f8e4 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80027c8:	200e      	movs	r0, #14
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();

    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80027ca:	f000 f90b 	bl	80029e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80027ce:	e00b      	b.n	80027e8 <HAL_TIM_Base_MspInit+0x58>
  else if(tim_baseHandle->Instance==TIM3)
 80027d0:	4a26      	ldr	r2, [pc, #152]	@ (800286c <HAL_TIM_Base_MspInit+0xdc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d10a      	bne.n	80027ec <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027d6:	2102      	movs	r1, #2
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_TIM_Base_MspInit+0xd8>)
 80027da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027dc:	430a      	orrs	r2, r1
 80027de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e2:	400b      	ands	r3, r1
 80027e4:	9302      	str	r3, [sp, #8]
 80027e6:	9b02      	ldr	r3, [sp, #8]
}
 80027e8:	b007      	add	sp, #28
 80027ea:	bd00      	pop	{pc}
  else if(tim_baseHandle->Instance==TIM14)
 80027ec:	4a20      	ldr	r2, [pc, #128]	@ (8002870 <HAL_TIM_Base_MspInit+0xe0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d110      	bne.n	8002814 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <HAL_TIM_Base_MspInit+0xd8>)
 80027f6:	0209      	lsls	r1, r1, #8
 80027f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80027fa:	2013      	movs	r0, #19
    __HAL_RCC_TIM14_CLK_ENABLE();
 80027fc:	430a      	orrs	r2, r1
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002800:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002804:	400b      	ands	r3, r1
 8002806:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002808:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 800280a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800280c:	f000 f8c0 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002810:	2013      	movs	r0, #19
 8002812:	e7da      	b.n	80027ca <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM16)
 8002814:	4a17      	ldr	r2, [pc, #92]	@ (8002874 <HAL_TIM_Base_MspInit+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d110      	bne.n	800283c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800281a:	2180      	movs	r1, #128	@ 0x80
 800281c:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <HAL_TIM_Base_MspInit+0xd8>)
 800281e:	0289      	lsls	r1, r1, #10
 8002820:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002822:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002824:	430a      	orrs	r2, r1
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002828:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	400b      	ands	r3, r1
 800282e:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002830:	0011      	movs	r1, r2
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002832:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002834:	f000 f8ac 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002838:	2015      	movs	r0, #21
 800283a:	e7c6      	b.n	80027ca <HAL_TIM_Base_MspInit+0x3a>
  else if(tim_baseHandle->Instance==TIM17)
 800283c:	4a0e      	ldr	r2, [pc, #56]	@ (8002878 <HAL_TIM_Base_MspInit+0xe8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d1d2      	bne.n	80027e8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002842:	2180      	movs	r1, #128	@ 0x80
 8002844:	4b08      	ldr	r3, [pc, #32]	@ (8002868 <HAL_TIM_Base_MspInit+0xd8>)
 8002846:	02c9      	lsls	r1, r1, #11
 8002848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800284a:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 800284c:	430a      	orrs	r2, r1
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002850:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	400b      	ands	r3, r1
 8002856:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002858:	0011      	movs	r1, r2
    __HAL_RCC_TIM17_CLK_ENABLE();
 800285a:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800285c:	f000 f898 	bl	8002990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002860:	2016      	movs	r0, #22
 8002862:	e7b2      	b.n	80027ca <HAL_TIM_Base_MspInit+0x3a>
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40021000 	.word	0x40021000
 800286c:	40000400 	.word	0x40000400
 8002870:	40002000 	.word	0x40002000
 8002874:	40014400 	.word	0x40014400
 8002878:	40014800 	.word	0x40014800

0800287c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800287c:	480d      	ldr	r0, [pc, #52]	@ (80028b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800287e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002880:	f7ff fe98 	bl	80025b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002884:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002886:	e003      	b.n	8002890 <LoopCopyDataInit>

08002888 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002888:	4b0b      	ldr	r3, [pc, #44]	@ (80028b8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800288a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800288c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800288e:	3104      	adds	r1, #4

08002890 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002890:	480a      	ldr	r0, [pc, #40]	@ (80028bc <LoopForever+0xa>)
  ldr r3, =_edata
 8002892:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <LoopForever+0xe>)
  adds r2, r0, r1
 8002894:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002896:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002898:	d3f6      	bcc.n	8002888 <CopyDataInit>
  ldr r2, =_sbss
 800289a:	4a0a      	ldr	r2, [pc, #40]	@ (80028c4 <LoopForever+0x12>)
  b LoopFillZerobss
 800289c:	e002      	b.n	80028a4 <LoopFillZerobss>

0800289e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  str  r3, [r2]
 80028a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a2:	3204      	adds	r2, #4

080028a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <LoopForever+0x16>)
  cmp r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028a8:	d3f9      	bcc.n	800289e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80028aa:	f001 f9a5 	bl	8003bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ae:	f7ff f9af 	bl	8001c10 <main>

080028b2 <LoopForever>:

LoopForever:
    b LoopForever
 80028b2:	e7fe      	b.n	80028b2 <LoopForever>
  ldr   r0, =_estack
 80028b4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80028b8:	08003cb8 	.word	0x08003cb8
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028c0:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80028c4:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80028c8:	20000a74 	.word	0x20000a74

080028cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028cc:	e7fe      	b.n	80028cc <ADC1_IRQHandler>
	...

080028d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_InitTick+0x44>)
{
 80028d4:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0UL)
 80028d6:	7819      	ldrb	r1, [r3, #0]
 80028d8:	2900      	cmp	r1, #0
 80028da:	d101      	bne.n	80028e0 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80028dc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80028de:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80028e0:	20fa      	movs	r0, #250	@ 0xfa
 80028e2:	0080      	lsls	r0, r0, #2
 80028e4:	f7fd fc38 	bl	8000158 <__udivsi3>
 80028e8:	4c0b      	ldr	r4, [pc, #44]	@ (8002918 <HAL_InitTick+0x48>)
 80028ea:	0001      	movs	r1, r0
 80028ec:	6820      	ldr	r0, [r4, #0]
 80028ee:	f7fd fc33 	bl	8000158 <__udivsi3>
 80028f2:	f000 f893 	bl	8002a1c <HAL_SYSTICK_Config>
 80028f6:	1e04      	subs	r4, r0, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	2d03      	cmp	r5, #3
 80028fc:	d8ee      	bhi.n	80028dc <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fe:	0002      	movs	r2, r0
 8002900:	2001      	movs	r0, #1
 8002902:	0029      	movs	r1, r5
 8002904:	4240      	negs	r0, r0
 8002906:	f000 f843 	bl	8002990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800290a:	4b04      	ldr	r3, [pc, #16]	@ (800291c <HAL_InitTick+0x4c>)
 800290c:	0020      	movs	r0, r4
 800290e:	601d      	str	r5, [r3, #0]
  return status;
 8002910:	e7e5      	b.n	80028de <HAL_InitTick+0xe>
 8002912:	46c0      	nop			@ (mov r8, r8)
 8002914:	20000010 	.word	0x20000010
 8002918:	2000000c 	.word	0x2000000c
 800291c:	20000014 	.word	0x20000014

08002920 <HAL_Init>:
{
 8002920:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002922:	2003      	movs	r0, #3
 8002924:	f7ff ffd4 	bl	80028d0 <HAL_InitTick>
 8002928:	1e04      	subs	r4, r0, #0
 800292a:	d103      	bne.n	8002934 <HAL_Init+0x14>
    HAL_MspInit();
 800292c:	f7ff fdae 	bl	800248c <HAL_MspInit>
}
 8002930:	0020      	movs	r0, r4
 8002932:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8002934:	2401      	movs	r4, #1
 8002936:	e7fb      	b.n	8002930 <HAL_Init+0x10>

08002938 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002938:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <HAL_IncTick+0x10>)
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_IncTick+0x14>)
 800293c:	6811      	ldr	r1, [r2, #0]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	185b      	adds	r3, r3, r1
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	4770      	bx	lr
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	20000928 	.word	0x20000928
 800294c:	20000010 	.word	0x20000010

08002950 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002950:	4b01      	ldr	r3, [pc, #4]	@ (8002958 <HAL_GetTick+0x8>)
 8002952:	6818      	ldr	r0, [r3, #0]
}
 8002954:	4770      	bx	lr
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	20000928 	.word	0x20000928

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fff6 	bl	8002950 <HAL_GetTick>
 8002964:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002966:	1c63      	adds	r3, r4, #1
 8002968:	d002      	beq.n	8002970 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800296a:	4b04      	ldr	r3, [pc, #16]	@ (800297c <HAL_Delay+0x20>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002970:	f7ff ffee 	bl	8002950 <HAL_GetTick>
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	42a0      	cmp	r0, r4
 8002978:	d3fa      	bcc.n	8002970 <HAL_Delay+0x14>
  {
  }
}
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	20000010 	.word	0x20000010

08002980 <HAL_SYSCFG_EnableRemap>:
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8002980:	4a02      	ldr	r2, [pc, #8]	@ (800298c <HAL_SYSCFG_EnableRemap+0xc>)
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	4303      	orrs	r3, r0
 8002986:	6013      	str	r3, [r2, #0]
}
 8002988:	4770      	bx	lr
 800298a:	46c0      	nop			@ (mov r8, r8)
 800298c:	40010000 	.word	0x40010000

08002990 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002990:	b510      	push	{r4, lr}
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002992:	24ff      	movs	r4, #255	@ 0xff
 8002994:	2203      	movs	r2, #3
 8002996:	000b      	movs	r3, r1
 8002998:	0021      	movs	r1, r4
 800299a:	4002      	ands	r2, r0
 800299c:	00d2      	lsls	r2, r2, #3
 800299e:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029a4:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029a6:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 80029a8:	2800      	cmp	r0, #0
 80029aa:	db0a      	blt.n	80029c2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ac:	24c0      	movs	r4, #192	@ 0xc0
 80029ae:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_NVIC_SetPriority+0x4c>)
 80029b0:	0880      	lsrs	r0, r0, #2
 80029b2:	0080      	lsls	r0, r0, #2
 80029b4:	1880      	adds	r0, r0, r2
 80029b6:	00a4      	lsls	r4, r4, #2
 80029b8:	5902      	ldr	r2, [r0, r4]
 80029ba:	400a      	ands	r2, r1
 80029bc:	4313      	orrs	r3, r2
 80029be:	5103      	str	r3, [r0, r4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80029c0:	bd10      	pop	{r4, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c2:	220f      	movs	r2, #15
 80029c4:	4010      	ands	r0, r2
 80029c6:	3808      	subs	r0, #8
 80029c8:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <HAL_NVIC_SetPriority+0x50>)
 80029ca:	0880      	lsrs	r0, r0, #2
 80029cc:	0080      	lsls	r0, r0, #2
 80029ce:	1880      	adds	r0, r0, r2
 80029d0:	69c2      	ldr	r2, [r0, #28]
 80029d2:	4011      	ands	r1, r2
 80029d4:	4319      	orrs	r1, r3
 80029d6:	61c1      	str	r1, [r0, #28]
 80029d8:	e7f2      	b.n	80029c0 <HAL_NVIC_SetPriority+0x30>
 80029da:	46c0      	nop			@ (mov r8, r8)
 80029dc:	e000e100 	.word	0xe000e100
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029e4:	2800      	cmp	r0, #0
 80029e6:	db05      	blt.n	80029f4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e8:	231f      	movs	r3, #31
 80029ea:	4018      	ands	r0, r3
 80029ec:	3b1e      	subs	r3, #30
 80029ee:	4083      	lsls	r3, r0
 80029f0:	4a01      	ldr	r2, [pc, #4]	@ (80029f8 <HAL_NVIC_EnableIRQ+0x14>)
 80029f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80029f4:	4770      	bx	lr
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	e000e100 	.word	0xe000e100

080029fc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80029fc:	2800      	cmp	r0, #0
 80029fe:	db09      	blt.n	8002a14 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a00:	231f      	movs	r3, #31
 8002a02:	4018      	ands	r0, r3
 8002a04:	3b1e      	subs	r3, #30
 8002a06:	4083      	lsls	r3, r0
 8002a08:	4a03      	ldr	r2, [pc, #12]	@ (8002a18 <HAL_NVIC_DisableIRQ+0x1c>)
 8002a0a:	67d3      	str	r3, [r2, #124]	@ 0x7c
 8002a0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a10:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002a14:	4770      	bx	lr
 8002a16:	46c0      	nop			@ (mov r8, r8)
 8002a18:	e000e104 	.word	0xe000e104

08002a1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a1c:	2280      	movs	r2, #128	@ 0x80
 8002a1e:	1e43      	subs	r3, r0, #1
 8002a20:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a22:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d20d      	bcs.n	8002a44 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a28:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2a:	4a07      	ldr	r2, [pc, #28]	@ (8002a48 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a2c:	4807      	ldr	r0, [pc, #28]	@ (8002a4c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a30:	6a03      	ldr	r3, [r0, #32]
 8002a32:	0609      	lsls	r1, r1, #24
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a3e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a42:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002a44:	4770      	bx	lr
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	e000e010 	.word	0xe000e010
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <HAL_GPIO_Init>:
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	469c      	mov	ip, r3
{
 8002a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a56:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002a58:	680b      	ldr	r3, [r1, #0]
 8002a5a:	4664      	mov	r4, ip
 8002a5c:	001a      	movs	r2, r3
 8002a5e:	40e2      	lsrs	r2, r4
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x16>
      }
    }

    position++;
  }
}
 8002a62:	b005      	add	sp, #20
 8002a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002a66:	4662      	mov	r2, ip
 8002a68:	2601      	movs	r6, #1
 8002a6a:	4096      	lsls	r6, r2
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	4032      	ands	r2, r6
 8002a70:	9201      	str	r2, [sp, #4]
    if (iocurrent != 0U)
 8002a72:	4233      	tst	r3, r6
 8002a74:	d100      	bne.n	8002a78 <HAL_GPIO_Init+0x28>
 8002a76:	e090      	b.n	8002b9a <HAL_GPIO_Init+0x14a>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a78:	684f      	ldr	r7, [r1, #4]
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	003d      	movs	r5, r7
 8002a7e:	439d      	bics	r5, r3
 8002a80:	9503      	str	r5, [sp, #12]
 8002a82:	2d02      	cmp	r5, #2
 8002a84:	d114      	bne.n	8002ab0 <HAL_GPIO_Init+0x60>
        tmp = GPIOx->AFR[position >> 3U];
 8002a86:	4663      	mov	r3, ip
 8002a88:	08da      	lsrs	r2, r3, #3
 8002a8a:	0092      	lsls	r2, r2, #2
 8002a8c:	1882      	adds	r2, r0, r2
 8002a8e:	6a13      	ldr	r3, [r2, #32]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002a90:	2407      	movs	r4, #7
        tmp = GPIOx->AFR[position >> 3U];
 8002a92:	001d      	movs	r5, r3
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002a94:	4663      	mov	r3, ip
 8002a96:	401c      	ands	r4, r3
 8002a98:	230f      	movs	r3, #15
 8002a9a:	00a4      	lsls	r4, r4, #2
 8002a9c:	40a3      	lsls	r3, r4
 8002a9e:	439d      	bics	r5, r3
 8002aa0:	9502      	str	r5, [sp, #8]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002aa2:	250f      	movs	r5, #15
 8002aa4:	690b      	ldr	r3, [r1, #16]
 8002aa6:	402b      	ands	r3, r5
 8002aa8:	40a3      	lsls	r3, r4
 8002aaa:	9c02      	ldr	r4, [sp, #8]
 8002aac:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3U] = tmp;
 8002aae:	6213      	str	r3, [r2, #32]
      tmp = GPIOx->MODER;
 8002ab0:	4663      	mov	r3, ip
 8002ab2:	005a      	lsls	r2, r3, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	4093      	lsls	r3, r2
      tmp = GPIOx->MODER;
 8002ab8:	6804      	ldr	r4, [r0, #0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002aba:	43dd      	mvns	r5, r3
 8002abc:	439c      	bics	r4, r3
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002abe:	2303      	movs	r3, #3
 8002ac0:	403b      	ands	r3, r7
 8002ac2:	4093      	lsls	r3, r2
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002ac4:	9502      	str	r5, [sp, #8]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac6:	9d03      	ldr	r5, [sp, #12]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ac8:	4323      	orrs	r3, r4
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aca:	3d01      	subs	r5, #1
      GPIOx->MODER = tmp;
 8002acc:	6003      	str	r3, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ace:	2d01      	cmp	r5, #1
 8002ad0:	d80f      	bhi.n	8002af2 <HAL_GPIO_Init+0xa2>
        tmp = GPIOx->OSPEEDR;
 8002ad2:	6884      	ldr	r4, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ad4:	9b02      	ldr	r3, [sp, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ad6:	2501      	movs	r5, #1
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ad8:	401c      	ands	r4, r3
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ada:	68cb      	ldr	r3, [r1, #12]
 8002adc:	4093      	lsls	r3, r2
 8002ade:	4323      	orrs	r3, r4
        GPIOx->OSPEEDR = tmp;
 8002ae0:	6083      	str	r3, [r0, #8]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae2:	093b      	lsrs	r3, r7, #4
 8002ae4:	402b      	ands	r3, r5
 8002ae6:	4665      	mov	r5, ip
 8002ae8:	40ab      	lsls	r3, r5
        tmp = GPIOx->OTYPER;
 8002aea:	6844      	ldr	r4, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aec:	43b4      	bics	r4, r6
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002aee:	4323      	orrs	r3, r4
        GPIOx->OTYPER = tmp;
 8002af0:	6043      	str	r3, [r0, #4]
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002af2:	2f03      	cmp	r7, #3
 8002af4:	d051      	beq.n	8002b9a <HAL_GPIO_Init+0x14a>
        tmp = GPIOx->PUPDR;
 8002af6:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002af8:	9b02      	ldr	r3, [sp, #8]
 8002afa:	401c      	ands	r4, r3
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002afc:	688b      	ldr	r3, [r1, #8]
 8002afe:	4093      	lsls	r3, r2
 8002b00:	4323      	orrs	r3, r4
        GPIOx->PUPDR = tmp;
 8002b02:	60c3      	str	r3, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	055b      	lsls	r3, r3, #21
 8002b08:	421f      	tst	r7, r3
 8002b0a:	d046      	beq.n	8002b9a <HAL_GPIO_Init+0x14a>
        tmp = EXTI->EXTICR[position >> 2U];
 8002b0c:	4663      	mov	r3, ip
 8002b0e:	089a      	lsrs	r2, r3, #2
 8002b10:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <HAL_GPIO_Init+0x150>)
 8002b12:	0092      	lsls	r2, r2, #2
 8002b14:	18d2      	adds	r2, r2, r3
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b16:	2403      	movs	r4, #3
 8002b18:	4663      	mov	r3, ip
 8002b1a:	401c      	ands	r4, r3
 8002b1c:	230f      	movs	r3, #15
 8002b1e:	00e4      	lsls	r4, r4, #3
 8002b20:	40a3      	lsls	r3, r4
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b22:	26a0      	movs	r6, #160	@ 0xa0
        tmp = EXTI->EXTICR[position >> 2U];
 8002b24:	6e15      	ldr	r5, [r2, #96]	@ 0x60
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b26:	05f6      	lsls	r6, r6, #23
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b28:	439d      	bics	r5, r3
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	42b0      	cmp	r0, r6
 8002b2e:	d00c      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002b30:	4e1c      	ldr	r6, [pc, #112]	@ (8002ba4 <HAL_GPIO_Init+0x154>)
 8002b32:	3301      	adds	r3, #1
 8002b34:	42b0      	cmp	r0, r6
 8002b36:	d008      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002b38:	4e1b      	ldr	r6, [pc, #108]	@ (8002ba8 <HAL_GPIO_Init+0x158>)
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	42b0      	cmp	r0, r6
 8002b3e:	d004      	beq.n	8002b4a <HAL_GPIO_Init+0xfa>
 8002b40:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <HAL_GPIO_Init+0x15c>)
 8002b42:	18c3      	adds	r3, r0, r3
 8002b44:	1e5e      	subs	r6, r3, #1
 8002b46:	41b3      	sbcs	r3, r6
 8002b48:	3305      	adds	r3, #5
 8002b4a:	40a3      	lsls	r3, r4
 8002b4c:	432b      	orrs	r3, r5
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b4e:	6613      	str	r3, [r2, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8002b50:	4b17      	ldr	r3, [pc, #92]	@ (8002bb0 <HAL_GPIO_Init+0x160>)
        tmp &= ~((uint32_t)iocurrent);
 8002b52:	9a01      	ldr	r2, [sp, #4]
        tmp = EXTI->IMR1;
 8002b54:	6fdd      	ldr	r5, [r3, #124]	@ 0x7c
          tmp |= iocurrent;
 8002b56:	9c01      	ldr	r4, [sp, #4]
        tmp &= ~((uint32_t)iocurrent);
 8002b58:	43d2      	mvns	r2, r2
          tmp |= iocurrent;
 8002b5a:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5c:	03fe      	lsls	r6, r7, #15
 8002b5e:	d401      	bmi.n	8002b64 <HAL_GPIO_Init+0x114>
        tmp &= ~((uint32_t)iocurrent);
 8002b60:	002c      	movs	r4, r5
 8002b62:	4014      	ands	r4, r2
        EXTI->IMR1 = tmp;
 8002b64:	67dc      	str	r4, [r3, #124]	@ 0x7c
        tmp = EXTI->EMR1;
 8002b66:	4c13      	ldr	r4, [pc, #76]	@ (8002bb4 <HAL_GPIO_Init+0x164>)
          tmp |= iocurrent;
 8002b68:	9d01      	ldr	r5, [sp, #4]
        tmp = EXTI->EMR1;
 8002b6a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
          tmp |= iocurrent;
 8002b6c:	431d      	orrs	r5, r3
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b6e:	03be      	lsls	r6, r7, #14
 8002b70:	d401      	bmi.n	8002b76 <HAL_GPIO_Init+0x126>
        tmp &= ~((uint32_t)iocurrent);
 8002b72:	4013      	ands	r3, r2
 8002b74:	001d      	movs	r5, r3
        EXTI->EMR1 = tmp;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba0 <HAL_GPIO_Init+0x150>)
 8002b78:	67e5      	str	r5, [r4, #124]	@ 0x7c
        tmp = EXTI->RTSR1;
 8002b7a:	681d      	ldr	r5, [r3, #0]
          tmp |= iocurrent;
 8002b7c:	9c01      	ldr	r4, [sp, #4]
 8002b7e:	432c      	orrs	r4, r5
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b80:	02fe      	lsls	r6, r7, #11
 8002b82:	d401      	bmi.n	8002b88 <HAL_GPIO_Init+0x138>
        tmp &= ~((uint32_t)iocurrent);
 8002b84:	002c      	movs	r4, r5
 8002b86:	4014      	ands	r4, r2
        EXTI->RTSR1 = tmp;
 8002b88:	601c      	str	r4, [r3, #0]
        tmp = EXTI->FTSR1;
 8002b8a:	685c      	ldr	r4, [r3, #4]
          tmp |= iocurrent;
 8002b8c:	9d01      	ldr	r5, [sp, #4]
 8002b8e:	4325      	orrs	r5, r4
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b90:	02bf      	lsls	r7, r7, #10
 8002b92:	d401      	bmi.n	8002b98 <HAL_GPIO_Init+0x148>
        tmp &= ~((uint32_t)iocurrent);
 8002b94:	4014      	ands	r4, r2
 8002b96:	0025      	movs	r5, r4
        EXTI->FTSR1 = tmp;
 8002b98:	605d      	str	r5, [r3, #4]
    position++;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	449c      	add	ip, r3
 8002b9e:	e75b      	b.n	8002a58 <HAL_GPIO_Init+0x8>
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	50000400 	.word	0x50000400
 8002ba8:	50000800 	.word	0x50000800
 8002bac:	afffec00 	.word	0xafffec00
 8002bb0:	40021804 	.word	0x40021804
 8002bb4:	40021808 	.word	0x40021808

08002bb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002bba:	4a33      	ldr	r2, [pc, #204]	@ (8002c88 <HAL_GPIO_DeInit+0xd0>)
{
 8002bbc:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002bbe:	1882      	adds	r2, r0, r2
{
 8002bc0:	9101      	str	r1, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002bc2:	1e51      	subs	r1, r2, #1
 8002bc4:	418a      	sbcs	r2, r1
  uint32_t position = 0U;
 8002bc6:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002bc8:	3205      	adds	r2, #5
 8002bca:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0U)
 8002bcc:	9a01      	ldr	r2, [sp, #4]
 8002bce:	40da      	lsrs	r2, r3
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_DeInit+0x1e>
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
  }
}
 8002bd2:	b005      	add	sp, #20
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002bd6:	2701      	movs	r7, #1
 8002bd8:	003a      	movs	r2, r7
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	9d01      	ldr	r5, [sp, #4]
 8002bde:	9200      	str	r2, [sp, #0]
 8002be0:	4015      	ands	r5, r2
    if (iocurrent != 0U)
 8002be2:	9900      	ldr	r1, [sp, #0]
 8002be4:	9a01      	ldr	r2, [sp, #4]
 8002be6:	420a      	tst	r2, r1
 8002be8:	d04c      	beq.n	8002c84 <HAL_GPIO_DeInit+0xcc>
      tmp = EXTI->EXTICR[position >> 2U];
 8002bea:	4928      	ldr	r1, [pc, #160]	@ (8002c8c <HAL_GPIO_DeInit+0xd4>)
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bec:	2403      	movs	r4, #3
      tmp = EXTI->EXTICR[position >> 2U];
 8002bee:	089a      	lsrs	r2, r3, #2
 8002bf0:	0092      	lsls	r2, r2, #2
 8002bf2:	1852      	adds	r2, r2, r1
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bf4:	210f      	movs	r1, #15
 8002bf6:	401c      	ands	r4, r3
 8002bf8:	00e4      	lsls	r4, r4, #3
 8002bfa:	40a1      	lsls	r1, r4
      tmp = EXTI->EXTICR[position >> 2U];
 8002bfc:	6e16      	ldr	r6, [r2, #96]	@ 0x60
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bfe:	9102      	str	r1, [sp, #8]
 8002c00:	400e      	ands	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002c02:	21a0      	movs	r1, #160	@ 0xa0
 8002c04:	05c9      	lsls	r1, r1, #23
 8002c06:	468c      	mov	ip, r1
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4560      	cmp	r0, ip
 8002c0c:	d009      	beq.n	8002c22 <HAL_GPIO_DeInit+0x6a>
 8002c0e:	4920      	ldr	r1, [pc, #128]	@ (8002c90 <HAL_GPIO_DeInit+0xd8>)
 8002c10:	468c      	mov	ip, r1
 8002c12:	0039      	movs	r1, r7
 8002c14:	4560      	cmp	r0, ip
 8002c16:	d004      	beq.n	8002c22 <HAL_GPIO_DeInit+0x6a>
 8002c18:	4f1e      	ldr	r7, [pc, #120]	@ (8002c94 <HAL_GPIO_DeInit+0xdc>)
 8002c1a:	1849      	adds	r1, r1, r1
 8002c1c:	42b8      	cmp	r0, r7
 8002c1e:	d000      	beq.n	8002c22 <HAL_GPIO_DeInit+0x6a>
 8002c20:	9903      	ldr	r1, [sp, #12]
 8002c22:	40a1      	lsls	r1, r4
 8002c24:	42b1      	cmp	r1, r6
 8002c26:	d112      	bne.n	8002c4e <HAL_GPIO_DeInit+0x96>
        EXTI->IMR1 &= ~(iocurrent);
 8002c28:	4e1b      	ldr	r6, [pc, #108]	@ (8002c98 <HAL_GPIO_DeInit+0xe0>)
 8002c2a:	4918      	ldr	r1, [pc, #96]	@ (8002c8c <HAL_GPIO_DeInit+0xd4>)
 8002c2c:	6ff4      	ldr	r4, [r6, #124]	@ 0x7c
 8002c2e:	43ac      	bics	r4, r5
 8002c30:	67f4      	str	r4, [r6, #124]	@ 0x7c
        EXTI->EMR1 &= ~(iocurrent);
 8002c32:	4e1a      	ldr	r6, [pc, #104]	@ (8002c9c <HAL_GPIO_DeInit+0xe4>)
 8002c34:	6ff4      	ldr	r4, [r6, #124]	@ 0x7c
 8002c36:	43ac      	bics	r4, r5
 8002c38:	67f4      	str	r4, [r6, #124]	@ 0x7c
        EXTI->RTSR1 &= ~(iocurrent);
 8002c3a:	680c      	ldr	r4, [r1, #0]
 8002c3c:	43ac      	bics	r4, r5
 8002c3e:	600c      	str	r4, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002c40:	684c      	ldr	r4, [r1, #4]
 8002c42:	43ac      	bics	r4, r5
 8002c44:	604c      	str	r4, [r1, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002c46:	6e11      	ldr	r1, [r2, #96]	@ 0x60
 8002c48:	9c02      	ldr	r4, [sp, #8]
 8002c4a:	43a1      	bics	r1, r4
 8002c4c:	6611      	str	r1, [r2, #96]	@ 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c4e:	2103      	movs	r1, #3
 8002c50:	005c      	lsls	r4, r3, #1
 8002c52:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c54:	2407      	movs	r4, #7
 8002c56:	260f      	movs	r6, #15
 8002c58:	401c      	ands	r4, r3
 8002c5a:	00a4      	lsls	r4, r4, #2
 8002c5c:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c5e:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002c60:	9c00      	ldr	r4, [sp, #0]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c62:	430a      	orrs	r2, r1
 8002c64:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	0092      	lsls	r2, r2, #2
 8002c6a:	1882      	adds	r2, r0, r2
 8002c6c:	6a15      	ldr	r5, [r2, #32]
 8002c6e:	43b5      	bics	r5, r6
 8002c70:	6215      	str	r5, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002c72:	6882      	ldr	r2, [r0, #8]
 8002c74:	438a      	bics	r2, r1
 8002c76:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002c78:	6842      	ldr	r2, [r0, #4]
 8002c7a:	43a2      	bics	r2, r4
 8002c7c:	6042      	str	r2, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002c7e:	68c2      	ldr	r2, [r0, #12]
 8002c80:	438a      	bics	r2, r1
 8002c82:	60c2      	str	r2, [r0, #12]
    position++;
 8002c84:	3301      	adds	r3, #1
 8002c86:	e7a1      	b.n	8002bcc <HAL_GPIO_DeInit+0x14>
 8002c88:	afffec00 	.word	0xafffec00
 8002c8c:	40021800 	.word	0x40021800
 8002c90:	50000400 	.word	0x50000400
 8002c94:	50000800 	.word	0x50000800
 8002c98:	40021804 	.word	0x40021804
 8002c9c:	40021808 	.word	0x40021808

08002ca0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002ca0:	6900      	ldr	r0, [r0, #16]
 8002ca2:	4008      	ands	r0, r1
 8002ca4:	1e43      	subs	r3, r0, #1
 8002ca6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002ca8:	b2c0      	uxtb	r0, r0
}
 8002caa:	4770      	bx	lr

08002cac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cac:	2a00      	cmp	r2, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cb2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cb4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002cb6:	e7fc      	b.n	8002cb2 <HAL_GPIO_WritePin+0x6>

08002cb8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cb8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cba:	0013      	movs	r3, r2
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	4391      	bics	r1, r2
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6183      	str	r3, [r0, #24]
}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002cc8:	b570      	push	{r4, r5, r6, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002cca:	4d08      	ldr	r5, [pc, #32]	@ (8002cec <HAL_GPIO_EXTI_IRQHandler+0x24>)
{
 8002ccc:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002cce:	68eb      	ldr	r3, [r5, #12]
 8002cd0:	4218      	tst	r0, r3
 8002cd2:	d002      	beq.n	8002cda <HAL_GPIO_EXTI_IRQHandler+0x12>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002cd4:	60e8      	str	r0, [r5, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002cd6:	f7ff fb65 	bl	80023a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002cda:	692b      	ldr	r3, [r5, #16]
 8002cdc:	4223      	tst	r3, r4
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_EXTI_IRQHandler+0x20>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002ce0:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002ce2:	612c      	str	r4, [r5, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002ce4:	f7ff fba0 	bl	8002428 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002ce8:	bd70      	pop	{r4, r5, r6, pc}
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	40021800 	.word	0x40021800

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	1e05      	subs	r5, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCC_OscConfig+0xa>
  {
    return HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
}
 8002cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	07db      	lsls	r3, r3, #31
 8002cfe:	d40d      	bmi.n	8002d1c <HAL_RCC_OscConfig+0x2c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	079b      	lsls	r3, r3, #30
 8002d04:	d44f      	bmi.n	8002da6 <HAL_RCC_OscConfig+0xb6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d06:	682b      	ldr	r3, [r5, #0]
 8002d08:	071b      	lsls	r3, r3, #28
 8002d0a:	d500      	bpl.n	8002d0e <HAL_RCC_OscConfig+0x1e>
 8002d0c:	e0a4      	b.n	8002e58 <HAL_RCC_OscConfig+0x168>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0e:	2204      	movs	r2, #4
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	4213      	tst	r3, r2
 8002d14:	d000      	beq.n	8002d18 <HAL_RCC_OscConfig+0x28>
 8002d16:	e0cf      	b.n	8002eb8 <HAL_RCC_OscConfig+0x1c8>
  return HAL_OK;
 8002d18:	2000      	movs	r0, #0
 8002d1a:	e7ed      	b.n	8002cf8 <HAL_RCC_OscConfig+0x8>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1c:	2138      	movs	r1, #56	@ 0x38
 8002d1e:	4c85      	ldr	r4, [pc, #532]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d20:	6843      	ldr	r3, [r0, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d22:	68a2      	ldr	r2, [r4, #8]
 8002d24:	400a      	ands	r2, r1
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002d26:	2a08      	cmp	r2, #8
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_OscConfig+0x40>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e8      	bne.n	8002d00 <HAL_RCC_OscConfig+0x10>
 8002d2e:	e7e2      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	0252      	lsls	r2, r2, #9
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d111      	bne.n	8002d5c <HAL_RCC_OscConfig+0x6c>
 8002d38:	6822      	ldr	r2, [r4, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fe07 	bl	8002950 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d42:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002d44:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d46:	02bf      	lsls	r7, r7, #10
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	423b      	tst	r3, r7
 8002d4c:	d1d8      	bne.n	8002d00 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002d4e:	f7ff fdff 	bl	8002950 <HAL_GetTick>
 8002d52:	1b80      	subs	r0, r0, r6
 8002d54:	2864      	cmp	r0, #100	@ 0x64
 8002d56:	d9f7      	bls.n	8002d48 <HAL_RCC_OscConfig+0x58>
            return HAL_TIMEOUT;
 8002d58:	2003      	movs	r0, #3
 8002d5a:	e7cd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	21a0      	movs	r1, #160	@ 0xa0
 8002d5e:	02c9      	lsls	r1, r1, #11
 8002d60:	428b      	cmp	r3, r1
 8002d62:	d108      	bne.n	8002d76 <HAL_RCC_OscConfig+0x86>
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	02db      	lsls	r3, r3, #11
 8002d6a:	430b      	orrs	r3, r1
 8002d6c:	6023      	str	r3, [r4, #0]
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	431a      	orrs	r2, r3
 8002d72:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	e7e3      	b.n	8002d3e <HAL_RCC_OscConfig+0x4e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d76:	6822      	ldr	r2, [r4, #0]
 8002d78:	496f      	ldr	r1, [pc, #444]	@ (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	6022      	str	r2, [r4, #0]
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	496e      	ldr	r1, [pc, #440]	@ (8002f3c <HAL_RCC_OscConfig+0x24c>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	6022      	str	r2, [r4, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1d9      	bne.n	8002d3e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8002d8a:	f7ff fde1 	bl	8002950 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d8e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002d90:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d92:	02bf      	lsls	r7, r7, #10
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	423b      	tst	r3, r7
 8002d98:	d0b2      	beq.n	8002d00 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002d9a:	f7ff fdd9 	bl	8002950 <HAL_GetTick>
 8002d9e:	1b80      	subs	r0, r0, r6
 8002da0:	2864      	cmp	r0, #100	@ 0x64
 8002da2:	d9f7      	bls.n	8002d94 <HAL_RCC_OscConfig+0xa4>
 8002da4:	e7d8      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	2238      	movs	r2, #56	@ 0x38
 8002da8:	4c62      	ldr	r4, [pc, #392]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002daa:	68eb      	ldr	r3, [r5, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dac:	68a1      	ldr	r1, [r4, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002dae:	4211      	tst	r1, r2
 8002db0:	d11c      	bne.n	8002dec <HAL_RCC_OscConfig+0xfc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d09f      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	6862      	ldr	r2, [r4, #4]
 8002db8:	696b      	ldr	r3, [r5, #20]
 8002dba:	4961      	ldr	r1, [pc, #388]	@ (8002f40 <HAL_RCC_OscConfig+0x250>)
 8002dbc:	021b      	lsls	r3, r3, #8
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	6063      	str	r3, [r4, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x254>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dc8:	495f      	ldr	r1, [pc, #380]	@ (8002f48 <HAL_RCC_OscConfig+0x258>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dca:	4013      	ands	r3, r2
 8002dcc:	692a      	ldr	r2, [r5, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	6023      	str	r3, [r4, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f4c <HAL_RCC_OscConfig+0x25c>)
 8002dd6:	049b      	lsls	r3, r3, #18
 8002dd8:	0f5b      	lsrs	r3, r3, #29
 8002dda:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8002f50 <HAL_RCC_OscConfig+0x260>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002dde:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	f7ff fd75 	bl	80028d0 <HAL_InitTick>
 8002de6:	2800      	cmp	r0, #0
 8002de8:	d08d      	beq.n	8002d06 <HAL_RCC_OscConfig+0x16>
 8002dea:	e784      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d020      	beq.n	8002e32 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_RCC_OscConfig+0x254>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002df6:	4013      	ands	r3, r2
 8002df8:	692a      	ldr	r2, [r5, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfa:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	6023      	str	r3, [r4, #0]
        __HAL_RCC_HSI_ENABLE();
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	4313      	orrs	r3, r2
 8002e08:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e0a:	f7ff fda1 	bl	8002950 <HAL_GetTick>
 8002e0e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	423b      	tst	r3, r7
 8002e14:	d007      	beq.n	8002e26 <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	6862      	ldr	r2, [r4, #4]
 8002e18:	696b      	ldr	r3, [r5, #20]
 8002e1a:	4949      	ldr	r1, [pc, #292]	@ (8002f40 <HAL_RCC_OscConfig+0x250>)
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	400a      	ands	r2, r1
 8002e20:	4313      	orrs	r3, r2
 8002e22:	6063      	str	r3, [r4, #4]
 8002e24:	e76f      	b.n	8002d06 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002e26:	f7ff fd93 	bl	8002950 <HAL_GetTick>
 8002e2a:	1b80      	subs	r0, r0, r6
 8002e2c:	2802      	cmp	r0, #2
 8002e2e:	d9ef      	bls.n	8002e10 <HAL_RCC_OscConfig+0x120>
 8002e30:	e792      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_HSI_DISABLE();
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	4a47      	ldr	r2, [pc, #284]	@ (8002f54 <HAL_RCC_OscConfig+0x264>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e36:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 8002e38:	4013      	ands	r3, r2
 8002e3a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fd88 	bl	8002950 <HAL_GetTick>
 8002e40:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e42:	00ff      	lsls	r7, r7, #3
 8002e44:	6823      	ldr	r3, [r4, #0]
 8002e46:	423b      	tst	r3, r7
 8002e48:	d100      	bne.n	8002e4c <HAL_RCC_OscConfig+0x15c>
 8002e4a:	e75c      	b.n	8002d06 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002e4c:	f7ff fd80 	bl	8002950 <HAL_GetTick>
 8002e50:	1b80      	subs	r0, r0, r6
 8002e52:	2802      	cmp	r0, #2
 8002e54:	d9f6      	bls.n	8002e44 <HAL_RCC_OscConfig+0x154>
 8002e56:	e77f      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e58:	2138      	movs	r1, #56	@ 0x38
 8002e5a:	4c36      	ldr	r4, [pc, #216]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002e5c:	69aa      	ldr	r2, [r5, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002e5e:	68a3      	ldr	r3, [r4, #8]
 8002e60:	400b      	ands	r3, r1
 8002e62:	2b18      	cmp	r3, #24
 8002e64:	d103      	bne.n	8002e6e <HAL_RCC_OscConfig+0x17e>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002e66:	2a00      	cmp	r2, #0
 8002e68:	d000      	beq.n	8002e6c <HAL_RCC_OscConfig+0x17c>
 8002e6a:	e750      	b.n	8002d0e <HAL_RCC_OscConfig+0x1e>
 8002e6c:	e743      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6e:	2301      	movs	r3, #1
 8002e70:	2a00      	cmp	r2, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_LSI_ENABLE();
 8002e74:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e76:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	6623      	str	r3, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002e7c:	f7ff fd68 	bl	8002950 <HAL_GetTick>
 8002e80:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002e82:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002e84:	423b      	tst	r3, r7
 8002e86:	d000      	beq.n	8002e8a <HAL_RCC_OscConfig+0x19a>
 8002e88:	e741      	b.n	8002d0e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002e8a:	f7ff fd61 	bl	8002950 <HAL_GetTick>
 8002e8e:	1b80      	subs	r0, r0, r6
 8002e90:	2802      	cmp	r0, #2
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x192>
 8002e94:	e760      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
        __HAL_RCC_LSI_DISABLE();
 8002e96:	6e22      	ldr	r2, [r4, #96]	@ 0x60
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002e98:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8002e9a:	439a      	bics	r2, r3
 8002e9c:	6622      	str	r2, [r4, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002e9e:	f7ff fd57 	bl	8002950 <HAL_GetTick>
 8002ea2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002ea4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8002ea6:	423b      	tst	r3, r7
 8002ea8:	d100      	bne.n	8002eac <HAL_RCC_OscConfig+0x1bc>
 8002eaa:	e730      	b.n	8002d0e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002eac:	f7ff fd50 	bl	8002950 <HAL_GetTick>
 8002eb0:	1b80      	subs	r0, r0, r6
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d9f6      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x1b4>
 8002eb6:	e74f      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002eb8:	2138      	movs	r1, #56	@ 0x38
 8002eba:	4c1e      	ldr	r4, [pc, #120]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002ebc:	68a8      	ldr	r0, [r5, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002ebe:	68a3      	ldr	r3, [r4, #8]
 8002ec0:	400b      	ands	r3, r1
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d103      	bne.n	8002ece <HAL_RCC_OscConfig+0x1de>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002ec6:	4243      	negs	r3, r0
 8002ec8:	4158      	adcs	r0, r3
 8002eca:	b2c0      	uxtb	r0, r0
 8002ecc:	e714      	b.n	8002cf8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ed0:	2801      	cmp	r0, #1
 8002ed2:	d110      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x206>
 8002ed4:	4303      	orrs	r3, r0
 8002ed6:	65e3      	str	r3, [r4, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fd3a 	bl	8002950 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002edc:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8002ede:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002ee0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002ee2:	4233      	tst	r3, r6
 8002ee4:	d000      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1f8>
 8002ee6:	e717      	b.n	8002d18 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee8:	f7ff fd32 	bl	8002950 <HAL_GetTick>
 8002eec:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_RCC_OscConfig+0x268>)
 8002eee:	1b40      	subs	r0, r0, r5
 8002ef0:	4298      	cmp	r0, r3
 8002ef2:	d9f5      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x1f0>
 8002ef4:	e730      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef6:	2805      	cmp	r0, #5
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x216>
 8002efa:	4313      	orrs	r3, r2
 8002efc:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002efe:	2301      	movs	r3, #1
 8002f00:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8002f02:	4313      	orrs	r3, r2
 8002f04:	e7e7      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1e6>
 8002f06:	2101      	movs	r1, #1
 8002f08:	438b      	bics	r3, r1
 8002f0a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002f0c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f0e:	4393      	bics	r3, r2
 8002f10:	65e3      	str	r3, [r4, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d1e0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1e8>
        tickstart = HAL_GetTick();
 8002f16:	f7ff fd1b 	bl	8002950 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f1a:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8002f1c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f1e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002f20:	4233      	tst	r3, r6
 8002f22:	d100      	bne.n	8002f26 <HAL_RCC_OscConfig+0x236>
 8002f24:	e6f8      	b.n	8002d18 <HAL_RCC_OscConfig+0x28>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f26:	f7ff fd13 	bl	8002950 <HAL_GetTick>
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <HAL_RCC_OscConfig+0x268>)
 8002f2c:	1b40      	subs	r0, r0, r5
 8002f2e:	4298      	cmp	r0, r3
 8002f30:	d9f5      	bls.n	8002f1e <HAL_RCC_OscConfig+0x22e>
 8002f32:	e711      	b.n	8002d58 <HAL_RCC_OscConfig+0x68>
 8002f34:	40021000 	.word	0x40021000
 8002f38:	fffeffff 	.word	0xfffeffff
 8002f3c:	fffbffff 	.word	0xfffbffff
 8002f40:	ffff80ff 	.word	0xffff80ff
 8002f44:	ffffc7ff 	.word	0xffffc7ff
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	02dc6c00 	.word	0x02dc6c00
 8002f50:	20000014 	.word	0x20000014
 8002f54:	fffffeff 	.word	0xfffffeff
 8002f58:	00001388 	.word	0x00001388

08002f5c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002f5c:	2007      	movs	r0, #7
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f5e:	2238      	movs	r2, #56	@ 0x38
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002f62:	b510      	push	{r4, lr}
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002f64:	6819      	ldr	r1, [r3, #0]
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f66:	689c      	ldr	r4, [r3, #8]
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002f68:	0889      	lsrs	r1, r1, #2
 8002f6a:	4001      	ands	r1, r0
 8002f6c:	3101      	adds	r1, #1
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f6e:	4214      	tst	r4, r2
 8002f70:	d107      	bne.n	8002f82 <HAL_RCC_GetSysClockFreq+0x26>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0adb      	lsrs	r3, r3, #11
 8002f76:	4003      	ands	r3, r0

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f78:	480d      	ldr	r0, [pc, #52]	@ (8002fb0 <HAL_RCC_GetSysClockFreq+0x54>)
 8002f7a:	40d8      	lsrs	r0, r3
  else
  {
    sysclockfreq = 0U;
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002f7c:	f7fd f8ec 	bl	8000158 <__udivsi3>
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8002f80:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f82:	6898      	ldr	r0, [r3, #8]
 8002f84:	4010      	ands	r0, r2
 8002f86:	2808      	cmp	r0, #8
 8002f88:	d00b      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x46>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f8a:	6898      	ldr	r0, [r3, #8]
 8002f8c:	4010      	ands	r0, r2
 8002f8e:	2820      	cmp	r0, #32
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f92:	689b      	ldr	r3, [r3, #8]
    sysclockfreq = 0U;
 8002f94:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b18      	cmp	r3, #24
 8002f9a:	d1ef      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0x20>
    sysclockfreq = LSI_VALUE;
 8002f9c:	20fa      	movs	r0, #250	@ 0xfa
 8002f9e:	01c0      	lsls	r0, r0, #7
 8002fa0:	e7ec      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x20>
    sysclockfreq = HSE_VALUE;
 8002fa2:	4804      	ldr	r0, [pc, #16]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x58>)
 8002fa4:	e7ea      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x20>
    sysclockfreq = LSE_VALUE;
 8002fa6:	2080      	movs	r0, #128	@ 0x80
 8002fa8:	0200      	lsls	r0, r0, #8
 8002faa:	e7e7      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x20>
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	02dc6c00 	.word	0x02dc6c00
 8002fb4:	007a1200 	.word	0x007a1200

08002fb8 <HAL_RCC_ClockConfig>:
{
 8002fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fba:	0004      	movs	r4, r0
 8002fbc:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002fbe:	2800      	cmp	r0, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002fc2:	2001      	movs	r0, #1
}
 8002fc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc6:	2707      	movs	r7, #7
 8002fc8:	4e4b      	ldr	r6, [pc, #300]	@ (80030f8 <HAL_RCC_ClockConfig+0x140>)
 8002fca:	6833      	ldr	r3, [r6, #0]
 8002fcc:	403b      	ands	r3, r7
 8002fce:	428b      	cmp	r3, r1
 8002fd0:	d32a      	bcc.n	8003028 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd2:	6822      	ldr	r2, [r4, #0]
 8002fd4:	0793      	lsls	r3, r2, #30
 8002fd6:	d43b      	bmi.n	8003050 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd8:	07d2      	lsls	r2, r2, #31
 8002fda:	d44a      	bmi.n	8003072 <HAL_RCC_ClockConfig+0xba>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	2707      	movs	r7, #7
 8002fde:	6833      	ldr	r3, [r6, #0]
 8002fe0:	403b      	ands	r3, r7
 8002fe2:	42ab      	cmp	r3, r5
 8002fe4:	d90a      	bls.n	8002ffc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	6833      	ldr	r3, [r6, #0]
 8002fe8:	43bb      	bics	r3, r7
 8002fea:	432b      	orrs	r3, r5
 8002fec:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002fee:	f7ff fcaf 	bl	8002950 <HAL_GetTick>
 8002ff2:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ff4:	6833      	ldr	r3, [r6, #0]
 8002ff6:	403b      	ands	r3, r7
 8002ff8:	42ab      	cmp	r3, r5
 8002ffa:	d16d      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x120>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	4d3f      	ldr	r5, [pc, #252]	@ (80030fc <HAL_RCC_ClockConfig+0x144>)
 8003000:	075b      	lsls	r3, r3, #29
 8003002:	d471      	bmi.n	80030e8 <HAL_RCC_ClockConfig+0x130>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003004:	f7ff ffaa 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8003008:	68ab      	ldr	r3, [r5, #8]
 800300a:	493d      	ldr	r1, [pc, #244]	@ (8003100 <HAL_RCC_ClockConfig+0x148>)
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	0f1b      	lsrs	r3, r3, #28
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003010:	009b      	lsls	r3, r3, #2
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003012:	585b      	ldr	r3, [r3, r1]
 8003014:	211f      	movs	r1, #31
 8003016:	400b      	ands	r3, r1
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003018:	40d8      	lsrs	r0, r3
 800301a:	4a3a      	ldr	r2, [pc, #232]	@ (8003104 <HAL_RCC_ClockConfig+0x14c>)
  return HAL_InitTick(uwTickPrio);
 800301c:	4b3a      	ldr	r3, [pc, #232]	@ (8003108 <HAL_RCC_ClockConfig+0x150>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800301e:	6010      	str	r0, [r2, #0]
  return HAL_InitTick(uwTickPrio);
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	f7ff fc55 	bl	80028d0 <HAL_InitTick>
 8003026:	e7cd      	b.n	8002fc4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003028:	6833      	ldr	r3, [r6, #0]
 800302a:	43bb      	bics	r3, r7
 800302c:	430b      	orrs	r3, r1
 800302e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003030:	f7ff fc8e 	bl	8002950 <HAL_GetTick>
 8003034:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003036:	6833      	ldr	r3, [r6, #0]
 8003038:	403b      	ands	r3, r7
 800303a:	42ab      	cmp	r3, r5
 800303c:	d0c9      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800303e:	f7ff fc87 	bl	8002950 <HAL_GetTick>
 8003042:	9b01      	ldr	r3, [sp, #4]
 8003044:	1ac0      	subs	r0, r0, r3
 8003046:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_ClockConfig+0x154>)
 8003048:	4298      	cmp	r0, r3
 800304a:	d9f4      	bls.n	8003036 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 800304c:	2003      	movs	r0, #3
 800304e:	e7b9      	b.n	8002fc4 <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	492a      	ldr	r1, [pc, #168]	@ (80030fc <HAL_RCC_ClockConfig+0x144>)
 8003052:	0753      	lsls	r3, r2, #29
 8003054:	d506      	bpl.n	8003064 <HAL_RCC_ClockConfig+0xac>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003056:	6888      	ldr	r0, [r1, #8]
 8003058:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_ClockConfig+0x158>)
 800305a:	4018      	ands	r0, r3
 800305c:	23b0      	movs	r3, #176	@ 0xb0
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	4303      	orrs	r3, r0
 8003062:	608b      	str	r3, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003064:	688b      	ldr	r3, [r1, #8]
 8003066:	482b      	ldr	r0, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x15c>)
 8003068:	4003      	ands	r3, r0
 800306a:	68e0      	ldr	r0, [r4, #12]
 800306c:	4303      	orrs	r3, r0
 800306e:	608b      	str	r3, [r1, #8]
 8003070:	e7b2      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x20>
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003072:	221c      	movs	r2, #28
 8003074:	4f21      	ldr	r7, [pc, #132]	@ (80030fc <HAL_RCC_ClockConfig+0x144>)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	4393      	bics	r3, r2
 800307a:	68a2      	ldr	r2, [r4, #8]
 800307c:	4313      	orrs	r3, r2
 800307e:	603b      	str	r3, [r7, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003080:	6862      	ldr	r2, [r4, #4]
 8003082:	2a01      	cmp	r2, #1
 8003084:	d119      	bne.n	80030ba <HAL_RCC_ClockConfig+0x102>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	039b      	lsls	r3, r3, #14
 800308a:	d59a      	bpl.n	8002fc2 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800308c:	2107      	movs	r1, #7
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	438b      	bics	r3, r1
 8003092:	4313      	orrs	r3, r2
 8003094:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 8003096:	f7ff fc5b 	bl	8002950 <HAL_GetTick>
 800309a:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309c:	2338      	movs	r3, #56	@ 0x38
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	401a      	ands	r2, r3
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d098      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030aa:	f7ff fc51 	bl	8002950 <HAL_GetTick>
 80030ae:	9b01      	ldr	r3, [sp, #4]
 80030b0:	1ac0      	subs	r0, r0, r3
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <HAL_RCC_ClockConfig+0x154>)
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d9f1      	bls.n	800309c <HAL_RCC_ClockConfig+0xe4>
 80030b8:	e7c8      	b.n	800304c <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ba:	2a00      	cmp	r2, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x10e>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	055b      	lsls	r3, r3, #21
 80030c2:	d4e3      	bmi.n	800308c <HAL_RCC_ClockConfig+0xd4>
 80030c4:	e77d      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030c6:	2302      	movs	r3, #2
 80030c8:	2a03      	cmp	r2, #3
 80030ca:	d103      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x11c>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80030cc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80030ce:	4219      	tst	r1, r3
 80030d0:	d1dc      	bne.n	800308c <HAL_RCC_ClockConfig+0xd4>
 80030d2:	e776      	b.n	8002fc2 <HAL_RCC_ClockConfig+0xa>
 80030d4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80030d6:	e7fa      	b.n	80030ce <HAL_RCC_ClockConfig+0x116>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7ff fc3a 	bl	8002950 <HAL_GetTick>
 80030dc:	9b01      	ldr	r3, [sp, #4]
 80030de:	1ac0      	subs	r0, r0, r3
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x154>)
 80030e2:	4298      	cmp	r0, r3
 80030e4:	d986      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0x3c>
 80030e6:	e7b1      	b.n	800304c <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030e8:	68ab      	ldr	r3, [r5, #8]
 80030ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x160>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	6922      	ldr	r2, [r4, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60ab      	str	r3, [r5, #8]
 80030f4:	e786      	b.n	8003004 <HAL_RCC_ClockConfig+0x4c>
 80030f6:	46c0      	nop			@ (mov r8, r8)
 80030f8:	40022000 	.word	0x40022000
 80030fc:	40021000 	.word	0x40021000
 8003100:	08003c70 	.word	0x08003c70
 8003104:	2000000c 	.word	0x2000000c
 8003108:	20000014 	.word	0x20000014
 800310c:	00001388 	.word	0x00001388
 8003110:	ffff84ff 	.word	0xffff84ff
 8003114:	fffff0ff 	.word	0xfffff0ff
 8003118:	ffff8fff 	.word	0xffff8fff

0800311c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800311e:	2401      	movs	r4, #1
  tmpccer = TIMx->CCER;
 8003120:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003122:	6a02      	ldr	r2, [r0, #32]
 8003124:	43a2      	bics	r2, r4
 8003126:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800312a:	4a16      	ldr	r2, [pc, #88]	@ (8003184 <TIM_OC1_SetConfig+0x68>)
  tmpccmrx = TIMx->CCMR1;
 800312c:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800312e:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003130:	680a      	ldr	r2, [r1, #0]
 8003132:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003134:	2202      	movs	r2, #2
 8003136:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003138:	688a      	ldr	r2, [r1, #8]
 800313a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800313c:	4a12      	ldr	r2, [pc, #72]	@ (8003188 <TIM_OC1_SetConfig+0x6c>)
 800313e:	4290      	cmp	r0, r2
 8003140:	d005      	beq.n	800314e <TIM_OC1_SetConfig+0x32>
 8003142:	4e12      	ldr	r6, [pc, #72]	@ (800318c <TIM_OC1_SetConfig+0x70>)
 8003144:	42b0      	cmp	r0, r6
 8003146:	d002      	beq.n	800314e <TIM_OC1_SetConfig+0x32>
 8003148:	4e11      	ldr	r6, [pc, #68]	@ (8003190 <TIM_OC1_SetConfig+0x74>)
 800314a:	42b0      	cmp	r0, r6
 800314c:	d113      	bne.n	8003176 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800314e:	2608      	movs	r6, #8
 8003150:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003152:	68ce      	ldr	r6, [r1, #12]
 8003154:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003156:	2604      	movs	r6, #4
 8003158:	43b3      	bics	r3, r6
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800315a:	4290      	cmp	r0, r2
 800315c:	d005      	beq.n	800316a <TIM_OC1_SetConfig+0x4e>
 800315e:	4a0b      	ldr	r2, [pc, #44]	@ (800318c <TIM_OC1_SetConfig+0x70>)
 8003160:	4290      	cmp	r0, r2
 8003162:	d002      	beq.n	800316a <TIM_OC1_SetConfig+0x4e>
 8003164:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <TIM_OC1_SetConfig+0x74>)
 8003166:	4290      	cmp	r0, r2
 8003168:	d105      	bne.n	8003176 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800316a:	4a0a      	ldr	r2, [pc, #40]	@ (8003194 <TIM_OC1_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800316c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800316e:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003170:	694c      	ldr	r4, [r1, #20]
 8003172:	4334      	orrs	r4, r6
 8003174:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003176:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003178:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800317a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800317c:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800317e:	6203      	str	r3, [r0, #32]
}
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	46c0      	nop			@ (mov r8, r8)
 8003184:	fffeff8c 	.word	0xfffeff8c
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40014400 	.word	0x40014400
 8003190:	40014800 	.word	0x40014800
 8003194:	fffffcff 	.word	0xfffffcff

08003198 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b570      	push	{r4, r5, r6, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800319a:	4a17      	ldr	r2, [pc, #92]	@ (80031f8 <TIM_OC3_SetConfig+0x60>)
  tmpccer = TIMx->CCER;
 800319c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800319e:	6a03      	ldr	r3, [r0, #32]
 80031a0:	4013      	ands	r3, r2
 80031a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <TIM_OC3_SetConfig+0x64>)
  tmpccmrx = TIMx->CCMR2;
 80031a8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031aa:	401c      	ands	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ac:	680b      	ldr	r3, [r1, #0]
 80031ae:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b0:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <TIM_OC3_SetConfig+0x68>)
 80031b2:	401d      	ands	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031b4:	688b      	ldr	r3, [r1, #8]
 80031b6:	021b      	lsls	r3, r3, #8
 80031b8:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031ba:	4d12      	ldr	r5, [pc, #72]	@ (8003204 <TIM_OC3_SetConfig+0x6c>)
 80031bc:	42a8      	cmp	r0, r5
 80031be:	d10e      	bne.n	80031de <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031c0:	4d11      	ldr	r5, [pc, #68]	@ (8003208 <TIM_OC3_SetConfig+0x70>)
 80031c2:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c4:	68cb      	ldr	r3, [r1, #12]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031ca:	4d10      	ldr	r5, [pc, #64]	@ (800320c <TIM_OC3_SetConfig+0x74>)
 80031cc:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ce:	4d10      	ldr	r5, [pc, #64]	@ (8003210 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031d0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031d2:	4015      	ands	r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031d4:	698a      	ldr	r2, [r1, #24]
 80031d6:	4332      	orrs	r2, r6
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	432a      	orrs	r2, r5
 80031dc:	e005      	b.n	80031ea <TIM_OC3_SetConfig+0x52>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031de:	4d0d      	ldr	r5, [pc, #52]	@ (8003214 <TIM_OC3_SetConfig+0x7c>)
 80031e0:	42a8      	cmp	r0, r5
 80031e2:	d0f4      	beq.n	80031ce <TIM_OC3_SetConfig+0x36>
 80031e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003218 <TIM_OC3_SetConfig+0x80>)
 80031e6:	42a8      	cmp	r0, r5
 80031e8:	d0f1      	beq.n	80031ce <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ea:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031ec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80031ee:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80031f0:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f2:	6203      	str	r3, [r0, #32]
}
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	fffffeff 	.word	0xfffffeff
 80031fc:	fffeff8c 	.word	0xfffeff8c
 8003200:	fffffdff 	.word	0xfffffdff
 8003204:	40012c00 	.word	0x40012c00
 8003208:	fffff7ff 	.word	0xfffff7ff
 800320c:	fffffbff 	.word	0xfffffbff
 8003210:	ffffcfff 	.word	0xffffcfff
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800

0800321c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800321e:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <TIM_OC4_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 8003220:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003222:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003224:	4d11      	ldr	r5, [pc, #68]	@ (800326c <TIM_OC4_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003226:	4013      	ands	r3, r2
 8003228:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800322a:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800322c:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800322e:	402a      	ands	r2, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003230:	680d      	ldr	r5, [r1, #0]
 8003232:	022d      	lsls	r5, r5, #8
 8003234:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003236:	4a0e      	ldr	r2, [pc, #56]	@ (8003270 <TIM_OC4_SetConfig+0x54>)
 8003238:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800323a:	688a      	ldr	r2, [r1, #8]
 800323c:	0312      	lsls	r2, r2, #12
 800323e:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003240:	4c0c      	ldr	r4, [pc, #48]	@ (8003274 <TIM_OC4_SetConfig+0x58>)
 8003242:	42a0      	cmp	r0, r4
 8003244:	d005      	beq.n	8003252 <TIM_OC4_SetConfig+0x36>
 8003246:	4c0c      	ldr	r4, [pc, #48]	@ (8003278 <TIM_OC4_SetConfig+0x5c>)
 8003248:	42a0      	cmp	r0, r4
 800324a:	d002      	beq.n	8003252 <TIM_OC4_SetConfig+0x36>
 800324c:	4c0b      	ldr	r4, [pc, #44]	@ (800327c <TIM_OC4_SetConfig+0x60>)
 800324e:	42a0      	cmp	r0, r4
 8003250:	d104      	bne.n	800325c <TIM_OC4_SetConfig+0x40>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003252:	4c0b      	ldr	r4, [pc, #44]	@ (8003280 <TIM_OC4_SetConfig+0x64>)
 8003254:	401c      	ands	r4, r3

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003256:	694b      	ldr	r3, [r1, #20]
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325c:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800325e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003260:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003262:	6403      	str	r3, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003264:	6202      	str	r2, [r0, #32]
}
 8003266:	bd30      	pop	{r4, r5, pc}
 8003268:	ffffefff 	.word	0xffffefff
 800326c:	feff8cff 	.word	0xfeff8cff
 8003270:	ffffdfff 	.word	0xffffdfff
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800
 8003280:	ffffbfff 	.word	0xffffbfff

08003284 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003284:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	6a06      	ldr	r6, [r0, #32]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003288:	4c10      	ldr	r4, [pc, #64]	@ (80032cc <TIM_OC5_SetConfig+0x48>)
 800328a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800328c:	4a10      	ldr	r2, [pc, #64]	@ (80032d0 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800328e:	4023      	ands	r3, r4
 8003290:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003292:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 8003294:	6d45      	ldr	r5, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003296:	4015      	ands	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003298:	680a      	ldr	r2, [r1, #0]
 800329a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <TIM_OC5_SetConfig+0x50>)
 800329e:	4016      	ands	r6, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80032a0:	688a      	ldr	r2, [r1, #8]
 80032a2:	0412      	lsls	r2, r2, #16
 80032a4:	4332      	orrs	r2, r6

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	4e0c      	ldr	r6, [pc, #48]	@ (80032d8 <TIM_OC5_SetConfig+0x54>)
 80032a8:	42b0      	cmp	r0, r6
 80032aa:	d005      	beq.n	80032b8 <TIM_OC5_SetConfig+0x34>
 80032ac:	4e0b      	ldr	r6, [pc, #44]	@ (80032dc <TIM_OC5_SetConfig+0x58>)
 80032ae:	42b0      	cmp	r0, r6
 80032b0:	d002      	beq.n	80032b8 <TIM_OC5_SetConfig+0x34>
 80032b2:	4e0b      	ldr	r6, [pc, #44]	@ (80032e0 <TIM_OC5_SetConfig+0x5c>)
 80032b4:	42b0      	cmp	r0, r6
 80032b6:	d103      	bne.n	80032c0 <TIM_OC5_SetConfig+0x3c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80032b8:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80032ba:	694b      	ldr	r3, [r1, #20]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	4323      	orrs	r3, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c0:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80032c2:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 80032c4:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80032c6:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	6202      	str	r2, [r0, #32]
}
 80032ca:	bd70      	pop	{r4, r5, r6, pc}
 80032cc:	fffeffff 	.word	0xfffeffff
 80032d0:	fffeff8f 	.word	0xfffeff8f
 80032d4:	fffdffff 	.word	0xfffdffff
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40014400 	.word	0x40014400
 80032e0:	40014800 	.word	0x40014800

080032e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80032e4:	b530      	push	{r4, r5, lr}

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032e6:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <TIM_OC6_SetConfig+0x4c>)
  tmpccer = TIMx->CCER;
 80032e8:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032ea:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032ec:	4d11      	ldr	r5, [pc, #68]	@ (8003334 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80032ee:	4013      	ands	r3, r2
 80032f0:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80032f2:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 80032f4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80032f6:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	680d      	ldr	r5, [r1, #0]
 80032fa:	022d      	lsls	r5, r5, #8
 80032fc:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80032fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003338 <TIM_OC6_SetConfig+0x54>)
 8003300:	4014      	ands	r4, r2
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003302:	688a      	ldr	r2, [r1, #8]
 8003304:	0512      	lsls	r2, r2, #20
 8003306:	4322      	orrs	r2, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	4c0c      	ldr	r4, [pc, #48]	@ (800333c <TIM_OC6_SetConfig+0x58>)
 800330a:	42a0      	cmp	r0, r4
 800330c:	d005      	beq.n	800331a <TIM_OC6_SetConfig+0x36>
 800330e:	4c0c      	ldr	r4, [pc, #48]	@ (8003340 <TIM_OC6_SetConfig+0x5c>)
 8003310:	42a0      	cmp	r0, r4
 8003312:	d002      	beq.n	800331a <TIM_OC6_SetConfig+0x36>
 8003314:	4c0b      	ldr	r4, [pc, #44]	@ (8003344 <TIM_OC6_SetConfig+0x60>)
 8003316:	42a0      	cmp	r0, r4
 8003318:	d104      	bne.n	8003324 <TIM_OC6_SetConfig+0x40>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800331a:	4c0b      	ldr	r4, [pc, #44]	@ (8003348 <TIM_OC6_SetConfig+0x64>)
 800331c:	401c      	ands	r4, r3
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800331e:	694b      	ldr	r3, [r1, #20]
 8003320:	029b      	lsls	r3, r3, #10
 8003322:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003326:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR3 = tmpccmrx;
 8003328:	6545      	str	r5, [r0, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800332a:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332c:	6202      	str	r2, [r0, #32]
}
 800332e:	bd30      	pop	{r4, r5, pc}
 8003330:	ffefffff 	.word	0xffefffff
 8003334:	feff8fff 	.word	0xfeff8fff
 8003338:	ffdfffff 	.word	0xffdfffff
 800333c:	40012c00 	.word	0x40012c00
 8003340:	40014400 	.word	0x40014400
 8003344:	40014800 	.word	0x40014800
 8003348:	fffbffff 	.word	0xfffbffff

0800334c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800334c:	0001      	movs	r1, r0
{
 800334e:	0003      	movs	r3, r0
    return HAL_ERROR;
 8003350:	2001      	movs	r0, #1
{
 8003352:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8003354:	313d      	adds	r1, #61	@ 0x3d
 8003356:	780c      	ldrb	r4, [r1, #0]
 8003358:	b2e2      	uxtb	r2, r4
 800335a:	4284      	cmp	r4, r0
 800335c:	d118      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0x44>
  htim->State = HAL_TIM_STATE_BUSY;
 800335e:	1800      	adds	r0, r0, r0
 8003360:	7008      	strb	r0, [r1, #0]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68d9      	ldr	r1, [r3, #12]
 8003366:	4311      	orrs	r1, r2
 8003368:	60d9      	str	r1, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800336a:	490b      	ldr	r1, [pc, #44]	@ (8003398 <HAL_TIM_Base_Start_IT+0x4c>)
 800336c:	428b      	cmp	r3, r1
 800336e:	d002      	beq.n	8003376 <HAL_TIM_Base_Start_IT+0x2a>
 8003370:	490a      	ldr	r1, [pc, #40]	@ (800339c <HAL_TIM_Base_Start_IT+0x50>)
 8003372:	428b      	cmp	r3, r1
 8003374:	d10d      	bne.n	8003392 <HAL_TIM_Base_Start_IT+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4909      	ldr	r1, [pc, #36]	@ (80033a0 <HAL_TIM_Base_Start_IT+0x54>)
 800337a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	2a06      	cmp	r2, #6
 800337e:	d006      	beq.n	800338e <HAL_TIM_Base_Start_IT+0x42>
 8003380:	3907      	subs	r1, #7
 8003382:	428a      	cmp	r2, r1
 8003384:	d003      	beq.n	800338e <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 8003386:	2201      	movs	r2, #1
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800338e:	2000      	movs	r0, #0
}
 8003390:	bd10      	pop	{r4, pc}
    __HAL_TIM_ENABLE(htim);
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	e7f9      	b.n	800338a <HAL_TIM_Base_Start_IT+0x3e>
 8003396:	46c0      	nop			@ (mov r8, r8)
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40000400 	.word	0x40000400
 80033a0:	00010007 	.word	0x00010007

080033a4 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_OnePulse_MspInit>:
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80033aa:	4770      	bx	lr

080033ac <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80033ac:	4770      	bx	lr

080033ae <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80033ae:	4770      	bx	lr

080033b0 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033b0:	2202      	movs	r2, #2
  uint32_t itsource = htim->Instance->DIER;
 80033b2:	6803      	ldr	r3, [r0, #0]
{
 80033b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 80033b6:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033b8:	691e      	ldr	r6, [r3, #16]
{
 80033ba:	0004      	movs	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033bc:	4216      	tst	r6, r2
 80033be:	d00d      	beq.n	80033dc <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033c0:	4215      	tst	r5, r2
 80033c2:	d00b      	beq.n	80033dc <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033c4:	3a05      	subs	r2, #5
 80033c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c8:	3204      	adds	r2, #4
 80033ca:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	079b      	lsls	r3, r3, #30
 80033d0:	d100      	bne.n	80033d4 <HAL_TIM_IRQHandler+0x24>
 80033d2:	e07c      	b.n	80034ce <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80033d4:	f7ff ffe9 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033d8:	2300      	movs	r3, #0
 80033da:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033dc:	2304      	movs	r3, #4
 80033de:	421e      	tst	r6, r3
 80033e0:	d012      	beq.n	8003408 <HAL_TIM_IRQHandler+0x58>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033e2:	421d      	tst	r5, r3
 80033e4:	d010      	beq.n	8003408 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033e6:	2205      	movs	r2, #5
 80033e8:	6823      	ldr	r3, [r4, #0]
 80033ea:	4252      	negs	r2, r2
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ee:	3207      	adds	r2, #7
 80033f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f2:	699a      	ldr	r2, [r3, #24]
 80033f4:	23c0      	movs	r3, #192	@ 0xc0
 80033f6:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80033f8:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033fa:	421a      	tst	r2, r3
 80033fc:	d100      	bne.n	8003400 <HAL_TIM_IRQHandler+0x50>
 80033fe:	e06c      	b.n	80034da <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003400:	f7ff ffd3 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003404:	2300      	movs	r3, #0
 8003406:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003408:	2308      	movs	r3, #8
 800340a:	421e      	tst	r6, r3
 800340c:	d00f      	beq.n	800342e <HAL_TIM_IRQHandler+0x7e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800340e:	421d      	tst	r5, r3
 8003410:	d00d      	beq.n	800342e <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003412:	2209      	movs	r2, #9
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	4252      	negs	r2, r2
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800341a:	320d      	adds	r2, #13
 800341c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800341e:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003420:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003422:	079b      	lsls	r3, r3, #30
 8003424:	d05f      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003426:	f7ff ffc0 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	2300      	movs	r3, #0
 800342c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800342e:	2310      	movs	r3, #16
 8003430:	421e      	tst	r6, r3
 8003432:	d011      	beq.n	8003458 <HAL_TIM_IRQHandler+0xa8>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003434:	421d      	tst	r5, r3
 8003436:	d00f      	beq.n	8003458 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003438:	2211      	movs	r2, #17
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	4252      	negs	r2, r2
 800343e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003440:	3219      	adds	r2, #25
 8003442:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	23c0      	movs	r3, #192	@ 0xc0
 8003448:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800344c:	421a      	tst	r2, r3
 800344e:	d050      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_IC_CaptureCallback(htim);
 8003450:	f7ff ffab 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003454:	2300      	movs	r3, #0
 8003456:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003458:	2301      	movs	r3, #1
 800345a:	421e      	tst	r6, r3
 800345c:	d008      	beq.n	8003470 <HAL_TIM_IRQHandler+0xc0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800345e:	421d      	tst	r5, r3
 8003460:	d006      	beq.n	8003470 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003462:	2202      	movs	r2, #2
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8003468:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800346a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800346c:	f7fe ff34 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003470:	2382      	movs	r3, #130	@ 0x82
 8003472:	019b      	lsls	r3, r3, #6
 8003474:	421e      	tst	r6, r3
 8003476:	d007      	beq.n	8003488 <HAL_TIM_IRQHandler+0xd8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003478:	062b      	lsls	r3, r5, #24
 800347a:	d505      	bpl.n	8003488 <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	4a20      	ldr	r2, [pc, #128]	@ (8003500 <HAL_TIM_IRQHandler+0x150>)
      HAL_TIMEx_BreakCallback(htim);
 8003480:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003482:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003484:	f000 fad9 	bl	8003a3a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003488:	05f3      	lsls	r3, r6, #23
 800348a:	d507      	bpl.n	800349c <HAL_TIM_IRQHandler+0xec>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800348c:	062b      	lsls	r3, r5, #24
 800348e:	d505      	bpl.n	800349c <HAL_TIM_IRQHandler+0xec>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <HAL_TIM_IRQHandler+0x154>)
      HAL_TIMEx_Break2Callback(htim);
 8003494:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003496:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003498:	f000 fad0 	bl	8003a3c <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800349c:	2340      	movs	r3, #64	@ 0x40
 800349e:	421e      	tst	r6, r3
 80034a0:	d008      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x104>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a2:	421d      	tst	r5, r3
 80034a4:	d006      	beq.n	80034b4 <HAL_TIM_IRQHandler+0x104>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034a6:	2241      	movs	r2, #65	@ 0x41
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 80034ac:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80034ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80034b0:	f7ff ff7d 	bl	80033ae <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034b4:	2320      	movs	r3, #32
 80034b6:	421e      	tst	r6, r3
 80034b8:	d008      	beq.n	80034cc <HAL_TIM_IRQHandler+0x11c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ba:	421d      	tst	r5, r3
 80034bc:	d006      	beq.n	80034cc <HAL_TIM_IRQHandler+0x11c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034be:	2221      	movs	r2, #33	@ 0x21
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 80034c4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80034c8:	f000 fab6 	bl	8003a38 <HAL_TIMEx_CommutCallback>
}
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ce:	f7ff ff6b 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d2:	0020      	movs	r0, r4
 80034d4:	f7ff ff6a 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
 80034d8:	e77e      	b.n	80033d8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034da:	f7ff ff65 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034de:	0020      	movs	r0, r4
 80034e0:	f7ff ff64 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
 80034e4:	e78e      	b.n	8003404 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	f7ff ff5f 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ea:	0020      	movs	r0, r4
 80034ec:	f7ff ff5e 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
 80034f0:	e79b      	b.n	800342a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	f7ff ff59 	bl	80033a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f6:	0020      	movs	r0, r4
 80034f8:	f7ff ff58 	bl	80033ac <HAL_TIM_PWM_PulseFinishedCallback>
 80034fc:	e7aa      	b.n	8003454 <HAL_TIM_IRQHandler+0xa4>
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	ffffdf7f 	.word	0xffffdf7f
 8003504:	fffffeff 	.word	0xfffffeff

08003508 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003508:	4a1c      	ldr	r2, [pc, #112]	@ (800357c <TIM_Base_SetConfig+0x74>)
{
 800350a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800350c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800350e:	4290      	cmp	r0, r2
 8003510:	d002      	beq.n	8003518 <TIM_Base_SetConfig+0x10>
 8003512:	4c1b      	ldr	r4, [pc, #108]	@ (8003580 <TIM_Base_SetConfig+0x78>)
 8003514:	42a0      	cmp	r0, r4
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	2470      	movs	r4, #112	@ 0x70
 800351a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800351c:	684c      	ldr	r4, [r1, #4]
 800351e:	4323      	orrs	r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003520:	4290      	cmp	r0, r2
 8003522:	d00b      	beq.n	800353c <TIM_Base_SetConfig+0x34>
 8003524:	4c16      	ldr	r4, [pc, #88]	@ (8003580 <TIM_Base_SetConfig+0x78>)
 8003526:	42a0      	cmp	r0, r4
 8003528:	d008      	beq.n	800353c <TIM_Base_SetConfig+0x34>
 800352a:	4c16      	ldr	r4, [pc, #88]	@ (8003584 <TIM_Base_SetConfig+0x7c>)
 800352c:	42a0      	cmp	r0, r4
 800352e:	d005      	beq.n	800353c <TIM_Base_SetConfig+0x34>
 8003530:	4c15      	ldr	r4, [pc, #84]	@ (8003588 <TIM_Base_SetConfig+0x80>)
 8003532:	42a0      	cmp	r0, r4
 8003534:	d002      	beq.n	800353c <TIM_Base_SetConfig+0x34>
 8003536:	4c15      	ldr	r4, [pc, #84]	@ (800358c <TIM_Base_SetConfig+0x84>)
 8003538:	42a0      	cmp	r0, r4
 800353a:	d103      	bne.n	8003544 <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 800353c:	4c14      	ldr	r4, [pc, #80]	@ (8003590 <TIM_Base_SetConfig+0x88>)
 800353e:	401c      	ands	r4, r3
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003540:	68cb      	ldr	r3, [r1, #12]
 8003542:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003544:	2480      	movs	r4, #128	@ 0x80
 8003546:	43a3      	bics	r3, r4
 8003548:	694c      	ldr	r4, [r1, #20]
 800354a:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800354c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354e:	688b      	ldr	r3, [r1, #8]
 8003550:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003552:	680b      	ldr	r3, [r1, #0]
 8003554:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003556:	4290      	cmp	r0, r2
 8003558:	d005      	beq.n	8003566 <TIM_Base_SetConfig+0x5e>
 800355a:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <TIM_Base_SetConfig+0x80>)
 800355c:	4298      	cmp	r0, r3
 800355e:	d002      	beq.n	8003566 <TIM_Base_SetConfig+0x5e>
 8003560:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <TIM_Base_SetConfig+0x84>)
 8003562:	4298      	cmp	r0, r3
 8003564:	d101      	bne.n	800356a <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 8003566:	690b      	ldr	r3, [r1, #16]
 8003568:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 800356a:	2201      	movs	r2, #1
 800356c:	6142      	str	r2, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800356e:	6903      	ldr	r3, [r0, #16]
 8003570:	4213      	tst	r3, r2
 8003572:	d002      	beq.n	800357a <TIM_Base_SetConfig+0x72>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003574:	6903      	ldr	r3, [r0, #16]
 8003576:	4393      	bics	r3, r2
 8003578:	6103      	str	r3, [r0, #16]
}
 800357a:	bd10      	pop	{r4, pc}
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40002000 	.word	0x40002000
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800
 8003590:	fffffcff 	.word	0xfffffcff

08003594 <HAL_TIM_Base_Init>:
{
 8003594:	b570      	push	{r4, r5, r6, lr}
 8003596:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
  if (htim == NULL)
 800359a:	2c00      	cmp	r4, #0
 800359c:	d023      	beq.n	80035e6 <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 800359e:	0025      	movs	r5, r4
 80035a0:	353d      	adds	r5, #61	@ 0x3d
 80035a2:	782b      	ldrb	r3, [r5, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d105      	bne.n	80035b6 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80035aa:	0023      	movs	r3, r4
 80035ac:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80035ae:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80035b0:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80035b2:	f7ff f8ed 	bl	8002790 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ba:	6820      	ldr	r0, [r4, #0]
 80035bc:	1d21      	adds	r1, r4, #4
 80035be:	f7ff ffa3 	bl	8003508 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c2:	0022      	movs	r2, r4
 80035c4:	2301      	movs	r3, #1
  return HAL_OK;
 80035c6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c8:	3248      	adds	r2, #72	@ 0x48
 80035ca:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035cc:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	3a0a      	subs	r2, #10
 80035d0:	7013      	strb	r3, [r2, #0]
 80035d2:	7053      	strb	r3, [r2, #1]
 80035d4:	7093      	strb	r3, [r2, #2]
 80035d6:	70d3      	strb	r3, [r2, #3]
 80035d8:	7113      	strb	r3, [r2, #4]
 80035da:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035dc:	7193      	strb	r3, [r2, #6]
 80035de:	71d3      	strb	r3, [r2, #7]
 80035e0:	7213      	strb	r3, [r2, #8]
 80035e2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	702b      	strb	r3, [r5, #0]
}
 80035e6:	bd70      	pop	{r4, r5, r6, pc}

080035e8 <HAL_TIM_OC_Init>:
{
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80035ec:	2001      	movs	r0, #1
  if (htim == NULL)
 80035ee:	2c00      	cmp	r4, #0
 80035f0:	d023      	beq.n	800363a <HAL_TIM_OC_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	0025      	movs	r5, r4
 80035f4:	353d      	adds	r5, #61	@ 0x3d
 80035f6:	782b      	ldrb	r3, [r5, #0]
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d105      	bne.n	800360a <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80035fe:	0023      	movs	r3, r4
 8003600:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003602:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8003604:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OC_MspInit(htim);
 8003606:	f7ff fecd 	bl	80033a4 <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800360a:	2302      	movs	r3, #2
 800360c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	1d21      	adds	r1, r4, #4
 8003612:	f7ff ff79 	bl	8003508 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003616:	0022      	movs	r2, r4
 8003618:	2301      	movs	r3, #1
  return HAL_OK;
 800361a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800361c:	3248      	adds	r2, #72	@ 0x48
 800361e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	3447      	adds	r4, #71	@ 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003622:	3a0a      	subs	r2, #10
 8003624:	7013      	strb	r3, [r2, #0]
 8003626:	7053      	strb	r3, [r2, #1]
 8003628:	7093      	strb	r3, [r2, #2]
 800362a:	70d3      	strb	r3, [r2, #3]
 800362c:	7113      	strb	r3, [r2, #4]
 800362e:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	7193      	strb	r3, [r2, #6]
 8003632:	71d3      	strb	r3, [r2, #7]
 8003634:	7213      	strb	r3, [r2, #8]
 8003636:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003638:	702b      	strb	r3, [r5, #0]
}
 800363a:	bd70      	pop	{r4, r5, r6, pc}

0800363c <HAL_TIM_OnePulse_Init>:
{
 800363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800363e:	0004      	movs	r4, r0
 8003640:	000f      	movs	r7, r1
    return HAL_ERROR;
 8003642:	2001      	movs	r0, #1
  if (htim == NULL)
 8003644:	2c00      	cmp	r4, #0
 8003646:	d025      	beq.n	8003694 <HAL_TIM_OnePulse_Init+0x58>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003648:	0025      	movs	r5, r4
 800364a:	353d      	adds	r5, #61	@ 0x3d
 800364c:	782b      	ldrb	r3, [r5, #0]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d105      	bne.n	8003660 <HAL_TIM_OnePulse_Init+0x24>
    htim->Lock = HAL_UNLOCKED;
 8003654:	0023      	movs	r3, r4
 8003656:	333c      	adds	r3, #60	@ 0x3c
    HAL_TIM_OnePulse_MspInit(htim);
 8003658:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800365a:	701a      	strb	r2, [r3, #0]
    HAL_TIM_OnePulse_MspInit(htim);
 800365c:	f7ff fea3 	bl	80033a6 <HAL_TIM_OnePulse_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003662:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003666:	c940      	ldmia	r1!, {r6}
 8003668:	0030      	movs	r0, r6
 800366a:	f7ff ff4d 	bl	8003508 <TIM_Base_SetConfig>
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800366e:	2208      	movs	r2, #8
 8003670:	6833      	ldr	r3, [r6, #0]
  return HAL_OK;
 8003672:	2000      	movs	r0, #0
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003674:	4393      	bics	r3, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003676:	0022      	movs	r2, r4
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003678:	6033      	str	r3, [r6, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367a:	2301      	movs	r3, #1
  htim->Instance->CR1 |= OnePulseMode;
 800367c:	6831      	ldr	r1, [r6, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	3248      	adds	r2, #72	@ 0x48
  htim->Instance->CR1 |= OnePulseMode;
 8003680:	4339      	orrs	r1, r7
 8003682:	6031      	str	r1, [r6, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003684:	3a0a      	subs	r2, #10
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	3445      	adds	r4, #69	@ 0x45
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003688:	7293      	strb	r3, [r2, #10]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	7053      	strb	r3, [r2, #1]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	7193      	strb	r3, [r2, #6]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003690:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8003692:	702b      	strb	r3, [r5, #0]
}
 8003694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003698 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003698:	2210      	movs	r2, #16
{
 800369a:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
 800369c:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800369e:	6a03      	ldr	r3, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036a0:	4c16      	ldr	r4, [pc, #88]	@ (80036fc <TIM_OC2_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a2:	4393      	bics	r3, r2
 80036a4:	6203      	str	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80036a6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80036a8:	6983      	ldr	r3, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036aa:	4023      	ands	r3, r4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	680c      	ldr	r4, [r1, #0]
 80036ae:	0224      	lsls	r4, r4, #8
 80036b0:	431c      	orrs	r4, r3
  tmpccer &= ~TIM_CCER_CC2P;
 80036b2:	2320      	movs	r3, #32
 80036b4:	439d      	bics	r5, r3
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b6:	688b      	ldr	r3, [r1, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	432b      	orrs	r3, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036bc:	4d10      	ldr	r5, [pc, #64]	@ (8003700 <TIM_OC2_SetConfig+0x68>)
 80036be:	42a8      	cmp	r0, r5
 80036c0:	d10f      	bne.n	80036e2 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c2:	2580      	movs	r5, #128	@ 0x80
 80036c4:	43ab      	bics	r3, r5
 80036c6:	001e      	movs	r6, r3
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036c8:	68cb      	ldr	r3, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NE;
 80036ca:	3d40      	subs	r5, #64	@ 0x40
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	4333      	orrs	r3, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80036d0:	43ab      	bics	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d2:	4d0c      	ldr	r5, [pc, #48]	@ (8003704 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036d6:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d8:	698a      	ldr	r2, [r1, #24]
 80036da:	4332      	orrs	r2, r6
 80036dc:	0092      	lsls	r2, r2, #2
 80036de:	432a      	orrs	r2, r5
 80036e0:	e005      	b.n	80036ee <TIM_OC2_SetConfig+0x56>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e2:	4d09      	ldr	r5, [pc, #36]	@ (8003708 <TIM_OC2_SetConfig+0x70>)
 80036e4:	42a8      	cmp	r0, r5
 80036e6:	d0f4      	beq.n	80036d2 <TIM_OC2_SetConfig+0x3a>
 80036e8:	4d08      	ldr	r5, [pc, #32]	@ (800370c <TIM_OC2_SetConfig+0x74>)
 80036ea:	42a8      	cmp	r0, r5
 80036ec:	d0f1      	beq.n	80036d2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80036ee:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80036f0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80036f2:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80036f4:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80036f6:	6203      	str	r3, [r0, #32]
}
 80036f8:	bd70      	pop	{r4, r5, r6, pc}
 80036fa:	46c0      	nop			@ (mov r8, r8)
 80036fc:	feff8cff 	.word	0xfeff8cff
 8003700:	40012c00 	.word	0x40012c00
 8003704:	fffff3ff 	.word	0xfffff3ff
 8003708:	40014400 	.word	0x40014400
 800370c:	40014800 	.word	0x40014800

08003710 <HAL_TIM_OC_ConfigChannel>:
{
 8003710:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003712:	0004      	movs	r4, r0
 8003714:	343c      	adds	r4, #60	@ 0x3c
 8003716:	7825      	ldrb	r5, [r4, #0]
{
 8003718:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800371a:	2002      	movs	r0, #2
 800371c:	2d01      	cmp	r5, #1
 800371e:	d00b      	beq.n	8003738 <HAL_TIM_OC_ConfigChannel+0x28>
  switch (Channel)
 8003720:	2a0c      	cmp	r2, #12
 8003722:	d01f      	beq.n	8003764 <HAL_TIM_OC_ConfigChannel+0x54>
 8003724:	d809      	bhi.n	800373a <HAL_TIM_OC_ConfigChannel+0x2a>
 8003726:	2a04      	cmp	r2, #4
 8003728:	d014      	beq.n	8003754 <HAL_TIM_OC_ConfigChannel+0x44>
 800372a:	2a08      	cmp	r2, #8
 800372c:	d016      	beq.n	800375c <HAL_TIM_OC_ConfigChannel+0x4c>
 800372e:	2a00      	cmp	r2, #0
 8003730:	d00b      	beq.n	800374a <HAL_TIM_OC_ConfigChannel+0x3a>
 8003732:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003734:	2300      	movs	r3, #0
 8003736:	7023      	strb	r3, [r4, #0]
}
 8003738:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 800373a:	2a10      	cmp	r2, #16
 800373c:	d016      	beq.n	800376c <HAL_TIM_OC_ConfigChannel+0x5c>
 800373e:	2a14      	cmp	r2, #20
 8003740:	d1f7      	bne.n	8003732 <HAL_TIM_OC_ConfigChannel+0x22>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	f7ff fdce 	bl	80032e4 <TIM_OC6_SetConfig>
      break;
 8003748:	e002      	b.n	8003750 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	f7ff fce6 	bl	800311c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8003750:	2000      	movs	r0, #0
 8003752:	e7ef      	b.n	8003734 <HAL_TIM_OC_ConfigChannel+0x24>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003754:	6818      	ldr	r0, [r3, #0]
 8003756:	f7ff ff9f 	bl	8003698 <TIM_OC2_SetConfig>
      break;
 800375a:	e7f9      	b.n	8003750 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f7ff fd1b 	bl	8003198 <TIM_OC3_SetConfig>
      break;
 8003762:	e7f5      	b.n	8003750 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	f7ff fd59 	bl	800321c <TIM_OC4_SetConfig>
      break;
 800376a:	e7f1      	b.n	8003750 <HAL_TIM_OC_ConfigChannel+0x40>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f7ff fd89 	bl	8003284 <TIM_OC5_SetConfig>
      break;
 8003772:	e7ed      	b.n	8003750 <HAL_TIM_OC_ConfigChannel+0x40>

08003774 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003774:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003776:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003778:	4d03      	ldr	r5, [pc, #12]	@ (8003788 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800377a:	430a      	orrs	r2, r1
 800377c:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377e:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003780:	4313      	orrs	r3, r2
 8003782:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003784:	6083      	str	r3, [r0, #8]
}
 8003786:	bd30      	pop	{r4, r5, pc}
 8003788:	ffff00ff 	.word	0xffff00ff

0800378c <HAL_TIM_ConfigClockSource>:
{
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800378e:	0005      	movs	r5, r0
 8003790:	2202      	movs	r2, #2
 8003792:	353c      	adds	r5, #60	@ 0x3c
 8003794:	782c      	ldrb	r4, [r5, #0]
{
 8003796:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003798:	0010      	movs	r0, r2
 800379a:	2c01      	cmp	r4, #1
 800379c:	d01b      	beq.n	80037d6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800379e:	001e      	movs	r6, r3
  __HAL_LOCK(htim);
 80037a0:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80037a2:	363d      	adds	r6, #61	@ 0x3d
  __HAL_LOCK(htim);
 80037a4:	7028      	strb	r0, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80037a6:	7032      	strb	r2, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 80037a8:	681c      	ldr	r4, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037aa:	4a41      	ldr	r2, [pc, #260]	@ (80038b0 <HAL_TIM_ConfigClockSource+0x124>)
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ae:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80037b0:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80037b2:	680b      	ldr	r3, [r1, #0]
 80037b4:	2b60      	cmp	r3, #96	@ 0x60
 80037b6:	d04e      	beq.n	8003856 <HAL_TIM_ConfigClockSource+0xca>
 80037b8:	d82d      	bhi.n	8003816 <HAL_TIM_ConfigClockSource+0x8a>
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	d062      	beq.n	8003884 <HAL_TIM_ConfigClockSource+0xf8>
 80037be:	d813      	bhi.n	80037e8 <HAL_TIM_ConfigClockSource+0x5c>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d00b      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x50>
 80037c4:	d808      	bhi.n	80037d8 <HAL_TIM_ConfigClockSource+0x4c>
 80037c6:	2210      	movs	r2, #16
 80037c8:	0019      	movs	r1, r3
 80037ca:	4391      	bics	r1, r2
 80037cc:	d006      	beq.n	80037dc <HAL_TIM_ConfigClockSource+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80037ce:	2301      	movs	r3, #1
 80037d0:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 80037d2:	2300      	movs	r3, #0
 80037d4:	702b      	strb	r3, [r5, #0]
}
 80037d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80037d8:	2b30      	cmp	r3, #48	@ 0x30
 80037da:	d1f8      	bne.n	80037ce <HAL_TIM_ConfigClockSource+0x42>
  tmpsmcr = TIMx->SMCR;
 80037dc:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80037de:	4935      	ldr	r1, [pc, #212]	@ (80038b4 <HAL_TIM_ConfigClockSource+0x128>)
 80037e0:	400a      	ands	r2, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037e2:	4313      	orrs	r3, r2
 80037e4:	2207      	movs	r2, #7
 80037e6:	e028      	b.n	800383a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 80037e8:	2b50      	cmp	r3, #80	@ 0x50
 80037ea:	d1f0      	bne.n	80037ce <HAL_TIM_ConfigClockSource+0x42>
                               sClockSourceConfig->ClockPolarity,
 80037ec:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80037ee:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 80037f0:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f2:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037f4:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037f6:	4387      	bics	r7, r0
 80037f8:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fa:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80037fc:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037fe:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003800:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003802:	200a      	movs	r0, #10
 8003804:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 8003806:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003808:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800380a:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 800380e:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003810:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003812:	2357      	movs	r3, #87	@ 0x57
 8003814:	e011      	b.n	800383a <HAL_TIM_ConfigClockSource+0xae>
  switch (sClockSourceConfig->ClockSource)
 8003816:	2280      	movs	r2, #128	@ 0x80
 8003818:	0152      	lsls	r2, r2, #5
 800381a:	4293      	cmp	r3, r2
 800381c:	d00f      	beq.n	800383e <HAL_TIM_ConfigClockSource+0xb2>
 800381e:	2280      	movs	r2, #128	@ 0x80
 8003820:	0192      	lsls	r2, r2, #6
 8003822:	4293      	cmp	r3, r2
 8003824:	d00d      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xb6>
 8003826:	2b70      	cmp	r3, #112	@ 0x70
 8003828:	d1d1      	bne.n	80037ce <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	68cb      	ldr	r3, [r1, #12]
 800382c:	684a      	ldr	r2, [r1, #4]
 800382e:	0020      	movs	r0, r4
 8003830:	6889      	ldr	r1, [r1, #8]
 8003832:	f7ff ff9f 	bl	8003774 <TIM_ETR_SetConfig>
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003836:	2377      	movs	r3, #119	@ 0x77
      tmpsmcr = htim->Instance->SMCR;
 8003838:	68a2      	ldr	r2, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800383a:	4313      	orrs	r3, r2
      htim->Instance->SMCR = tmpsmcr;
 800383c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2000      	movs	r0, #0
 8003840:	e7c5      	b.n	80037ce <HAL_TIM_ConfigClockSource+0x42>
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	68cb      	ldr	r3, [r1, #12]
 8003844:	684a      	ldr	r2, [r1, #4]
 8003846:	0020      	movs	r0, r4
 8003848:	6889      	ldr	r1, [r1, #8]
 800384a:	f7ff ff93 	bl	8003774 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	68a2      	ldr	r2, [r4, #8]
 8003852:	01db      	lsls	r3, r3, #7
 8003854:	e7f1      	b.n	800383a <HAL_TIM_ConfigClockSource+0xae>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003856:	2710      	movs	r7, #16
                               sClockSourceConfig->ClockPolarity,
 8003858:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800385a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 800385c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385e:	6a20      	ldr	r0, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003860:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003862:	43b8      	bics	r0, r7
 8003864:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003866:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003868:	4f13      	ldr	r7, [pc, #76]	@ (80038b8 <HAL_TIM_ConfigClockSource+0x12c>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800386a:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386c:	4038      	ands	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800386e:	4302      	orrs	r2, r0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003870:	20a0      	movs	r0, #160	@ 0xa0
 8003872:	4381      	bics	r1, r0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003874:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003876:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 8003878:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800387a:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800387c:	4b0d      	ldr	r3, [pc, #52]	@ (80038b4 <HAL_TIM_ConfigClockSource+0x128>)
 800387e:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003880:	2367      	movs	r3, #103	@ 0x67
 8003882:	e7da      	b.n	800383a <HAL_TIM_ConfigClockSource+0xae>
                               sClockSourceConfig->ClockPolarity,
 8003884:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003886:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8003888:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	6a27      	ldr	r7, [r4, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800388c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388e:	4387      	bics	r7, r0
 8003890:	6227      	str	r7, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003892:	27f0      	movs	r7, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003894:	69a0      	ldr	r0, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003896:	43b8      	bics	r0, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	4303      	orrs	r3, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800389a:	200a      	movs	r0, #10
 800389c:	4381      	bics	r1, r0
  tmpccer |= TIM_ICPolarity;
 800389e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80038a0:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80038a2:	6222      	str	r2, [r4, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <HAL_TIM_ConfigClockSource+0x128>)
  tmpsmcr = TIMx->SMCR;
 80038a6:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a8:	401a      	ands	r2, r3
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038aa:	2347      	movs	r3, #71	@ 0x47
 80038ac:	e7c5      	b.n	800383a <HAL_TIM_ConfigClockSource+0xae>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	ffce0088 	.word	0xffce0088
 80038b4:	ffcfff8f 	.word	0xffcfff8f
 80038b8:	ffff0fff 	.word	0xffff0fff

080038bc <TIM_SlaveTimer_SetConfig.constprop.0>:
  tmpsmcr = htim->Instance->SMCR;
 80038bc:	6800      	ldr	r0, [r0, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038be:	4b30      	ldr	r3, [pc, #192]	@ (8003980 <TIM_SlaveTimer_SetConfig.constprop.0+0xc4>)
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	6882      	ldr	r2, [r0, #8]
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
 80038c2:	b570      	push	{r4, r5, r6, lr}
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c4:	401a      	ands	r2, r3
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038c6:	684b      	ldr	r3, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038c8:	4c2e      	ldr	r4, [pc, #184]	@ (8003984 <TIM_SlaveTimer_SetConfig.constprop.0+0xc8>)
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80038ca:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038cc:	4022      	ands	r2, r4
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038ce:	680c      	ldr	r4, [r1, #0]
 80038d0:	4322      	orrs	r2, r4
  htim->Instance->SMCR = tmpsmcr;
 80038d2:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80038d4:	2b50      	cmp	r3, #80	@ 0x50
 80038d6:	d02d      	beq.n	8003934 <TIM_SlaveTimer_SetConfig.constprop.0+0x78>
 80038d8:	d810      	bhi.n	80038fc <TIM_SlaveTimer_SetConfig.constprop.0+0x40>
 80038da:	2b40      	cmp	r3, #64	@ 0x40
 80038dc:	d019      	beq.n	8003912 <TIM_SlaveTimer_SetConfig.constprop.0+0x56>
        return HAL_ERROR;
 80038de:	2201      	movs	r2, #1
  switch (sSlaveConfig->InputTrigger)
 80038e0:	2b40      	cmp	r3, #64	@ 0x40
 80038e2:	d809      	bhi.n	80038f8 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d003      	beq.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
 80038e8:	d804      	bhi.n	80038f4 <TIM_SlaveTimer_SetConfig.constprop.0+0x38>
 80038ea:	2110      	movs	r1, #16
 80038ec:	438b      	bics	r3, r1
 80038ee:	d103      	bne.n	80038f8 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2200      	movs	r2, #0
 80038f2:	e001      	b.n	80038f8 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
  switch (sSlaveConfig->InputTrigger)
 80038f4:	2b30      	cmp	r3, #48	@ 0x30
 80038f6:	d0fb      	beq.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
}
 80038f8:	0010      	movs	r0, r2
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 80038fc:	2b60      	cmp	r3, #96	@ 0x60
 80038fe:	d02b      	beq.n	8003958 <TIM_SlaveTimer_SetConfig.constprop.0+0x9c>
        return HAL_ERROR;
 8003900:	2201      	movs	r2, #1
  switch (sSlaveConfig->InputTrigger)
 8003902:	2b70      	cmp	r3, #112	@ 0x70
 8003904:	d1f8      	bne.n	80038f8 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	690b      	ldr	r3, [r1, #16]
 8003908:	688a      	ldr	r2, [r1, #8]
 800390a:	68c9      	ldr	r1, [r1, #12]
 800390c:	f7ff ff32 	bl	8003774 <TIM_ETR_SetConfig>
      break;
 8003910:	e7ee      	b.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003912:	2501      	movs	r5, #1
        return HAL_ERROR;
 8003914:	002a      	movs	r2, r5
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003916:	2c05      	cmp	r4, #5
 8003918:	d0ee      	beq.n	80038f8 <TIM_SlaveTimer_SetConfig.constprop.0+0x3c>
      tmpccer = htim->Instance->CCER;
 800391a:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800391c:	6a03      	ldr	r3, [r0, #32]
 800391e:	43ab      	bics	r3, r5
 8003920:	6203      	str	r3, [r0, #32]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003922:	23f0      	movs	r3, #240	@ 0xf0
      tmpccmr1 = htim->Instance->CCMR1;
 8003924:	6982      	ldr	r2, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003926:	439a      	bics	r2, r3
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003928:	690b      	ldr	r3, [r1, #16]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4313      	orrs	r3, r2
      htim->Instance->CCMR1 = tmpccmr1;
 800392e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8003930:	6204      	str	r4, [r0, #32]
      break;
 8003932:	e7dd      	b.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003934:	2501      	movs	r5, #1
                               sSlaveConfig->TriggerPolarity,
 8003936:	688a      	ldr	r2, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 8003938:	690b      	ldr	r3, [r1, #16]
  tmpccer = TIMx->CCER;
 800393a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800393c:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800393e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003940:	43ac      	bics	r4, r5
 8003942:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003944:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003946:	35ef      	adds	r5, #239	@ 0xef
 8003948:	43ac      	bics	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800394a:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800394c:	240a      	movs	r4, #10
 800394e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003950:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003952:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003954:	6202      	str	r2, [r0, #32]
}
 8003956:	e7cb      	b.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003958:	2510      	movs	r5, #16
                               sSlaveConfig->TriggerPolarity,
 800395a:	688b      	ldr	r3, [r1, #8]
                               sSlaveConfig->TriggerFilter);
 800395c:	690a      	ldr	r2, [r1, #16]
  tmpccer = TIMx->CCER;
 800395e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003962:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003964:	43ac      	bics	r4, r5
 8003966:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003968:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396a:	4d07      	ldr	r5, [pc, #28]	@ (8003988 <TIM_SlaveTimer_SetConfig.constprop.0+0xcc>)
  tmpccer |= (TIM_ICPolarity << 4U);
 800396c:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800396e:	402c      	ands	r4, r5
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003970:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003972:	24a0      	movs	r4, #160	@ 0xa0
 8003974:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 8003976:	430b      	orrs	r3, r1
  TIMx->CCMR1 = tmpccmr1 ;
 8003978:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800397a:	6203      	str	r3, [r0, #32]
}
 800397c:	e7b8      	b.n	80038f0 <TIM_SlaveTimer_SetConfig.constprop.0+0x34>
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	ffcfff8f 	.word	0xffcfff8f
 8003984:	fffefff8 	.word	0xfffefff8
 8003988:	ffff0fff 	.word	0xffff0fff

0800398c <HAL_TIM_SlaveConfigSynchro>:
{
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800398e:	0005      	movs	r5, r0
 8003990:	2302      	movs	r3, #2
 8003992:	353c      	adds	r5, #60	@ 0x3c
 8003994:	782a      	ldrb	r2, [r5, #0]
{
 8003996:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8003998:	0018      	movs	r0, r3
 800399a:	2a01      	cmp	r2, #1
 800399c:	d00d      	beq.n	80039ba <HAL_TIM_SlaveConfigSynchro+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 800399e:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80039a0:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039a2:	373d      	adds	r7, #61	@ 0x3d
  __HAL_LOCK(htim);
 80039a4:	702e      	strb	r6, [r5, #0]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039a6:	0020      	movs	r0, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	703b      	strb	r3, [r7, #0]
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039aa:	f7ff ff87 	bl	80038bc <TIM_SlaveTimer_SetConfig.constprop.0>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_SlaveConfigSynchro+0x30>
    __HAL_UNLOCK(htim);
 80039b2:	2300      	movs	r3, #0
    return HAL_ERROR;
 80039b4:	0030      	movs	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 80039b6:	703e      	strb	r6, [r7, #0]
    __HAL_UNLOCK(htim);
 80039b8:	702b      	strb	r3, [r5, #0]
}
 80039ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80039bc:	2140      	movs	r1, #64	@ 0x40
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	438a      	bics	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4902      	ldr	r1, [pc, #8]	@ (80039d4 <HAL_TIM_SlaveConfigSynchro+0x48>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80039ce:	703e      	strb	r6, [r7, #0]
  __HAL_UNLOCK(htim);
 80039d0:	7028      	strb	r0, [r5, #0]
  return HAL_OK;
 80039d2:	e7f2      	b.n	80039ba <HAL_TIM_SlaveConfigSynchro+0x2e>
 80039d4:	ffffbfff 	.word	0xffffbfff

080039d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039da:	0004      	movs	r4, r0
 80039dc:	2202      	movs	r2, #2
 80039de:	343c      	adds	r4, #60	@ 0x3c
 80039e0:	7825      	ldrb	r5, [r4, #0]
{
 80039e2:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80039e4:	0010      	movs	r0, r2
 80039e6:	2d01      	cmp	r5, #1
 80039e8:	d01f      	beq.n	8003a2a <HAL_TIMEx_MasterConfigSynchronization+0x52>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ea:	001d      	movs	r5, r3
 80039ec:	353d      	adds	r5, #61	@ 0x3d
 80039ee:	702a      	strb	r2, [r5, #0]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039f0:	681a      	ldr	r2, [r3, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039f2:	4e0e      	ldr	r6, [pc, #56]	@ (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  tmpcr2 = htim->Instance->CR2;
 80039f4:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80039f6:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039f8:	42b2      	cmp	r2, r6
 80039fa:	d103      	bne.n	8003a04 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039fc:	4f0c      	ldr	r7, [pc, #48]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80039fe:	403b      	ands	r3, r7
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a00:	684f      	ldr	r7, [r1, #4]
 8003a02:	433b      	orrs	r3, r7
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a04:	2770      	movs	r7, #112	@ 0x70
 8003a06:	43bb      	bics	r3, r7
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a08:	680f      	ldr	r7, [r1, #0]
 8003a0a:	433b      	orrs	r3, r7

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a0c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0e:	42b2      	cmp	r2, r6
 8003a10:	d002      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003a12:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d104      	bne.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	4398      	bics	r0, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1c:	688b      	ldr	r3, [r1, #8]
 8003a1e:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003a24:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003a28:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a2c:	40012c00 	.word	0x40012c00
 8003a30:	ff0fffff 	.word	0xff0fffff
 8003a34:	40000400 	.word	0x40000400

08003a38 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8003a3c:	4770      	bx	lr
	...

08003a40 <malloc>:
 8003a40:	b510      	push	{r4, lr}
 8003a42:	4b03      	ldr	r3, [pc, #12]	@ (8003a50 <malloc+0x10>)
 8003a44:	0001      	movs	r1, r0
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	f000 f826 	bl	8003a98 <_malloc_r>
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	20000018 	.word	0x20000018

08003a54 <sbrk_aligned>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4e0f      	ldr	r6, [pc, #60]	@ (8003a94 <sbrk_aligned+0x40>)
 8003a58:	000d      	movs	r5, r1
 8003a5a:	6831      	ldr	r1, [r6, #0]
 8003a5c:	0004      	movs	r4, r0
 8003a5e:	2900      	cmp	r1, #0
 8003a60:	d102      	bne.n	8003a68 <sbrk_aligned+0x14>
 8003a62:	f000 f8b1 	bl	8003bc8 <_sbrk_r>
 8003a66:	6030      	str	r0, [r6, #0]
 8003a68:	0029      	movs	r1, r5
 8003a6a:	0020      	movs	r0, r4
 8003a6c:	f000 f8ac 	bl	8003bc8 <_sbrk_r>
 8003a70:	1c43      	adds	r3, r0, #1
 8003a72:	d103      	bne.n	8003a7c <sbrk_aligned+0x28>
 8003a74:	2501      	movs	r5, #1
 8003a76:	426d      	negs	r5, r5
 8003a78:	0028      	movs	r0, r5
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	1cc5      	adds	r5, r0, #3
 8003a80:	439d      	bics	r5, r3
 8003a82:	42a8      	cmp	r0, r5
 8003a84:	d0f8      	beq.n	8003a78 <sbrk_aligned+0x24>
 8003a86:	1a29      	subs	r1, r5, r0
 8003a88:	0020      	movs	r0, r4
 8003a8a:	f000 f89d 	bl	8003bc8 <_sbrk_r>
 8003a8e:	3001      	adds	r0, #1
 8003a90:	d1f2      	bne.n	8003a78 <sbrk_aligned+0x24>
 8003a92:	e7ef      	b.n	8003a74 <sbrk_aligned+0x20>
 8003a94:	2000092c 	.word	0x2000092c

08003a98 <_malloc_r>:
 8003a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	1ccb      	adds	r3, r1, #3
 8003a9e:	4393      	bics	r3, r2
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	0005      	movs	r5, r0
 8003aa4:	001f      	movs	r7, r3
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d234      	bcs.n	8003b14 <_malloc_r+0x7c>
 8003aaa:	270c      	movs	r7, #12
 8003aac:	42b9      	cmp	r1, r7
 8003aae:	d833      	bhi.n	8003b18 <_malloc_r+0x80>
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	f000 f871 	bl	8003b98 <__malloc_lock>
 8003ab6:	4e37      	ldr	r6, [pc, #220]	@ (8003b94 <_malloc_r+0xfc>)
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	001c      	movs	r4, r3
 8003abc:	2c00      	cmp	r4, #0
 8003abe:	d12f      	bne.n	8003b20 <_malloc_r+0x88>
 8003ac0:	0039      	movs	r1, r7
 8003ac2:	0028      	movs	r0, r5
 8003ac4:	f7ff ffc6 	bl	8003a54 <sbrk_aligned>
 8003ac8:	0004      	movs	r4, r0
 8003aca:	1c43      	adds	r3, r0, #1
 8003acc:	d15f      	bne.n	8003b8e <_malloc_r+0xf6>
 8003ace:	6834      	ldr	r4, [r6, #0]
 8003ad0:	9400      	str	r4, [sp, #0]
 8003ad2:	9b00      	ldr	r3, [sp, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d14a      	bne.n	8003b6e <_malloc_r+0xd6>
 8003ad8:	2c00      	cmp	r4, #0
 8003ada:	d052      	beq.n	8003b82 <_malloc_r+0xea>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	0028      	movs	r0, r5
 8003ae0:	18e3      	adds	r3, r4, r3
 8003ae2:	9900      	ldr	r1, [sp, #0]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	f000 f86f 	bl	8003bc8 <_sbrk_r>
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	4283      	cmp	r3, r0
 8003aee:	d148      	bne.n	8003b82 <_malloc_r+0xea>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	0028      	movs	r0, r5
 8003af4:	1aff      	subs	r7, r7, r3
 8003af6:	0039      	movs	r1, r7
 8003af8:	f7ff ffac 	bl	8003a54 <sbrk_aligned>
 8003afc:	3001      	adds	r0, #1
 8003afe:	d040      	beq.n	8003b82 <_malloc_r+0xea>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	19db      	adds	r3, r3, r7
 8003b04:	6023      	str	r3, [r4, #0]
 8003b06:	6833      	ldr	r3, [r6, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	2a00      	cmp	r2, #0
 8003b0c:	d133      	bne.n	8003b76 <_malloc_r+0xde>
 8003b0e:	9b00      	ldr	r3, [sp, #0]
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	e019      	b.n	8003b48 <_malloc_r+0xb0>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	dac9      	bge.n	8003aac <_malloc_r+0x14>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	602b      	str	r3, [r5, #0]
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b20:	6821      	ldr	r1, [r4, #0]
 8003b22:	1bc9      	subs	r1, r1, r7
 8003b24:	d420      	bmi.n	8003b68 <_malloc_r+0xd0>
 8003b26:	290b      	cmp	r1, #11
 8003b28:	d90a      	bls.n	8003b40 <_malloc_r+0xa8>
 8003b2a:	19e2      	adds	r2, r4, r7
 8003b2c:	6027      	str	r7, [r4, #0]
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	d104      	bne.n	8003b3c <_malloc_r+0xa4>
 8003b32:	6032      	str	r2, [r6, #0]
 8003b34:	6863      	ldr	r3, [r4, #4]
 8003b36:	6011      	str	r1, [r2, #0]
 8003b38:	6053      	str	r3, [r2, #4]
 8003b3a:	e005      	b.n	8003b48 <_malloc_r+0xb0>
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	e7f9      	b.n	8003b34 <_malloc_r+0x9c>
 8003b40:	6862      	ldr	r2, [r4, #4]
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	d10e      	bne.n	8003b64 <_malloc_r+0xcc>
 8003b46:	6032      	str	r2, [r6, #0]
 8003b48:	0028      	movs	r0, r5
 8003b4a:	f000 f82d 	bl	8003ba8 <__malloc_unlock>
 8003b4e:	0020      	movs	r0, r4
 8003b50:	2207      	movs	r2, #7
 8003b52:	300b      	adds	r0, #11
 8003b54:	1d23      	adds	r3, r4, #4
 8003b56:	4390      	bics	r0, r2
 8003b58:	1ac2      	subs	r2, r0, r3
 8003b5a:	4298      	cmp	r0, r3
 8003b5c:	d0df      	beq.n	8003b1e <_malloc_r+0x86>
 8003b5e:	1a1b      	subs	r3, r3, r0
 8003b60:	50a3      	str	r3, [r4, r2]
 8003b62:	e7dc      	b.n	8003b1e <_malloc_r+0x86>
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e7ef      	b.n	8003b48 <_malloc_r+0xb0>
 8003b68:	0023      	movs	r3, r4
 8003b6a:	6864      	ldr	r4, [r4, #4]
 8003b6c:	e7a6      	b.n	8003abc <_malloc_r+0x24>
 8003b6e:	9c00      	ldr	r4, [sp, #0]
 8003b70:	6863      	ldr	r3, [r4, #4]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	e7ad      	b.n	8003ad2 <_malloc_r+0x3a>
 8003b76:	001a      	movs	r2, r3
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	42a3      	cmp	r3, r4
 8003b7c:	d1fb      	bne.n	8003b76 <_malloc_r+0xde>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e7da      	b.n	8003b38 <_malloc_r+0xa0>
 8003b82:	230c      	movs	r3, #12
 8003b84:	0028      	movs	r0, r5
 8003b86:	602b      	str	r3, [r5, #0]
 8003b88:	f000 f80e 	bl	8003ba8 <__malloc_unlock>
 8003b8c:	e7c6      	b.n	8003b1c <_malloc_r+0x84>
 8003b8e:	6007      	str	r7, [r0, #0]
 8003b90:	e7da      	b.n	8003b48 <_malloc_r+0xb0>
 8003b92:	46c0      	nop			@ (mov r8, r8)
 8003b94:	20000930 	.word	0x20000930

08003b98 <__malloc_lock>:
 8003b98:	b510      	push	{r4, lr}
 8003b9a:	4802      	ldr	r0, [pc, #8]	@ (8003ba4 <__malloc_lock+0xc>)
 8003b9c:	f000 f850 	bl	8003c40 <__retarget_lock_acquire_recursive>
 8003ba0:	bd10      	pop	{r4, pc}
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	20000a70 	.word	0x20000a70

08003ba8 <__malloc_unlock>:
 8003ba8:	b510      	push	{r4, lr}
 8003baa:	4802      	ldr	r0, [pc, #8]	@ (8003bb4 <__malloc_unlock+0xc>)
 8003bac:	f000 f849 	bl	8003c42 <__retarget_lock_release_recursive>
 8003bb0:	bd10      	pop	{r4, pc}
 8003bb2:	46c0      	nop			@ (mov r8, r8)
 8003bb4:	20000a70 	.word	0x20000a70

08003bb8 <memset>:
 8003bb8:	0003      	movs	r3, r0
 8003bba:	1882      	adds	r2, r0, r2
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d100      	bne.n	8003bc2 <memset+0xa>
 8003bc0:	4770      	bx	lr
 8003bc2:	7019      	strb	r1, [r3, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	e7f9      	b.n	8003bbc <memset+0x4>

08003bc8 <_sbrk_r>:
 8003bc8:	2300      	movs	r3, #0
 8003bca:	b570      	push	{r4, r5, r6, lr}
 8003bcc:	4d06      	ldr	r5, [pc, #24]	@ (8003be8 <_sbrk_r+0x20>)
 8003bce:	0004      	movs	r4, r0
 8003bd0:	0008      	movs	r0, r1
 8003bd2:	602b      	str	r3, [r5, #0]
 8003bd4:	f7fe fcce 	bl	8002574 <_sbrk>
 8003bd8:	1c43      	adds	r3, r0, #1
 8003bda:	d103      	bne.n	8003be4 <_sbrk_r+0x1c>
 8003bdc:	682b      	ldr	r3, [r5, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d000      	beq.n	8003be4 <_sbrk_r+0x1c>
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	bd70      	pop	{r4, r5, r6, pc}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	20000a6c 	.word	0x20000a6c

08003bec <__errno>:
 8003bec:	4b01      	ldr	r3, [pc, #4]	@ (8003bf4 <__errno+0x8>)
 8003bee:	6818      	ldr	r0, [r3, #0]
 8003bf0:	4770      	bx	lr
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	20000018 	.word	0x20000018

08003bf8 <__libc_init_array>:
 8003bf8:	b570      	push	{r4, r5, r6, lr}
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	4c0c      	ldr	r4, [pc, #48]	@ (8003c30 <__libc_init_array+0x38>)
 8003bfe:	4d0d      	ldr	r5, [pc, #52]	@ (8003c34 <__libc_init_array+0x3c>)
 8003c00:	1b64      	subs	r4, r4, r5
 8003c02:	10a4      	asrs	r4, r4, #2
 8003c04:	42a6      	cmp	r6, r4
 8003c06:	d109      	bne.n	8003c1c <__libc_init_array+0x24>
 8003c08:	2600      	movs	r6, #0
 8003c0a:	f000 f825 	bl	8003c58 <_init>
 8003c0e:	4c0a      	ldr	r4, [pc, #40]	@ (8003c38 <__libc_init_array+0x40>)
 8003c10:	4d0a      	ldr	r5, [pc, #40]	@ (8003c3c <__libc_init_array+0x44>)
 8003c12:	1b64      	subs	r4, r4, r5
 8003c14:	10a4      	asrs	r4, r4, #2
 8003c16:	42a6      	cmp	r6, r4
 8003c18:	d105      	bne.n	8003c26 <__libc_init_array+0x2e>
 8003c1a:	bd70      	pop	{r4, r5, r6, pc}
 8003c1c:	00b3      	lsls	r3, r6, #2
 8003c1e:	58eb      	ldr	r3, [r5, r3]
 8003c20:	4798      	blx	r3
 8003c22:	3601      	adds	r6, #1
 8003c24:	e7ee      	b.n	8003c04 <__libc_init_array+0xc>
 8003c26:	00b3      	lsls	r3, r6, #2
 8003c28:	58eb      	ldr	r3, [r5, r3]
 8003c2a:	4798      	blx	r3
 8003c2c:	3601      	adds	r6, #1
 8003c2e:	e7f2      	b.n	8003c16 <__libc_init_array+0x1e>
 8003c30:	08003cb0 	.word	0x08003cb0
 8003c34:	08003cb0 	.word	0x08003cb0
 8003c38:	08003cb4 	.word	0x08003cb4
 8003c3c:	08003cb0 	.word	0x08003cb0

08003c40 <__retarget_lock_acquire_recursive>:
 8003c40:	4770      	bx	lr

08003c42 <__retarget_lock_release_recursive>:
 8003c42:	4770      	bx	lr

08003c44 <memcpy>:
 8003c44:	2300      	movs	r3, #0
 8003c46:	b510      	push	{r4, lr}
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d100      	bne.n	8003c4e <memcpy+0xa>
 8003c4c:	bd10      	pop	{r4, pc}
 8003c4e:	5ccc      	ldrb	r4, [r1, r3]
 8003c50:	54c4      	strb	r4, [r0, r3]
 8003c52:	3301      	adds	r3, #1
 8003c54:	e7f8      	b.n	8003c48 <memcpy+0x4>
	...

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	46c0      	nop			@ (mov r8, r8)
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
