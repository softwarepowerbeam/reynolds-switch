
reynolds_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005abc  08005abc  00015abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bd4  08005bd4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005bd4  08005bd4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005bd4  08005bd4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bd4  08005bd4  00015bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005bdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000070  08005c48  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  08005c48  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db79  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a4  00000000  00000000  0002dc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abd  00000000  00000000  00031008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001446a  00000000  00000000  00031ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000104a0  00000000  00000000  00045f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bdd1  00000000  00000000  000563cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  000d21a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d5734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005aa4 	.word	0x08005aa4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005aa4 	.word	0x08005aa4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <button_setup>:

#include "button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	6019      	str	r1, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	1d3a      	adds	r2, r7, #4
 8000232:	3304      	adds	r3, #4
 8000234:	ca03      	ldmia	r2!, {r0, r1}
 8000236:	c303      	stmia	r3!, {r0, r1}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	70da      	strb	r2, [r3, #3]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2201      	movs	r2, #1
 800024e:	735a      	strb	r2, [r3, #13]
	button->debounce_idx = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	button->debounce_count_limit = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	615a      	str	r2, [r3, #20]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2200      	movs	r2, #0
 8000260:	709a      	strb	r2, [r3, #2]

	return 0;
 8000262:	2300      	movs	r3, #0

}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}

0800026c <button_debounce_fsm>:


uint8_t button_debounce_fsm(button_t *button)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 8000274:	211f      	movs	r1, #31
 8000276:	187b      	adds	r3, r7, r1
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	7b12      	ldrb	r2, [r2, #12]
 800027c:	701a      	strb	r2, [r3, #0]
	button_edge_t edge = button->edge;
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7852      	ldrb	r2, [r2, #1]
 8000286:	701a      	strb	r2, [r3, #0]
	uint32_t debounce_idx = button->debounce_idx;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	61bb      	str	r3, [r7, #24]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	613b      	str	r3, [r7, #16]
	button_status_t button_status;

	switch(debounce_fsm_state)
 8000294:	187b      	adds	r3, r7, r1
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d022      	beq.n	80002e2 <button_debounce_fsm+0x76>
 800029c:	dc36      	bgt.n	800030c <button_debounce_fsm+0xa0>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d002      	beq.n	80002a8 <button_debounce_fsm+0x3c>
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d011      	beq.n	80002ca <button_debounce_fsm+0x5e>
 80002a6:	e031      	b.n	800030c <button_debounce_fsm+0xa0>
	{
		case BUTTON_DEBOUNCE_IDLE:

			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7b5b      	ldrb	r3, [r3, #13]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d132      	bne.n	8000316 <button_debounce_fsm+0xaa>
			{
				if(debounce_count_limit == 0)
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <button_debounce_fsm+0x54>
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002b6:	231f      	movs	r3, #31
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
				else
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
				}
			}
			break;
 80002be:	e02a      	b.n	8000316 <button_debounce_fsm+0xaa>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80002c0:	231f      	movs	r3, #31
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
			break;
 80002c8:	e025      	b.n	8000316 <button_debounce_fsm+0xaa>
		case BUTTON_DEBOUNCE_WAIT:

			if(debounce_idx >= debounce_count_limit)
 80002ca:	69ba      	ldr	r2, [r7, #24]
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d303      	bcc.n	80002da <button_debounce_fsm+0x6e>
			{
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002d2:	231f      	movs	r3, #31
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	2202      	movs	r2, #2
 80002d8:	701a      	strb	r2, [r3, #0]
			}
			debounce_idx++;
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	3301      	adds	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]

			break;
 80002e0:	e01a      	b.n	8000318 <button_debounce_fsm+0xac>
		case BUTTON_DEBOUNCE_CLEAR_LOCK:

			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2202      	movs	r2, #2
 80002e6:	70da      	strb	r2, [r3, #3]
			button->debounce_idx = 0;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	735a      	strb	r2, [r3, #13]
			button_get_status(button, &button_status);
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fa      	adds	r2, r7, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f843 	bl	8000388 <button_get_status>

			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000302:	231f      	movs	r3, #31
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]

			break;
 800030a:	e005      	b.n	8000318 <button_debounce_fsm+0xac>
		default:
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 800030c:	231f      	movs	r3, #31
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e000      	b.n	8000318 <button_debounce_fsm+0xac>
			break;
 8000316:	46c0      	nop			; (mov r8, r8)
	}

	button->debounce_fsm_state = debounce_fsm_state;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	221f      	movs	r2, #31
 800031c:	18ba      	adds	r2, r7, r2
 800031e:	7812      	ldrb	r2, [r2, #0]
 8000320:	731a      	strb	r2, [r3, #12]
	button->edge = edge;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2217      	movs	r2, #23
 8000326:	18ba      	adds	r2, r7, r2
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	705a      	strb	r2, [r3, #1]
	button->debounce_idx = debounce_idx;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	69ba      	ldr	r2, [r7, #24]
 8000330:	611a      	str	r2, [r3, #16]

	return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b008      	add	sp, #32
 800033a:	bd80      	pop	{r7, pc}

0800033c <button_positive_edge_detected>:

}


uint8_t button_positive_edge_detected(button_t *button)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b5b      	ldrb	r3, [r3, #13]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d105      	bne.n	8000358 <button_positive_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2202      	movs	r2, #2
 8000350:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000358:	2300      	movs	r3, #0
}
 800035a:	0018      	movs	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}

08000362 <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	7b5b      	ldrb	r3, [r3, #13]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d105      	bne.n	800037e <button_negative_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	891b      	ldrh	r3, [r3, #8]
 800039a:	250f      	movs	r5, #15
 800039c:	197c      	adds	r4, r7, r5
 800039e:	0019      	movs	r1, r3
 80003a0:	0010      	movs	r0, r2
 80003a2:	f003 fe0f 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d103      	bne.n	80003ba <button_get_status+0x32>
	{
		button->status = BUTTON_ON;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	e002      	b.n	80003c0 <button_get_status+0x38>
	}
	else
	{
		button->status = BUTTON_OFF;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
	}

	*status = button->status;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	701a      	strb	r2, [r3, #0]

	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	0018      	movs	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b004      	add	sp, #16
 80003d0:	bdb0      	pop	{r4, r5, r7, pc}

080003d2 <button_set_isr_attended>:

uint8_t button_set_isr_attended(button_t *button)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b082      	sub	sp, #8
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2200      	movs	r2, #0
 80003de:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	70da      	strb	r2, [r3, #3]
	return 0;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	0018      	movs	r0, r3
 80003ea:	46bd      	mov	sp, r7
 80003ec:	b002      	add	sp, #8
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 80003f0:	b084      	sub	sp, #16
 80003f2:	b5b0      	push	{r4, r5, r7, lr}
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	250c      	movs	r5, #12
 80003f8:	1d2c      	adds	r4, r5, #4
 80003fa:	19e4      	adds	r4, r4, r7
 80003fc:	6020      	str	r0, [r4, #0]
 80003fe:	6061      	str	r1, [r4, #4]
 8000400:	60a2      	str	r2, [r4, #8]
 8000402:	60e3      	str	r3, [r4, #12]
	*button_isr_status = button.edge_attended;
 8000404:	0029      	movs	r1, r5
 8000406:	1d0b      	adds	r3, r1, #4
 8000408:	19db      	adds	r3, r3, r7
 800040a:	78da      	ldrb	r2, [r3, #3]
 800040c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800040e:	701a      	strb	r2, [r3, #0]
	*edge = button.edge;
 8000410:	1d0b      	adds	r3, r1, #4
 8000412:	19db      	adds	r3, r3, r7
 8000414:	785a      	ldrb	r2, [r3, #1]
 8000416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000418:	701a      	strb	r2, [r3, #0]
	return 0;
 800041a:	2300      	movs	r3, #0
}
 800041c:	0018      	movs	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	bcb0      	pop	{r4, r5, r7}
 8000422:	bc08      	pop	{r3}
 8000424:	b004      	add	sp, #16
 8000426:	4718      	bx	r3

08000428 <deadline_timer_setup>:
#include "deadline_timer.h"

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 8000428:	b082      	sub	sp, #8
 800042a:	b5b0      	push	{r4, r5, r7, lr}
 800042c:	b086      	sub	sp, #24
 800042e:	af04      	add	r7, sp, #16
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	2418      	movs	r4, #24
 8000434:	1939      	adds	r1, r7, r4
 8000436:	600a      	str	r2, [r1, #0]
 8000438:	604b      	str	r3, [r1, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	2260      	movs	r2, #96	; 0x60
 800043e:	2100      	movs	r1, #0
 8000440:	5499      	strb	r1, [r3, r2]

	timer_clock_clear(&deadline_timer->time_current);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	0018      	movs	r0, r3
 8000446:	f000 f8d1 	bl	80005ec <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3330      	adds	r3, #48	; 0x30
 800044e:	0018      	movs	r0, r3
 8000450:	f000 f8cc 	bl	80005ec <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	3348      	adds	r3, #72	; 0x48
 8000458:	0018      	movs	r0, r3
 800045a:	f000 f8c7 	bl	80005ec <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3318      	adds	r3, #24
 8000462:	001d      	movs	r5, r3
 8000464:	193c      	adds	r4, r7, r4
 8000466:	466b      	mov	r3, sp
 8000468:	0018      	movs	r0, r3
 800046a:	0023      	movs	r3, r4
 800046c:	3308      	adds	r3, #8
 800046e:	2210      	movs	r2, #16
 8000470:	0019      	movs	r1, r3
 8000472:	f005 fb0d 	bl	8005a90 <memcpy>
 8000476:	6822      	ldr	r2, [r4, #0]
 8000478:	6863      	ldr	r3, [r4, #4]
 800047a:	0028      	movs	r0, r5
 800047c:	f000 f8ca 	bl	8000614 <timer_clock_set_time>
	return 0;
 8000480:	2300      	movs	r3, #0

}
 8000482:	0018      	movs	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bcb0      	pop	{r4, r5, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	b002      	add	sp, #8
 800048e:	4718      	bx	r3

08000490 <deadline_timer_setup_shared_clock>:


uint8_t deadline_timer_setup_shared_clock(deadline_timer_t *deadline_timer,
												timer_clock_t *time_current,
												timer_clock_t deadline)
{
 8000490:	b082      	sub	sp, #8
 8000492:	b5b0      	push	{r4, r5, r7, lr}
 8000494:	b086      	sub	sp, #24
 8000496:	af04      	add	r7, sp, #16
 8000498:	6078      	str	r0, [r7, #4]
 800049a:	6039      	str	r1, [r7, #0]
 800049c:	2418      	movs	r4, #24
 800049e:	1939      	adds	r1, r7, r4
 80004a0:	600a      	str	r2, [r1, #0]
 80004a2:	604b      	str	r3, [r1, #4]
//	timer_clock_t *temp;

	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2260      	movs	r2, #96	; 0x60
 80004a8:	2100      	movs	r1, #0
 80004aa:	5499      	strb	r1, [r3, r2]



//	deadline_timer->time_current = time_current;
	deadline_timer_assign_current(&deadline_timer->time_current, time_current);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	0011      	movs	r1, r2
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 f823 	bl	80004fe <deadline_timer_assign_current>

//	timer_clock_clear(&deadline_timer->time_current);
	timer_clock_clear(&deadline_timer->time_initial);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3330      	adds	r3, #48	; 0x30
 80004bc:	0018      	movs	r0, r3
 80004be:	f000 f895 	bl	80005ec <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	3348      	adds	r3, #72	; 0x48
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 f890 	bl	80005ec <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3318      	adds	r3, #24
 80004d0:	001d      	movs	r5, r3
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	466b      	mov	r3, sp
 80004d6:	0018      	movs	r0, r3
 80004d8:	0023      	movs	r3, r4
 80004da:	3308      	adds	r3, #8
 80004dc:	2210      	movs	r2, #16
 80004de:	0019      	movs	r1, r3
 80004e0:	f005 fad6 	bl	8005a90 <memcpy>
 80004e4:	6822      	ldr	r2, [r4, #0]
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	0028      	movs	r0, r5
 80004ea:	f000 f893 	bl	8000614 <timer_clock_set_time>
	return 0;
 80004ee:	2300      	movs	r3, #0
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bcb0      	pop	{r4, r5, r7}
 80004f8:	bc08      	pop	{r3}
 80004fa:	b002      	add	sp, #8
 80004fc:	4718      	bx	r3

080004fe <deadline_timer_assign_current>:


void deadline_timer_assign_current(timer_clock_t *time_current,
											timer_clock_t *time_current_2)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
	time_current = time_current_2;
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	607b      	str	r3, [r7, #4]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}

08000514 <deadline_timer_force_expiration>:


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2260      	movs	r2, #96	; 0x60
 8000520:	2101      	movs	r1, #1
 8000522:	5499      	strb	r1, [r3, r2]
	return 0;
 8000524:	2300      	movs	r3, #0
}
 8000526:	0018      	movs	r0, r3
 8000528:	46bd      	mov	sp, r7
 800052a:	b002      	add	sp, #8
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <deadline_timer_check>:
uint8_t deadline_timer_check(deadline_timer_t *deadline_timer,
								deadline_timer_expired_t *deadline_expired)
{
 8000530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af02      	add	r7, sp, #8
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 800053a:	260f      	movs	r6, #15
 800053c:	19bb      	adds	r3, r7, r6
 800053e:	2200      	movs	r2, #0
 8000540:	701a      	strb	r2, [r3, #0]
	//TODO: (High) fix this to include seconds

//	deadline_timer_expired_t deadline_expired_sec = TIMER_EXPIRED_FALSE;
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 8000542:	250e      	movs	r5, #14
 8000544:	197b      	adds	r3, r7, r5
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]

//	uint32_t time_current = deadline_timer->time_current.msec;
//	uint32_t deadline = deadline_timer->deadline.msec;
//	uint32_t time_initial = deadline_timer->time_initial.msec;

	deadline_timer_compare_check(deadline_timer->time_current.msec,
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	6898      	ldr	r0, [r3, #8]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6a19      	ldr	r1, [r3, #32]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000556:	4c0a      	ldr	r4, [pc, #40]	; (8000580 <deadline_timer_check+0x50>)
 8000558:	197b      	adds	r3, r7, r5
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	0023      	movs	r3, r4
 800055e:	f000 f895 	bl	800068c <deadline_timer_compare_check>
											deadline_timer->deadline.msec,
											deadline_timer->time_initial.msec,
											DEADLINE_MAX_MSEC,
											&deadline_expired_msec);

	*deadline_expired = deadline_expired_msec;
 8000562:	197b      	adds	r3, r7, r5
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	701a      	strb	r2, [r3, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 800056a:	197b      	adds	r3, r7, r5
 800056c:	7819      	ldrb	r1, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2260      	movs	r2, #96	; 0x60
 8000572:	5499      	strb	r1, [r3, r2]
	return status;
 8000574:	19bb      	adds	r3, r7, r6
 8000576:	781b      	ldrb	r3, [r3, #0]

}
 8000578:	0018      	movs	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	b005      	add	sp, #20
 800057e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000580:	3b9aca00 	.word	0x3b9aca00

08000584 <deadline_timer_count>:

uint8_t deadline_timer_count(deadline_timer_t *deadline_timer)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	deadline_timer_increment(&deadline_timer->time_current);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	0018      	movs	r0, r3
 8000590:	f000 f85a 	bl	8000648 <deadline_timer_increment>
	return 0;
 8000594:	2300      	movs	r3, #0
}
 8000596:	0018      	movs	r0, r3
 8000598:	46bd      	mov	sp, r7
 800059a:	b002      	add	sp, #8
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <deadline_timer_set_initial_time>:

	return 0;
}

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
//	memmove(&deadline_timer->time_initial,
//				&deadline_timer->time_current,
//				sizeof(timer_clock_t) ); //fails


	HAL_NVIC_DisableIRQ(TIM16_IRQn);
 80005a8:	2015      	movs	r0, #21
 80005aa:	f003 fab4 	bl	8003b16 <HAL_NVIC_DisableIRQ>
	deadline_timer->time_initial = deadline_timer->time_current; //fails
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	3330      	adds	r3, #48	; 0x30
 80005b4:	0011      	movs	r1, r2
 80005b6:	2218      	movs	r2, #24
 80005b8:	0018      	movs	r0, r3
 80005ba:	f005 fa69 	bl	8005a90 <memcpy>
	HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80005be:	2015      	movs	r0, #21
 80005c0:	f003 fa99 	bl	8003af6 <HAL_NVIC_EnableIRQ>
	free(temporal);
#endif //MEMORY_COPPY_ERROR_TEST

	static uint8_t idx = 0;

	if(deadline_timer->time_initial.msec > deadline_timer->time_current.msec)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d905      	bls.n	80005dc <deadline_timer_set_initial_time+0x3c>
	{
		idx++;
 80005d0:	4b05      	ldr	r3, [pc, #20]	; (80005e8 <deadline_timer_set_initial_time+0x48>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <deadline_timer_set_initial_time+0x48>)
 80005da:	701a      	strb	r2, [r3, #0]
//			deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
//			deadline_timer->time_initial.msec = deadline_timer->time_current.msec;

	}

	return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	0018      	movs	r0, r3
 80005e0:	46bd      	mov	sp, r7
 80005e2:	b002      	add	sp, #8
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	2000008c 	.word	0x2000008c

080005ec <timer_clock_clear>:
	return 0;
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	timer->counts = 0;
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	600a      	str	r2, [r1, #0]
 80005fc:	604b      	str	r3, [r1, #4]
	timer->msec = 0;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
	timer->sec = 0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
	return 0;
 800060a:	2300      	movs	r3, #0
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b002      	add	sp, #8
 8000612:	bd80      	pop	{r7, pc}

08000614 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8000614:	b082      	sub	sp, #8
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	2010      	movs	r0, #16
 8000620:	1839      	adds	r1, r7, r0
 8000622:	600a      	str	r2, [r1, #0]
 8000624:	604b      	str	r3, [r1, #4]
	timer->msec = new_time.msec;
 8000626:	0001      	movs	r1, r0
 8000628:	187b      	adds	r3, r7, r1
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]
	timer->sec = new_time.sec;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	68da      	ldr	r2, [r3, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	60da      	str	r2, [r3, #12]
	return 0;
 8000638:	2300      	movs	r3, #0
}
 800063a:	0018      	movs	r0, r3
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bc80      	pop	{r7}
 8000642:	bc08      	pop	{r3}
 8000644:	b002      	add	sp, #8
 8000646:	4718      	bx	r3

08000648 <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

	timer->msec++;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]
	timer->counts++;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	2001      	movs	r0, #1
 8000662:	2100      	movs	r1, #0
 8000664:	1812      	adds	r2, r2, r0
 8000666:	414b      	adcs	r3, r1
 8000668:	6879      	ldr	r1, [r7, #4]
 800066a:	600a      	str	r2, [r1, #0]
 800066c:	604b      	str	r3, [r1, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <deadline_timer_increment+0x40>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d902      	bls.n	800067e <deadline_timer_increment+0x36>
	{
//		timer->sec++;
		timer->msec = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
//	if(timer->counts >= (DEADLINE_MAX_COUNT) )
//	{
//		timer->counts = 0;
//	}

	return 0;
 800067e:	2300      	movs	r3, #0
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b002      	add	sp, #8
 8000686:	bd80      	pop	{r7, pc}
 8000688:	3b9ac9ff 	.word	0x3b9ac9ff

0800068c <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6178      	str	r0, [r7, #20]
 8000694:	6139      	str	r1, [r7, #16]
 8000696:	60fa      	str	r2, [r7, #12]
 8000698:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 800069a:	2317      	movs	r3, #23
 800069c:	2208      	movs	r2, #8
 800069e:	189b      	adds	r3, r3, r2
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	int64_t remaining = 0;
 80006a6:	2200      	movs	r2, #0
 80006a8:	2300      	movs	r3, #0
 80006aa:	623a      	str	r2, [r7, #32]
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t deadline_difference = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	001c      	movs	r4, r3
 80006be:	2300      	movs	r3, #0
 80006c0:	001d      	movs	r5, r3
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	1b12      	subs	r2, r2, r4
 80006c8:	41ab      	sbcs	r3, r5
 80006ca:	623a      	str	r2, [r7, #32]
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24

	if(remaining < 0)
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da07      	bge.n	80006e4 <deadline_timer_compare_check+0x58>
	{
		remaining = (max_time - time_initial) + time_current;
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	1ad2      	subs	r2, r2, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	623b      	str	r3, [r7, #32]
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24

	}
	deadline_difference = (uint32_t) remaining;
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	61bb      	str	r3, [r7, #24]

	if(deadline_difference >= deadline)
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	693a      	ldr	r2, [r7, #16]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d803      	bhi.n	80006f8 <deadline_timer_compare_check+0x6c>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 80006f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
 80006f6:	e002      	b.n	80006fe <deadline_timer_compare_check+0x72>
	}
	else
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
 80006f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80006fe:	2317      	movs	r3, #23
 8000700:	2208      	movs	r2, #8
 8000702:	189b      	adds	r3, r3, r2
 8000704:	19db      	adds	r3, r3, r7
 8000706:	781b      	ldrb	r3, [r3, #0]
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	b00a      	add	sp, #40	; 0x28
 800070e:	bdb0      	pop	{r4, r5, r7, pc}

08000710 <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	0008      	movs	r0, r1
 800071a:	0011      	movs	r1, r2
 800071c:	1cbb      	adds	r3, r7, #2
 800071e:	1c02      	adds	r2, r0, #0
 8000720:	801a      	strh	r2, [r3, #0]
 8000722:	1c7b      	adds	r3, r7, #1
 8000724:	1c0a      	adds	r2, r1, #0
 8000726:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(irq_type);
 8000728:	1c7b      	adds	r3, r7, #1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b25b      	sxtb	r3, r3
 800072e:	0018      	movs	r0, r3
 8000730:	f003 f9f1 	bl	8003b16 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	240c      	movs	r4, #12
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	2314      	movs	r3, #20
 800073c:	001a      	movs	r2, r3
 800073e:	2100      	movs	r1, #0
 8000740:	f005 f960 	bl	8005a04 <memset>

	HAL_GPIO_DeInit(port, pin);
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f003 fb69 	bl	8003e24 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8000752:	1cbb      	adds	r3, r7, #2
 8000754:	881a      	ldrh	r2, [r3, #0]
 8000756:	193b      	adds	r3, r7, r4
 8000758:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000766:	193a      	adds	r2, r7, r4
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f003 f9ef 	bl	8003b50 <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b009      	add	sp, #36	; 0x24
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	0008      	movs	r0, r1
 8000786:	0011      	movs	r1, r2
 8000788:	1cbb      	adds	r3, r7, #2
 800078a:	1c02      	adds	r2, r0, #0
 800078c:	801a      	strh	r2, [r3, #0]
 800078e:	1c7b      	adds	r3, r7, #1
 8000790:	1c0a      	adds	r2, r1, #0
 8000792:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000794:	240c      	movs	r4, #12
 8000796:	193b      	adds	r3, r7, r4
 8000798:	0018      	movs	r0, r3
 800079a:	2314      	movs	r3, #20
 800079c:	001a      	movs	r2, r3
 800079e:	2100      	movs	r1, #0
 80007a0:	f005 f930 	bl	8005a04 <memset>
	HAL_GPIO_DeInit(port, pin);
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	881a      	ldrh	r2, [r3, #0]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 fb39 	bl	8003e24 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 80007b2:	1cbb      	adds	r3, r7, #2
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x7c>)
 80007be:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80007c6:	193a      	adds	r2, r7, r4
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f003 f9bf 	bl	8003b50 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 80007d2:	1c7b      	adds	r3, r7, #1
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b25b      	sxtb	r3, r3
 80007d8:	2203      	movs	r2, #3
 80007da:	2100      	movs	r1, #0
 80007dc:	0018      	movs	r0, r3
 80007de:	f003 f975 	bl	8003acc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 80007e2:	1c7b      	adds	r3, r7, #1
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	0018      	movs	r0, r3
 80007ea:	f003 f984 	bl	8003af6 <HAL_NVIC_EnableIRQ>


}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b009      	add	sp, #36	; 0x24
 80007f4:	bd90      	pop	{r4, r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	10110000 	.word	0x10110000

080007fc <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	0008      	movs	r0, r1
 8000806:	0011      	movs	r1, r2
 8000808:	1cbb      	adds	r3, r7, #2
 800080a:	1c02      	adds	r2, r0, #0
 800080c:	801a      	strh	r2, [r3, #0]
 800080e:	1c7b      	adds	r3, r7, #1
 8000810:	1c0a      	adds	r2, r1, #0
 8000812:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	240c      	movs	r4, #12
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0018      	movs	r0, r3
 800081a:	2314      	movs	r3, #20
 800081c:	001a      	movs	r2, r3
 800081e:	2100      	movs	r1, #0
 8000820:	f005 f8f0 	bl	8005a04 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 8000824:	1c7b      	adds	r3, r7, #1
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	0018      	movs	r0, r3
 800082c:	f003 f973 	bl	8003b16 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 8000830:	1cbb      	adds	r3, r7, #2
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	0011      	movs	r1, r2
 8000838:	0018      	movs	r0, r3
 800083a:	f003 faf3 	bl	8003e24 <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800083e:	1cbb      	adds	r3, r7, #2
 8000840:	881a      	ldrh	r2, [r3, #0]
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2201      	movs	r2, #1
 800084c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2203      	movs	r2, #3
 8000858:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800085a:	187a      	adds	r2, r7, r1
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 f975 	bl	8003b50 <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <HAL_DIRECT_LINK_conf_as_output+0x80>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0289      	lsls	r1, r1, #10
 8000870:	430a      	orrs	r2, r1
 8000872:	601a      	str	r2, [r3, #0]

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	; 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40010000 	.word	0x40010000

08000880 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	2414      	movs	r4, #20
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f005 f8b7 	bl	8005a04 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b73      	ldr	r3, [pc, #460]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 8000898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800089a:	4b72      	ldr	r3, [pc, #456]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 800089c:	2104      	movs	r1, #4
 800089e:	430a      	orrs	r2, r1
 80008a0:	635a      	str	r2, [r3, #52]	; 0x34
 80008a2:	4b70      	ldr	r3, [pc, #448]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008a6:	2204      	movs	r2, #4
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
 80008ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b6d      	ldr	r3, [pc, #436]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008b2:	4b6c      	ldr	r3, [pc, #432]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008b4:	2120      	movs	r1, #32
 80008b6:	430a      	orrs	r2, r1
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ba:	4b6a      	ldr	r3, [pc, #424]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008be:	2220      	movs	r2, #32
 80008c0:	4013      	ands	r3, r2
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	4b67      	ldr	r3, [pc, #412]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	4b66      	ldr	r3, [pc, #408]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008cc:	2101      	movs	r1, #1
 80008ce:	430a      	orrs	r2, r1
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
 80008d2:	4b64      	ldr	r3, [pc, #400]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008d6:	2201      	movs	r2, #1
 80008d8:	4013      	ands	r3, r2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b61      	ldr	r3, [pc, #388]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008e2:	4b60      	ldr	r3, [pc, #384]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008e4:	2102      	movs	r1, #2
 80008e6:	430a      	orrs	r2, r1
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ea:	4b5e      	ldr	r3, [pc, #376]	; (8000a64 <MX_GPIO_Init+0x1e4>)
 80008ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ee:	2202      	movs	r2, #2
 80008f0:	4013      	ands	r3, r2
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 80008f6:	23c0      	movs	r3, #192	; 0xc0
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	485b      	ldr	r0, [pc, #364]	; (8000a68 <MX_GPIO_Init+0x1e8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	0019      	movs	r1, r3
 8000900:	f003 fb7d 	bl	8003ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8000904:	4959      	ldr	r1, [pc, #356]	; (8000a6c <MX_GPIO_Init+0x1ec>)
 8000906:	23a0      	movs	r3, #160	; 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	2200      	movs	r2, #0
 800090c:	0018      	movs	r0, r3
 800090e:	f003 fb76 	bl	8003ffe <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8000912:	4b57      	ldr	r3, [pc, #348]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000914:	2200      	movs	r2, #0
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	0018      	movs	r0, r3
 800091a:	f003 fb70 	bl	8003ffe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	22c0      	movs	r2, #192	; 0xc0
 8000922:	0212      	lsls	r2, r2, #8
 8000924:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	193b      	adds	r3, r7, r4
 8000928:	2201      	movs	r2, #1
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	193b      	adds	r3, r7, r4
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	2200      	movs	r2, #0
 8000936:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000938:	193b      	adds	r3, r7, r4
 800093a:	4a4b      	ldr	r2, [pc, #300]	; (8000a68 <MX_GPIO_Init+0x1e8>)
 800093c:	0019      	movs	r1, r3
 800093e:	0010      	movs	r0, r2
 8000940:	f003 f906 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2204      	movs	r2, #4
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2200      	movs	r2, #0
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000956:	193b      	adds	r3, r7, r4
 8000958:	4a46      	ldr	r2, [pc, #280]	; (8000a74 <MX_GPIO_Init+0x1f4>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f003 f8f7 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8000962:	193b      	adds	r3, r7, r4
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x1ec>)
 8000966:	601a      	str	r2, [r3, #0]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2201      	movs	r2, #1
 800096c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097a:	193a      	adds	r2, r7, r4
 800097c:	23a0      	movs	r3, #160	; 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f003 f8e4 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	2204      	movs	r2, #4
 800098c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	193b      	adds	r3, r7, r4
 8000990:	4a39      	ldr	r2, [pc, #228]	; (8000a78 <MX_GPIO_Init+0x1f8>)
 8000992:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 800099a:	193a      	adds	r2, r7, r4
 800099c:	23a0      	movs	r3, #160	; 0xa0
 800099e:	05db      	lsls	r3, r3, #23
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f003 f8d4 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	2282      	movs	r2, #130	; 0x82
 80009ac:	0092      	lsls	r2, r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	4a32      	ldr	r2, [pc, #200]	; (8000a7c <MX_GPIO_Init+0x1fc>)
 80009b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	0011      	movs	r1, r2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f003 f8c3 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	2260      	movs	r2, #96	; 0x60
 80009ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	193b      	adds	r3, r7, r4
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	193a      	adds	r2, r7, r4
 80009de:	23a0      	movs	r3, #160	; 0xa0
 80009e0:	05db      	lsls	r3, r3, #23
 80009e2:	0011      	movs	r1, r2
 80009e4:	0018      	movs	r0, r3
 80009e6:	f003 f8b3 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	2240      	movs	r2, #64	; 0x40
 80009ee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	2201      	movs	r2, #1
 80009f4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	193b      	adds	r3, r7, r4
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000a06:	0019      	movs	r1, r3
 8000a08:	0010      	movs	r0, r2
 8000a0a:	f003 f8a1 	bl	8003b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8000a0e:	0021      	movs	r1, r4
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2280      	movs	r2, #128	; 0x80
 8000a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <MX_GPIO_Init+0x200>)
 8000a1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8000a22:	187b      	adds	r3, r7, r1
 8000a24:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_GPIO_Init+0x1f0>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f003 f891 	bl	8003b50 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0x204>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_GPIO_Init+0x204>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0449      	lsls	r1, r1, #17
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2006      	movs	r0, #6
 8000a42:	f003 f843 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000a46:	2006      	movs	r0, #6
 8000a48:	f003 f855 	bl	8003af6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2007      	movs	r0, #7
 8000a52:	f003 f83b 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a56:	2007      	movs	r0, #7
 8000a58:	f003 f84d 	bl	8003af6 <HAL_NVIC_EnableIRQ>

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00b      	add	sp, #44	; 0x2c
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	40021000 	.word	0x40021000
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	00000583 	.word	0x00000583
 8000a70:	50000400 	.word	0x50000400
 8000a74:	50001400 	.word	0x50001400
 8000a78:	10210000 	.word	0x10210000
 8000a7c:	10310000 	.word	0x10310000
 8000a80:	10110000 	.word	0x10110000
 8000a84:	40010000 	.word	0x40010000

08000a88 <led_signal_setup>:
 */

#include "led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	6019      	str	r1, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	1d3a      	adds	r2, r7, #4
 8000a9a:	ca03      	ldmia	r2!, {r0, r1}
 8000a9c:	c303      	stmia	r3!, {r0, r1}
	led_signal->type = LED_SIGNAL_OFF;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	725a      	strb	r2, [r3, #9]

	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}

08000aae <led_signal_fsm>:



uint8_t led_signal_fsm(led_signal_t *led_signal)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	led_signal_type_t type = led_signal->type;
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	7a52      	ldrb	r2, [r2, #9]
 8000abe:	701a      	strb	r2, [r3, #0]

	switch(type)
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d01c      	beq.n	8000b02 <led_signal_fsm+0x54>
 8000ac8:	dc1d      	bgt.n	8000b06 <led_signal_fsm+0x58>
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d014      	beq.n	8000af8 <led_signal_fsm+0x4a>
 8000ace:	dc1a      	bgt.n	8000b06 <led_signal_fsm+0x58>
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <led_signal_fsm+0x2c>
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d00a      	beq.n	8000aee <led_signal_fsm+0x40>
			led_signal_togle_fsm(led_signal);
			break;
		case LED_SIGNAL_BLINK_2:
			break;
		default:
			break;
 8000ad8:	e015      	b.n	8000b06 <led_signal_fsm+0x58>
			led_signal_turn_off(*led_signal);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	f000 f906 	bl	8000cf2 <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	729a      	strb	r2, [r3, #10]
			break;
 8000aec:	e00c      	b.n	8000b08 <led_signal_fsm+0x5a>
			led_signal_solid_fsm(led_signal);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 f81e 	bl	8000b32 <led_signal_solid_fsm>
			break;
 8000af6:	e007      	b.n	8000b08 <led_signal_fsm+0x5a>
			led_signal_togle_fsm(led_signal);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 f870 	bl	8000be0 <led_signal_togle_fsm>
			break;
 8000b00:	e002      	b.n	8000b08 <led_signal_fsm+0x5a>
			break;
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e000      	b.n	8000b08 <led_signal_fsm+0x5a>
			break;
 8000b06:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <led_signal_type_selector>:



uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	1cfb      	adds	r3, r7, #3
 8000b1e:	701a      	strb	r2, [r3, #0]
	led_signal->type = type;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	1cfa      	adds	r2, r7, #3
 8000b24:	7812      	ldrb	r2, [r2, #0]
 8000b26:	725a      	strb	r2, [r3, #9]
	return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b084      	sub	sp, #16
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	7a92      	ldrb	r2, [r2, #10]
 8000b42:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000b44:	230e      	movs	r3, #14
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	687a      	ldr	r2, [r7, #4]
 8000b4a:	7a12      	ldrb	r2, [r2, #8]
 8000b4c:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d027      	beq.n	8000ba6 <led_signal_solid_fsm+0x74>
 8000b56:	dc31      	bgt.n	8000bbc <led_signal_solid_fsm+0x8a>
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d01a      	beq.n	8000b92 <led_signal_solid_fsm+0x60>
 8000b5c:	dc2e      	bgt.n	8000bbc <led_signal_solid_fsm+0x8a>
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d002      	beq.n	8000b68 <led_signal_solid_fsm+0x36>
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d00a      	beq.n	8000b7c <led_signal_solid_fsm+0x4a>
 8000b66:	e029      	b.n	8000bbc <led_signal_solid_fsm+0x8a>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000b68:	230e      	movs	r3, #14
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d129      	bne.n	8000bc6 <led_signal_solid_fsm+0x94>
			{
				state = LED_SIGNAL_STATE_ON;
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b7a:	e024      	b.n	8000bc6 <led_signal_solid_fsm+0x94>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	6859      	ldr	r1, [r3, #4]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	f000 f8a1 	bl	8000cca <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	701a      	strb	r2, [r3, #0]
			break;
 8000b90:	e01c      	b.n	8000bcc <led_signal_solid_fsm+0x9a>
		case LED_SIGNAL_STATE_SOLID_ON:

			if(control == LED_SIGNAL_CTRL_STOP)
 8000b92:	230e      	movs	r3, #14
 8000b94:	18fb      	adds	r3, r7, r3
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d116      	bne.n	8000bca <led_signal_solid_fsm+0x98>
			{
				state = LED_SIGNAL_STATE_END;
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	2204      	movs	r2, #4
 8000ba2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ba4:	e011      	b.n	8000bca <led_signal_solid_fsm+0x98>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	6859      	ldr	r1, [r3, #4]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	f000 f8a0 	bl	8000cf2 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
			break;
 8000bba:	e007      	b.n	8000bcc <led_signal_solid_fsm+0x9a>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
			break;
 8000bc4:	e002      	b.n	8000bcc <led_signal_solid_fsm+0x9a>
			break;
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	e000      	b.n	8000bcc <led_signal_solid_fsm+0x9a>
			break;
 8000bca:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	220f      	movs	r2, #15
 8000bd0:	18ba      	adds	r2, r7, r2
 8000bd2:	7812      	ldrb	r2, [r2, #0]
 8000bd4:	729a      	strb	r2, [r3, #10]

	return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <led_signal_togle_fsm>:

uint8_t led_signal_togle_fsm(led_signal_t *led_signal)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000be8:	210f      	movs	r1, #15
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	7a92      	ldrb	r2, [r2, #10]
 8000bf0:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	18fb      	adds	r3, r7, r3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	7a12      	ldrb	r2, [r2, #8]
 8000bfa:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	d02d      	beq.n	8000c60 <led_signal_togle_fsm+0x80>
 8000c04:	dc37      	bgt.n	8000c76 <led_signal_togle_fsm+0x96>
 8000c06:	2b03      	cmp	r3, #3
 8000c08:	d01a      	beq.n	8000c40 <led_signal_togle_fsm+0x60>
 8000c0a:	dc34      	bgt.n	8000c76 <led_signal_togle_fsm+0x96>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <led_signal_togle_fsm+0x36>
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d00a      	beq.n	8000c2a <led_signal_togle_fsm+0x4a>
 8000c14:	e02f      	b.n	8000c76 <led_signal_togle_fsm+0x96>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000c16:	230e      	movs	r3, #14
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d12f      	bne.n	8000c80 <led_signal_togle_fsm+0xa0>
			{
				state = LED_SIGNAL_STATE_ON;
 8000c20:	230f      	movs	r3, #15
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c28:	e02a      	b.n	8000c80 <led_signal_togle_fsm+0xa0>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6818      	ldr	r0, [r3, #0]
 8000c2e:	6859      	ldr	r1, [r3, #4]
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	f000 f84a 	bl	8000cca <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 8000c36:	230f      	movs	r3, #15
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	701a      	strb	r2, [r3, #0]
			break;
 8000c3e:	e022      	b.n	8000c86 <led_signal_togle_fsm+0xa6>
		case LED_SIGNAL_STATE_TOGLE:

			led_signal_toggle(*led_signal);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	6859      	ldr	r1, [r3, #4]
 8000c46:	689a      	ldr	r2, [r3, #8]
 8000c48:	f000 f867 	bl	8000d1a <led_signal_toggle>
			if(control == LED_SIGNAL_CTRL_STOP)
 8000c4c:	230e      	movs	r3, #14
 8000c4e:	18fb      	adds	r3, r7, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d116      	bne.n	8000c84 <led_signal_togle_fsm+0xa4>
			{
				state = LED_SIGNAL_STATE_END;
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c5e:	e011      	b.n	8000c84 <led_signal_togle_fsm+0xa4>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	6859      	ldr	r1, [r3, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	f000 f843 	bl	8000cf2 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	18fb      	adds	r3, r7, r3
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			break;
 8000c74:	e007      	b.n	8000c86 <led_signal_togle_fsm+0xa6>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000c76:	230f      	movs	r3, #15
 8000c78:	18fb      	adds	r3, r7, r3
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
			break;
 8000c7e:	e002      	b.n	8000c86 <led_signal_togle_fsm+0xa6>
			break;
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	e000      	b.n	8000c86 <led_signal_togle_fsm+0xa6>
			break;
 8000c84:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	220f      	movs	r2, #15
 8000c8a:	18ba      	adds	r2, r7, r2
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	729a      	strb	r2, [r3, #10]

	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	0018      	movs	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b004      	add	sp, #16
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <led_signal_start>:


uint8_t led_signal_start(led_signal_t *led_signal)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_START;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	721a      	strb	r2, [r3, #8]

	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	721a      	strb	r2, [r3, #8]

	return 0;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b002      	add	sp, #8
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	6018      	str	r0, [r3, #0]
 8000cd4:	6059      	str	r1, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	889b      	ldrh	r3, [r3, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	0019      	movs	r1, r3
 8000ce4:	f003 f98b 	bl	8003ffe <HAL_GPIO_WritePin>
	return 0;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	0018      	movs	r0, r3
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b084      	sub	sp, #16
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	6018      	str	r0, [r3, #0]
 8000cfc:	6059      	str	r1, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	889b      	ldrh	r3, [r3, #4]
 8000d08:	2200      	movs	r2, #0
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	f003 f977 	bl	8003ffe <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	0018      	movs	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b004      	add	sp, #16
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	6018      	str	r0, [r3, #0]
 8000d24:	6059      	str	r1, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	889b      	ldrh	r3, [r3, #4]
 8000d30:	0019      	movs	r1, r3
 8000d32:	0010      	movs	r0, r2
 8000d34:	f003 f980 	bl	8004038 <HAL_GPIO_TogglePin>
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <light_setup>:
#include "lights.h"


uint8_t light_setup(light_t *light, light_gpio_t hardware_output_1,
												light_gpio_t hardware_output_2)
{
 8000d42:	b082      	sub	sp, #8
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	1d38      	adds	r0, r7, #4
 8000d4e:	6001      	str	r1, [r0, #0]
 8000d50:	6042      	str	r2, [r0, #4]
 8000d52:	2204      	movs	r2, #4
 8000d54:	2418      	movs	r4, #24
 8000d56:	1912      	adds	r2, r2, r4
 8000d58:	2108      	movs	r1, #8
 8000d5a:	468c      	mov	ip, r1
 8000d5c:	44bc      	add	ip, r7
 8000d5e:	4462      	add	r2, ip
 8000d60:	6013      	str	r3, [r2, #0]

	light->hardware_output_1 = hardware_output_1;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1d3a      	adds	r2, r7, #4
 8000d66:	3304      	adds	r3, #4
 8000d68:	ca03      	ldmia	r2!, {r0, r1}
 8000d6a:	c303      	stmia	r3!, {r0, r1}
	light->hardware_output_2 = hardware_output_2;
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2204      	movs	r2, #4
 8000d70:	1912      	adds	r2, r2, r4
 8000d72:	2108      	movs	r1, #8
 8000d74:	468c      	mov	ip, r1
 8000d76:	44bc      	add	ip, r7
 8000d78:	4462      	add	r2, ip
 8000d7a:	330c      	adds	r3, #12
 8000d7c:	ca03      	ldmia	r2!, {r0, r1}
 8000d7e:	c303      	stmia	r3!, {r0, r1}
	light_deenergize(light);
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 f978 	bl	8001078 <light_deenergize>
	light->light_status = LIGHT_OFF;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	2221      	movs	r2, #33	; 0x21
 8000d92:	2101      	movs	r1, #1
 8000d94:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	2222      	movs	r2, #34	; 0x22
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	5499      	strb	r1, [r3, r2]
	light->fsm_pulse_counts = 1;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2201      	movs	r2, #1
 8000da2:	619a      	str	r2, [r3, #24]
	return 0;
 8000da4:	2300      	movs	r3, #0

}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b005      	add	sp, #20
 8000dac:	bc90      	pop	{r4, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	b002      	add	sp, #8
 8000db2:	4718      	bx	r3

08000db4 <light_on_pulse_fsm>:
uint8_t light_on_pulse_fsm(light_t *light)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2221      	movs	r2, #33	; 0x21
 8000dc0:	5c9b      	ldrb	r3, [r3, r2]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d111      	bne.n	8000dea <light_on_pulse_fsm+0x36>
		(light->fsm_run_off != LIGHT_RUN_TRUE) )
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2222      	movs	r2, #34	; 0x22
 8000dca:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d00c      	beq.n	8000dea <light_on_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_ON);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 f890 	bl	8000efa <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7d1b      	ldrb	r3, [r3, #20]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d103      	bne.n	8000dea <light_on_pulse_fsm+0x36>
		{
			light->fsm_run_on = LIGHT_RUN_FALSE;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2221      	movs	r2, #33	; 0x21
 8000de6:	2101      	movs	r1, #1
 8000de8:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 8000dea:	2300      	movs	r3, #0
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b002      	add	sp, #8
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <light_off_pulse_fsm>:

uint8_t light_off_pulse_fsm(light_t *light)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2222      	movs	r2, #34	; 0x22
 8000e00:	5c9b      	ldrb	r3, [r3, r2]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d111      	bne.n	8000e2a <light_off_pulse_fsm+0x36>
			(light->fsm_run_on != LIGHT_RUN_TRUE) )
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2221      	movs	r2, #33	; 0x21
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00c      	beq.n	8000e2a <light_off_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_OFF);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2100      	movs	r1, #0
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 f870 	bl	8000efa <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	7d1b      	ldrb	r3, [r3, #20]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d103      	bne.n	8000e2a <light_off_pulse_fsm+0x36>
		{
			light->fsm_run_off = LIGHT_RUN_FALSE;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2222      	movs	r2, #34	; 0x22
 8000e26:	2101      	movs	r1, #1
 8000e28:	5499      	strb	r1, [r3, r2]
		}
	}

	return 0;
 8000e2a:	2300      	movs	r3, #0
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b002      	add	sp, #8
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <light_ask_off_pulse_fsm>:


uint8_t light_ask_off_pulse_fsm(light_t *light)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000e3c:	200f      	movs	r0, #15
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2221      	movs	r2, #33	; 0x21
 8000e48:	2101      	movs	r1, #1
 8000e4a:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_TRUE;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2222      	movs	r2, #34	; 0x22
 8000e50:	2100      	movs	r1, #0
 8000e52:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2223      	movs	r2, #35	; 0x23
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2220      	movs	r2, #32
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]
	status = 0;
 8000e64:	183b      	adds	r3, r7, r0
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]

	return status;
 8000e6a:	183b      	adds	r3, r7, r0
 8000e6c:	781b      	ldrb	r3, [r3, #0]
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <light_ask_on_pulse_fsm>:
uint8_t light_ask_on_pulse_fsm(light_t *light)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000e7e:	200f      	movs	r0, #15
 8000e80:	183b      	adds	r3, r7, r0
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_TRUE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2221      	movs	r2, #33	; 0x21
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2222      	movs	r2, #34	; 0x22
 8000e92:	2101      	movs	r1, #1
 8000e94:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2223      	movs	r2, #35	; 0x23
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	5499      	strb	r1, [r3, r2]

	return status;
 8000ea6:	183b      	adds	r3, r7, r0
 8000ea8:	781b      	ldrb	r3, [r3, #0]
}
 8000eaa:	0018      	movs	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	b004      	add	sp, #16
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <light_check_init_fsm>:
uint8_t light_check_init_fsm(light_t light, light_fsm_init_t *init)
{
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	b5b0      	push	{r4, r5, r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	250c      	movs	r5, #12
 8000eba:	1d2c      	adds	r4, r5, #4
 8000ebc:	19e4      	adds	r4, r4, r7
 8000ebe:	6020      	str	r0, [r4, #0]
 8000ec0:	6061      	str	r1, [r4, #4]
 8000ec2:	60a2      	str	r2, [r4, #8]
 8000ec4:	60e3      	str	r3, [r4, #12]
	*init = light.fsm_init;
 8000ec6:	1d2b      	adds	r3, r5, #4
 8000ec8:	19db      	adds	r3, r3, r7
 8000eca:	2223      	movs	r2, #35	; 0x23
 8000ecc:	5c9a      	ldrb	r2, [r3, r2]
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bcb0      	pop	{r4, r5, r7}
 8000eda:	bc08      	pop	{r3}
 8000edc:	b004      	add	sp, #16
 8000ede:	4718      	bx	r3

08000ee0 <light_acknowledge_init_fsm>:

uint8_t light_acknowledge_init_fsm(light_t *light)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	light->fsm_init = LIGHT_INIT_FALSE;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2223      	movs	r2, #35	; 0x23
 8000eec:	2101      	movs	r1, #1
 8000eee:	5499      	strb	r1, [r3, r2]
	return 0;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <light_pulse_fsm>:



uint8_t light_pulse_fsm(light_t *light, light_status_t new_status)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b088      	sub	sp, #32
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
 8000f02:	000a      	movs	r2, r1
 8000f04:	1cfb      	adds	r3, r7, #3
 8000f06:	701a      	strb	r2, [r3, #0]
	//TODO: (high) check if the implementation of this FSM is necessary

	light_fsm_state_t state = light->fsm_state;
 8000f08:	201f      	movs	r0, #31
 8000f0a:	183b      	adds	r3, r7, r0
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	2120      	movs	r1, #32
 8000f10:	5c52      	ldrb	r2, [r2, r1]
 8000f12:	701a      	strb	r2, [r3, #0]
//	light_fsm_init_t fsm_init = light->fsm_init;
	uint32_t fsm_pulse_counts = light->fsm_pulse_counts;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	613b      	str	r3, [r7, #16]
	uint32_t fsm_pulse_idx = light->fsm_pulse_idx;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	61bb      	str	r3, [r7, #24]
	light_fsm_status_t fsm_status = light->fsm_status;
 8000f20:	2317      	movs	r3, #23
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	7d12      	ldrb	r2, [r2, #20]
 8000f28:	701a      	strb	r2, [r3, #0]
	light_fsm_init_t fsm_init = light->fsm_init;
 8000f2a:	230f      	movs	r3, #15
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	2123      	movs	r1, #35	; 0x23
 8000f32:	5c52      	ldrb	r2, [r2, r1]
 8000f34:	701a      	strb	r2, [r3, #0]
//	light_status_t light_status = light->light_status;
//	light_status_t new_light_status = light->new_light_status;


	switch(state)
 8000f36:	183b      	adds	r3, r7, r0
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d035      	beq.n	8000faa <light_pulse_fsm+0xb0>
 8000f3e:	dc41      	bgt.n	8000fc4 <light_pulse_fsm+0xca>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <light_pulse_fsm+0x50>
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d01e      	beq.n	8000f86 <light_pulse_fsm+0x8c>
			fsm_status = LIGHT_STATE_STATUS_READY;
			state = LIGHT_STATE_IDLE;
			break;
		default:

			break;
 8000f48:	e03c      	b.n	8000fc4 <light_pulse_fsm+0xca>
				fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000f4a:	2317      	movs	r3, #23
 8000f4c:	18fb      	adds	r3, r7, r3
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
				if(new_status == LIGHT_ON)
 8000f52:	1cfb      	adds	r3, r7, #3
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d104      	bne.n	8000f64 <light_pulse_fsm+0x6a>
					light_on(light);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f000 f84d 	bl	8000ffc <light_on>
 8000f62:	e003      	b.n	8000f6c <light_pulse_fsm+0x72>
					light_off(light);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f867 	bl	800103a <light_off>
				if(fsm_pulse_counts == 0)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d104      	bne.n	8000f7c <light_pulse_fsm+0x82>
					state = LIGHT_STATE_DEENERGIZING;
 8000f72:	231f      	movs	r3, #31
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	2203      	movs	r2, #3
 8000f78:	701a      	strb	r2, [r3, #0]
			break;
 8000f7a:	e026      	b.n	8000fca <light_pulse_fsm+0xd0>
					state = LIGHT_STATE_WAIT;
 8000f7c:	231f      	movs	r3, #31
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2202      	movs	r2, #2
 8000f82:	701a      	strb	r2, [r3, #0]
			break;
 8000f84:	e021      	b.n	8000fca <light_pulse_fsm+0xd0>
			fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000f86:	2317      	movs	r3, #23
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
			fsm_pulse_idx++;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	3301      	adds	r3, #1
 8000f92:	61bb      	str	r3, [r7, #24]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d915      	bls.n	8000fc8 <light_pulse_fsm+0xce>
				state = LIGHT_STATE_DEENERGIZING;
 8000f9c:	231f      	movs	r3, #31
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
			break;
 8000fa8:	e00e      	b.n	8000fc8 <light_pulse_fsm+0xce>
			light_deenergize(light);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	0018      	movs	r0, r3
 8000fae:	f000 f863 	bl	8001078 <light_deenergize>
			fsm_status = LIGHT_STATE_STATUS_READY;
 8000fb2:	2317      	movs	r3, #23
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
			state = LIGHT_STATE_IDLE;
 8000fba:	231f      	movs	r3, #31
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
			break;
 8000fc2:	e002      	b.n	8000fca <light_pulse_fsm+0xd0>
			break;
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	e000      	b.n	8000fca <light_pulse_fsm+0xd0>
			break;
 8000fc8:	46c0      	nop			; (mov r8, r8)
	}

	light->fsm_state = state;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	221f      	movs	r2, #31
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	7812      	ldrb	r2, [r2, #0]
 8000fd4:	545a      	strb	r2, [r3, r1]
	light->fsm_init = fsm_init;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	220f      	movs	r2, #15
 8000fda:	18ba      	adds	r2, r7, r2
 8000fdc:	2123      	movs	r1, #35	; 0x23
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	545a      	strb	r2, [r3, r1]
	light->fsm_pulse_idx = fsm_pulse_idx;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	61da      	str	r2, [r3, #28]
	light->fsm_status = fsm_status;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2217      	movs	r2, #23
 8000fec:	18ba      	adds	r2, r7, r2
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	751a      	strb	r2, [r3, #20]

	return 0;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	b008      	add	sp, #32
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <light_on>:

uint8_t light_on(light_t *light)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6858      	ldr	r0, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	891b      	ldrh	r3, [r3, #8]
 800100c:	2200      	movs	r2, #0
 800100e:	0019      	movs	r1, r3
 8001010:	f002 fff5 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68d8      	ldr	r0, [r3, #12]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	8a1b      	ldrh	r3, [r3, #16]
 800101c:	2201      	movs	r2, #1
 800101e:	0019      	movs	r1, r3
 8001020:	f002 ffed 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_SET);

	light->light_status = LIGHT_ON;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_ON;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	705a      	strb	r2, [r3, #1]
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}

0800103a <light_off>:

uint8_t light_off(light_t *light)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6858      	ldr	r0, [r3, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	891b      	ldrh	r3, [r3, #8]
 800104a:	2201      	movs	r2, #1
 800104c:	0019      	movs	r1, r3
 800104e:	f002 ffd6 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68d8      	ldr	r0, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8a1b      	ldrh	r3, [r3, #16]
 800105a:	2200      	movs	r2, #0
 800105c:	0019      	movs	r1, r3
 800105e:	f002 ffce 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->light_status = LIGHT_OFF;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_OFF;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	705a      	strb	r2, [r3, #1]
	return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	0018      	movs	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}

08001078 <light_deenergize>:


uint8_t light_deenergize(light_t *light)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6858      	ldr	r0, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	891b      	ldrh	r3, [r3, #8]
 8001088:	2200      	movs	r2, #0
 800108a:	0019      	movs	r1, r3
 800108c:	f002 ffb7 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68d8      	ldr	r0, [r3, #12]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8a1b      	ldrh	r3, [r3, #16]
 8001098:	2200      	movs	r2, #0
 800109a:	0019      	movs	r1, r3
 800109c:	f002 ffaf 	bl	8003ffe <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->power_status = LIGHT_POWER_STATUS_DEENERGIZED;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	705a      	strb	r2, [r3, #1]
	return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	b0a7      	sub	sp, #156	; 0x9c
 80010b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80010b6:	f002 fb8a 	bl	80037ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 fb6d 	bl	8001798 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f7ff fbdf 	bl	8000880 <MX_GPIO_Init>
  MX_TIM1_Init();
 80010c2:	f002 f969 	bl	8003398 <MX_TIM1_Init>
  MX_TIM14_Init();
 80010c6:	f002 fa49 	bl	800355c <MX_TIM14_Init>
  MX_TIM3_Init();
 80010ca:	f002 f9bf 	bl	800344c <MX_TIM3_Init>
  MX_TIM17_Init();
 80010ce:	f002 fa91 	bl	80035f4 <MX_TIM17_Init>
  MX_TIM16_Init();
 80010d2:	f002 fa67 	bl	80035a4 <MX_TIM16_Init>


  //DIP SWITCH SETUP
  switch_selector_t switch_selector;
  switch_selector_gpio_t switch_selector_gpio[2];//We can use malloc also
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 80010d6:	2164      	movs	r1, #100	; 0x64
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	22a0      	movs	r2, #160	; 0xa0
 80010dc:	05d2      	lsls	r2, r2, #23
 80010de:	601a      	str	r2, [r3, #0]
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	2220      	movs	r2, #32
 80010e4:	809a      	strh	r2, [r3, #4]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 80010e6:	187b      	adds	r3, r7, r1
 80010e8:	22a0      	movs	r2, #160	; 0xa0
 80010ea:	05d2      	lsls	r2, r2, #23
 80010ec:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2240      	movs	r2, #64	; 0x40
 80010f2:	819a      	strh	r2, [r3, #12]

  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 80010f4:	1879      	adds	r1, r7, r1
 80010f6:	2374      	movs	r3, #116	; 0x74
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	2202      	movs	r2, #2
 80010fc:	0018      	movs	r0, r3
 80010fe:	f002 f841 	bl	8003184 <switch_selector_setup>

  //MOTION SENSOR SETUP
  //-------------------

  //This seems to be a good initial conf.
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001102:	4bf2      	ldr	r3, [pc, #968]	; (80014cc <main+0x41c>)
 8001104:	2200      	movs	r2, #0
 8001106:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8001108:	4bf0      	ldr	r3, [pc, #960]	; (80014cc <main+0x41c>)
 800110a:	2200      	movs	r2, #0
 800110c:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_4HZ;
 800110e:	4bef      	ldr	r3, [pc, #956]	; (80014cc <main+0x41c>)
 8001110:	2200      	movs	r2, #0
 8001112:	719a      	strb	r2, [r3, #6]
//  motion_initial_conf.op_mode = PYD1598_FORCE_READOUT;
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001114:	4bed      	ldr	r3, [pc, #948]	; (80014cc <main+0x41c>)
 8001116:	2202      	movs	r2, #2
 8001118:	711a      	strb	r2, [r3, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_1_PULSE;
 800111a:	4bec      	ldr	r3, [pc, #944]	; (80014cc <main+0x41c>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001120:	4bea      	ldr	r3, [pc, #936]	; (80014cc <main+0x41c>)
 8001122:	2200      	movs	r2, #0
 8001124:	715a      	strb	r2, [r3, #5]
//  motion_initial_conf.threshold = 135;
//  motion_initial_conf.threshold = 80;
  motion_initial_conf.threshold = 20;
 8001126:	4be9      	ldr	r3, [pc, #932]	; (80014cc <main+0x41c>)
 8001128:	2214      	movs	r2, #20
 800112a:	701a      	strb	r2, [r3, #0]
//  motion_initial_conf.threshold = 50;
  motion_initial_conf.window_time = PYD1598_WT_2_SEC;
 800112c:	4be7      	ldr	r3, [pc, #924]	; (80014cc <main+0x41c>)
 800112e:	2200      	movs	r2, #0
 8001130:	70da      	strb	r2, [r3, #3]

  //Hardware assignation:
  pyd1598_hardware_interface_t setin_pin;
  pyd1598_hardware_interface_t direct_link_pin;

  setin_pin.pin = SERIN_Pin;
 8001132:	215c      	movs	r1, #92	; 0x5c
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	01d2      	lsls	r2, r2, #7
 800113a:	809a      	strh	r2, [r3, #4]
  setin_pin.port = SERIN_GPIO_Port;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	4ae4      	ldr	r2, [pc, #912]	; (80014d0 <main+0x420>)
 8001140:	601a      	str	r2, [r3, #0]
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2207      	movs	r2, #7
 8001146:	719a      	strb	r2, [r3, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001148:	2054      	movs	r0, #84	; 0x54
 800114a:	183b      	adds	r3, r7, r0
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	809a      	strh	r2, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001150:	183b      	adds	r3, r7, r0
 8001152:	4ae0      	ldr	r2, [pc, #896]	; (80014d4 <main+0x424>)
 8001154:	601a      	str	r2, [r3, #0]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001156:	183b      	adds	r3, r7, r0
 8001158:	2207      	movs	r2, #7
 800115a:	719a      	strb	r2, [r3, #6]

//  uint8_t idx = 0;

  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 800115c:	187b      	adds	r3, r7, r1
 800115e:	4adb      	ldr	r2, [pc, #876]	; (80014cc <main+0x41c>)
 8001160:	4cdd      	ldr	r4, [pc, #884]	; (80014d8 <main+0x428>)
 8001162:	1838      	adds	r0, r7, r0
 8001164:	2104      	movs	r1, #4
 8001166:	4469      	add	r1, sp
 8001168:	c860      	ldmia	r0!, {r5, r6}
 800116a:	c160      	stmia	r1!, {r5, r6}
 800116c:	4669      	mov	r1, sp
 800116e:	6858      	ldr	r0, [r3, #4]
 8001170:	6008      	str	r0, [r1, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6811      	ldr	r1, [r2, #0]
 8001176:	6852      	ldr	r2, [r2, #4]
 8001178:	0020      	movs	r0, r4
 800117a:	f001 f954 	bl	8002426 <pyd1598_setup>

//  pyd1598_serin_set_zero_pulse(setin_pin);
  HAL_Delay(1000);
 800117e:	23fa      	movs	r3, #250	; 0xfa
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	0018      	movs	r0, r3
 8001184:	f002 fba0 	bl	80038c8 <HAL_Delay>

  pyd1598_request_write(&motion_sensor);
 8001188:	4bd3      	ldr	r3, [pc, #844]	; (80014d8 <main+0x428>)
 800118a:	0018      	movs	r0, r3
 800118c:	f001 fb70 	bl	8002870 <pyd1598_request_write>

  //LIGHTS SETUP
  //-----------
  //timers config:
  deadline.msec = 20;
 8001190:	4bd2      	ldr	r3, [pc, #840]	; (80014dc <main+0x42c>)
 8001192:	2214      	movs	r2, #20
 8001194:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8001196:	4bd1      	ldr	r3, [pc, #836]	; (80014dc <main+0x42c>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 800119c:	4ccf      	ldr	r4, [pc, #828]	; (80014dc <main+0x42c>)
 800119e:	4dd0      	ldr	r5, [pc, #832]	; (80014e0 <main+0x430>)
 80011a0:	466b      	mov	r3, sp
 80011a2:	0018      	movs	r0, r3
 80011a4:	0023      	movs	r3, r4
 80011a6:	3308      	adds	r3, #8
 80011a8:	2210      	movs	r2, #16
 80011aa:	0019      	movs	r1, r3
 80011ac:	f004 fc70 	bl	8005a90 <memcpy>
 80011b0:	6822      	ldr	r2, [r4, #0]
 80011b2:	6863      	ldr	r3, [r4, #4]
 80011b4:	0028      	movs	r0, r5
 80011b6:	f7ff f937 	bl	8000428 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 80011ba:	4cc8      	ldr	r4, [pc, #800]	; (80014dc <main+0x42c>)
 80011bc:	4dc9      	ldr	r5, [pc, #804]	; (80014e4 <main+0x434>)
 80011be:	466b      	mov	r3, sp
 80011c0:	0018      	movs	r0, r3
 80011c2:	0023      	movs	r3, r4
 80011c4:	3308      	adds	r3, #8
 80011c6:	2210      	movs	r2, #16
 80011c8:	0019      	movs	r1, r3
 80011ca:	f004 fc61 	bl	8005a90 <memcpy>
 80011ce:	6822      	ldr	r2, [r4, #0]
 80011d0:	6863      	ldr	r3, [r4, #4]
 80011d2:	0028      	movs	r0, r5
 80011d4:	f7ff f928 	bl	8000428 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 80011d8:	4cc0      	ldr	r4, [pc, #768]	; (80014dc <main+0x42c>)
 80011da:	4dc3      	ldr	r5, [pc, #780]	; (80014e8 <main+0x438>)
 80011dc:	466b      	mov	r3, sp
 80011de:	0018      	movs	r0, r3
 80011e0:	0023      	movs	r3, r4
 80011e2:	3308      	adds	r3, #8
 80011e4:	2210      	movs	r2, #16
 80011e6:	0019      	movs	r1, r3
 80011e8:	f004 fc52 	bl	8005a90 <memcpy>
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	6863      	ldr	r3, [r4, #4]
 80011f0:	0028      	movs	r0, r5
 80011f2:	f7ff f919 	bl	8000428 <deadline_timer_setup>
  light_gpio_t light_2_output_a;
  light_gpio_t light_2_output_b;
  light_gpio_t light_uv_output_a;
  light_gpio_t light_uv_output_b;

  light_1_output_a.pin = LAMP1_OUTA_Pin;
 80011f6:	214c      	movs	r1, #76	; 0x4c
 80011f8:	187b      	adds	r3, r7, r1
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	809a      	strh	r2, [r3, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 80011fe:	253c      	movs	r5, #60	; 0x3c
 8001200:	197b      	adds	r3, r7, r5
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	0052      	lsls	r2, r2, #1
 8001206:	809a      	strh	r2, [r3, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8001208:	262c      	movs	r6, #44	; 0x2c
 800120a:	19bb      	adds	r3, r7, r6
 800120c:	2201      	movs	r2, #1
 800120e:	809a      	strh	r2, [r3, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001210:	2044      	movs	r0, #68	; 0x44
 8001212:	183b      	adds	r3, r7, r0
 8001214:	2280      	movs	r2, #128	; 0x80
 8001216:	00d2      	lsls	r2, r2, #3
 8001218:	809a      	strh	r2, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 800121a:	2434      	movs	r4, #52	; 0x34
 800121c:	193b      	adds	r3, r7, r4
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	809a      	strh	r2, [r3, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001222:	2324      	movs	r3, #36	; 0x24
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	4ab1      	ldr	r2, [pc, #708]	; (80014ec <main+0x43c>)
 8001228:	809a      	strh	r2, [r3, #4]

  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	4aa9      	ldr	r2, [pc, #676]	; (80014d4 <main+0x424>)
 800122e:	601a      	str	r2, [r3, #0]
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001230:	197b      	adds	r3, r7, r5
 8001232:	22a0      	movs	r2, #160	; 0xa0
 8001234:	05d2      	lsls	r2, r2, #23
 8001236:	601a      	str	r2, [r3, #0]
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8001238:	19bb      	adds	r3, r7, r6
 800123a:	22a0      	movs	r2, #160	; 0xa0
 800123c:	05d2      	lsls	r2, r2, #23
 800123e:	601a      	str	r2, [r3, #0]
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8001240:	183b      	adds	r3, r7, r0
 8001242:	22a0      	movs	r2, #160	; 0xa0
 8001244:	05d2      	lsls	r2, r2, #23
 8001246:	601a      	str	r2, [r3, #0]
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001248:	193b      	adds	r3, r7, r4
 800124a:	22a0      	movs	r2, #160	; 0xa0
 800124c:	05d2      	lsls	r2, r2, #23
 800124e:	601a      	str	r2, [r3, #0]
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001250:	2324      	movs	r3, #36	; 0x24
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	4a9e      	ldr	r2, [pc, #632]	; (80014d0 <main+0x420>)
 8001256:	601a      	str	r2, [r3, #0]


  light_setup(&light_1,light_1_output_a, light_1_output_b);
 8001258:	183b      	adds	r3, r7, r0
 800125a:	187a      	adds	r2, r7, r1
 800125c:	4ca4      	ldr	r4, [pc, #656]	; (80014f0 <main+0x440>)
 800125e:	4669      	mov	r1, sp
 8001260:	6858      	ldr	r0, [r3, #4]
 8001262:	6008      	str	r0, [r1, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6811      	ldr	r1, [r2, #0]
 8001268:	6852      	ldr	r2, [r2, #4]
 800126a:	0020      	movs	r0, r4
 800126c:	f7ff fd69 	bl	8000d42 <light_setup>
  light_setup(&light_2,light_2_output_a, light_2_output_b);
 8001270:	2434      	movs	r4, #52	; 0x34
 8001272:	193b      	adds	r3, r7, r4
 8001274:	197a      	adds	r2, r7, r5
 8001276:	4c9f      	ldr	r4, [pc, #636]	; (80014f4 <main+0x444>)
 8001278:	4669      	mov	r1, sp
 800127a:	6858      	ldr	r0, [r3, #4]
 800127c:	6008      	str	r0, [r1, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	6852      	ldr	r2, [r2, #4]
 8001284:	0020      	movs	r0, r4
 8001286:	f7ff fd5c 	bl	8000d42 <light_setup>
  light_setup(&light_uv,light_uv_output_a, light_uv_output_b);
 800128a:	2324      	movs	r3, #36	; 0x24
 800128c:	18fb      	adds	r3, r7, r3
 800128e:	19ba      	adds	r2, r7, r6
 8001290:	4c99      	ldr	r4, [pc, #612]	; (80014f8 <main+0x448>)
 8001292:	4669      	mov	r1, sp
 8001294:	6858      	ldr	r0, [r3, #4]
 8001296:	6008      	str	r0, [r1, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6811      	ldr	r1, [r2, #0]
 800129c:	6852      	ldr	r2, [r2, #4]
 800129e:	0020      	movs	r0, r4
 80012a0:	f7ff fd4f 	bl	8000d42 <light_setup>

  //BUTTONS SETUP
  //-------------

  //timers config:
  timer_buttons.msec = 1;
 80012a4:	4b95      	ldr	r3, [pc, #596]	; (80014fc <main+0x44c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 80012aa:	4c94      	ldr	r4, [pc, #592]	; (80014fc <main+0x44c>)
 80012ac:	4d94      	ldr	r5, [pc, #592]	; (8001500 <main+0x450>)
 80012ae:	466b      	mov	r3, sp
 80012b0:	0018      	movs	r0, r3
 80012b2:	0023      	movs	r3, r4
 80012b4:	3308      	adds	r3, #8
 80012b6:	2210      	movs	r2, #16
 80012b8:	0019      	movs	r1, r3
 80012ba:	f004 fbe9 	bl	8005a90 <memcpy>
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	0028      	movs	r0, r5
 80012c4:	f7ff f8b0 	bl	8000428 <deadline_timer_setup>

  //Hardware assignation:
  button_gpio_t button_input;
  button_input.pin = LAMP1_IN_Pin;
 80012c8:	211c      	movs	r1, #28
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	22a0      	movs	r2, #160	; 0xa0
 80012d6:	05d2      	lsls	r2, r2, #23
 80012d8:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_1, button_input);
 80012da:	000c      	movs	r4, r1
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	4889      	ldr	r0, [pc, #548]	; (8001504 <main+0x454>)
 80012e0:	6819      	ldr	r1, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	f7fe ff9c 	bl	8000220 <button_setup>

  button_input.pin = LAMP2_IN_Pin;
 80012e8:	0021      	movs	r1, r4
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2208      	movs	r2, #8
 80012ee:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP2_IN_GPIO_Port;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	22a0      	movs	r2, #160	; 0xa0
 80012f4:	05d2      	lsls	r2, r2, #23
 80012f6:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_2, button_input);
 80012f8:	000c      	movs	r4, r1
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	4882      	ldr	r0, [pc, #520]	; (8001508 <main+0x458>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	f7fe ff8d 	bl	8000220 <button_setup>

  button_input.pin = UV_IN_Pin;
 8001306:	0021      	movs	r1, r4
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2204      	movs	r2, #4
 800130c:	809a      	strh	r2, [r3, #4]
  button_input.port = UV_IN_GPIO_Port;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	22a0      	movs	r2, #160	; 0xa0
 8001312:	05d2      	lsls	r2, r2, #23
 8001314:	601a      	str	r2, [r3, #0]
  button_setup(&button_uv, button_input);
 8001316:	187b      	adds	r3, r7, r1
 8001318:	487c      	ldr	r0, [pc, #496]	; (800150c <main+0x45c>)
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	f7fe ff7f 	bl	8000220 <button_setup>
  //-------------
  led_signal_t signal_led;
  led_signal_gpio_t signal_led_gpio;
  deadline_timer_expired_t indicator_timer_expired;

  signal_led_gpio.pin = LED_Pin;
 8001322:	2108      	movs	r1, #8
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2202      	movs	r2, #2
 8001328:	809a      	strh	r2, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	22a0      	movs	r2, #160	; 0xa0
 800132e:	05d2      	lsls	r2, r2, #23
 8001330:	601a      	str	r2, [r3, #0]
  led_signal_setup(&signal_led, signal_led_gpio);
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2610      	movs	r6, #16
 8001336:	19b8      	adds	r0, r7, r6
 8001338:	6819      	ldr	r1, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	f7ff fba4 	bl	8000a88 <led_signal_setup>
  deadline.msec = 500;
 8001340:	4b66      	ldr	r3, [pc, #408]	; (80014dc <main+0x42c>)
 8001342:	22fa      	movs	r2, #250	; 0xfa
 8001344:	0052      	lsls	r2, r2, #1
 8001346:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <main+0x42c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
//  deadline_timer_setup(&deadline_led_indicator, deadline);

  deadline_timer_setup_shared_clock(&deadline_led_indicator,
 800134e:	4c63      	ldr	r4, [pc, #396]	; (80014dc <main+0x42c>)
 8001350:	4e6b      	ldr	r6, [pc, #428]	; (8001500 <main+0x450>)
 8001352:	4d6f      	ldr	r5, [pc, #444]	; (8001510 <main+0x460>)
 8001354:	466b      	mov	r3, sp
 8001356:	0018      	movs	r0, r3
 8001358:	0023      	movs	r3, r4
 800135a:	3308      	adds	r3, #8
 800135c:	2210      	movs	r2, #16
 800135e:	0019      	movs	r1, r3
 8001360:	f004 fb96 	bl	8005a90 <memcpy>
 8001364:	6822      	ldr	r2, [r4, #0]
 8001366:	6863      	ldr	r3, [r4, #4]
 8001368:	0031      	movs	r1, r6
 800136a:	0028      	movs	r0, r5
 800136c:	f7ff f890 	bl	8000490 <deadline_timer_setup_shared_clock>
		  	  	  	  	  	  	  &deadline_buttons.time_current, deadline);

  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 8001370:	2610      	movs	r6, #16
 8001372:	19bb      	adds	r3, r7, r6
 8001374:	2101      	movs	r1, #1
 8001376:	0018      	movs	r0, r3
 8001378:	f7ff fbcb 	bl	8000b12 <led_signal_type_selector>
  //APPLICATION LIGHT SETUP
  //-------------
//TODO: (medium) create a typedef for all this
  //Light 1
//  timer_motion_light_1.msec = 120000;
  timer_motion_light_1.msec = 300000;
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <main+0x464>)
 800137e:	4a66      	ldr	r2, [pc, #408]	; (8001518 <main+0x468>)
 8001380:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8001382:	4c64      	ldr	r4, [pc, #400]	; (8001514 <main+0x464>)
 8001384:	4d65      	ldr	r5, [pc, #404]	; (800151c <main+0x46c>)
 8001386:	466b      	mov	r3, sp
 8001388:	0018      	movs	r0, r3
 800138a:	0023      	movs	r3, r4
 800138c:	3308      	adds	r3, #8
 800138e:	2210      	movs	r2, #16
 8001390:	0019      	movs	r1, r3
 8001392:	f004 fb7d 	bl	8005a90 <memcpy>
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	6863      	ldr	r3, [r4, #4]
 800139a:	0028      	movs	r0, r5
 800139c:	f7ff f844 	bl	8000428 <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 80013a0:	4b5f      	ldr	r3, [pc, #380]	; (8001520 <main+0x470>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]

  //Light 2
  timer_motion_light_2.msec = 300000;
 80013a6:	4b5f      	ldr	r3, [pc, #380]	; (8001524 <main+0x474>)
 80013a8:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <main+0x468>)
 80013aa:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 80013ac:	4c59      	ldr	r4, [pc, #356]	; (8001514 <main+0x464>)
 80013ae:	4d5e      	ldr	r5, [pc, #376]	; (8001528 <main+0x478>)
 80013b0:	466b      	mov	r3, sp
 80013b2:	0018      	movs	r0, r3
 80013b4:	0023      	movs	r3, r4
 80013b6:	3308      	adds	r3, #8
 80013b8:	2210      	movs	r2, #16
 80013ba:	0019      	movs	r1, r3
 80013bc:	f004 fb68 	bl	8005a90 <memcpy>
 80013c0:	6822      	ldr	r2, [r4, #0]
 80013c2:	6863      	ldr	r3, [r4, #4]
 80013c4:	0028      	movs	r0, r5
 80013c6:	f7ff f82f 	bl	8000428 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 80013ca:	4b58      	ldr	r3, [pc, #352]	; (800152c <main+0x47c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]

  //Light UV
  timer_motion_uv.msec = 120000;
 80013d0:	4b57      	ldr	r3, [pc, #348]	; (8001530 <main+0x480>)
 80013d2:	4a58      	ldr	r2, [pc, #352]	; (8001534 <main+0x484>)
 80013d4:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 80013d6:	4c56      	ldr	r4, [pc, #344]	; (8001530 <main+0x480>)
 80013d8:	4d57      	ldr	r5, [pc, #348]	; (8001538 <main+0x488>)
 80013da:	466b      	mov	r3, sp
 80013dc:	0018      	movs	r0, r3
 80013de:	0023      	movs	r3, r4
 80013e0:	3308      	adds	r3, #8
 80013e2:	2210      	movs	r2, #16
 80013e4:	0019      	movs	r1, r3
 80013e6:	f004 fb53 	bl	8005a90 <memcpy>
 80013ea:	6822      	ldr	r2, [r4, #0]
 80013ec:	6863      	ldr	r3, [r4, #4]
 80013ee:	0028      	movs	r0, r5
 80013f0:	f7ff f81a 	bl	8000428 <deadline_timer_setup>

  timer_motion_uv_safe.msec = 300000;
 80013f4:	4b51      	ldr	r3, [pc, #324]	; (800153c <main+0x48c>)
 80013f6:	4a48      	ldr	r2, [pc, #288]	; (8001518 <main+0x468>)
 80013f8:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 80013fa:	4c50      	ldr	r4, [pc, #320]	; (800153c <main+0x48c>)
 80013fc:	4d50      	ldr	r5, [pc, #320]	; (8001540 <main+0x490>)
 80013fe:	466b      	mov	r3, sp
 8001400:	0018      	movs	r0, r3
 8001402:	0023      	movs	r3, r4
 8001404:	3308      	adds	r3, #8
 8001406:	2210      	movs	r2, #16
 8001408:	0019      	movs	r1, r3
 800140a:	f004 fb41 	bl	8005a90 <memcpy>
 800140e:	6822      	ldr	r2, [r4, #0]
 8001410:	6863      	ldr	r3, [r4, #4]
 8001412:	0028      	movs	r0, r5
 8001414:	f7ff f808 	bl	8000428 <deadline_timer_setup>
  uv_state = MOTION_LIGHT_UV_IDLE;
 8001418:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <main+0x494>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]
  abort_uv = MOTION_ABORT_FALSE;
 800141e:	4b4a      	ldr	r3, [pc, #296]	; (8001548 <main+0x498>)
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]

  //motion switch
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 8001424:	4b49      	ldr	r3, [pc, #292]	; (800154c <main+0x49c>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 800142a:	4b49      	ldr	r3, [pc, #292]	; (8001550 <main+0x4a0>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 8001430:	4b48      	ldr	r3, [pc, #288]	; (8001554 <main+0x4a4>)
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]

  //Start interrupts:
  HAL_TIM_Base_Start_IT(&htim1);
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <main+0x4a8>)
 8001438:	0018      	movs	r0, r3
 800143a:	f003 f9cb 	bl	80047d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 800143e:	4b47      	ldr	r3, [pc, #284]	; (800155c <main+0x4ac>)
 8001440:	0018      	movs	r0, r3
 8001442:	f003 f9c7 	bl	80047d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 8001446:	4b46      	ldr	r3, [pc, #280]	; (8001560 <main+0x4b0>)
 8001448:	0018      	movs	r0, r3
 800144a:	f003 f9c3 	bl	80047d4 <HAL_TIM_Base_Start_IT>

  //Direct Link communication timer
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2016      	movs	r0, #22
 8001454:	f002 fb3a 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001458:	2016      	movs	r0, #22
 800145a:	f002 fb4c 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim17);
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <main+0x4b4>)
 8001460:	0018      	movs	r0, r3
 8001462:	f003 f9b7 	bl	80047d4 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2100      	movs	r1, #0
 800146a:	2007      	movs	r0, #7
 800146c:	f002 fb2e 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001470:	2007      	movs	r0, #7
 8001472:	f002 fb40 	bl	8003af6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2103      	movs	r1, #3
 800147a:	2006      	movs	r0, #6
 800147c:	f002 fb26 	bl	8003acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001480:	2006      	movs	r0, #6
 8001482:	f002 fb38 	bl	8003af6 <HAL_NVIC_EnableIRQ>

  light_ask_off_pulse_fsm(&light_1);
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <main+0x440>)
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff fcd3 	bl	8000e34 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_2);
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <main+0x444>)
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff fccf 	bl	8000e34 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_uv);
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <main+0x448>)
 8001498:	0018      	movs	r0, r3
 800149a:	f7ff fccb 	bl	8000e34 <light_ask_off_pulse_fsm>
  led_signal_stop(&signal_led);
 800149e:	19bb      	adds	r3, r7, r6
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff fc06 	bl	8000cb2 <led_signal_stop>
    /* USER CODE BEGIN 3 */
	/**************************************************************************/

#ifdef DEBUG_REYNOLDS

	  switch(switch_selector.value)
 80014a6:	2374      	movs	r3, #116	; 0x74
 80014a8:	18fb      	adds	r3, r7, r3
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d100      	bne.n	80014b2 <main+0x402>
 80014b0:	e114      	b.n	80016dc <main+0x62c>
 80014b2:	d900      	bls.n	80014b6 <main+0x406>
 80014b4:	e114      	b.n	80016e0 <main+0x630>
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d100      	bne.n	80014bc <main+0x40c>
 80014ba:	e0d5      	b.n	8001668 <main+0x5b8>
 80014bc:	d900      	bls.n	80014c0 <main+0x410>
 80014be:	e10f      	b.n	80016e0 <main+0x630>
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d051      	beq.n	8001568 <main+0x4b8>
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d100      	bne.n	80014ca <main+0x41a>
 80014c8:	e09b      	b.n	8001602 <main+0x552>
 80014ca:	e109      	b.n	80016e0 <main+0x630>
 80014cc:	200000f0 	.word	0x200000f0
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50000400 	.word	0x50000400
 80014d8:	20000090 	.word	0x20000090
 80014dc:	20000230 	.word	0x20000230
 80014e0:	200000f8 	.word	0x200000f8
 80014e4:	20000160 	.word	0x20000160
 80014e8:	200001c8 	.word	0x200001c8
 80014ec:	ffff8000 	.word	0xffff8000
 80014f0:	20000248 	.word	0x20000248
 80014f4:	2000026c 	.word	0x2000026c
 80014f8:	20000290 	.word	0x20000290
 80014fc:	20000320 	.word	0x20000320
 8001500:	200002b8 	.word	0x200002b8
 8001504:	20000338 	.word	0x20000338
 8001508:	20000350 	.word	0x20000350
 800150c:	20000368 	.word	0x20000368
 8001510:	20000388 	.word	0x20000388
 8001514:	20000458 	.word	0x20000458
 8001518:	000493e0 	.word	0x000493e0
 800151c:	200003f0 	.word	0x200003f0
 8001520:	20000470 	.word	0x20000470
 8001524:	200004e0 	.word	0x200004e0
 8001528:	20000478 	.word	0x20000478
 800152c:	200004f8 	.word	0x200004f8
 8001530:	20000568 	.word	0x20000568
 8001534:	0001d4c0 	.word	0x0001d4c0
 8001538:	20000500 	.word	0x20000500
 800153c:	200005e8 	.word	0x200005e8
 8001540:	20000580 	.word	0x20000580
 8001544:	20000600 	.word	0x20000600
 8001548:	20000000 	.word	0x20000000
 800154c:	20000380 	.word	0x20000380
 8001550:	20000381 	.word	0x20000381
 8001554:	20000382 	.word	0x20000382
 8001558:	20000608 	.word	0x20000608
 800155c:	200006a0 	.word	0x200006a0
 8001560:	200006ec 	.word	0x200006ec
 8001564:	20000738 	.word	0x20000738
	  {
		  case MOTION_SWITCH_MODE_0:

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8001568:	4c72      	ldr	r4, [pc, #456]	; (8001734 <main+0x684>)
 800156a:	4a73      	ldr	r2, [pc, #460]	; (8001738 <main+0x688>)
 800156c:	4973      	ldr	r1, [pc, #460]	; (800173c <main+0x68c>)
 800156e:	4874      	ldr	r0, [pc, #464]	; (8001740 <main+0x690>)
 8001570:	4b74      	ldr	r3, [pc, #464]	; (8001744 <main+0x694>)
 8001572:	9304      	str	r3, [sp, #16]
 8001574:	4b74      	ldr	r3, [pc, #464]	; (8001748 <main+0x698>)
 8001576:	9303      	str	r3, [sp, #12]
 8001578:	4b74      	ldr	r3, [pc, #464]	; (800174c <main+0x69c>)
 800157a:	9302      	str	r3, [sp, #8]
 800157c:	4b74      	ldr	r3, [pc, #464]	; (8001750 <main+0x6a0>)
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	4b74      	ldr	r3, [pc, #464]	; (8001754 <main+0x6a4>)
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	0023      	movs	r3, r4
 8001586:	f000 fa5c 	bl	8001a42 <events_detection_uv_waits>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_light_2,
								  &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 800158a:	4c73      	ldr	r4, [pc, #460]	; (8001758 <main+0x6a8>)
 800158c:	4a6c      	ldr	r2, [pc, #432]	; (8001740 <main+0x690>)
 800158e:	496a      	ldr	r1, [pc, #424]	; (8001738 <main+0x688>)
 8001590:	4872      	ldr	r0, [pc, #456]	; (800175c <main+0x6ac>)
 8001592:	4b6f      	ldr	r3, [pc, #444]	; (8001750 <main+0x6a0>)
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	4b72      	ldr	r3, [pc, #456]	; (8001760 <main+0x6b0>)
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	0023      	movs	r3, r4
 800159c:	f000 fb6e 	bl	8001c7c <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 80015a0:	4c70      	ldr	r4, [pc, #448]	; (8001764 <main+0x6b4>)
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <main+0x690>)
 80015a4:	4963      	ldr	r1, [pc, #396]	; (8001734 <main+0x684>)
 80015a6:	4870      	ldr	r0, [pc, #448]	; (8001768 <main+0x6b8>)
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <main+0x69c>)
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	4b6f      	ldr	r3, [pc, #444]	; (800176c <main+0x6bc>)
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	0023      	movs	r3, r4
 80015b2:	f000 fb63 	bl	8001c7c <motion_light_control_fsm>
										&deadline_motion_light_2, &light_2_state,
										&motion_sensed_light_2);

			  if((light_1.light_status == LIGHT_ON) ||
 80015b6:	4b69      	ldr	r3, [pc, #420]	; (800175c <main+0x6ac>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d003      	beq.n	80015c6 <main+0x516>
				 (light_2.light_status == LIGHT_ON))
 80015be:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <main+0x6b8>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
			  if((light_1.light_status == LIGHT_ON) ||
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d103      	bne.n	80015ce <main+0x51e>
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 80015c6:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <main+0x6c0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	e002      	b.n	80015d4 <main+0x524>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 80015ce:	4b68      	ldr	r3, [pc, #416]	; (8001770 <main+0x6c0>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 80015d4:	4b66      	ldr	r3, [pc, #408]	; (8001770 <main+0x6c0>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4d66      	ldr	r5, [pc, #408]	; (8001774 <main+0x6c4>)
 80015da:	4c59      	ldr	r4, [pc, #356]	; (8001740 <main+0x690>)
 80015dc:	495d      	ldr	r1, [pc, #372]	; (8001754 <main+0x6a4>)
 80015de:	4866      	ldr	r0, [pc, #408]	; (8001778 <main+0x6c8>)
 80015e0:	2210      	movs	r2, #16
 80015e2:	18ba      	adds	r2, r7, r2
 80015e4:	9205      	str	r2, [sp, #20]
 80015e6:	9304      	str	r3, [sp, #16]
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <main+0x694>)
 80015ea:	9303      	str	r3, [sp, #12]
 80015ec:	4b56      	ldr	r3, [pc, #344]	; (8001748 <main+0x698>)
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	4b62      	ldr	r3, [pc, #392]	; (800177c <main+0x6cc>)
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b62      	ldr	r3, [pc, #392]	; (8001780 <main+0x6d0>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	002b      	movs	r3, r5
 80015fa:	0022      	movs	r2, r4
 80015fc:	f000 fcb8 	bl	8001f70 <motion_uv_ctrl_wait_fsm>
								&deadline_motion_uv, &deadline_motion_uv_safe,
								&uv_state,&motion_sensed_uv, &abort_uv, wait,
								&signal_led);

			  break;
 8001600:	e070      	b.n	80016e4 <main+0x634>

		  case MOTION_SWITCH_MODE_1:

			  events_detection_motion_in_one_lamp(&motion_sensor, &deadline_buttons,
 8001602:	4c4c      	ldr	r4, [pc, #304]	; (8001734 <main+0x684>)
 8001604:	4a4c      	ldr	r2, [pc, #304]	; (8001738 <main+0x688>)
 8001606:	494d      	ldr	r1, [pc, #308]	; (800173c <main+0x68c>)
 8001608:	484d      	ldr	r0, [pc, #308]	; (8001740 <main+0x690>)
 800160a:	4b4e      	ldr	r3, [pc, #312]	; (8001744 <main+0x694>)
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	4b4e      	ldr	r3, [pc, #312]	; (8001748 <main+0x698>)
 8001610:	9302      	str	r3, [sp, #8]
 8001612:	4b4f      	ldr	r3, [pc, #316]	; (8001750 <main+0x6a0>)
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	4b4f      	ldr	r3, [pc, #316]	; (8001754 <main+0x6a4>)
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	0023      	movs	r3, r4
 800161c:	f000 fa9c 	bl	8001b58 <events_detection_motion_in_one_lamp>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8001620:	4c4d      	ldr	r4, [pc, #308]	; (8001758 <main+0x6a8>)
 8001622:	4a47      	ldr	r2, [pc, #284]	; (8001740 <main+0x690>)
 8001624:	4944      	ldr	r1, [pc, #272]	; (8001738 <main+0x688>)
 8001626:	484d      	ldr	r0, [pc, #308]	; (800175c <main+0x6ac>)
 8001628:	4b49      	ldr	r3, [pc, #292]	; (8001750 <main+0x6a0>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <main+0x6b0>)
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	0023      	movs	r3, r4
 8001632:	f000 fb23 	bl	8001c7c <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  direct_light_control_fsm(&light_2, &button_light_2,
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <main+0x6d4>)
 8001638:	4a4a      	ldr	r2, [pc, #296]	; (8001764 <main+0x6b4>)
 800163a:	493e      	ldr	r1, [pc, #248]	; (8001734 <main+0x684>)
 800163c:	484a      	ldr	r0, [pc, #296]	; (8001768 <main+0x6b8>)
 800163e:	f000 fd77 	bl	8002130 <direct_light_control_fsm>
												  &deadline_motion_light_2,
												  &light_2_no_motion_state);

			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
 8001642:	4c4c      	ldr	r4, [pc, #304]	; (8001774 <main+0x6c4>)
 8001644:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <main+0x690>)
 8001646:	4943      	ldr	r1, [pc, #268]	; (8001754 <main+0x6a4>)
 8001648:	484b      	ldr	r0, [pc, #300]	; (8001778 <main+0x6c8>)
 800164a:	2310      	movs	r3, #16
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	9304      	str	r3, [sp, #16]
 8001650:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <main+0x694>)
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	4b3c      	ldr	r3, [pc, #240]	; (8001748 <main+0x698>)
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	4b48      	ldr	r3, [pc, #288]	; (800177c <main+0x6cc>)
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	4b48      	ldr	r3, [pc, #288]	; (8001780 <main+0x6d0>)
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	0023      	movs	r3, r4
 8001662:	f000 fbc1 	bl	8001de8 <motion_light_uv_control_fsm>
								&deadline_motion_uv, &deadline_motion_uv_safe,
								&uv_state, &motion_sensed_uv, &abort_uv,
								&signal_led);
			  break;
 8001666:	e03d      	b.n	80016e4 <main+0x634>
		  case MOTION_SWITCH_MODE_2:
			  events_detection(&motion_sensor, &deadline_buttons,
 8001668:	4c32      	ldr	r4, [pc, #200]	; (8001734 <main+0x684>)
 800166a:	4a33      	ldr	r2, [pc, #204]	; (8001738 <main+0x688>)
 800166c:	4933      	ldr	r1, [pc, #204]	; (800173c <main+0x68c>)
 800166e:	4834      	ldr	r0, [pc, #208]	; (8001740 <main+0x690>)
 8001670:	4b34      	ldr	r3, [pc, #208]	; (8001744 <main+0x694>)
 8001672:	9304      	str	r3, [sp, #16]
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <main+0x698>)
 8001676:	9303      	str	r3, [sp, #12]
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <main+0x69c>)
 800167a:	9302      	str	r3, [sp, #8]
 800167c:	4b34      	ldr	r3, [pc, #208]	; (8001750 <main+0x6a0>)
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	4b34      	ldr	r3, [pc, #208]	; (8001754 <main+0x6a4>)
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	0023      	movs	r3, r4
 8001686:	f000 f942 	bl	800190e <events_detection>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_light_2,
								  &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 800168a:	4c33      	ldr	r4, [pc, #204]	; (8001758 <main+0x6a8>)
 800168c:	4a2c      	ldr	r2, [pc, #176]	; (8001740 <main+0x690>)
 800168e:	492a      	ldr	r1, [pc, #168]	; (8001738 <main+0x688>)
 8001690:	4832      	ldr	r0, [pc, #200]	; (800175c <main+0x6ac>)
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <main+0x6a0>)
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	4b32      	ldr	r3, [pc, #200]	; (8001760 <main+0x6b0>)
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	0023      	movs	r3, r4
 800169c:	f000 faee 	bl	8001c7c <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 80016a0:	4c30      	ldr	r4, [pc, #192]	; (8001764 <main+0x6b4>)
 80016a2:	4a27      	ldr	r2, [pc, #156]	; (8001740 <main+0x690>)
 80016a4:	4923      	ldr	r1, [pc, #140]	; (8001734 <main+0x684>)
 80016a6:	4830      	ldr	r0, [pc, #192]	; (8001768 <main+0x6b8>)
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <main+0x69c>)
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	4b2f      	ldr	r3, [pc, #188]	; (800176c <main+0x6bc>)
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	0023      	movs	r3, r4
 80016b2:	f000 fae3 	bl	8001c7c <motion_light_control_fsm>
										&deadline_motion_light_2, &light_2_state,
										&motion_sensed_light_2);

			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
 80016b6:	4c2f      	ldr	r4, [pc, #188]	; (8001774 <main+0x6c4>)
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <main+0x690>)
 80016ba:	4926      	ldr	r1, [pc, #152]	; (8001754 <main+0x6a4>)
 80016bc:	482e      	ldr	r0, [pc, #184]	; (8001778 <main+0x6c8>)
 80016be:	2310      	movs	r3, #16
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	9304      	str	r3, [sp, #16]
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <main+0x694>)
 80016c6:	9303      	str	r3, [sp, #12]
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <main+0x698>)
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <main+0x6cc>)
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <main+0x6d0>)
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	0023      	movs	r3, r4
 80016d6:	f000 fb87 	bl	8001de8 <motion_light_uv_control_fsm>
								&deadline_motion_uv, &deadline_motion_uv_safe,
								&uv_state,&motion_sensed_uv, &abort_uv, &signal_led);
			  break;
 80016da:	e003      	b.n	80016e4 <main+0x634>
		  case MOTION_SWITCH_MODE_3:
			  //do nothing
			  __NOP();
 80016dc:	46c0      	nop			; (mov r8, r8)
			  break;
 80016de:	e001      	b.n	80016e4 <main+0x634>
		  default:
			  //do nothing
			  __NOP();
 80016e0:	46c0      	nop			; (mov r8, r8)
			  break;
 80016e2:	46c0      	nop			; (mov r8, r8)
	  }

	  //Actuator routines:
	  discreate_actuator(&light_1, &deadline_timer_light_1);
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <main+0x6d8>)
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <main+0x6ac>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 f897 	bl	800181e <discreate_actuator>
	  discreate_actuator(&light_2, &deadline_timer_light_2);
 80016f0:	4a26      	ldr	r2, [pc, #152]	; (800178c <main+0x6dc>)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <main+0x6b8>)
 80016f4:	0011      	movs	r1, r2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 f891 	bl	800181e <discreate_actuator>
	  discreate_actuator(&light_uv, &deadline_timer_uv);
 80016fc:	4a24      	ldr	r2, [pc, #144]	; (8001790 <main+0x6e0>)
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <main+0x6c8>)
 8001700:	0011      	movs	r1, r2
 8001702:	0018      	movs	r0, r3
 8001704:	f000 f88b 	bl	800181e <discreate_actuator>

	  //LED indicator
	  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 8001708:	1dfa      	adds	r2, r7, #7
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <main+0x6e4>)
 800170c:	0011      	movs	r1, r2
 800170e:	0018      	movs	r0, r3
 8001710:	f7fe ff0e 	bl	8000530 <deadline_timer_check>

	  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d000      	beq.n	800171e <main+0x66e>
 800171c:	e6c3      	b.n	80014a6 <main+0x3f6>
	  {
		  led_signal_fsm(&signal_led);
 800171e:	2310      	movs	r3, #16
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	0018      	movs	r0, r3
 8001724:	f7ff f9c3 	bl	8000aae <led_signal_fsm>
		  deadline_timer_set_initial_time(&deadline_led_indicator);
 8001728:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <main+0x6e4>)
 800172a:	0018      	movs	r0, r3
 800172c:	f7fe ff38 	bl	80005a0 <deadline_timer_set_initial_time>
	  switch(switch_selector.value)
 8001730:	e6b9      	b.n	80014a6 <main+0x3f6>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000350 	.word	0x20000350
 8001738:	20000338 	.word	0x20000338
 800173c:	200002b8 	.word	0x200002b8
 8001740:	20000090 	.word	0x20000090
 8001744:	20000000 	.word	0x20000000
 8001748:	20000382 	.word	0x20000382
 800174c:	20000381 	.word	0x20000381
 8001750:	20000380 	.word	0x20000380
 8001754:	20000368 	.word	0x20000368
 8001758:	200003f0 	.word	0x200003f0
 800175c:	20000248 	.word	0x20000248
 8001760:	20000470 	.word	0x20000470
 8001764:	20000478 	.word	0x20000478
 8001768:	2000026c 	.word	0x2000026c
 800176c:	200004f8 	.word	0x200004f8
 8001770:	20000001 	.word	0x20000001
 8001774:	20000500 	.word	0x20000500
 8001778:	20000290 	.word	0x20000290
 800177c:	20000600 	.word	0x20000600
 8001780:	20000580 	.word	0x20000580
 8001784:	200004f9 	.word	0x200004f9
 8001788:	200000f8 	.word	0x200000f8
 800178c:	20000160 	.word	0x20000160
 8001790:	200001c8 	.word	0x200001c8
 8001794:	20000388 	.word	0x20000388

08001798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08d      	sub	sp, #52	; 0x34
 800179c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179e:	2414      	movs	r4, #20
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	0018      	movs	r0, r3
 80017a4:	231c      	movs	r3, #28
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	f004 f92b 	bl	8005a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ae:	003b      	movs	r3, r7
 80017b0:	0018      	movs	r0, r3
 80017b2:	2314      	movs	r3, #20
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f004 f924 	bl	8005a04 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c2:	193b      	adds	r3, r7, r4
 80017c4:	2280      	movs	r2, #128	; 0x80
 80017c6:	0052      	lsls	r2, r2, #1
 80017c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80017ca:	193b      	adds	r3, r7, r4
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	193b      	adds	r3, r7, r4
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d6:	193b      	adds	r3, r7, r4
 80017d8:	0018      	movs	r0, r3
 80017da:	f002 fc73 	bl	80040c4 <HAL_RCC_OscConfig>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80017e2:	f000 fe1b 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e6:	003b      	movs	r3, r7
 80017e8:	2207      	movs	r2, #7
 80017ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017ec:	003b      	movs	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017f2:	003b      	movs	r3, r7
 80017f4:	2200      	movs	r2, #0
 80017f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80017f8:	003b      	movs	r3, r7
 80017fa:	2200      	movs	r2, #0
 80017fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80017fe:	003b      	movs	r3, r7
 8001800:	2200      	movs	r2, #0
 8001802:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001804:	003b      	movs	r3, r7
 8001806:	2101      	movs	r1, #1
 8001808:	0018      	movs	r0, r3
 800180a:	f002 fe3f 	bl	800448c <HAL_RCC_ClockConfig>
 800180e:	1e03      	subs	r3, r0, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001812:	f000 fe03 	bl	800241c <Error_Handler>
  }
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b00d      	add	sp, #52	; 0x34
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <discreate_actuator>:

//TODO: (medium) all the digital outputs behave light a light. Last requirement
//changes added other kind of actuators. Change the HAL layer and middleware
//layer to set a proper name
void discreate_actuator(light_t *actuator, deadline_timer_t *deadline_timer)
{
 800181e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001820:	b08b      	sub	sp, #44	; 0x2c
 8001822:	af06      	add	r7, sp, #24
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]

	light_fsm_init_t init = LIGHT_INIT_FALSE;
 8001828:	260f      	movs	r6, #15
 800182a:	19bb      	adds	r3, r7, r6
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == LIGHT_RUN_TRUE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2221      	movs	r2, #33	; 0x21
 8001834:	5c9b      	ldrb	r3, [r3, r2]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d12f      	bne.n	800189a <discreate_actuator+0x7c>
	{
		//		if(actuator_state == MOTION_LIGHT_TURN_ON_LIGHT)
		light_check_init_fsm(*actuator, &init);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	19ba      	adds	r2, r7, r6
 800183e:	9205      	str	r2, [sp, #20]
 8001840:	466a      	mov	r2, sp
 8001842:	0011      	movs	r1, r2
 8001844:	001a      	movs	r2, r3
 8001846:	3210      	adds	r2, #16
 8001848:	ca31      	ldmia	r2!, {r0, r4, r5}
 800184a:	c131      	stmia	r1!, {r0, r4, r5}
 800184c:	ca11      	ldmia	r2!, {r0, r4}
 800184e:	c111      	stmia	r1!, {r0, r4}
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	6859      	ldr	r1, [r3, #4]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f7ff fb2b 	bl	8000eb2 <light_check_init_fsm>

		if(init == LIGHT_INIT_TRUE)
 800185c:	19bb      	adds	r3, r7, r6
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <discreate_actuator+0x56>
		{
			deadline_timer_set_initial_time(deadline_timer);
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	0018      	movs	r0, r3
 8001868:	f7fe fe9a 	bl	80005a0 <deadline_timer_set_initial_time>
			light_acknowledge_init_fsm(actuator);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	0018      	movs	r0, r3
 8001870:	f7ff fb36 	bl	8000ee0 <light_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 8001874:	240e      	movs	r4, #14
 8001876:	193a      	adds	r2, r7, r4
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	0011      	movs	r1, r2
 800187c:	0018      	movs	r0, r3
 800187e:	f7fe fe57 	bl	8000530 <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 8001882:	193b      	adds	r3, r7, r4
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <discreate_actuator+0x7c>
		{
			light_on_pulse_fsm(actuator);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0018      	movs	r0, r3
 800188e:	f7ff fa91 	bl	8000db4 <light_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	0018      	movs	r0, r3
 8001896:	f7fe fe83 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == LIGHT_RUN_TRUE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2222      	movs	r2, #34	; 0x22
 800189e:	5c9b      	ldrb	r3, [r3, r2]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d130      	bne.n	8001906 <discreate_actuator+0xe8>
	{
//	  if(actuator_state == MOTION_LIGHT_TURN_OFF_LIGHT)

	  light_check_init_fsm(*actuator, &init);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	260f      	movs	r6, #15
 80018a8:	19ba      	adds	r2, r7, r6
 80018aa:	9205      	str	r2, [sp, #20]
 80018ac:	466a      	mov	r2, sp
 80018ae:	0011      	movs	r1, r2
 80018b0:	001a      	movs	r2, r3
 80018b2:	3210      	adds	r2, #16
 80018b4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80018b6:	c131      	stmia	r1!, {r0, r4, r5}
 80018b8:	ca11      	ldmia	r2!, {r0, r4}
 80018ba:	c111      	stmia	r1!, {r0, r4}
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f7ff faf5 	bl	8000eb2 <light_check_init_fsm>

	  if(init == LIGHT_INIT_TRUE)
 80018c8:	19bb      	adds	r3, r7, r6
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <discreate_actuator+0xc2>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fe64 	bl	80005a0 <deadline_timer_set_initial_time>
		  light_acknowledge_init_fsm(actuator);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	0018      	movs	r0, r3
 80018dc:	f7ff fb00 	bl	8000ee0 <light_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 80018e0:	240e      	movs	r4, #14
 80018e2:	193a      	adds	r2, r7, r4
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	0011      	movs	r1, r2
 80018e8:	0018      	movs	r0, r3
 80018ea:	f7fe fe21 	bl	8000530 <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d107      	bne.n	8001906 <discreate_actuator+0xe8>
	  {
		  light_off_pulse_fsm(actuator);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fa7b 	bl	8000df4 <light_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	0018      	movs	r0, r3
 8001902:	f7fe fe4d 	bl	80005a0 <deadline_timer_set_initial_time>
	  }
	}
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b005      	add	sp, #20
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800190e <events_detection>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 800190e:	b5b0      	push	{r4, r5, r7, lr}
 8001910:	b08a      	sub	sp, #40	; 0x28
 8001912:	af04      	add	r7, sp, #16
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 800191c:	2417      	movs	r4, #23
 800191e:	193a      	adds	r2, r7, r4
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	0011      	movs	r1, r2
 8001924:	0018      	movs	r0, r3
 8001926:	f001 f890 	bl	8002a4a <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 800192a:	193b      	adds	r3, r7, r4
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d10c      	bne.n	800194c <events_detection+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 8001938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	2202      	movs	r2, #2
 8001942:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2258      	movs	r2, #88	; 0x58
 8001948:	2100      	movs	r1, #0
 800194a:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	0011      	movs	r1, r2
 8001952:	0018      	movs	r0, r3
 8001954:	f000 f972 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0011      	movs	r1, r2
 800195e:	0018      	movs	r0, r3
 8001960:	f000 f96c 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	0011      	movs	r1, r2
 800196a:	0018      	movs	r0, r3
 800196c:	f000 f966 	bl	8001c3c <sense_button_event>


	//Activating a switch while uv fsm is running turn off UV lamp
	button_check_isr_request(*button_lamp_1, &button_isr_stat, &check_edge);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2215      	movs	r2, #21
 8001974:	18ba      	adds	r2, r7, r2
 8001976:	9203      	str	r2, [sp, #12]
 8001978:	2516      	movs	r5, #22
 800197a:	197a      	adds	r2, r7, r5
 800197c:	9202      	str	r2, [sp, #8]
 800197e:	466a      	mov	r2, sp
 8001980:	0011      	movs	r1, r2
 8001982:	001a      	movs	r2, r3
 8001984:	3210      	adds	r2, #16
 8001986:	ca11      	ldmia	r2!, {r0, r4}
 8001988:	c111      	stmia	r1!, {r0, r4}
 800198a:	6818      	ldr	r0, [r3, #0]
 800198c:	6859      	ldr	r1, [r3, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f7fe fd2d 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001996:	197b      	adds	r3, r7, r5
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d102      	bne.n	80019a4 <events_detection+0x96>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 800199e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
	}

	button_check_isr_request(*button_lamp_2, &button_isr_stat, &check_edge);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	2215      	movs	r2, #21
 80019a8:	18ba      	adds	r2, r7, r2
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	2516      	movs	r5, #22
 80019ae:	197a      	adds	r2, r7, r5
 80019b0:	9202      	str	r2, [sp, #8]
 80019b2:	466a      	mov	r2, sp
 80019b4:	0011      	movs	r1, r2
 80019b6:	001a      	movs	r2, r3
 80019b8:	3210      	adds	r2, #16
 80019ba:	ca11      	ldmia	r2!, {r0, r4}
 80019bc:	c111      	stmia	r1!, {r0, r4}
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	6859      	ldr	r1, [r3, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f7fe fd13 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80019ca:	197b      	adds	r3, r7, r5
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d102      	bne.n	80019d8 <events_detection+0xca>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
	}

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	2215      	movs	r2, #21
 80019dc:	18ba      	adds	r2, r7, r2
 80019de:	9203      	str	r2, [sp, #12]
 80019e0:	2516      	movs	r5, #22
 80019e2:	197a      	adds	r2, r7, r5
 80019e4:	9202      	str	r2, [sp, #8]
 80019e6:	466a      	mov	r2, sp
 80019e8:	0011      	movs	r1, r2
 80019ea:	001a      	movs	r2, r3
 80019ec:	3210      	adds	r2, #16
 80019ee:	ca11      	ldmia	r2!, {r0, r4}
 80019f0:	c111      	stmia	r1!, {r0, r4}
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	f7fe fcf9 	bl	80003f0 <button_check_isr_request>

	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d119      	bne.n	8001a3a <events_detection+0x12c>
	{
		button_status_t status_button_light_1;
		button_status_t status_button_light_2;

		button_get_status(button_lamp_1, &status_button_light_1);
 8001a06:	2414      	movs	r4, #20
 8001a08:	193a      	adds	r2, r7, r4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f7fe fcba 	bl	8000388 <button_get_status>
		button_get_status(button_lamp_2, &status_button_light_2);
 8001a14:	2513      	movs	r5, #19
 8001a16:	197a      	adds	r2, r7, r5
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	0011      	movs	r1, r2
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7fe fcb3 	bl	8000388 <button_get_status>

		if( (status_button_light_1 == BUTTON_ON) ||
 8001a22:	193b      	adds	r3, r7, r4
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d003      	beq.n	8001a32 <events_detection+0x124>
			(status_button_light_2 == BUTTON_ON))
 8001a2a:	197b      	adds	r3, r7, r5
 8001a2c:	781b      	ldrb	r3, [r3, #0]
		if( (status_button_light_1 == BUTTON_ON) ||
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d103      	bne.n	8001a3a <events_detection+0x12c>
		{
			button_set_isr_attended(button_lamp_uv);
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7fe fccc 	bl	80003d2 <button_set_isr_attended>
		}
	}

}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}

08001a42 <events_detection_uv_waits>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 8001a42:	b5b0      	push	{r4, r5, r7, lr}
 8001a44:	b08a      	sub	sp, #40	; 0x28
 8001a46:	af04      	add	r7, sp, #16
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8001a50:	2417      	movs	r4, #23
 8001a52:	193a      	adds	r2, r7, r4
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0011      	movs	r1, r2
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f000 fff6 	bl	8002a4a <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d10c      	bne.n	8001a80 <events_detection_uv_waits+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	2202      	movs	r2, #2
 8001a6a:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 8001a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a74:	2202      	movs	r2, #2
 8001a76:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2258      	movs	r2, #88	; 0x58
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	0011      	movs	r1, r2
 8001a86:	0018      	movs	r0, r3
 8001a88:	f000 f8d8 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	0011      	movs	r1, r2
 8001a92:	0018      	movs	r0, r3
 8001a94:	f000 f8d2 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001a98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 f8cc 	bl	8001c3c <sense_button_event>


	//Activating a switch while uv fsm is running turn off UV lamp
	button_check_isr_request(*button_lamp_1, &button_isr_stat, &check_edge);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2215      	movs	r2, #21
 8001aa8:	18ba      	adds	r2, r7, r2
 8001aaa:	9203      	str	r2, [sp, #12]
 8001aac:	2516      	movs	r5, #22
 8001aae:	197a      	adds	r2, r7, r5
 8001ab0:	9202      	str	r2, [sp, #8]
 8001ab2:	466a      	mov	r2, sp
 8001ab4:	0011      	movs	r1, r2
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	3210      	adds	r2, #16
 8001aba:	ca11      	ldmia	r2!, {r0, r4}
 8001abc:	c111      	stmia	r1!, {r0, r4}
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	6859      	ldr	r1, [r3, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f7fe fc93 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001aca:	197b      	adds	r3, r7, r5
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d102      	bne.n	8001ad8 <events_detection_uv_waits+0x96>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
	}

	button_check_isr_request(*button_lamp_2, &button_isr_stat, &check_edge);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2215      	movs	r2, #21
 8001adc:	18ba      	adds	r2, r7, r2
 8001ade:	9203      	str	r2, [sp, #12]
 8001ae0:	2516      	movs	r5, #22
 8001ae2:	197a      	adds	r2, r7, r5
 8001ae4:	9202      	str	r2, [sp, #8]
 8001ae6:	466a      	mov	r2, sp
 8001ae8:	0011      	movs	r1, r2
 8001aea:	001a      	movs	r2, r3
 8001aec:	3210      	adds	r2, #16
 8001aee:	ca11      	ldmia	r2!, {r0, r4}
 8001af0:	c111      	stmia	r1!, {r0, r4}
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	6859      	ldr	r1, [r3, #4]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	f7fe fc79 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d102      	bne.n	8001b0c <events_detection_uv_waits+0xca>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 8001b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b08:	2200      	movs	r2, #0
 8001b0a:	701a      	strb	r2, [r3, #0]
	}

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 8001b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0e:	2215      	movs	r2, #21
 8001b10:	18ba      	adds	r2, r7, r2
 8001b12:	9203      	str	r2, [sp, #12]
 8001b14:	2516      	movs	r5, #22
 8001b16:	197a      	adds	r2, r7, r5
 8001b18:	9202      	str	r2, [sp, #8]
 8001b1a:	466a      	mov	r2, sp
 8001b1c:	0011      	movs	r1, r2
 8001b1e:	001a      	movs	r2, r3
 8001b20:	3210      	adds	r2, #16
 8001b22:	ca11      	ldmia	r2!, {r0, r4}
 8001b24:	c111      	stmia	r1!, {r0, r4}
 8001b26:	6818      	ldr	r0, [r3, #0]
 8001b28:	6859      	ldr	r1, [r3, #4]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f7fe fc5f 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001b32:	197b      	adds	r3, r7, r5
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d10a      	bne.n	8001b50 <events_detection_uv_waits+0x10e>
	{
		if(button_lamp_uv->push_status != BUTTON_PUSH_ON)
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	789b      	ldrb	r3, [r3, #2]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d003      	beq.n	8001b4a <events_detection_uv_waits+0x108>
		{
			button_lamp_uv->push_status = BUTTON_PUSH_ON;
 8001b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b44:	2201      	movs	r2, #1
 8001b46:	709a      	strb	r2, [r3, #2]
		else
		{
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
		}
	}
}
 8001b48:	e002      	b.n	8001b50 <events_detection_uv_waits+0x10e>
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 8001b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	709a      	strb	r2, [r3, #2]
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b006      	add	sp, #24
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}

08001b58 <events_detection_motion_in_one_lamp>:
							button_t *button_lamp_2,
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8001b66:	2417      	movs	r4, #23
 8001b68:	193a      	adds	r2, r7, r4
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 ff6b 	bl	8002a4a <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d109      	bne.n	8001b90 <events_detection_motion_in_one_lamp+0x38>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 8001b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b7e:	2202      	movs	r2, #2
 8001b80:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 8001b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b84:	2202      	movs	r2, #2
 8001b86:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2258      	movs	r2, #88	; 0x58
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	0011      	movs	r1, r2
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f850 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0011      	movs	r1, r2
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	f000 f84a 	bl	8001c3c <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001ba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0011      	movs	r1, r2
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f000 f844 	bl	8001c3c <sense_button_event>


	//Activating a switch while uv fsm is running acts as motion detection

	button_check_isr_request(*button_lamp_1, &button_isr_stat, &check_edge);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2215      	movs	r2, #21
 8001bb8:	18ba      	adds	r2, r7, r2
 8001bba:	9203      	str	r2, [sp, #12]
 8001bbc:	2516      	movs	r5, #22
 8001bbe:	197a      	adds	r2, r7, r5
 8001bc0:	9202      	str	r2, [sp, #8]
 8001bc2:	466a      	mov	r2, sp
 8001bc4:	0011      	movs	r1, r2
 8001bc6:	001a      	movs	r2, r3
 8001bc8:	3210      	adds	r2, #16
 8001bca:	ca11      	ldmia	r2!, {r0, r4}
 8001bcc:	c111      	stmia	r1!, {r0, r4}
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	6859      	ldr	r1, [r3, #4]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	f7fe fc0b 	bl	80003f0 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001bda:	197b      	adds	r3, r7, r5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d102      	bne.n	8001be8 <events_detection_motion_in_one_lamp+0x90>
	{
		*abort_signal_uv = MOTION_ABORT_TRUE;
 8001be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
	}

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 8001be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bea:	2215      	movs	r2, #21
 8001bec:	18ba      	adds	r2, r7, r2
 8001bee:	9203      	str	r2, [sp, #12]
 8001bf0:	2516      	movs	r5, #22
 8001bf2:	197a      	adds	r2, r7, r5
 8001bf4:	9202      	str	r2, [sp, #8]
 8001bf6:	466a      	mov	r2, sp
 8001bf8:	0011      	movs	r1, r2
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	3210      	adds	r2, #16
 8001bfe:	ca11      	ldmia	r2!, {r0, r4}
 8001c00:	c111      	stmia	r1!, {r0, r4}
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f7fe fbf1 	bl	80003f0 <button_check_isr_request>

	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001c0e:	197b      	adds	r3, r7, r5
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d10e      	bne.n	8001c34 <events_detection_motion_in_one_lamp+0xdc>
	{
		button_status_t status_button_light_1;

		button_get_status(button_lamp_1, &status_button_light_1);
 8001c16:	2414      	movs	r4, #20
 8001c18:	193a      	adds	r2, r7, r4
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f7fe fbb2 	bl	8000388 <button_get_status>

		if(status_button_light_1 == BUTTON_ON)
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d103      	bne.n	8001c34 <events_detection_motion_in_one_lamp+0xdc>
		{
			button_set_isr_attended(button_lamp_uv);
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f7fe fbcf 	bl	80003d2 <button_set_isr_attended>
		}
	}

}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b006      	add	sp, #24
 8001c3a:	bdb0      	pop	{r4, r5, r7, pc}

08001c3c <sense_button_event>:

void sense_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]

	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	7b5b      	ldrb	r3, [r3, #13]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <sense_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 8001c4e:	240f      	movs	r4, #15
 8001c50:	193a      	adds	r2, r7, r4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0011      	movs	r1, r2
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7fe fc6a 	bl	8000530 <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d107      	bne.n	8001c74 <sense_button_event+0x38>
		{
			button_debounce_fsm(button);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7fe fb00 	bl	800026c <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7fe fc96 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}


}
 8001c74:	46c0      	nop			; (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b005      	add	sp, #20
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <motion_light_control_fsm>:
								button_t *button,
								pyd1598_sensor_t *motion_sensor,
								deadline_timer_t *deadline_timer,
								motion_light_state_t *fsm_state,
								motion_sensed_t *motion_sensed)
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af04      	add	r7, sp, #16
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	785a      	ldrb	r2, [r3, #1]
 8001c8e:	2116      	movs	r1, #22
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	187a      	adds	r2, r7, r1
 8001c98:	9203      	str	r2, [sp, #12]
 8001c9a:	2517      	movs	r5, #23
 8001c9c:	197a      	adds	r2, r7, r5
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	466a      	mov	r2, sp
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	3210      	adds	r2, #16
 8001ca8:	ca11      	ldmia	r2!, {r0, r4}
 8001caa:	c111      	stmia	r1!, {r0, r4}
 8001cac:	6818      	ldr	r0, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f7fe fb9c 	bl	80003f0 <button_check_isr_request>

	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001cb8:	197b      	adds	r3, r7, r5
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d003      	beq.n	8001cc8 <motion_light_control_fsm+0x4c>
		(*motion_sensed == MOTION_ISR_UNATTENDED))
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	781b      	ldrb	r3, [r3, #0]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d121      	bne.n	8001d0c <motion_light_control_fsm+0x90>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001cc8:	2217      	movs	r2, #23
 8001cca:	18bb      	adds	r3, r7, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d10e      	bne.n	8001cf0 <motion_light_control_fsm+0x74>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001cd2:	18bb      	adds	r3, r7, r2
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 8001cd8:	2316      	movs	r3, #22
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d103      	bne.n	8001cea <motion_light_control_fsm+0x6e>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e002      	b.n	8001cf0 <motion_light_control_fsm+0x74>
			}
			else
			{
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
			}
		}

		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d109      	bne.n	8001d0c <motion_light_control_fsm+0x90>
			(*fsm_state == MOTION_LIGHT_IDLE))
 8001cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfa:	781b      	ldrb	r3, [r3, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <motion_light_control_fsm+0x90>
		{
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
			*motion_sensed = MOTION_ISR_ATTENDED;
 8001d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
		}

	}

	switch(*fsm_state)
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d858      	bhi.n	8001dc6 <motion_light_control_fsm+0x14a>
 8001d14:	009a      	lsls	r2, r3, #2
 8001d16:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <motion_light_control_fsm+0x168>)
 8001d18:	18d3      	adds	r3, r2, r3
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8001d1e:	46c0      	nop			; (mov r8, r8)

			break;
 8001d20:	e056      	b.n	8001dd0 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 8001d22:	2115      	movs	r1, #21
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
			button_get_status(button, &button_status);
 8001d2a:	000c      	movs	r4, r1
 8001d2c:	187a      	adds	r2, r7, r1
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	0011      	movs	r1, r2
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7fe fb28 	bl	8000388 <button_get_status>

			if(button_status == BUTTON_ON)
 8001d38:	193b      	adds	r3, r7, r4
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d106      	bne.n	8001d4e <motion_light_control_fsm+0xd2>
			{
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
				 //if an edge where detected an error occurred in the button
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
				*motion_sensed = MOTION_ISR_ATTENDED;
			}

			break;
 8001d4c:	e040      	b.n	8001dd0 <motion_light_control_fsm+0x154>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d50:	2205      	movs	r2, #5
 8001d52:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
			break;
 8001d5a:	e039      	b.n	8001dd0 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f7ff f889 	bl	8000e76 <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 8001d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d66:	2203      	movs	r2, #3
 8001d68:	701a      	strb	r2, [r3, #0]

			break;
 8001d6a:	e031      	b.n	8001dd0 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(deadline_timer);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7fe fc16 	bl	80005a0 <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	2204      	movs	r2, #4
 8001d78:	701a      	strb	r2, [r3, #0]

			break;
 8001d7a:	e029      	b.n	8001dd0 <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(deadline_timer, &deadline_expired);
 8001d7c:	2414      	movs	r4, #20
 8001d7e:	193a      	adds	r2, r7, r4
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7fe fbd3 	bl	8000530 <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d102      	bne.n	8001d98 <motion_light_control_fsm+0x11c>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	2205      	movs	r2, #5
 8001d96:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d116      	bne.n	8001dce <motion_light_control_fsm+0x152>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
//					*fsm_state = MOTION_LIGHT_INIT_TIMER;
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001dac:	e00f      	b.n	8001dce <motion_light_control_fsm+0x152>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(deadline_timer);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7fe fbaf 	bl	8000514 <deadline_timer_force_expiration>
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff f83b 	bl	8000e34 <light_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 8001dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			break;
 8001dc4:	e004      	b.n	8001dd0 <motion_light_control_fsm+0x154>
		default:
			*fsm_state = MOTION_LIGHT_IDLE;
 8001dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
			break;
 8001dcc:	e000      	b.n	8001dd0 <motion_light_control_fsm+0x154>
			break;
 8001dce:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8001dd0:	2317      	movs	r3, #23
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	70da      	strb	r2, [r3, #3]

}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b006      	add	sp, #24
 8001de0:	bdb0      	pop	{r4, r5, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	08005abc 	.word	0x08005abc

08001de8 <motion_light_uv_control_fsm>:
									deadline_timer_t *deadline_safe_timer,
									motion_light_uv_state_t *fsm_state,
									motion_sensed_t *motion_sensed,
									motion_light_uv_abort_t *uv_abort,
									led_signal_t *signal)
{
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b09c      	sub	sp, #112	; 0x70
 8001dec:	af16      	add	r7, sp, #88	; 0x58
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	785a      	ldrb	r2, [r3, #1]
 8001dfa:	2116      	movs	r1, #22
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	187a      	adds	r2, r7, r1
 8001e04:	9203      	str	r2, [sp, #12]
 8001e06:	2517      	movs	r5, #23
 8001e08:	197a      	adds	r2, r7, r5
 8001e0a:	9202      	str	r2, [sp, #8]
 8001e0c:	466a      	mov	r2, sp
 8001e0e:	0011      	movs	r1, r2
 8001e10:	001a      	movs	r2, r3
 8001e12:	3210      	adds	r2, #16
 8001e14:	ca11      	ldmia	r2!, {r0, r4}
 8001e16:	c111      	stmia	r1!, {r0, r4}
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f7fe fae6 	bl	80003f0 <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8001e24:	687c      	ldr	r4, [r7, #4]
 8001e26:	2315      	movs	r3, #21
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	9314      	str	r3, [sp, #80]	; 0x50
 8001e2c:	466b      	mov	r3, sp
 8001e2e:	0018      	movs	r0, r3
 8001e30:	0023      	movs	r3, r4
 8001e32:	3310      	adds	r3, #16
 8001e34:	2250      	movs	r2, #80	; 0x50
 8001e36:	0019      	movs	r1, r3
 8001e38:	f003 fe2a 	bl	8005a90 <memcpy>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	6861      	ldr	r1, [r4, #4]
 8001e40:	68a2      	ldr	r2, [r4, #8]
 8001e42:	68e3      	ldr	r3, [r4, #12]
 8001e44:	f000 fdea 	bl	8002a1c <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001e48:	197b      	adds	r3, r7, r5
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d105      	bne.n	8001e5c <motion_light_uv_control_fsm+0x74>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001e50:	197b      	adds	r3, r7, r5
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
		*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <motion_light_uv_control_fsm+0x88>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	2207      	movs	r2, #7
 8001e68:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 8001e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b07      	cmp	r3, #7
 8001e76:	d869      	bhi.n	8001f4c <motion_light_uv_control_fsm+0x164>
 8001e78:	009a      	lsls	r2, r3, #2
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <motion_light_uv_control_fsm+0x184>)
 8001e7c:	18d3      	adds	r3, r2, r3
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 8001e82:	46c0      	nop			; (mov r8, r8)

			break;
 8001e84:	e069      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8001e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f7fe fb89 	bl	80005a0 <deadline_timer_set_initial_time>
			//Start LED indicator
			led_signal_start(signal);
 8001e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e90:	0018      	movs	r0, r3
 8001e92:	f7fe ff02 	bl	8000c9a <led_signal_start>

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	2202      	movs	r2, #2
 8001e9a:	701a      	strb	r2, [r3, #0]
			break;
 8001e9c:	e05d      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_expired_t deadline_safe_expired;
			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8001e9e:	2414      	movs	r4, #20
 8001ea0:	193a      	adds	r2, r7, r4
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe fb42 	bl	8000530 <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d103      	bne.n	8001ebc <motion_light_uv_control_fsm+0xd4>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	701a      	strb	r2, [r3, #0]
					*motion_sensed = MOTION_ISR_ATTENDED;
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
				}
			}

			break;
 8001eba:	e04b      	b.n	8001f54 <motion_light_uv_control_fsm+0x16c>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d147      	bne.n	8001f54 <motion_light_uv_control_fsm+0x16c>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
			break;
 8001ed0:	e040      	b.n	8001f54 <motion_light_uv_control_fsm+0x16c>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
			light_ask_on_pulse_fsm(light_uv);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe ffce 	bl	8000e76 <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8001eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001edc:	2204      	movs	r2, #4
 8001ede:	701a      	strb	r2, [r3, #0]

			break;
 8001ee0:	e03b      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fb5b 	bl	80005a0 <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8001eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eec:	2205      	movs	r2, #5
 8001eee:	701a      	strb	r2, [r3, #0]
			break;
 8001ef0:	e033      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 8001ef2:	2413      	movs	r4, #19
 8001ef4:	193a      	adds	r2, r7, r4
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f7fe fb18 	bl	8000530 <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <motion_light_uv_control_fsm+0x126>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0a:	2206      	movs	r2, #6
 8001f0c:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d120      	bne.n	8001f58 <motion_light_uv_control_fsm+0x170>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f1e:	2207      	movs	r2, #7
 8001f20:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001f22:	e019      	b.n	8001f58 <motion_light_uv_control_fsm+0x170>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f26:	2206      	movs	r2, #6
 8001f28:	701a      	strb	r2, [r3, #0]
			break;
 8001f2a:	e016      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7fe faf0 	bl	8000514 <deadline_timer_force_expiration>


			//Stop LED indicator
			led_signal_stop(signal);
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	0018      	movs	r0, r3
 8001f38:	f7fe febb 	bl	8000cb2 <led_signal_stop>
			light_ask_off_pulse_fsm(light_uv);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe ff78 	bl	8000e34 <light_ask_off_pulse_fsm>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
			break;
 8001f4a:	e006      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
			break;
 8001f52:	e002      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
			break;
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	e000      	b.n	8001f5a <motion_light_uv_control_fsm+0x172>
			break;
 8001f58:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	70da      	strb	r2, [r3, #3]

}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f6c:	08005ad4 	.word	0x08005ad4

08001f70 <motion_uv_ctrl_wait_fsm>:
									motion_light_uv_state_t *fsm_state,
									motion_sensed_t *motion_sensed,
									motion_light_uv_abort_t *uv_abort,
									motion_uv_wait_signal_t wait,
									led_signal_t *signal)
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b09c      	sub	sp, #112	; 0x70
 8001f74:	af16      	add	r7, sp, #88	; 0x58
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	785a      	ldrb	r2, [r3, #1]
 8001f82:	2116      	movs	r1, #22
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	187a      	adds	r2, r7, r1
 8001f8c:	9203      	str	r2, [sp, #12]
 8001f8e:	2517      	movs	r5, #23
 8001f90:	197a      	adds	r2, r7, r5
 8001f92:	9202      	str	r2, [sp, #8]
 8001f94:	466a      	mov	r2, sp
 8001f96:	0011      	movs	r1, r2
 8001f98:	001a      	movs	r2, r3
 8001f9a:	3210      	adds	r2, #16
 8001f9c:	ca11      	ldmia	r2!, {r0, r4}
 8001f9e:	c111      	stmia	r1!, {r0, r4}
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	6859      	ldr	r1, [r3, #4]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f7fe fa22 	bl	80003f0 <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8001fac:	687c      	ldr	r4, [r7, #4]
 8001fae:	2315      	movs	r3, #21
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	9314      	str	r3, [sp, #80]	; 0x50
 8001fb4:	466b      	mov	r3, sp
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	0023      	movs	r3, r4
 8001fba:	3310      	adds	r3, #16
 8001fbc:	2250      	movs	r2, #80	; 0x50
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	f003 fd66 	bl	8005a90 <memcpy>
 8001fc4:	6820      	ldr	r0, [r4, #0]
 8001fc6:	6861      	ldr	r1, [r4, #4]
 8001fc8:	68a2      	ldr	r2, [r4, #8]
 8001fca:	68e3      	ldr	r3, [r4, #12]
 8001fcc:	f000 fd26 	bl	8002a1c <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001fd0:	197b      	adds	r3, r7, r5
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d10e      	bne.n	8001ff6 <motion_uv_ctrl_wait_fsm+0x86>
	{

		//Change if abort is not required with a second push
		if(button_uv->push_status == BUTTON_PUSH_ON)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	789b      	ldrb	r3, [r3, #2]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d103      	bne.n	8001fe8 <motion_uv_ctrl_wait_fsm+0x78>
		{
			*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
 8001fe6:	e002      	b.n	8001fee <motion_uv_ctrl_wait_fsm+0x7e>
		}
		else
		{
			*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fea:	2207      	movs	r2, #7
 8001fec:	701a      	strb	r2, [r3, #0]
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001fee:	2317      	movs	r3, #23
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 8001ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d105      	bne.n	800200a <motion_uv_ctrl_wait_fsm+0x9a>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	2207      	movs	r2, #7
 8002002:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 8002004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 800200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b07      	cmp	r3, #7
 8002010:	d900      	bls.n	8002014 <motion_uv_ctrl_wait_fsm+0xa4>
 8002012:	e07c      	b.n	800210e <motion_uv_ctrl_wait_fsm+0x19e>
 8002014:	009a      	lsls	r2, r3, #2
 8002016:	4b45      	ldr	r3, [pc, #276]	; (800212c <motion_uv_ctrl_wait_fsm+0x1bc>)
 8002018:	18d3      	adds	r3, r2, r3
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 800201e:	46c0      	nop			; (mov r8, r8)

			break;
 8002020:	e07a      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>

		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8002022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe fabb 	bl	80005a0 <deadline_timer_set_initial_time>
			//Start LED indicator
			led_signal_start(signal);
 800202a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202c:	0018      	movs	r0, r3
 800202e:	f7fe fe34 	bl	8000c9a <led_signal_start>
			signal->type = LED_SIGNAL_BLINK;
 8002032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002034:	2202      	movs	r2, #2
 8002036:	725a      	strb	r2, [r3, #9]

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	2202      	movs	r2, #2
 800203c:	701a      	strb	r2, [r3, #0]
			break;
 800203e:	e06b      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>

		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_expired_t deadline_safe_expired;
			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8002040:	2414      	movs	r4, #20
 8002042:	193a      	adds	r2, r7, r4
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	0011      	movs	r1, r2
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe fa71 	bl	8000530 <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 800204e:	193b      	adds	r3, r7, r4
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d103      	bne.n	800205e <motion_uv_ctrl_wait_fsm+0xee>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8002056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002058:	2203      	movs	r2, #3
 800205a:	701a      	strb	r2, [r3, #0]
					__NOP();
				}

			}

			break;
 800205c:	e05c      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 800205e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d105      	bne.n	8002072 <motion_uv_ctrl_wait_fsm+0x102>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8002066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 800206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
				if(wait == MOTION_UV_WAIT_TRUE)
 8002072:	2338      	movs	r3, #56	; 0x38
 8002074:	18fb      	adds	r3, r7, r3
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d103      	bne.n	8002084 <motion_uv_ctrl_wait_fsm+0x114>
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 800207c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
			break;
 8002082:	e049      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
					__NOP();
 8002084:	46c0      	nop			; (mov r8, r8)
			break;
 8002086:	e047      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
			light_ask_on_pulse_fsm(light_uv);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0018      	movs	r0, r3
 800208c:	f7fe fef3 	bl	8000e76 <light_ask_on_pulse_fsm>
			signal->type = LED_SIGNAL_SOLID;
 8002090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002092:	2201      	movs	r2, #1
 8002094:	725a      	strb	r2, [r3, #9]
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	2204      	movs	r2, #4
 800209a:	701a      	strb	r2, [r3, #0]

			break;
 800209c:	e03c      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7fe fa7d 	bl	80005a0 <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	2205      	movs	r2, #5
 80020aa:	701a      	strb	r2, [r3, #0]
			break;
 80020ac:	e034      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 80020ae:	2413      	movs	r4, #19
 80020b0:	193a      	adds	r2, r7, r4
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	0011      	movs	r1, r2
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe fa3a 	bl	8000530 <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d102      	bne.n	80020ca <motion_uv_ctrl_wait_fsm+0x15a>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80020c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020c6:	2206      	movs	r2, #6
 80020c8:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d121      	bne.n	8002116 <motion_uv_ctrl_wait_fsm+0x1a6>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	2207      	movs	r2, #7
 80020dc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80020de:	e01a      	b.n	8002116 <motion_uv_ctrl_wait_fsm+0x1a6>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	2206      	movs	r2, #6
 80020e4:	701a      	strb	r2, [r3, #0]
			break;
 80020e6:	e017      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	0018      	movs	r0, r3
 80020ec:	f7fe fa12 	bl	8000514 <deadline_timer_force_expiration>
			button_uv->push_status = BUTTON_PUSH_OFF;
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2200      	movs	r2, #0
 80020f4:	709a      	strb	r2, [r3, #2]

			//Stop LED indicator
			led_signal_stop(signal);
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7fe fdda 	bl	8000cb2 <led_signal_stop>
			light_ask_off_pulse_fsm(light_uv);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0018      	movs	r0, r3
 8002102:	f7fe fe97 	bl	8000e34 <light_ask_off_pulse_fsm>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8002106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
			break;
 800210c:	e004      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]
			break;
 8002114:	e000      	b.n	8002118 <motion_uv_ctrl_wait_fsm+0x1a8>
			break;
 8002116:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8002118:	2317      	movs	r3, #23
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	70da      	strb	r2, [r3, #3]
}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	46bd      	mov	sp, r7
 8002126:	b006      	add	sp, #24
 8002128:	bdb0      	pop	{r4, r5, r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	08005af4 	.word	0x08005af4

08002130 <direct_light_control_fsm>:

void direct_light_control_fsm(light_t *light,
						button_t *button,
						deadline_timer_t *deadline_timer,
						motion_light_no_motion_state_t *fsm_state)
{
 8002130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af04      	add	r7, sp, #16
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	785a      	ldrb	r2, [r3, #1]
 8002142:	2516      	movs	r5, #22
 8002144:	197b      	adds	r3, r7, r5
 8002146:	701a      	strb	r2, [r3, #0]
	button_status_t button_status = BUTTON_OFF;
 8002148:	2315      	movs	r3, #21
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	197a      	adds	r2, r7, r5
 8002154:	9203      	str	r2, [sp, #12]
 8002156:	2617      	movs	r6, #23
 8002158:	19ba      	adds	r2, r7, r6
 800215a:	9202      	str	r2, [sp, #8]
 800215c:	466a      	mov	r2, sp
 800215e:	0011      	movs	r1, r2
 8002160:	001a      	movs	r2, r3
 8002162:	3210      	adds	r2, #16
 8002164:	ca11      	ldmia	r2!, {r0, r4}
 8002166:	c111      	stmia	r1!, {r0, r4}
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	6859      	ldr	r1, [r3, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f7fe f93e 	bl	80003f0 <button_check_isr_request>

	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8002174:	19bb      	adds	r3, r7, r6
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d10d      	bne.n	8002198 <direct_light_control_fsm+0x68>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 800217c:	19bb      	adds	r3, r7, r6
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]

		if(edge == BUTTON_EDGE_NEGATIVE)
 8002182:	197b      	adds	r3, r7, r5
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d103      	bne.n	8002192 <direct_light_control_fsm+0x62>
		{
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]
 8002190:	e002      	b.n	8002198 <direct_light_control_fsm+0x68>
		}
		else
		{
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2202      	movs	r2, #2
 8002196:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(*fsm_state)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d021      	beq.n	80021e4 <direct_light_control_fsm+0xb4>
 80021a0:	dc28      	bgt.n	80021f4 <direct_light_control_fsm+0xc4>
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d007      	beq.n	80021b6 <direct_light_control_fsm+0x86>
 80021a6:	dc25      	bgt.n	80021f4 <direct_light_control_fsm+0xc4>
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <direct_light_control_fsm+0x82>
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00a      	beq.n	80021c6 <direct_light_control_fsm+0x96>
 80021b0:	e020      	b.n	80021f4 <direct_light_control_fsm+0xc4>
	{
		case NO_MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 80021b2:	46c0      	nop			; (mov r8, r8)

			break;
 80021b4:	e023      	b.n	80021fe <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7fe fe5c 	bl	8000e76 <light_ask_on_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]

			break;
 80021c4:	e01b      	b.n	80021fe <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_CHECK_BUTTON:
			//This updates the timer count
			button_get_status(button, &button_status);
 80021c6:	2415      	movs	r4, #21
 80021c8:	193a      	adds	r2, r7, r4
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	0011      	movs	r1, r2
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7fe f8da 	bl	8000388 <button_get_status>

			//TODO: (low) This step is just to ensure things are done
			if(button_status == BUTTON_OFF)
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <direct_light_control_fsm+0xcc>
			{
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2203      	movs	r2, #3
 80021e0:	701a      	strb	r2, [r3, #0]
			}

			break;
 80021e2:	e00b      	b.n	80021fc <direct_light_control_fsm+0xcc>
		case NO_MOTION_LIGHT_TURN_OFF_LIGHT:
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe fe24 	bl	8000e34 <light_ask_off_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
			break;
 80021f2:	e004      	b.n	80021fe <direct_light_control_fsm+0xce>
		default:
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
			break;
 80021fa:	e000      	b.n	80021fe <direct_light_control_fsm+0xce>
			break;
 80021fc:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 80021fe:	2317      	movs	r3, #23
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781a      	ldrb	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	70da      	strb	r2, [r3, #3]

}
 8002208:	46c0      	nop			; (mov r8, r8)
 800220a:	46bd      	mov	sp, r7
 800220c:	b007      	add	sp, #28
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002210 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

	if (htim == &htim17)
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800221c:	429a      	cmp	r2, r3
 800221e:	d106      	bne.n	800222e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002222:	791a      	ldrb	r2, [r3, #4]
 8002224:	4b1f      	ldr	r3, [pc, #124]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002226:	0011      	movs	r1, r2
 8002228:	0018      	movs	r0, r3
 800222a:	f000 f9c5 	bl	80025b8 <pyd1598_dl_readout_fsm>
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002232:	429a      	cmp	r2, r3
 8002234:	d105      	bne.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002238:	4819      	ldr	r0, [pc, #100]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800223a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800223c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800223e:	f000 fb23 	bl	8002888 <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002246:	429a      	cmp	r2, r3
 8002248:	d123      	bne.n	8002292 <HAL_TIM_PeriodElapsedCallback+0x82>
	{

		//TODO: (low)can I change this to the infinite while loop in the main?
		deadline_timer_count(&deadline_timer_light_1);
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800224c:	0018      	movs	r0, r3
 800224e:	f7fe f999 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8002252:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7fe f995 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800225c:	0018      	movs	r0, r3
 800225e:	f7fe f991 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8002262:	4b16      	ldr	r3, [pc, #88]	; (80022bc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002264:	0018      	movs	r0, r3
 8002266:	f7fe f98d 	bl	8000584 <deadline_timer_count>
		//
		deadline_timer_count(&deadline_motion_light_1);
 800226a:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800226c:	0018      	movs	r0, r3
 800226e:	f7fe f989 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002274:	0018      	movs	r0, r3
 8002276:	f7fe f985 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe f981 	bl	8000584 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002284:	0018      	movs	r0, r3
 8002286:	f7fe f97d 	bl	8000584 <deadline_timer_count>

		deadline_timer_count(&deadline_led_indicator);
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800228c:	0018      	movs	r0, r3
 800228e:	f7fe f979 	bl	8000584 <deadline_timer_count>

	}



}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	b002      	add	sp, #8
 8002298:	bd80      	pop	{r7, pc}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	20000738 	.word	0x20000738
 80022a0:	20000090 	.word	0x20000090
 80022a4:	200000b0 	.word	0x200000b0
 80022a8:	200006a0 	.word	0x200006a0
 80022ac:	200006ec 	.word	0x200006ec
 80022b0:	200000f8 	.word	0x200000f8
 80022b4:	20000160 	.word	0x20000160
 80022b8:	200001c8 	.word	0x200001c8
 80022bc:	200002b8 	.word	0x200002b8
 80022c0:	200003f0 	.word	0x200003f0
 80022c4:	20000478 	.word	0x20000478
 80022c8:	20000500 	.word	0x20000500
 80022cc:	20000580 	.word	0x20000580
 80022d0:	20000388 	.word	0x20000388

080022d4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dbb      	adds	r3, r7, #6
 80022de:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 80022e2:	2248      	movs	r2, #72	; 0x48
 80022e4:	5a9b      	ldrh	r3, [r3, r2]
 80022e6:	1dba      	adds	r2, r7, #6
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d107      	bne.n	80022fe <HAL_GPIO_EXTI_Rising_Callback+0x2a>
	{
//		pyd1598_direct_link_isr_init_set();
		motion_sensor.direct_link.start_fsm = true;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 80022f0:	2241      	movs	r2, #65	; 0x41
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	}
	else
	{
		__NOP();
 80022fe:	46c0      	nop			; (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8002300:	4b1e      	ldr	r3, [pc, #120]	; (800237c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8002302:	891b      	ldrh	r3, [r3, #8]
 8002304:	1dba      	adds	r2, r7, #6
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d10b      	bne.n	8002324 <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800230c:	4b1b      	ldr	r3, [pc, #108]	; (800237c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 800230e:	7b5b      	ldrb	r3, [r3, #13]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d107      	bne.n	8002324 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_1);
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8002316:	0018      	movs	r0, r3
 8002318:	f7fe f810 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 800231e:	0018      	movs	r0, r3
 8002320:	f7fe f93e 	bl	80005a0 <deadline_timer_set_initial_time>
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002324:	4b17      	ldr	r3, [pc, #92]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8002326:	891b      	ldrh	r3, [r3, #8]
 8002328:	1dba      	adds	r2, r7, #6
 800232a:	8812      	ldrh	r2, [r2, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d10b      	bne.n	8002348 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002330:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8002332:	7b5b      	ldrb	r3, [r3, #13]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d107      	bne.n	8002348 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		{
			button_positive_edge_detected(&button_light_2);
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fd fffe 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8002342:	0018      	movs	r0, r3
 8002344:	f7fe f92c 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8002348:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 800234a:	891b      	ldrh	r3, [r3, #8]
 800234c:	1dba      	adds	r2, r7, #6
 800234e:	8812      	ldrh	r2, [r2, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d10b      	bne.n	800236c <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8002356:	7b5b      	ldrb	r3, [r3, #13]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d107      	bne.n	800236c <HAL_GPIO_EXTI_Rising_Callback+0x98>
		{
			button_positive_edge_detected(&button_uv);
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 800235e:	0018      	movs	r0, r3
 8002360:	f7fd ffec 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8002366:	0018      	movs	r0, r3
 8002368:	f7fe f91a 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}
}
 800236c:	46c0      	nop			; (mov r8, r8)
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000090 	.word	0x20000090
 8002378:	40014800 	.word	0x40014800
 800237c:	20000338 	.word	0x20000338
 8002380:	200002b8 	.word	0x200002b8
 8002384:	20000350 	.word	0x20000350
 8002388:	20000368 	.word	0x20000368

0800238c <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	1dbb      	adds	r3, r7, #6
 8002396:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8002398:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800239a:	891b      	ldrh	r3, [r3, #8]
 800239c:	1dba      	adds	r2, r7, #6
 800239e:	8812      	ldrh	r2, [r2, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d10b      	bne.n	80023bc <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023a4:	4b19      	ldr	r3, [pc, #100]	; (800240c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80023a6:	7b5b      	ldrb	r3, [r3, #13]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_GPIO_EXTI_Falling_Callback+0x30>
		{
			button_negative_edge_detected(&button_light_1);
 80023ac:	4b17      	ldr	r3, [pc, #92]	; (800240c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f7fd ffd7 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7fe f8f2 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80023be:	891b      	ldrh	r3, [r3, #8]
 80023c0:	1dba      	adds	r2, r7, #6
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d10b      	bne.n	80023e0 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023c8:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80023ca:	7b5b      	ldrb	r3, [r3, #13]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		{
			button_negative_edge_detected(&button_light_2);
 80023d0:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 80023d2:	0018      	movs	r0, r3
 80023d4:	f7fd ffc5 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 80023d8:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80023da:	0018      	movs	r0, r3
 80023dc:	f7fe f8e0 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80023e2:	891b      	ldrh	r3, [r3, #8]
 80023e4:	1dba      	adds	r2, r7, #6
 80023e6:	8812      	ldrh	r2, [r2, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10b      	bne.n	8002404 <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80023ee:	7b5b      	ldrb	r3, [r3, #13]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button_negative_edge_detected(&button_uv);
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7fd ffb3 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fe f8ce 	bl	80005a0 <deadline_timer_set_initial_time>
		}
	}
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000338 	.word	0x20000338
 8002410:	200002b8 	.word	0x200002b8
 8002414:	20000350 	.word	0x20000350
 8002418:	20000368 	.word	0x20000368

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002424:	e7fe      	b.n	8002424 <Error_Handler+0x8>

08002426 <pyd1598_setup>:

/**********************************High Level**********************************/
void pyd1598_setup(pyd1598_sensor_t *sensor, pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t serin_inteface,
							pyd1598_hardware_interface_t direct_link_inteface)
{
 8002426:	b082      	sub	sp, #8
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af02      	add	r7, sp, #8
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	1d38      	adds	r0, r7, #4
 8002432:	6001      	str	r1, [r0, #0]
 8002434:	6042      	str	r2, [r0, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	2520      	movs	r5, #32
 800243a:	1952      	adds	r2, r2, r5
 800243c:	19d2      	adds	r2, r2, r7
 800243e:	6013      	str	r3, [r2, #0]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8002440:	68fc      	ldr	r4, [r7, #12]
 8002442:	2304      	movs	r3, #4
 8002444:	195b      	adds	r3, r3, r5
 8002446:	19db      	adds	r3, r3, r7
 8002448:	1d3a      	adds	r2, r7, #4
 800244a:	4669      	mov	r1, sp
 800244c:	6858      	ldr	r0, [r3, #4]
 800244e:	6008      	str	r0, [r1, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6811      	ldr	r1, [r2, #0]
 8002454:	6852      	ldr	r2, [r2, #4]
 8002456:	0020      	movs	r0, r4
 8002458:	f000 f831 	bl	80024be <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3320      	adds	r3, #32
 8002460:	0018      	movs	r0, r3
 8002462:	230c      	movs	r3, #12
 8002464:	195b      	adds	r3, r3, r5
 8002466:	19db      	adds	r3, r3, r7
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	f000 f85f 	bl	800252e <pyd1598_direct_link_setup>



	sensor->current_config.blind_time = 0;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2251      	movs	r2, #81	; 0x51
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]
	sensor->current_config.count_mode = 0;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2257      	movs	r2, #87	; 0x57
 800247c:	2100      	movs	r1, #0
 800247e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.hpf_cutoff = 0;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2256      	movs	r2, #86	; 0x56
 8002484:	2100      	movs	r1, #0
 8002486:	5499      	strb	r1, [r3, r2]
	sensor->current_config.op_mode = 0;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2254      	movs	r2, #84	; 0x54
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.pulse_counter = 0;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2252      	movs	r2, #82	; 0x52
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]
	sensor->current_config.signal_source = 0;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2255      	movs	r2, #85	; 0x55
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.threshold = 0;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2250      	movs	r2, #80	; 0x50
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.window_time = 0;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2253      	movs	r2, #83	; 0x53
 80024ac:	2100      	movs	r1, #0
 80024ae:	5499      	strb	r1, [r3, r2]





}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b004      	add	sp, #16
 80024b6:	bcb0      	pop	{r4, r5, r7}
 80024b8:	bc08      	pop	{r3}
 80024ba:	b002      	add	sp, #8
 80024bc:	4718      	bx	r3

080024be <pyd1598_serin_setup>:

void pyd1598_serin_setup(pyd1598_serin_t *serin,
							pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t hardware_inteface)
{
 80024be:	b082      	sub	sp, #8
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	1d38      	adds	r0, r7, #4
 80024ca:	6001      	str	r1, [r0, #0]
 80024cc:	6042      	str	r2, [r0, #4]
 80024ce:	2204      	movs	r2, #4
 80024d0:	2418      	movs	r4, #24
 80024d2:	1912      	adds	r2, r2, r4
 80024d4:	2108      	movs	r1, #8
 80024d6:	468c      	mov	ip, r1
 80024d8:	44bc      	add	ip, r7
 80024da:	4462      	add	r2, ip
 80024dc:	6013      	str	r3, [r2, #0]
	serin->config = initial_config;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1d3a      	adds	r2, r7, #4
 80024e2:	ca03      	ldmia	r2!, {r0, r1}
 80024e4:	c303      	stmia	r3!, {r0, r1}


	pyd1598_serin_add_all_conf(serin->config, serin);
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	f000 fac6 	bl	8002a7e <pyd1598_serin_add_all_conf>

	serin->hardware_inteface = hardware_inteface;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2204      	movs	r2, #4
 80024f6:	1912      	adds	r2, r2, r4
 80024f8:	2108      	movs	r1, #8
 80024fa:	468c      	mov	ip, r1
 80024fc:	44bc      	add	ip, r7
 80024fe:	4462      	add	r2, ip
 8002500:	3318      	adds	r3, #24
 8002502:	ca03      	ldmia	r2!, {r0, r1}
 8002504:	c303      	stmia	r3!, {r0, r1}
	//This is incremented when data is send to SERIN pin
	serin->data_idx = 0;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	611a      	str	r2, [r3, #16]
	//This mask is shifted when data is send to SERIN pin.
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2280      	movs	r2, #128	; 0x80
 8002510:	0452      	lsls	r2, r2, #17
 8002512:	60da      	str	r2, [r3, #12]
	serin->state = PYD1598_SERIN_IDLE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	751a      	strb	r2, [r3, #20]
	serin->start_fsm = false;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	755a      	strb	r2, [r3, #21]




}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	b005      	add	sp, #20
 8002526:	bc90      	pop	{r4, r7}
 8002528:	bc08      	pop	{r3}
 800252a:	b002      	add	sp, #8
 800252c:	4718      	bx	r3

0800252e <pyd1598_direct_link_setup>:

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	6019      	str	r1, [r3, #0]
 800253a:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1d3a      	adds	r2, r7, #4
 8002540:	3324      	adds	r3, #36	; 0x24
 8002542:	ca03      	ldmia	r2!, {r0, r1}
 8002544:	c303      	stmia	r3!, {r0, r1}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	705a      	strb	r2, [r3, #1]
	direct_link->config.count_mode = 0;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	71da      	strb	r2, [r3, #7]
	direct_link->config.hpf_cutoff = 0;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	719a      	strb	r2, [r3, #6]
	direct_link->config.op_mode = 0;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
	direct_link->config.pulse_counter = 0;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	709a      	strb	r2, [r3, #2]
	direct_link->config.signal_source = 0;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	715a      	strb	r2, [r3, #5]
	direct_link->config.threshold = 0;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
	direct_link->config.window_time = 0;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	70da      	strb	r2, [r3, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	739a      	strb	r2, [r3, #14]
	direct_link->source_value.pir_bpf = 0;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	811a      	strh	r2, [r3, #8]
	direct_link->source_value.pir_lpf = 0;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	815a      	strh	r2, [r3, #10]
	direct_link->source_value.temperature = 0;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	819a      	strh	r2, [r3, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
	direct_link->datagram_bufffer = 0;
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	2300      	movs	r3, #0
 800259a:	610a      	str	r2, [r1, #16]
 800259c:	614b      	str	r3, [r1, #20]
	direct_link->start_fsm = 0;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2221      	movs	r2, #33	; 0x21
 80025a2:	2100      	movs	r1, #0
 80025a4:	5499      	strb	r1, [r3, r2]
	direct_link->time_update_idx = 0;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2222      	movs	r2, #34	; 0x22
 80025aa:	2100      	movs	r1, #0
 80025ac:	5499      	strb	r1, [r3, r2]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b004      	add	sp, #16
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <pyd1598_dl_readout_fsm>:
/*_________________________________Direct link FSM____________________________*/


void pyd1598_dl_readout_fsm(pyd1598_direct_link_t *direct_link,
													pyd1598_op_mode_t op_mode)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	000a      	movs	r2, r1
 80025c2:	1cfb      	adds	r3, r7, #3
 80025c4:	701a      	strb	r2, [r3, #0]

	//Information variables
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	60ba      	str	r2, [r7, #8]
 80025ce:	60fb      	str	r3, [r7, #12]

	//FSM variables
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 80025d0:	2313      	movs	r3, #19
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	7f52      	ldrb	r2, [r2, #29]
 80025d8:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 80025da:	231f      	movs	r3, #31
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	7fd2      	ldrb	r2, [r2, #31]
 80025e2:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 80025e4:	201e      	movs	r0, #30
 80025e6:	183b      	adds	r3, r7, r0
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	2120      	movs	r1, #32
 80025ec:	5c52      	ldrb	r2, [r2, r1]
 80025ee:	701a      	strb	r2, [r3, #0]
	uint8_t time_update_idx = direct_link->time_update_idx;
 80025f0:	231d      	movs	r3, #29
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	2122      	movs	r1, #34	; 0x22
 80025f8:	5c52      	ldrb	r2, [r2, r1]
 80025fa:	701a      	strb	r2, [r3, #0]
	bool start_fsm = direct_link->start_fsm;
 80025fc:	231c      	movs	r3, #28
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	2121      	movs	r1, #33	; 0x21
 8002604:	5c52      	ldrb	r2, [r2, r1]
 8002606:	701a      	strb	r2, [r3, #0]
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8002608:	231b      	movs	r3, #27
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	2123      	movs	r1, #35	; 0x23
 8002610:	5c52      	ldrb	r2, [r2, r1]
 8002612:	701a      	strb	r2, [r3, #0]

	//Local variable
	uint32_t idx = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]


	//TODO: (low) implement readout abort state

	switch(readout_state)
 8002618:	183b      	adds	r3, r7, r0
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b04      	cmp	r3, #4
 800261e:	d900      	bls.n	8002622 <pyd1598_dl_readout_fsm+0x6a>
 8002620:	e0f1      	b.n	8002806 <pyd1598_dl_readout_fsm+0x24e>
 8002622:	009a      	lsls	r2, r3, #2
 8002624:	4b91      	ldr	r3, [pc, #580]	; (800286c <pyd1598_dl_readout_fsm+0x2b4>)
 8002626:	18d3      	adds	r3, r2, r3
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	469f      	mov	pc, r3
	{
		case PYD1598_READOUT_IDLE:

			//This state do nothing until start_fsm is activated outside the FSM
			if(start_fsm == true)
 800262c:	231c      	movs	r3, #28
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d100      	bne.n	8002638 <pyd1598_dl_readout_fsm+0x80>
 8002636:	e0ef      	b.n	8002818 <pyd1598_dl_readout_fsm+0x260>
			{
				//From Table 5 and section 2.7 of the datasheet we know that the
				//time difference from this state and the next ones should be
				// 					120μs < t_{DS} < 150μs
				if(op_mode == PYD1598_FORCE_READOUT)
 8002638:	1cfb      	adds	r3, r7, #3
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10e      	bne.n	800265e <pyd1598_dl_readout_fsm+0xa6>
				{
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002644:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002646:	f000 fc13 	bl	8002e70 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800264e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002650:	f000 fc4a 	bl	8002ee8 <pyd1598_direct_link_set_one_pulse>
					readout_state = PYD1598_READOUT_GET_MSG;
 8002654:	231e      	movs	r3, #30
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
 800265c:	e023      	b.n	80026a6 <pyd1598_dl_readout_fsm+0xee>

				}
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 800265e:	1cfb      	adds	r3, r7, #3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d003      	beq.n	800266e <pyd1598_dl_readout_fsm+0xb6>
 8002666:	1cfb      	adds	r3, r7, #3
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d11b      	bne.n	80026a6 <pyd1598_dl_readout_fsm+0xee>
						(op_mode == PYD1598_WAKE_UP))
				{
					//TODO: (high) is it possible to set another flag if it
					//comes from an interrupt

					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002672:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002674:	f000 fbfc 	bl	8002e70 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800267c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800267e:	f000 fc4d 	bl	8002f1c <pyd1598_direct_link_set_negative_edge>

					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8002682:	1cfb      	adds	r3, r7, #3
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d009      	beq.n	800269e <pyd1598_dl_readout_fsm+0xe6>
 800268a:	2313      	movs	r3, #19
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d104      	bne.n	800269e <pyd1598_dl_readout_fsm+0xe6>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
					{
						//since in Wake-up mode read is optional:
						readout_state = PYD1598_READOUT_END_COM;
 8002694:	231e      	movs	r3, #30
 8002696:	18fb      	adds	r3, r7, r3
 8002698:	2204      	movs	r2, #4
 800269a:	701a      	strb	r2, [r3, #0]
 800269c:	e003      	b.n	80026a6 <pyd1598_dl_readout_fsm+0xee>
					}
					else
					{
						readout_state = PYD1598_READOUT_GET_MSG;
 800269e:	231e      	movs	r3, #30
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
				else
				{
					//TODO: (low) define an error handler
				}

				start_fsm = false;
 80026a6:	231c      	movs	r3, #28
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 80026ae:	231f      	movs	r3, #31
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]

			}

			break;
 80026b6:	e0af      	b.n	8002818 <pyd1598_dl_readout_fsm+0x260>
		case PYD1598_READOUT_GET_MSG:

			//TODO: (HIGH) remember to protect from interrupts!!!!!!!!!!!!!

			datagram_bufffer = 0;
 80026b8:	2200      	movs	r2, #0
 80026ba:	2300      	movs	r3, #0
 80026bc:	60ba      	str	r2, [r7, #8]
 80026be:	60fb      	str	r3, [r7, #12]

			//Proceeding with the Readout:
			for(idx = 0; idx < 40; idx++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e01e      	b.n	8002704 <pyd1598_dl_readout_fsm+0x14c>
			{
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026cc:	f000 fc0c 	bl	8002ee8 <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026d6:	f000 fbdf 	bl	8002e98 <pyd1598_direct_link_set_as_input>

				//TODO: (low) Test without using a function call so the pin bit
				// can be faster.
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2208      	movs	r2, #8
 80026de:	18ba      	adds	r2, r7, r2
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80026e4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80026e6:	f000 fc2b 	bl	8002f40 <pyd1598_direct_link_read_pin>
													&datagram_bufffer, idx);

				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026f0:	f000 fc14 	bl	8002f1c <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026fa:	f000 fbb9 	bl	8002e70 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b27      	cmp	r3, #39	; 0x27
 8002708:	d9dd      	bls.n	80026c6 <pyd1598_dl_readout_fsm+0x10e>

			//host controller must force DIRECT LINK pin to LOW for at least
			//t_{UP} >  1250μs and subsequently release DIRECT LINK (High Z)


			time_update_idx = 0;
 800270a:	231d      	movs	r3, #29
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]

			readout_status = READOUT_BUSY;
 8002712:	231f      	movs	r3, #31
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 800271a:	231e      	movs	r3, #30
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]

			break;
 8002722:	e07c      	b.n	800281e <pyd1598_dl_readout_fsm+0x266>
		case PYD1598_READOUT_SIGNAL_DOWN:
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002728:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800272a:	f000 fba1 	bl	8002e70 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002732:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002734:	f000 fbf2 	bl	8002f1c <pyd1598_direct_link_set_negative_edge>

			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8002738:	1cfb      	adds	r3, r7, #3
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d003      	beq.n	8002748 <pyd1598_dl_readout_fsm+0x190>
 8002740:	1cfb      	adds	r3, r7, #3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d119      	bne.n	800277c <pyd1598_dl_readout_fsm+0x1c4>
				(op_mode == PYD1598_WAKE_UP))
			{
				//since these op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800274c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800274e:	f000 fbb7 	bl	8002ec0 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 8002752:	231f      	movs	r3, #31
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_IDLE;
 800275a:	231e      	movs	r3, #30
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
				time_update_idx = 0;
 8002762:	231d      	movs	r3, #29
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]

				if(op_mode == PYD1598_WAKE_UP)
 800276a:	1cfb      	adds	r3, r7, #3
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d10c      	bne.n	800278c <pyd1598_dl_readout_fsm+0x1d4>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8002772:	231b      	movs	r3, #27
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
				if(op_mode == PYD1598_WAKE_UP)
 800277a:	e007      	b.n	800278c <pyd1598_dl_readout_fsm+0x1d4>


			}
			else
			{
				readout_status = READOUT_BUSY;
 800277c:	231f      	movs	r3, #31
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 8002784:	231e      	movs	r3, #30
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
			// 					120μs < t_{DS} < 150μs,
			//and since
			//					t_{UP} >  1250μs
			//this state should remain at least 1250/120 = 10.42 -> 11 cycles.

			time_update_idx++;
 800278c:	211d      	movs	r1, #29
 800278e:	187b      	adds	r3, r7, r1
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	187b      	adds	r3, r7, r1
 8002794:	3201      	adds	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]

			//TODO: (low) create a mechanism to configure the number of cycles
			if(time_update_idx >= 11)
 8002798:	187b      	adds	r3, r7, r1
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b0a      	cmp	r3, #10
 800279e:	d93d      	bls.n	800281c <pyd1598_dl_readout_fsm+0x264>
			{
				time_update_idx = 0;
 80027a0:	187b      	adds	r3, r7, r1
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 80027a6:	231f      	movs	r3, #31
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_END_COM;
 80027ae:	231e      	movs	r3, #30
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2204      	movs	r2, #4
 80027b4:	701a      	strb	r2, [r3, #0]
			}

			break;
 80027b6:	e031      	b.n	800281c <pyd1598_dl_readout_fsm+0x264>
		case PYD1598_READOUT_END_COM:
			//TODO: (low) check if this conditional is required since it is done
			//in PYD1598_READOUT_SIGNAL_DOWN.

			//release DIRECT LINK (High Z)
			if(op_mode == PYD1598_FORCE_READOUT)
 80027b8:	1cfb      	adds	r3, r7, #3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d105      	bne.n	80027cc <pyd1598_dl_readout_fsm+0x214>
			{
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027c6:	f000 fb67 	bl	8002e98 <pyd1598_direct_link_set_as_input>
 80027ca:	e014      	b.n	80027f6 <pyd1598_dl_readout_fsm+0x23e>
			}
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 80027cc:	1cfb      	adds	r3, r7, #3
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d003      	beq.n	80027dc <pyd1598_dl_readout_fsm+0x224>
 80027d4:	1cfb      	adds	r3, r7, #3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d10c      	bne.n	80027f6 <pyd1598_dl_readout_fsm+0x23e>
					(op_mode == PYD1598_WAKE_UP))
			{
				//since this op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80027e0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027e2:	f000 fb6d 	bl	8002ec0 <pyd1598_direct_link_set_as_interrupt_input>

				if(op_mode == PYD1598_WAKE_UP)
 80027e6:	1cfb      	adds	r3, r7, #3
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d103      	bne.n	80027f6 <pyd1598_dl_readout_fsm+0x23e>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 80027ee:	231b      	movs	r3, #27
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2202      	movs	r2, #2
 80027f4:	701a      	strb	r2, [r3, #0]
				}

			}
			readout_status = READOUT_READY;
 80027f6:	231f      	movs	r3, #31
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_IDLE;
 80027fe:	231e      	movs	r3, #30
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]

		default:
			readout_state = PYD1598_READOUT_IDLE;
 8002806:	231e      	movs	r3, #30
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
			readout_status = READOUT_READY;
 800280e:	231f      	movs	r3, #31
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	2200      	movs	r2, #0
 8002814:	701a      	strb	r2, [r3, #0]
			break;
 8002816:	e002      	b.n	800281e <pyd1598_dl_readout_fsm+0x266>
			break;
 8002818:	46c0      	nop			; (mov r8, r8)
 800281a:	e000      	b.n	800281e <pyd1598_dl_readout_fsm+0x266>
			break;
 800281c:	46c0      	nop			; (mov r8, r8)
	}

	direct_link->readout_state = readout_state;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	221e      	movs	r2, #30
 8002822:	18ba      	adds	r2, r7, r2
 8002824:	2120      	movs	r1, #32
 8002826:	7812      	ldrb	r2, [r2, #0]
 8002828:	545a      	strb	r2, [r3, r1]
	direct_link->readout_status = readout_status;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	221f      	movs	r2, #31
 800282e:	18ba      	adds	r2, r7, r2
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	77da      	strb	r2, [r3, #31]
	direct_link->time_update_idx = time_update_idx;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	221d      	movs	r2, #29
 8002838:	18ba      	adds	r2, r7, r2
 800283a:	2122      	movs	r1, #34	; 0x22
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	545a      	strb	r2, [r3, r1]
	direct_link->start_fsm = start_fsm;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	221c      	movs	r2, #28
 8002844:	18ba      	adds	r2, r7, r2
 8002846:	2121      	movs	r1, #33	; 0x21
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	545a      	strb	r2, [r3, r1]
	//Saving datagram to be read outside the ISR:
	direct_link->datagram_bufffer = datagram_bufffer;
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	610a      	str	r2, [r1, #16]
 8002854:	614b      	str	r3, [r1, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	221b      	movs	r2, #27
 800285a:	18ba      	adds	r2, r7, r2
 800285c:	2123      	movs	r1, #35	; 0x23
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	545a      	strb	r2, [r3, r1]


}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b008      	add	sp, #32
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	08005b14 	.word	0x08005b14

08002870 <pyd1598_request_write>:


/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	sensor->serin.start_fsm = true;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	755a      	strb	r2, [r3, #21]
}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <pyd1598_serin_send_datagram_fsm>:


void pyd1598_serin_send_datagram_fsm(pyd1598_serin_t *serin,
									pyd1598_hardware_interface_t data_link_pin)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b08f      	sub	sp, #60	; 0x3c
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	6019      	str	r1, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
	//Declaring the FSM variables and define them to protect the serin variables
	//from any outside change

	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8002896:	2437      	movs	r4, #55	; 0x37
 8002898:	193b      	adds	r3, r7, r4
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	7d12      	ldrb	r2, [r2, #20]
 800289e:	701a      	strb	r2, [r3, #0]
	uint32_t data_idx = serin->data_idx;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
	bool start_fsm = serin->start_fsm;
 80028a6:	232f      	movs	r3, #47	; 0x2f
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	7d52      	ldrb	r2, [r2, #21]
 80028ae:	701a      	strb	r2, [r3, #0]
	pyd1598_config_t config = serin->config;
 80028b0:	231c      	movs	r3, #28
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	ca03      	ldmia	r2!, {r0, r1}
 80028b8:	c303      	stmia	r3!, {r0, r1}
	uint32_t mask = serin->mask;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t conf_datagram = serin->conf_datagram;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24

	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 80028c6:	2314      	movs	r3, #20
 80028c8:	18fa      	adds	r2, r7, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3318      	adds	r3, #24
 80028ce:	cb03      	ldmia	r3!, {r0, r1}
 80028d0:	c203      	stmia	r2!, {r0, r1}

	switch(state)
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b05      	cmp	r3, #5
 80028d8:	d900      	bls.n	80028dc <pyd1598_serin_send_datagram_fsm+0x54>
 80028da:	e07f      	b.n	80029dc <pyd1598_serin_send_datagram_fsm+0x154>
 80028dc:	009a      	lsls	r2, r3, #2
 80028de:	4b4e      	ldr	r3, [pc, #312]	; (8002a18 <pyd1598_serin_send_datagram_fsm+0x190>)
 80028e0:	18d3      	adds	r3, r2, r3
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	469f      	mov	pc, r3
	{
		case PYD1598_SERIN_IDLE:
			if(start_fsm == true)
 80028e6:	242f      	movs	r4, #47	; 0x2f
 80028e8:	193b      	adds	r3, r7, r4
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <pyd1598_serin_send_datagram_fsm+0x6a>
 80028f0:	e079      	b.n	80029e6 <pyd1598_serin_send_datagram_fsm+0x15e>
			{
				pyd1598_direct_link_set_as_output(data_link_pin);
 80028f2:	1d3b      	adds	r3, r7, #4
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	f000 faba 	bl	8002e70 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	f000 fb0b 	bl	8002f1c <pyd1598_direct_link_set_negative_edge>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 8002906:	2337      	movs	r3, #55	; 0x37
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
				start_fsm = false;
 800290e:	193b      	adds	r3, r7, r4
 8002910:	2200      	movs	r2, #0
 8002912:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002914:	e067      	b.n	80029e6 <pyd1598_serin_send_datagram_fsm+0x15e>
		case PYD1598_SERIN_SETUP_FOR_MESSAGE:

			data_idx = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	633b      	str	r3, [r7, #48]	; 0x30
//			pyd1598_direct_link_set_as_output();
//			pyd1598_direct_link_set_negative_edge();

			mask = PYD1598_SERIN_BIT_24_MASK;
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	045b      	lsls	r3, r3, #17
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
			state = PYD1598_SERIN_SEND_MSG;
 8002920:	2337      	movs	r3, #55	; 0x37
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]

			break;
 8002928:	e05e      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_MSG:
			// program the timer interrupt considering: t_{SHD} = 80-150μs
			if((conf_datagram & mask) == 0)
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800292e:	4013      	ands	r3, r2
 8002930:	d106      	bne.n	8002940 <pyd1598_serin_send_datagram_fsm+0xb8>
			{
				pyd1598_serin_set_zero_pulse(output);
 8002932:	2314      	movs	r3, #20
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	f000 fa5d 	bl	8002df8 <pyd1598_serin_set_zero_pulse>
 800293e:	e005      	b.n	800294c <pyd1598_serin_send_datagram_fsm+0xc4>
			}
			else
			{
				pyd1598_serin_set_one_pulse(output);
 8002940:	2314      	movs	r3, #20
 8002942:	18fb      	adds	r3, r7, r3
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	f000 fa78 	bl	8002e3c <pyd1598_serin_set_one_pulse>
			}

			mask >>= 1;
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28

//			if(data_idx >= (PYD1598_SERIN_MSG_LONG+1))
			if(mask == 0)
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <pyd1598_serin_send_datagram_fsm+0xda>
			{
				state = PYD1598_SERIN_SEND_DOWN;
 8002958:	2337      	movs	r3, #55	; 0x37
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	2203      	movs	r2, #3
 800295e:	701a      	strb	r2, [r3, #0]
			else
			{
				data_idx++;
			}

			break;
 8002960:	e042      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	3301      	adds	r3, #1
 8002966:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002968:	e03e      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_DOWN:
			pyd1598_direct_link_set_as_output(data_link_pin);
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	6859      	ldr	r1, [r3, #4]
 8002970:	f000 fa7e 	bl	8002e70 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8002974:	1d3b      	adds	r3, r7, #4
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	f000 facf 	bl	8002f1c <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 800297e:	2337      	movs	r3, #55	; 0x37
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2204      	movs	r2, #4
 8002984:	701a      	strb	r2, [r3, #0]

			break;
 8002986:	e02f      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>

		case PYD1598_SERIN_WAIT_LOAD_TIME:
			//Data Load Time t_{SLT} > 650μs. i.e. 8.125 to 4.333 times
			//(9 times for a 80μs interrupt or 4 times for a 150μs interrupt)
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	2b22      	cmp	r3, #34	; 0x22
 800298c:	d904      	bls.n	8002998 <pyd1598_serin_send_datagram_fsm+0x110>
			{
				state = PYD1598_SERIN_END_COM;
 800298e:	2337      	movs	r3, #55	; 0x37
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2205      	movs	r2, #5
 8002994:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				data_idx++;
			}
			break;
 8002996:	e027      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	3301      	adds	r3, #1
 800299c:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 800299e:	e023      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_END_COM:

			if(config.op_mode == PYD1598_FORCE_READOUT)
 80029a0:	231c      	movs	r3, #28
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	791b      	ldrb	r3, [r3, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d105      	bne.n	80029b6 <pyd1598_serin_send_datagram_fsm+0x12e>
			{
				pyd1598_direct_link_set_as_input(data_link_pin);
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	f000 fa72 	bl	8002e98 <pyd1598_direct_link_set_as_input>
 80029b4:	e00d      	b.n	80029d2 <pyd1598_serin_send_datagram_fsm+0x14a>
			}
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 80029b6:	221c      	movs	r2, #28
 80029b8:	18bb      	adds	r3, r7, r2
 80029ba:	791b      	ldrb	r3, [r3, #4]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d003      	beq.n	80029c8 <pyd1598_serin_send_datagram_fsm+0x140>
					(config.op_mode == PYD1598_WAKE_UP) )
 80029c0:	18bb      	adds	r3, r7, r2
 80029c2:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d104      	bne.n	80029d2 <pyd1598_serin_send_datagram_fsm+0x14a>
			{
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	f000 fa77 	bl	8002ec0 <pyd1598_direct_link_set_as_interrupt_input>
			}
			state = PYD1598_SERIN_IDLE;
 80029d2:	2337      	movs	r3, #55	; 0x37
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
			break;
 80029da:	e005      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
		default:
			state = PYD1598_SERIN_IDLE;
 80029dc:	2337      	movs	r3, #55	; 0x37
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
			break;
 80029e4:	e000      	b.n	80029e8 <pyd1598_serin_send_datagram_fsm+0x160>
			break;
 80029e6:	46c0      	nop			; (mov r8, r8)

	}

	//This are the FSM variables that are changed in this function.
	serin->state = state;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2237      	movs	r2, #55	; 0x37
 80029ec:	18ba      	adds	r2, r7, r2
 80029ee:	7812      	ldrb	r2, [r2, #0]
 80029f0:	751a      	strb	r2, [r3, #20]
	serin->data_idx = data_idx;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029f6:	611a      	str	r2, [r3, #16]
	serin->start_fsm = false;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	755a      	strb	r2, [r3, #21]
	serin->mask = mask;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a02:	60da      	str	r2, [r3, #12]
	serin->start_fsm = start_fsm;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	222f      	movs	r2, #47	; 0x2f
 8002a08:	18ba      	adds	r2, r7, r2
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	755a      	strb	r2, [r3, #21]

}
 8002a0e:	46c0      	nop			; (mov r8, r8)
 8002a10:	46bd      	mov	sp, r7
 8002a12:	b00f      	add	sp, #60	; 0x3c
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	08005b28 	.word	0x08005b28

08002a1c <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	b5b0      	push	{r4, r5, r7, lr}
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	250c      	movs	r5, #12
 8002a24:	1d2c      	adds	r4, r5, #4
 8002a26:	19e4      	adds	r4, r4, r7
 8002a28:	6020      	str	r0, [r4, #0]
 8002a2a:	6061      	str	r1, [r4, #4]
 8002a2c:	60a2      	str	r2, [r4, #8]
 8002a2e:	60e3      	str	r3, [r4, #12]
	*motion_isr_status = sensor.motion_sensed;
 8002a30:	1d2b      	adds	r3, r5, #4
 8002a32:	19db      	adds	r3, r3, r7
 8002a34:	2258      	movs	r2, #88	; 0x58
 8002a36:	5c9a      	ldrb	r2, [r3, r2]
 8002a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3a:	701a      	strb	r2, [r3, #0]
	return 0;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bcb0      	pop	{r4, r5, r7}
 8002a44:	bc08      	pop	{r3}
 8002a46:	b004      	add	sp, #16
 8002a48:	4718      	bx	r3

08002a4a <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b082      	sub	sp, #8
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
 8002a52:	6039      	str	r1, [r7, #0]

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2243      	movs	r2, #67	; 0x43
 8002a58:	5c9b      	ldrb	r3, [r3, r2]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d10a      	bne.n	8002a74 <pyd1598_read_wakeup_signal+0x2a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2243      	movs	r2, #67	; 0x43
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2202      	movs	r2, #2
 8002a6a:	701a      	strb	r2, [r3, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2258      	movs	r2, #88	; 0x58
 8002a70:	2102      	movs	r1, #2
 8002a72:	5499      	strb	r1, [r3, r2]
	}

	return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b002      	add	sp, #8
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <pyd1598_serin_add_all_conf>:
/*______________________________SERIN functions_______________________________*/


uint8_t pyd1598_serin_add_all_conf(pyd1598_config_t config,
													pyd1598_serin_t *serin)
{
 8002a7e:	b5b0      	push	{r4, r5, r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	2408      	movs	r4, #8
 8002a86:	193b      	adds	r3, r7, r4
 8002a88:	6018      	str	r0, [r3, #0]
 8002a8a:	6059      	str	r1, [r3, #4]
 8002a8c:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 8002a8e:	2517      	movs	r5, #23
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	//TODO: (low) set error handler
	pyd1598_serin_add_threshold(config.threshold, serin);
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 f838 	bl	8002b14 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	785b      	ldrb	r3, [r3, #1]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f855 	bl	8002b5c <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 8002ab2:	193b      	adds	r3, r7, r4
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	0011      	movs	r1, r2
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f878 	bl	8002bb0 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	78db      	ldrb	r3, [r3, #3]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f89b 	bl	8002c04 <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	791b      	ldrb	r3, [r3, #4]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	0011      	movs	r1, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 f8be 	bl	8002c58 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f000 f8db 	bl	8002ca0 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	799b      	ldrb	r3, [r3, #6]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	0011      	movs	r1, r2
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 f8fe 	bl	8002cf4 <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	79db      	ldrb	r3, [r3, #7]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f921 	bl	8002d48 <pyd1598_serin_add_count_mode>
	return status;
 8002b06:	197b      	adds	r3, r7, r5
 8002b08:	781b      	ldrb	r3, [r3, #0]
}
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b006      	add	sp, #24
 8002b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b14 <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	6039      	str	r1, [r7, #0]
 8002b1e:	1dfb      	adds	r3, r7, #7
 8002b20:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002b22:	200f      	movs	r0, #15
 8002b24:	183b      	adds	r3, r7, r0
 8002b26:	2200      	movs	r2, #0
 8002b28:	701a      	strb	r2, [r3, #0]

	serin->config.threshold = new_threshold;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	1dfa      	adds	r2, r7, #7
 8002b2e:	7812      	ldrb	r2, [r2, #0]
 8002b30:	701a      	strb	r2, [r3, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	3308      	adds	r3, #8
 8002b36:	0019      	movs	r1, r3
 8002b38:	0005      	movs	r5, r0
 8002b3a:	183c      	adds	r4, r7, r0
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <pyd1598_serin_add_threshold+0x44>)
 8002b3e:	1dfb      	adds	r3, r7, #7
 8002b40:	7818      	ldrb	r0, [r3, #0]
 8002b42:	2311      	movs	r3, #17
 8002b44:	f000 f92a 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_THRESHOLD,
											PYD1598_SHIFT_THRESHOLD);
	return status;
 8002b4c:	197b      	adds	r3, r7, r5
 8002b4e:	781b      	ldrb	r3, [r3, #0]
}
 8002b50:	0018      	movs	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bdb0      	pop	{r4, r5, r7, pc}
 8002b58:	0001ffff 	.word	0x0001ffff

08002b5c <pyd1598_serin_add_blind_time>:
//Reg Val is 4 bits ...
//max_value 8sec =8000ms
//min value 0.5sec =500ms
uint8_t pyd1598_serin_add_blind_time(pyd1598_blind_time_t new_blind_time,
														pyd1598_serin_t *serin)
{
 8002b5c:	b5b0      	push	{r4, r5, r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]

	new_blind_time &= 0x0F;
 8002b72:	1dfb      	adds	r3, r7, #7
 8002b74:	1dfa      	adds	r2, r7, #7
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	210f      	movs	r1, #15
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	701a      	strb	r2, [r3, #0]
	serin->config.blind_time = new_blind_time;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	1dfa      	adds	r2, r7, #7
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	705a      	strb	r2, [r3, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	3308      	adds	r3, #8
 8002b8a:	0019      	movs	r1, r3
 8002b8c:	0005      	movs	r5, r0
 8002b8e:	183c      	adds	r4, r7, r0
 8002b90:	4a06      	ldr	r2, [pc, #24]	; (8002bac <pyd1598_serin_add_blind_time+0x50>)
 8002b92:	1dfb      	adds	r3, r7, #7
 8002b94:	7818      	ldrb	r0, [r3, #0]
 8002b96:	230d      	movs	r3, #13
 8002b98:	f000 f900 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_BLIND_TIME,
											PYD1598_SHIFT_BLIND_TIME);
	return status;
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	781b      	ldrb	r3, [r3, #0]
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b004      	add	sp, #16
 8002baa:	bdb0      	pop	{r4, r5, r7, pc}
 8002bac:	01fe1fff 	.word	0x01fe1fff

08002bb0 <pyd1598_serin_add_pulse_counter>:

uint8_t pyd1598_serin_add_pulse_counter(pyd1598_pulse_counter_t pulse_counter,
														pyd1598_serin_t *serin)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	1dfb      	adds	r3, r7, #7
 8002bbc:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002bbe:	200f      	movs	r0, #15
 8002bc0:	183b      	adds	r3, r7, r0
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]

	pulse_counter &= 0x03;
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	1dfa      	adds	r2, r7, #7
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	2103      	movs	r1, #3
 8002bce:	400a      	ands	r2, r1
 8002bd0:	701a      	strb	r2, [r3, #0]
	serin->config.pulse_counter = pulse_counter;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	1dfa      	adds	r2, r7, #7
 8002bd6:	7812      	ldrb	r2, [r2, #0]
 8002bd8:	709a      	strb	r2, [r3, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	3308      	adds	r3, #8
 8002bde:	0019      	movs	r1, r3
 8002be0:	0005      	movs	r5, r0
 8002be2:	183c      	adds	r4, r7, r0
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <pyd1598_serin_add_pulse_counter+0x50>)
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	7818      	ldrb	r0, [r3, #0]
 8002bea:	230b      	movs	r3, #11
 8002bec:	f000 f8d6 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_PULSE_COUNTER,
											PYD1598_SHIFT_PULSE_COUNTER);
	return status;
 8002bf4:	197b      	adds	r3, r7, r5
 8002bf6:	781b      	ldrb	r3, [r3, #0]
}
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	b004      	add	sp, #16
 8002bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8002c00:	01ffe7ff 	.word	0x01ffe7ff

08002c04 <pyd1598_serin_add_window_time>:
uint8_t pyd1598_serin_add_window_time(pyd1598_window_time_t window_time,
														pyd1598_serin_t *serin)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	0002      	movs	r2, r0
 8002c0c:	6039      	str	r1, [r7, #0]
 8002c0e:	1dfb      	adds	r3, r7, #7
 8002c10:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002c12:	200f      	movs	r0, #15
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]

	window_time &= 0x03;
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	1dfa      	adds	r2, r7, #7
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	2103      	movs	r1, #3
 8002c22:	400a      	ands	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
	serin->config.window_time = window_time;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	1dfa      	adds	r2, r7, #7
 8002c2a:	7812      	ldrb	r2, [r2, #0]
 8002c2c:	70da      	strb	r2, [r3, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3308      	adds	r3, #8
 8002c32:	0019      	movs	r1, r3
 8002c34:	0005      	movs	r5, r0
 8002c36:	183c      	adds	r4, r7, r0
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <pyd1598_serin_add_window_time+0x50>)
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	7818      	ldrb	r0, [r3, #0]
 8002c3e:	2309      	movs	r3, #9
 8002c40:	f000 f8ac 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002c44:	0003      	movs	r3, r0
 8002c46:	7023      	strb	r3, [r4, #0]
										PYD1598_MASK_WINDOW_TIME,
										PYD1598_SHIFT_WINDOW_TIME);
	return status;
 8002c48:	197b      	adds	r3, r7, r5
 8002c4a:	781b      	ldrb	r3, [r3, #0]
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b004      	add	sp, #16
 8002c52:	bdb0      	pop	{r4, r5, r7, pc}
 8002c54:	01fff9ff 	.word	0x01fff9ff

08002c58 <pyd1598_serin_add_operation_mode>:
uint8_t pyd1598_serin_add_operation_mode(pyd1598_op_mode_t new_op_mode,
														pyd1598_serin_t *serin)
{
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	0002      	movs	r2, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	1dfb      	adds	r3, r7, #7
 8002c64:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002c66:	200f      	movs	r0, #15
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
	serin->config.op_mode = new_op_mode;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	1dfa      	adds	r2, r7, #7
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	711a      	strb	r2, [r3, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	3308      	adds	r3, #8
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0005      	movs	r5, r0
 8002c7e:	183c      	adds	r4, r7, r0
 8002c80:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <pyd1598_serin_add_operation_mode+0x44>)
 8002c82:	1dfb      	adds	r3, r7, #7
 8002c84:	7818      	ldrb	r0, [r3, #0]
 8002c86:	2307      	movs	r3, #7
 8002c88:	f000 f888 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_OPERATION_MODES,
											PYD1598_SHIFT_OPERATION_MODES);
	return status;
 8002c90:	197b      	adds	r3, r7, r5
 8002c92:	781b      	ldrb	r3, [r3, #0]
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c9c:	01fffe7f 	.word	0x01fffe7f

08002ca0 <pyd1598_serin_add_signal_source>:
uint8_t pyd1598_serin_add_signal_source(pyd1598_signal_source_t signal_source,
														pyd1598_serin_t *serin)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	0002      	movs	r2, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002cae:	200f      	movs	r0, #15
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]

	signal_source &= 0x03;
 8002cb6:	1dfb      	adds	r3, r7, #7
 8002cb8:	1dfa      	adds	r2, r7, #7
 8002cba:	7812      	ldrb	r2, [r2, #0]
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]
	serin->config.signal_source = signal_source;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	1dfa      	adds	r2, r7, #7
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	715a      	strb	r2, [r3, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	0019      	movs	r1, r3
 8002cd0:	0005      	movs	r5, r0
 8002cd2:	183c      	adds	r4, r7, r0
 8002cd4:	4a06      	ldr	r2, [pc, #24]	; (8002cf0 <pyd1598_serin_add_signal_source+0x50>)
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	7818      	ldrb	r0, [r3, #0]
 8002cda:	2305      	movs	r3, #5
 8002cdc:	f000 f85e 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	7023      	strb	r3, [r4, #0]
												&serin->conf_datagram,
												PYD1598_MASK_SIGNAL_SOURCE,
												PYD1598_SHIFT_SIGNAL_SOURCE);
	return status;
 8002ce4:	197b      	adds	r3, r7, r5
 8002ce6:	781b      	ldrb	r3, [r3, #0]
}
 8002ce8:	0018      	movs	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b004      	add	sp, #16
 8002cee:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf0:	01ffff9f 	.word	0x01ffff9f

08002cf4 <pyd1598_serin_add_hpf_cutoff>:

uint8_t pyd1598_serin_add_hpf_cutoff(pyd1598_hpf_cutoff_t new_hpf_cutoff,
														pyd1598_serin_t *serin)
{
 8002cf4:	b5b0      	push	{r4, r5, r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002d02:	200f      	movs	r0, #15
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]

	new_hpf_cutoff &= 0x03;
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	1dfa      	adds	r2, r7, #7
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	2103      	movs	r1, #3
 8002d12:	400a      	ands	r2, r1
 8002d14:	701a      	strb	r2, [r3, #0]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	1dfa      	adds	r2, r7, #7
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	719a      	strb	r2, [r3, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	0019      	movs	r1, r3
 8002d24:	0005      	movs	r5, r0
 8002d26:	183c      	adds	r4, r7, r0
 8002d28:	4a06      	ldr	r2, [pc, #24]	; (8002d44 <pyd1598_serin_add_hpf_cutoff+0x50>)
 8002d2a:	1dfb      	adds	r3, r7, #7
 8002d2c:	7818      	ldrb	r0, [r3, #0]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	f000 f834 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002d34:	0003      	movs	r3, r0
 8002d36:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_HPF_CUTOFF,
											PYD1598_SHIFT_HPF_CUTOFF);
	return status;
 8002d38:	197b      	adds	r3, r7, r5
 8002d3a:	781b      	ldrb	r3, [r3, #0]
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b004      	add	sp, #16
 8002d42:	bdb0      	pop	{r4, r5, r7, pc}
 8002d44:	01fffffb 	.word	0x01fffffb

08002d48 <pyd1598_serin_add_count_mode>:

uint8_t pyd1598_serin_add_count_mode(pyd1598_count_mode_t new_count_mode,
														pyd1598_serin_t *serin)
{
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	0002      	movs	r2, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002d56:	200f      	movs	r0, #15
 8002d58:	183b      	adds	r3, r7, r0
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]

	new_count_mode &= 0x03;
 8002d5e:	1dfb      	adds	r3, r7, #7
 8002d60:	1dfa      	adds	r2, r7, #7
 8002d62:	7812      	ldrb	r2, [r2, #0]
 8002d64:	2103      	movs	r1, #3
 8002d66:	400a      	ands	r2, r1
 8002d68:	701a      	strb	r2, [r3, #0]
	serin->config.count_mode = new_count_mode;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	1dfa      	adds	r2, r7, #7
 8002d6e:	7812      	ldrb	r2, [r2, #0]
 8002d70:	71da      	strb	r2, [r3, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	0019      	movs	r1, r3
 8002d78:	0005      	movs	r5, r0
 8002d7a:	183c      	adds	r4, r7, r0
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <pyd1598_serin_add_count_mode+0x50>)
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	7818      	ldrb	r0, [r3, #0]
 8002d82:	2300      	movs	r3, #0
 8002d84:	f000 f80a 	bl	8002d9c <pyd1598_serin_add_to_datagram>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_COUNT_MODE,
											PYD1598_SHIFT_COUNT_MODE);
	return status;
 8002d8c:	197b      	adds	r3, r7, r5
 8002d8e:	781b      	ldrb	r3, [r3, #0]
}
 8002d90:	0018      	movs	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	b004      	add	sp, #16
 8002d96:	bdb0      	pop	{r4, r5, r7, pc}
 8002d98:	01fffffd 	.word	0x01fffffd

08002d9c <pyd1598_serin_add_to_datagram>:

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
 8002da6:	0019      	movs	r1, r3
 8002da8:	240f      	movs	r4, #15
 8002daa:	193b      	adds	r3, r7, r4
 8002dac:	1c02      	adds	r2, r0, #0
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	200e      	movs	r0, #14
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	1c0a      	adds	r2, r1, #0
 8002db6:	701a      	strb	r2, [r3, #0]
	uint32_t old_config = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
	uint32_t new_config = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	617b      	str	r3, [r7, #20]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	781a      	ldrb	r2, [r3, #0]
 8002dd2:	183b      	adds	r3, r7, r0
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]

	//Adding data to the datagram copy
	new_config |= old_config;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	601a      	str	r2, [r3, #0]

	return 0;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b007      	add	sp, #28
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	003b      	movs	r3, r7
 8002e00:	6018      	str	r0, [r3, #0]
 8002e02:	6059      	str	r1, [r3, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002e04:	003b      	movs	r3, r7
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	003b      	movs	r3, r7
 8002e0a:	889b      	ldrh	r3, [r3, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	0019      	movs	r1, r3
 8002e10:	f001 f8f5 	bl	8003ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002e14:	003b      	movs	r3, r7
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	003b      	movs	r3, r7
 8002e1a:	889b      	ldrh	r3, [r3, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	0019      	movs	r1, r3
 8002e20:	f001 f8ed 	bl	8003ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002e24:	003b      	movs	r3, r7
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	003b      	movs	r3, r7
 8002e2a:	889b      	ldrh	r3, [r3, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	0019      	movs	r1, r3
 8002e30:	f001 f8e5 	bl	8003ffe <HAL_GPIO_WritePin>
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	003b      	movs	r3, r7
 8002e44:	6018      	str	r0, [r3, #0]
 8002e46:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002e48:	003b      	movs	r3, r7
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	003b      	movs	r3, r7
 8002e4e:	889b      	ldrh	r3, [r3, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	0019      	movs	r1, r3
 8002e54:	f001 f8d3 	bl	8003ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002e58:	003b      	movs	r3, r7
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	003b      	movs	r3, r7
 8002e5e:	889b      	ldrh	r3, [r3, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	0019      	movs	r1, r3
 8002e64:	f001 f8cb 	bl	8003ffe <HAL_GPIO_WritePin>
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	003b      	movs	r3, r7
 8002e78:	6018      	str	r0, [r3, #0]
 8002e7a:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8002e7c:	003b      	movs	r3, r7
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	003b      	movs	r3, r7
 8002e82:	8899      	ldrh	r1, [r3, #4]
 8002e84:	003b      	movs	r3, r7
 8002e86:	799b      	ldrb	r3, [r3, #6]
 8002e88:	b25b      	sxtb	r3, r3
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	f7fd fcb6 	bl	80007fc <HAL_DIRECT_LINK_conf_as_output>
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	003b      	movs	r3, r7
 8002ea0:	6018      	str	r0, [r3, #0]
 8002ea2:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8002ea4:	003b      	movs	r3, r7
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	003b      	movs	r3, r7
 8002eaa:	8899      	ldrh	r1, [r3, #4]
 8002eac:	003b      	movs	r3, r7
 8002eae:	799b      	ldrb	r3, [r3, #6]
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	001a      	movs	r2, r3
 8002eb4:	f7fd fc2c 	bl	8000710 <HAL_DIRECT_LINK_conf_as_input>
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	003b      	movs	r3, r7
 8002ec8:	6018      	str	r0, [r3, #0]
 8002eca:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8002ecc:	003b      	movs	r3, r7
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	003b      	movs	r3, r7
 8002ed2:	8899      	ldrh	r1, [r3, #4]
 8002ed4:	003b      	movs	r3, r7
 8002ed6:	799b      	ldrb	r3, [r3, #6]
 8002ed8:	b25b      	sxtb	r3, r3
 8002eda:	001a      	movs	r2, r3
 8002edc:	f7fd fc4e 	bl	800077c <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b002      	add	sp, #8
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	003b      	movs	r3, r7
 8002ef0:	6018      	str	r0, [r3, #0]
 8002ef2:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002ef4:	003b      	movs	r3, r7
 8002ef6:	6818      	ldr	r0, [r3, #0]
 8002ef8:	003b      	movs	r3, r7
 8002efa:	889b      	ldrh	r3, [r3, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	0019      	movs	r1, r3
 8002f00:	f001 f87d 	bl	8003ffe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002f04:	003b      	movs	r3, r7
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	003b      	movs	r3, r7
 8002f0a:	889b      	ldrh	r3, [r3, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	0019      	movs	r1, r3
 8002f10:	f001 f875 	bl	8003ffe <HAL_GPIO_WritePin>
}
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	003b      	movs	r3, r7
 8002f24:	6018      	str	r0, [r3, #0]
 8002f26:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002f28:	003b      	movs	r3, r7
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	003b      	movs	r3, r7
 8002f2e:	889b      	ldrh	r3, [r3, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	0019      	movs	r1, r3
 8002f34:	f001 f863 	bl	8003ffe <HAL_GPIO_WritePin>
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8002f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f42:	b08f      	sub	sp, #60	; 0x3c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	2608      	movs	r6, #8
 8002f48:	2418      	movs	r4, #24
 8002f4a:	1935      	adds	r5, r6, r4
 8002f4c:	2608      	movs	r6, #8
 8002f4e:	19be      	adds	r6, r7, r6
 8002f50:	19ae      	adds	r6, r5, r6
 8002f52:	6030      	str	r0, [r6, #0]
 8002f54:	6071      	str	r1, [r6, #4]
 8002f56:	627a      	str	r2, [r7, #36]	; 0x24
 8002f58:	623b      	str	r3, [r7, #32]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;
 8002f5a:	2017      	movs	r0, #23
 8002f5c:	0026      	movs	r6, r4
 8002f5e:	1983      	adds	r3, r0, r6
 8002f60:	2208      	movs	r2, #8
 8002f62:	4694      	mov	ip, r2
 8002f64:	44bc      	add	ip, r7
 8002f66:	4463      	add	r3, ip
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8002f6c:	2108      	movs	r1, #8
 8002f6e:	198b      	adds	r3, r1, r6
 8002f70:	2208      	movs	r2, #8
 8002f72:	4694      	mov	ip, r2
 8002f74:	44bc      	add	ip, r7
 8002f76:	4463      	add	r3, ip
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	198b      	adds	r3, r1, r6
 8002f7c:	2108      	movs	r1, #8
 8002f7e:	468c      	mov	ip, r1
 8002f80:	44bc      	add	ip, r7
 8002f82:	4463      	add	r3, ip
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	0034      	movs	r4, r6
 8002f88:	1981      	adds	r1, r0, r6
 8002f8a:	2008      	movs	r0, #8
 8002f8c:	1838      	adds	r0, r7, r0
 8002f8e:	180e      	adds	r6, r1, r0
 8002f90:	0019      	movs	r1, r3
 8002f92:	0010      	movs	r0, r2
 8002f94:	f001 f816 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	7033      	strb	r3, [r6, #0]

	if(pin_value == GPIO_PIN_SET)
 8002f9c:	2017      	movs	r0, #23
 8002f9e:	0026      	movs	r6, r4
 8002fa0:	1983      	adds	r3, r0, r6
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	44bc      	add	ip, r7
 8002fa8:	4463      	add	r3, ip
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d110      	bne.n	8002fd2 <pyd1598_direct_link_read_pin+0x92>
	{
		*buffer  |= readout_mask;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	6859      	ldr	r1, [r3, #4]
 8002fb6:	4b27      	ldr	r3, [pc, #156]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	0006      	movs	r6, r0
 8002fbe:	4316      	orrs	r6, r2
 8002fc0:	613e      	str	r6, [r7, #16]
 8002fc2:	4319      	orrs	r1, r3
 8002fc4:	6179      	str	r1, [r7, #20]
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	6019      	str	r1, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e020      	b.n	8003014 <pyd1598_direct_link_read_pin+0xd4>
	}
	else if(pin_value == GPIO_PIN_RESET)
 8002fd2:	2317      	movs	r3, #23
 8002fd4:	2218      	movs	r2, #24
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4694      	mov	ip, r2
 8002fdc:	44bc      	add	ip, r7
 8002fde:	4463      	add	r3, ip
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d115      	bne.n	8003012 <pyd1598_direct_link_read_pin+0xd2>
	{
		*buffer  &= ~readout_mask;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4919      	ldr	r1, [pc, #100]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 8002fee:	6808      	ldr	r0, [r1, #0]
 8002ff0:	6849      	ldr	r1, [r1, #4]
 8002ff2:	43c6      	mvns	r6, r0
 8002ff4:	61be      	str	r6, [r7, #24]
 8002ff6:	43c9      	mvns	r1, r1
 8002ff8:	61f9      	str	r1, [r7, #28]
 8002ffa:	69b9      	ldr	r1, [r7, #24]
 8002ffc:	4011      	ands	r1, r2
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	69f9      	ldr	r1, [r7, #28]
 8003002:	4019      	ands	r1, r3
 8003004:	60f9      	str	r1, [r7, #12]
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	6019      	str	r1, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	e000      	b.n	8003014 <pyd1598_direct_link_read_pin+0xd4>
	}
	else
	{
		__NOP();
 8003012:	46c0      	nop			; (mov r8, r8)
	}

	readout_mask = (readout_mask >> 1);
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	07d9      	lsls	r1, r3, #31
 800301c:	0850      	lsrs	r0, r2, #1
 800301e:	6038      	str	r0, [r7, #0]
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	4308      	orrs	r0, r1
 8003024:	6038      	str	r0, [r7, #0]
 8003026:	085b      	lsrs	r3, r3, #1
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6019      	str	r1, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]

	if(readout_mask == ((uint64_t) 0))
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0011      	movs	r1, r2
 800303c:	4319      	orrs	r1, r3
 800303e:	d104      	bne.n	800304a <pyd1598_direct_link_read_pin+0x10a>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8003040:	4904      	ldr	r1, [pc, #16]	; (8003054 <pyd1598_direct_link_read_pin+0x114>)
 8003042:	2200      	movs	r2, #0
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	600a      	str	r2, [r1, #0]
 8003048:	604b      	str	r3, [r1, #4]
	}
	return 0;
 800304a:	2300      	movs	r3, #0

}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b00f      	add	sp, #60	; 0x3c
 8003052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003054:	20000008 	.word	0x20000008

08003058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305e:	4b12      	ldr	r3, [pc, #72]	; (80030a8 <HAL_MspInit+0x50>)
 8003060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <HAL_MspInit+0x50>)
 8003064:	2101      	movs	r1, #1
 8003066:	430a      	orrs	r2, r1
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
 800306a:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_MspInit+0x50>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	607b      	str	r3, [r7, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003076:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <HAL_MspInit+0x50>)
 8003078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800307a:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <HAL_MspInit+0x50>)
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0549      	lsls	r1, r1, #21
 8003080:	430a      	orrs	r2, r1
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
 8003084:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <HAL_MspInit+0x50>)
 8003086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	055b      	lsls	r3, r3, #21
 800308c:	4013      	ands	r3, r2
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8003092:	2008      	movs	r0, #8
 8003094:	f000 fc3c 	bl	8003910 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8003098:	2010      	movs	r0, #16
 800309a:	f000 fc39 	bl	8003910 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b002      	add	sp, #8
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	40021000 	.word	0x40021000

080030ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <NMI_Handler+0x4>

080030b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <HardFault_Handler+0x4>

080030b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80030bc:	46c0      	nop			; (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030d0:	f000 fbde 	bl	8003890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030d4:	46c0      	nop			; (mov r8, r8)
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 80030de:	2004      	movs	r0, #4
 80030e0:	f000 ffc6 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 80030e4:	2008      	movs	r0, #8
 80030e6:	f000 ffc3 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 80030f4:	2080      	movs	r0, #128	; 0x80
 80030f6:	f000 ffbb 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 ffb6 	bl	8004070 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003112:	0018      	movs	r0, r3
 8003114:	f001 fc66 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000608 	.word	0x20000608

08003124 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <TIM1_CC_IRQHandler+0x14>)
 800312a:	0018      	movs	r0, r3
 800312c:	f001 fc5a 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	20000608 	.word	0x20000608

0800313c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <TIM14_IRQHandler+0x14>)
 8003142:	0018      	movs	r0, r3
 8003144:	f001 fc4e 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	200006a0 	.word	0x200006a0

08003154 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <TIM16_IRQHandler+0x14>)
 800315a:	0018      	movs	r0, r3
 800315c:	f001 fc42 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003160:	46c0      	nop			; (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	200006ec 	.word	0x200006ec

0800316c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <TIM17_IRQHandler+0x14>)
 8003172:	0018      	movs	r0, r3
 8003174:	f001 fc36 	bl	80049e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	20000738 	.word	0x20000738

08003184 <switch_selector_setup>:
#include "switch_selector.h"

uint8_t switch_selector_setup(switch_selector_t *switch_selector,
								switch_selector_gpio_t *switch_selector_gpio,
								uint8_t switch_size)
{
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	701a      	strb	r2, [r3, #0]

	uint8_t status = 0;
 8003192:	231f      	movs	r3, #31
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 800319a:	231e      	movs	r3, #30
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]



	if(switch_size > 32)
 80031a2:	1dfb      	adds	r3, r7, #7
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b20      	cmp	r3, #32
 80031a8:	d901      	bls.n	80031ae <switch_selector_setup+0x2a>
	{
		return 2;
 80031aa:	2302      	movs	r3, #2
 80031ac:	e050      	b.n	8003250 <switch_selector_setup+0xcc>
	}


	switch_selector->value = 0;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
	switch_selector->switch_size = switch_size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1dfa      	adds	r2, r7, #7
 80031b8:	7812      	ldrb	r2, [r2, #0]
 80031ba:	711a      	strb	r2, [r3, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	0018      	movs	r0, r3
 80031c4:	f002 fb60 	bl	8005888 <malloc>
 80031c8:	0003      	movs	r3, r0
 80031ca:	001a      	movs	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]
	uint32_t value;
	switch_selector_status_t pin_status;

	for(idx = 0; idx < switch_size; idx++)
 80031d0:	231e      	movs	r3, #30
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
 80031d8:	e030      	b.n	800323c <switch_selector_setup+0xb8>
	{
		if((switch_selector_gpio + idx) != NULL)
 80031da:	201e      	movs	r0, #30
 80031dc:	183b      	adds	r3, r7, r0
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	18d3      	adds	r3, r2, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d012      	beq.n	8003210 <switch_selector_setup+0x8c>
		{
//			switch_selector->switch_selector_gpio[idx] = switch_selector_gpio[idx];
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 80031ea:	183b      	adds	r3, r7, r0
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	183b      	adds	r3, r7, r0
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	18d3      	adds	r3, r2, r3
 8003200:	000a      	movs	r2, r1
 8003202:	ca03      	ldmia	r2!, {r0, r1}
 8003204:	c303      	stmia	r3!, {r0, r1}

			status = 0;
 8003206:	231f      	movs	r3, #31
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
 800320e:	e004      	b.n	800321a <switch_selector_setup+0x96>
		}
		else
		{
			status = 1;
 8003210:	231f      	movs	r3, #31
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
			break;
 8003218:	e017      	b.n	800324a <switch_selector_setup+0xc6>
		}

		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 800321a:	2318      	movs	r3, #24
 800321c:	18fc      	adds	r4, r7, r3
 800321e:	2317      	movs	r3, #23
 8003220:	18fa      	adds	r2, r7, r3
 8003222:	251e      	movs	r5, #30
 8003224:	197b      	adds	r3, r7, r5
 8003226:	7819      	ldrb	r1, [r3, #0]
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	0023      	movs	r3, r4
 800322c:	f000 f814 	bl	8003258 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8003230:	0029      	movs	r1, r5
 8003232:	187b      	adds	r3, r7, r1
 8003234:	781a      	ldrb	r2, [r3, #0]
 8003236:	187b      	adds	r3, r7, r1
 8003238:	3201      	adds	r2, #1
 800323a:	701a      	strb	r2, [r3, #0]
 800323c:	231e      	movs	r3, #30
 800323e:	18fa      	adds	r2, r7, r3
 8003240:	1dfb      	adds	r3, r7, #7
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3c7      	bcc.n	80031da <switch_selector_setup+0x56>

	}

	return status;
 800324a:	231f      	movs	r3, #31
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	781b      	ldrb	r3, [r3, #0]

}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b008      	add	sp, #32
 8003256:	bdb0      	pop	{r4, r5, r7, pc}

08003258 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8003258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	607a      	str	r2, [r7, #4]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	250b      	movs	r5, #11
 8003266:	197b      	adds	r3, r7, r5
 8003268:	1c0a      	adds	r2, r1, #0
 800326a:	701a      	strb	r2, [r3, #0]
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]

	switch_mask <<= pin;
 8003270:	197b      	adds	r3, r7, r5
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	409a      	lsls	r2, r3
 8003278:	0013      	movs	r3, r2
 800327a:	617b      	str	r3, [r7, #20]

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	197b      	adds	r3, r7, r5
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	18d3      	adds	r3, r2, r3
 8003288:	6818      	ldr	r0, [r3, #0]
							(switch_selector->switch_selector_gpio + pin)->pin);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	197b      	adds	r3, r7, r5
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	18d3      	adds	r3, r2, r3
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8003296:	889b      	ldrh	r3, [r3, #4]
 8003298:	2613      	movs	r6, #19
 800329a:	19bc      	adds	r4, r7, r6
 800329c:	0019      	movs	r1, r3
 800329e:	f000 fe91 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]

	if(pin_value == GPIO_PIN_SET)
 80032a6:	19bb      	adds	r3, r7, r6
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d10e      	bne.n	80032cc <switch_selector_read_bit+0x74>
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	197b      	adds	r3, r7, r5
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	2201      	movs	r2, #1
 80032bc:	719a      	strb	r2, [r3, #6]

		switch_selector->value |= switch_mask;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	e00f      	b.n	80032ec <switch_selector_read_bit+0x94>
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	230b      	movs	r3, #11
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	18d3      	adds	r3, r2, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	43d2      	mvns	r2, r2
 80032e6:	401a      	ands	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	230b      	movs	r3, #11
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	799a      	ldrb	r2, [r3, #6]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	701a      	strb	r2, [r3, #0]

	*value = switch_selector->value;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	601a      	str	r2, [r3, #0]

	return 0;
 8003308:	2300      	movs	r3, #0
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	b007      	add	sp, #28
 8003310:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800331c:	4a14      	ldr	r2, [pc, #80]	; (8003370 <_sbrk+0x5c>)
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <_sbrk+0x60>)
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003328:	4b13      	ldr	r3, [pc, #76]	; (8003378 <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <_sbrk+0x64>)
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <_sbrk+0x68>)
 8003334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <_sbrk+0x64>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	18d3      	adds	r3, r2, r3
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d207      	bcs.n	8003354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003344:	f002 fb78 	bl	8005a38 <__errno>
 8003348:	0003      	movs	r3, r0
 800334a:	220c      	movs	r2, #12
 800334c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800334e:	2301      	movs	r3, #1
 8003350:	425b      	negs	r3, r3
 8003352:	e009      	b.n	8003368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003354:	4b08      	ldr	r3, [pc, #32]	; (8003378 <_sbrk+0x64>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <_sbrk+0x64>)
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	18d2      	adds	r2, r2, r3
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <_sbrk+0x64>)
 8003364:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b006      	add	sp, #24
 800336e:	bd80      	pop	{r7, pc}
 8003370:	20001800 	.word	0x20001800
 8003374:	00000400 	.word	0x00000400
 8003378:	20000604 	.word	0x20000604
 800337c:	200008d0 	.word	0x200008d0

08003380 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <SystemInit+0x14>)
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	0512      	lsls	r2, r2, #20
 800338a:	609a      	str	r2, [r3, #8]
#endif
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339e:	2310      	movs	r3, #16
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	0018      	movs	r0, r3
 80033a4:	2310      	movs	r3, #16
 80033a6:	001a      	movs	r2, r3
 80033a8:	2100      	movs	r1, #0
 80033aa:	f002 fb2b 	bl	8005a04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	0018      	movs	r0, r3
 80033b2:	230c      	movs	r3, #12
 80033b4:	001a      	movs	r2, r3
 80033b6:	2100      	movs	r1, #0
 80033b8:	f002 fb24 	bl	8005a04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <MX_TIM1_Init+0xac>)
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <MX_TIM1_Init+0xb0>)
 80033c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 80033c2:	4b20      	ldr	r3, [pc, #128]	; (8003444 <MX_TIM1_Init+0xac>)
 80033c4:	222f      	movs	r2, #47	; 0x2f
 80033c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c8:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <MX_TIM1_Init+0xac>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80033ce:	4b1d      	ldr	r3, [pc, #116]	; (8003444 <MX_TIM1_Init+0xac>)
 80033d0:	22fa      	movs	r2, #250	; 0xfa
 80033d2:	0092      	lsls	r2, r2, #2
 80033d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d6:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <MX_TIM1_Init+0xac>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <MX_TIM1_Init+0xac>)
 80033de:	2200      	movs	r2, #0
 80033e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033e2:	4b18      	ldr	r3, [pc, #96]	; (8003444 <MX_TIM1_Init+0xac>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <MX_TIM1_Init+0xac>)
 80033ea:	0018      	movs	r0, r3
 80033ec:	f001 f99a 	bl	8004724 <HAL_TIM_Base_Init>
 80033f0:	1e03      	subs	r3, r0, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 80033f4:	f7ff f812 	bl	800241c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033f8:	2110      	movs	r1, #16
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	0152      	lsls	r2, r2, #5
 8003400:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003402:	187a      	adds	r2, r7, r1
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <MX_TIM1_Init+0xac>)
 8003406:	0011      	movs	r1, r2
 8003408:	0018      	movs	r0, r3
 800340a:	f001 fc4d 	bl	8004ca8 <HAL_TIM_ConfigClockSource>
 800340e:	1e03      	subs	r3, r0, #0
 8003410:	d001      	beq.n	8003416 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003412:	f7ff f803 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	2200      	movs	r2, #0
 8003420:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	2200      	movs	r2, #0
 8003426:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003428:	1d3a      	adds	r2, r7, #4
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <MX_TIM1_Init+0xac>)
 800342c:	0011      	movs	r1, r2
 800342e:	0018      	movs	r0, r3
 8003430:	f002 f9b0 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d001      	beq.n	800343c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003438:	f7fe fff0 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b008      	add	sp, #32
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000608 	.word	0x20000608
 8003448:	40012c00 	.word	0x40012c00

0800344c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b090      	sub	sp, #64	; 0x40
 8003450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003452:	232c      	movs	r3, #44	; 0x2c
 8003454:	18fb      	adds	r3, r7, r3
 8003456:	0018      	movs	r0, r3
 8003458:	2314      	movs	r3, #20
 800345a:	001a      	movs	r2, r3
 800345c:	2100      	movs	r1, #0
 800345e:	f002 fad1 	bl	8005a04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003462:	2320      	movs	r3, #32
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	0018      	movs	r0, r3
 8003468:	230c      	movs	r3, #12
 800346a:	001a      	movs	r2, r3
 800346c:	2100      	movs	r1, #0
 800346e:	f002 fac9 	bl	8005a04 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	0018      	movs	r0, r3
 8003476:	231c      	movs	r3, #28
 8003478:	001a      	movs	r2, r3
 800347a:	2100      	movs	r1, #0
 800347c:	f002 fac2 	bl	8005a04 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003480:	4b33      	ldr	r3, [pc, #204]	; (8003550 <MX_TIM3_Init+0x104>)
 8003482:	4a34      	ldr	r2, [pc, #208]	; (8003554 <MX_TIM3_Init+0x108>)
 8003484:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8003486:	4b32      	ldr	r3, [pc, #200]	; (8003550 <MX_TIM3_Init+0x104>)
 8003488:	222f      	movs	r2, #47	; 0x2f
 800348a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800348c:	4b30      	ldr	r3, [pc, #192]	; (8003550 <MX_TIM3_Init+0x104>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003492:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <MX_TIM3_Init+0x104>)
 8003494:	4a30      	ldr	r2, [pc, #192]	; (8003558 <MX_TIM3_Init+0x10c>)
 8003496:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <MX_TIM3_Init+0x104>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <MX_TIM3_Init+0x104>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034a4:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <MX_TIM3_Init+0x104>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f001 f93c 	bl	8004724 <HAL_TIM_Base_Init>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80034b0:	f7fe ffb4 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80034b4:	4b26      	ldr	r3, [pc, #152]	; (8003550 <MX_TIM3_Init+0x104>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f001 f9da 	bl	8004870 <HAL_TIM_OC_Init>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80034c0:	f7fe ffac 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <MX_TIM3_Init+0x104>)
 80034c6:	2108      	movs	r1, #8
 80034c8:	0018      	movs	r0, r3
 80034ca:	f001 fa31 	bl	8004930 <HAL_TIM_OnePulse_Init>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80034d2:	f7fe ffa3 	bl	800241c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	187b      	adds	r3, r7, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2210      	movs	r2, #16
 80034e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80034e4:	187a      	adds	r2, r7, r1
 80034e6:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <MX_TIM3_Init+0x104>)
 80034e8:	0011      	movs	r1, r2
 80034ea:	0018      	movs	r0, r3
 80034ec:	f001 fcb2 	bl	8004e54 <HAL_TIM_SlaveConfigSynchro>
 80034f0:	1e03      	subs	r3, r0, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80034f4:	f7fe ff92 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034f8:	2120      	movs	r1, #32
 80034fa:	187b      	adds	r3, r7, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2200      	movs	r2, #0
 8003504:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003506:	187a      	adds	r2, r7, r1
 8003508:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_TIM3_Init+0x104>)
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f002 f941 	bl	8005794 <HAL_TIMEx_MasterConfigSynchronization>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003516:	f7fe ff81 	bl	800241c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 130;
 8003520:	1d3b      	adds	r3, r7, #4
 8003522:	2282      	movs	r2, #130	; 0x82
 8003524:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003526:	1d3b      	adds	r3, r7, #4
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	2200      	movs	r2, #0
 8003530:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003532:	1d39      	adds	r1, r7, #4
 8003534:	4b06      	ldr	r3, [pc, #24]	; (8003550 <MX_TIM3_Init+0x104>)
 8003536:	2200      	movs	r2, #0
 8003538:	0018      	movs	r0, r3
 800353a:	f001 fb55 	bl	8004be8 <HAL_TIM_OC_ConfigChannel>
 800353e:	1e03      	subs	r3, r0, #0
 8003540:	d001      	beq.n	8003546 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8003542:	f7fe ff6b 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b010      	add	sp, #64	; 0x40
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	20000654 	.word	0x20000654
 8003554:	40000400 	.word	0x40000400
 8003558:	0000ffff 	.word	0x0000ffff

0800355c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003560:	4b0e      	ldr	r3, [pc, #56]	; (800359c <MX_TIM14_Init+0x40>)
 8003562:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <MX_TIM14_Init+0x44>)
 8003564:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <MX_TIM14_Init+0x40>)
 8003568:	222f      	movs	r2, #47	; 0x2f
 800356a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800356c:	4b0b      	ldr	r3, [pc, #44]	; (800359c <MX_TIM14_Init+0x40>)
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 145;
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <MX_TIM14_Init+0x40>)
 8003574:	2291      	movs	r2, #145	; 0x91
 8003576:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <MX_TIM14_Init+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357e:	4b07      	ldr	r3, [pc, #28]	; (800359c <MX_TIM14_Init+0x40>)
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <MX_TIM14_Init+0x40>)
 8003586:	0018      	movs	r0, r3
 8003588:	f001 f8cc 	bl	8004724 <HAL_TIM_Base_Init>
 800358c:	1e03      	subs	r3, r0, #0
 800358e:	d001      	beq.n	8003594 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003590:	f7fe ff44 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	200006a0 	.word	0x200006a0
 80035a0:	40002000 	.word	0x40002000

080035a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <MX_TIM16_Init+0x48>)
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <MX_TIM16_Init+0x4c>)
 80035ac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <MX_TIM16_Init+0x48>)
 80035b0:	222f      	movs	r2, #47	; 0x2f
 80035b2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <MX_TIM16_Init+0x48>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 80035ba:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <MX_TIM16_Init+0x48>)
 80035bc:	22fa      	movs	r2, #250	; 0xfa
 80035be:	0092      	lsls	r2, r2, #2
 80035c0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <MX_TIM16_Init+0x48>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80035c8:	4b08      	ldr	r3, [pc, #32]	; (80035ec <MX_TIM16_Init+0x48>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035ce:	4b07      	ldr	r3, [pc, #28]	; (80035ec <MX_TIM16_Init+0x48>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <MX_TIM16_Init+0x48>)
 80035d6:	0018      	movs	r0, r3
 80035d8:	f001 f8a4 	bl	8004724 <HAL_TIM_Base_Init>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d001      	beq.n	80035e4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80035e0:	f7fe ff1c 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	200006ec 	.word	0x200006ec
 80035f0:	40014400 	.word	0x40014400

080035f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80035f8:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <MX_TIM17_Init+0x44>)
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <MX_TIM17_Init+0x48>)
 80035fc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 80035fe:	4b0e      	ldr	r3, [pc, #56]	; (8003638 <MX_TIM17_Init+0x44>)
 8003600:	222f      	movs	r2, #47	; 0x2f
 8003602:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <MX_TIM17_Init+0x44>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 130;
 800360a:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <MX_TIM17_Init+0x44>)
 800360c:	2282      	movs	r2, #130	; 0x82
 800360e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003610:	4b09      	ldr	r3, [pc, #36]	; (8003638 <MX_TIM17_Init+0x44>)
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003616:	4b08      	ldr	r3, [pc, #32]	; (8003638 <MX_TIM17_Init+0x44>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <MX_TIM17_Init+0x44>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <MX_TIM17_Init+0x44>)
 8003624:	0018      	movs	r0, r3
 8003626:	f001 f87d 	bl	8004724 <HAL_TIM_Base_Init>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800362e:	f7fe fef5 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000738 	.word	0x20000738
 800363c:	40014800 	.word	0x40014800

08003640 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b088      	sub	sp, #32
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a45      	ldr	r2, [pc, #276]	; (8003764 <HAL_TIM_Base_MspInit+0x124>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d11e      	bne.n	8003690 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003652:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003656:	4b44      	ldr	r3, [pc, #272]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003658:	2180      	movs	r1, #128	; 0x80
 800365a:	0109      	lsls	r1, r1, #4
 800365c:	430a      	orrs	r2, r1
 800365e:	641a      	str	r2, [r3, #64]	; 0x40
 8003660:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4013      	ands	r3, r2
 800366a:	61fb      	str	r3, [r7, #28]
 800366c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	200d      	movs	r0, #13
 8003674:	f000 fa2a 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003678:	200d      	movs	r0, #13
 800367a:	f000 fa3c 	bl	8003af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800367e:	2200      	movs	r2, #0
 8003680:	2100      	movs	r1, #0
 8003682:	200e      	movs	r0, #14
 8003684:	f000 fa22 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003688:	200e      	movs	r0, #14
 800368a:	f000 fa34 	bl	8003af6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800368e:	e064      	b.n	800375a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a35      	ldr	r2, [pc, #212]	; (800376c <HAL_TIM_Base_MspInit+0x12c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10c      	bne.n	80036b4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800369a:	4b33      	ldr	r3, [pc, #204]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 800369c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800369e:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036a0:	2102      	movs	r1, #2
 80036a2:	430a      	orrs	r2, r1
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80036a6:	4b30      	ldr	r3, [pc, #192]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	69bb      	ldr	r3, [r7, #24]
}
 80036b2:	e052      	b.n	800375a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM14)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_TIM_Base_MspInit+0x130>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d116      	bne.n	80036ec <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80036be:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c2:	4b29      	ldr	r3, [pc, #164]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036c4:	2180      	movs	r1, #128	; 0x80
 80036c6:	0209      	lsls	r1, r1, #8
 80036c8:	430a      	orrs	r2, r1
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
 80036cc:	4b26      	ldr	r3, [pc, #152]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80036da:	2200      	movs	r2, #0
 80036dc:	2100      	movs	r1, #0
 80036de:	2013      	movs	r0, #19
 80036e0:	f000 f9f4 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80036e4:	2013      	movs	r0, #19
 80036e6:	f000 fa06 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 80036ea:	e036      	b.n	800375a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM16)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a20      	ldr	r2, [pc, #128]	; (8003774 <HAL_TIM_Base_MspInit+0x134>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d116      	bne.n	8003724 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036fa:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 80036fc:	2180      	movs	r1, #128	; 0x80
 80036fe:	0289      	lsls	r1, r1, #10
 8003700:	430a      	orrs	r2, r1
 8003702:	641a      	str	r2, [r3, #64]	; 0x40
 8003704:	4b18      	ldr	r3, [pc, #96]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	029b      	lsls	r3, r3, #10
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
 8003710:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8003712:	2200      	movs	r2, #0
 8003714:	2100      	movs	r1, #0
 8003716:	2015      	movs	r0, #21
 8003718:	f000 f9d8 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800371c:	2015      	movs	r0, #21
 800371e:	f000 f9ea 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 8003722:	e01a      	b.n	800375a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM17)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <HAL_TIM_Base_MspInit+0x138>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d115      	bne.n	800375a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003730:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003732:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 8003734:	2180      	movs	r1, #128	; 0x80
 8003736:	02c9      	lsls	r1, r1, #11
 8003738:	430a      	orrs	r2, r1
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
 800373c:	4b0a      	ldr	r3, [pc, #40]	; (8003768 <HAL_TIM_Base_MspInit+0x128>)
 800373e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003740:	2380      	movs	r3, #128	; 0x80
 8003742:	02db      	lsls	r3, r3, #11
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	2016      	movs	r0, #22
 8003750:	f000 f9bc 	bl	8003acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003754:	2016      	movs	r0, #22
 8003756:	f000 f9ce 	bl	8003af6 <HAL_NVIC_EnableIRQ>
}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b008      	add	sp, #32
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	40012c00 	.word	0x40012c00
 8003768:	40021000 	.word	0x40021000
 800376c:	40000400 	.word	0x40000400
 8003770:	40002000 	.word	0x40002000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800

0800377c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800377c:	480d      	ldr	r0, [pc, #52]	; (80037b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800377e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003780:	f7ff fdfe 	bl	8003380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003784:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003786:	e003      	b.n	8003790 <LoopCopyDataInit>

08003788 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800378a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800378c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800378e:	3104      	adds	r1, #4

08003790 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003790:	480a      	ldr	r0, [pc, #40]	; (80037bc <LoopForever+0xa>)
  ldr r3, =_edata
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <LoopForever+0xe>)
  adds r2, r0, r1
 8003794:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003796:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003798:	d3f6      	bcc.n	8003788 <CopyDataInit>
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <LoopForever+0x12>)
  b LoopFillZerobss
 800379c:	e002      	b.n	80037a4 <LoopFillZerobss>

0800379e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  str  r3, [r2]
 80037a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a2:	3204      	adds	r2, #4

080037a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <LoopForever+0x16>)
  cmp r2, r3
 80037a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80037a8:	d3f9      	bcc.n	800379e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80037aa:	f002 f94b 	bl	8005a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037ae:	f7fd fc7f 	bl	80010b0 <main>

080037b2 <LoopForever>:

LoopForever:
    b LoopForever
 80037b2:	e7fe      	b.n	80037b2 <LoopForever>
  ldr   r0, =_estack
 80037b4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80037b8:	08005bdc 	.word	0x08005bdc
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80037c0:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 80037c4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80037c8:	200008d0 	.word	0x200008d0

080037cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC1_IRQHandler>

080037ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037d4:	1dfb      	adds	r3, r7, #7
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037da:	2003      	movs	r0, #3
 80037dc:	f000 f80e 	bl	80037fc <HAL_InitTick>
 80037e0:	1e03      	subs	r3, r0, #0
 80037e2:	d003      	beq.n	80037ec <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e001      	b.n	80037f0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037ec:	f7ff fc34 	bl	8003058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037f0:	1dfb      	adds	r3, r7, #7
 80037f2:	781b      	ldrb	r3, [r3, #0]
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	b002      	add	sp, #8
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003804:	230f      	movs	r3, #15
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 800380c:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <HAL_InitTick+0x88>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d02b      	beq.n	800386c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8003814:	4b1c      	ldr	r3, [pc, #112]	; (8003888 <HAL_InitTick+0x8c>)
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	4b1a      	ldr	r3, [pc, #104]	; (8003884 <HAL_InitTick+0x88>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	0019      	movs	r1, r3
 800381e:	23fa      	movs	r3, #250	; 0xfa
 8003820:	0098      	lsls	r0, r3, #2
 8003822:	f7fc fc71 	bl	8000108 <__udivsi3>
 8003826:	0003      	movs	r3, r0
 8003828:	0019      	movs	r1, r3
 800382a:	0020      	movs	r0, r4
 800382c:	f7fc fc6c 	bl	8000108 <__udivsi3>
 8003830:	0003      	movs	r3, r0
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f97f 	bl	8003b36 <HAL_SYSTICK_Config>
 8003838:	1e03      	subs	r3, r0, #0
 800383a:	d112      	bne.n	8003862 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d80a      	bhi.n	8003858 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	2301      	movs	r3, #1
 8003846:	425b      	negs	r3, r3
 8003848:	2200      	movs	r2, #0
 800384a:	0018      	movs	r0, r3
 800384c:	f000 f93e 	bl	8003acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <HAL_InitTick+0x90>)
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00d      	b.n	8003874 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003858:	230f      	movs	r3, #15
 800385a:	18fb      	adds	r3, r7, r3
 800385c:	2201      	movs	r2, #1
 800385e:	701a      	strb	r2, [r3, #0]
 8003860:	e008      	b.n	8003874 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003862:	230f      	movs	r3, #15
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e003      	b.n	8003874 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800386c:	230f      	movs	r3, #15
 800386e:	18fb      	adds	r3, r7, r3
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8003874:	230f      	movs	r3, #15
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	781b      	ldrb	r3, [r3, #0]
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b005      	add	sp, #20
 8003880:	bd90      	pop	{r4, r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	20000018 	.word	0x20000018
 8003888:	20000010 	.word	0x20000010
 800388c:	20000014 	.word	0x20000014

08003890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003894:	4b05      	ldr	r3, [pc, #20]	; (80038ac <HAL_IncTick+0x1c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	001a      	movs	r2, r3
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_IncTick+0x20>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	18d2      	adds	r2, r2, r3
 80038a0:	4b03      	ldr	r3, [pc, #12]	; (80038b0 <HAL_IncTick+0x20>)
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	46c0      	nop			; (mov r8, r8)
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	20000018 	.word	0x20000018
 80038b0:	20000784 	.word	0x20000784

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b02      	ldr	r3, [pc, #8]	; (80038c4 <HAL_GetTick+0x10>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	20000784 	.word	0x20000784

080038c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d0:	f7ff fff0 	bl	80038b4 <HAL_GetTick>
 80038d4:	0003      	movs	r3, r0
 80038d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3301      	adds	r3, #1
 80038e0:	d005      	beq.n	80038ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_Delay+0x44>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	001a      	movs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	189b      	adds	r3, r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	f7ff ffe0 	bl	80038b4 <HAL_GetTick>
 80038f4:	0002      	movs	r2, r0
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d8f7      	bhi.n	80038f0 <HAL_Delay+0x28>
  {
  }
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	46bd      	mov	sp, r7
 8003906:	b004      	add	sp, #16
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20000018 	.word	0x20000018

08003910 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <HAL_SYSCFG_EnableRemap+0x1c>)
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <HAL_SYSCFG_EnableRemap+0x1c>)
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	430a      	orrs	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	46c0      	nop			; (mov r8, r8)
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40010000 	.word	0x40010000

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	0002      	movs	r2, r0
 8003938:	1dfb      	adds	r3, r7, #7
 800393a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b7f      	cmp	r3, #127	; 0x7f
 8003942:	d809      	bhi.n	8003958 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	001a      	movs	r2, r3
 800394a:	231f      	movs	r3, #31
 800394c:	401a      	ands	r2, r3
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <__NVIC_EnableIRQ+0x30>)
 8003950:	2101      	movs	r1, #1
 8003952:	4091      	lsls	r1, r2
 8003954:	000a      	movs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b7f      	cmp	r3, #127	; 0x7f
 8003976:	d810      	bhi.n	800399a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003978:	1dfb      	adds	r3, r7, #7
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	001a      	movs	r2, r3
 800397e:	231f      	movs	r3, #31
 8003980:	4013      	ands	r3, r2
 8003982:	4908      	ldr	r1, [pc, #32]	; (80039a4 <__NVIC_DisableIRQ+0x40>)
 8003984:	2201      	movs	r2, #1
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800398e:	f3bf 8f4f 	dsb	sy
}
 8003992:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8003994:	f3bf 8f6f 	isb	sy
}
 8003998:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	46bd      	mov	sp, r7
 800399e:	b002      	add	sp, #8
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	0002      	movs	r2, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	1dfb      	adds	r3, r7, #7
 80039b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b7f      	cmp	r3, #127	; 0x7f
 80039bc:	d828      	bhi.n	8003a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039be:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <__NVIC_SetPriority+0xd4>)
 80039c0:	1dfb      	adds	r3, r7, #7
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	b25b      	sxtb	r3, r3
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	33c0      	adds	r3, #192	; 0xc0
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	589b      	ldr	r3, [r3, r2]
 80039ce:	1dfa      	adds	r2, r7, #7
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	0011      	movs	r1, r2
 80039d4:	2203      	movs	r2, #3
 80039d6:	400a      	ands	r2, r1
 80039d8:	00d2      	lsls	r2, r2, #3
 80039da:	21ff      	movs	r1, #255	; 0xff
 80039dc:	4091      	lsls	r1, r2
 80039de:	000a      	movs	r2, r1
 80039e0:	43d2      	mvns	r2, r2
 80039e2:	401a      	ands	r2, r3
 80039e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	019b      	lsls	r3, r3, #6
 80039ea:	22ff      	movs	r2, #255	; 0xff
 80039ec:	401a      	ands	r2, r3
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	0018      	movs	r0, r3
 80039f4:	2303      	movs	r3, #3
 80039f6:	4003      	ands	r3, r0
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039fc:	481f      	ldr	r0, [pc, #124]	; (8003a7c <__NVIC_SetPriority+0xd4>)
 80039fe:	1dfb      	adds	r3, r7, #7
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	430a      	orrs	r2, r1
 8003a08:	33c0      	adds	r3, #192	; 0xc0
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003a0e:	e031      	b.n	8003a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <__NVIC_SetPriority+0xd8>)
 8003a12:	1dfb      	adds	r3, r7, #7
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	0019      	movs	r1, r3
 8003a18:	230f      	movs	r3, #15
 8003a1a:	400b      	ands	r3, r1
 8003a1c:	3b08      	subs	r3, #8
 8003a1e:	089b      	lsrs	r3, r3, #2
 8003a20:	3306      	adds	r3, #6
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	18d3      	adds	r3, r2, r3
 8003a26:	3304      	adds	r3, #4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1dfa      	adds	r2, r7, #7
 8003a2c:	7812      	ldrb	r2, [r2, #0]
 8003a2e:	0011      	movs	r1, r2
 8003a30:	2203      	movs	r2, #3
 8003a32:	400a      	ands	r2, r1
 8003a34:	00d2      	lsls	r2, r2, #3
 8003a36:	21ff      	movs	r1, #255	; 0xff
 8003a38:	4091      	lsls	r1, r2
 8003a3a:	000a      	movs	r2, r1
 8003a3c:	43d2      	mvns	r2, r2
 8003a3e:	401a      	ands	r2, r3
 8003a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	019b      	lsls	r3, r3, #6
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	401a      	ands	r2, r3
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	2303      	movs	r3, #3
 8003a52:	4003      	ands	r3, r0
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003a58:	4809      	ldr	r0, [pc, #36]	; (8003a80 <__NVIC_SetPriority+0xd8>)
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	001c      	movs	r4, r3
 8003a60:	230f      	movs	r3, #15
 8003a62:	4023      	ands	r3, r4
 8003a64:	3b08      	subs	r3, #8
 8003a66:	089b      	lsrs	r3, r3, #2
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	3306      	adds	r3, #6
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	18c3      	adds	r3, r0, r3
 8003a70:	3304      	adds	r3, #4
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b003      	add	sp, #12
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1e5a      	subs	r2, r3, #1
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	045b      	lsls	r3, r3, #17
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d301      	bcc.n	8003a9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e010      	b.n	8003abe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a9c:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <SysTick_Config+0x44>)
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	3a01      	subs	r2, #1
 8003aa2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	425b      	negs	r3, r3
 8003aa8:	2103      	movs	r1, #3
 8003aaa:	0018      	movs	r0, r3
 8003aac:	f7ff ff7c 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <SysTick_Config+0x44>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <SysTick_Config+0x44>)
 8003ab8:	2207      	movs	r2, #7
 8003aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b002      	add	sp, #8
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	e000e010 	.word	0xe000e010

08003acc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	1c02      	adds	r2, r0, #0
 8003adc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b25b      	sxtb	r3, r3
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b004      	add	sp, #16
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	0002      	movs	r2, r0
 8003afe:	1dfb      	adds	r3, r7, #7
 8003b00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b02:	1dfb      	adds	r3, r7, #7
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f7ff ff11 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b002      	add	sp, #8
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	1dfb      	adds	r3, r7, #7
 8003b20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b22:	1dfb      	adds	r3, r7, #7
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f7ff ff1b 	bl	8003964 <__NVIC_DisableIRQ>
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	0018      	movs	r0, r3
 8003b42:	f7ff ff9f 	bl	8003a84 <SysTick_Config>
 8003b46:	0003      	movs	r3, r0
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b002      	add	sp, #8
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b5e:	e14d      	b.n	8003dfc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2101      	movs	r1, #1
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4091      	lsls	r1, r2
 8003b6a:	000a      	movs	r2, r1
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d100      	bne.n	8003b78 <HAL_GPIO_Init+0x28>
 8003b76:	e13e      	b.n	8003df6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x38>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b12      	cmp	r3, #18
 8003b86:	d125      	bne.n	8003bd4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	08da      	lsrs	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3208      	adds	r2, #8
 8003b90:	0092      	lsls	r2, r2, #2
 8003b92:	58d3      	ldr	r3, [r2, r3]
 8003b94:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2207      	movs	r2, #7
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	220f      	movs	r2, #15
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	0013      	movs	r3, r2
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2107      	movs	r1, #7
 8003bb8:	400b      	ands	r3, r1
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	0013      	movs	r3, r2
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	08da      	lsrs	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3208      	adds	r2, #8
 8003bce:	0092      	lsls	r2, r2, #2
 8003bd0:	6979      	ldr	r1, [r7, #20]
 8003bd2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	409a      	lsls	r2, r3
 8003be2:	0013      	movs	r3, r2
 8003be4:	43da      	mvns	r2, r3
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	4013      	ands	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	0013      	movs	r3, r2
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d00b      	beq.n	8003c28 <HAL_GPIO_Init+0xd8>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d007      	beq.n	8003c28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c1c:	2b11      	cmp	r3, #17
 8003c1e:	d003      	beq.n	8003c28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b12      	cmp	r3, #18
 8003c26:	d130      	bne.n	8003c8a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2203      	movs	r2, #3
 8003c34:	409a      	lsls	r2, r3
 8003c36:	0013      	movs	r3, r2
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	0013      	movs	r3, r2
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c5e:	2201      	movs	r2, #1
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	409a      	lsls	r2, r3
 8003c64:	0013      	movs	r3, r2
 8003c66:	43da      	mvns	r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	2201      	movs	r2, #1
 8003c76:	401a      	ands	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	0013      	movs	r3, r2
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	697a      	ldr	r2, [r7, #20]
 8003c88:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d017      	beq.n	8003cc2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	43da      	mvns	r2, r3
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	409a      	lsls	r2, r3
 8003cb4:	0013      	movs	r3, r2
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	055b      	lsls	r3, r3, #21
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d100      	bne.n	8003cd0 <HAL_GPIO_Init+0x180>
 8003cce:	e092      	b.n	8003df6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003cd0:	4a50      	ldr	r2, [pc, #320]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	589b      	ldr	r3, [r3, r2]
 8003cdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	409a      	lsls	r2, r3
 8003cea:	0013      	movs	r3, r2
 8003cec:	43da      	mvns	r2, r3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	23a0      	movs	r3, #160	; 0xa0
 8003cf8:	05db      	lsls	r3, r3, #23
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d013      	beq.n	8003d26 <HAL_GPIO_Init+0x1d6>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a45      	ldr	r2, [pc, #276]	; (8003e18 <HAL_GPIO_Init+0x2c8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00d      	beq.n	8003d22 <HAL_GPIO_Init+0x1d2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a44      	ldr	r2, [pc, #272]	; (8003e1c <HAL_GPIO_Init+0x2cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d007      	beq.n	8003d1e <HAL_GPIO_Init+0x1ce>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a43      	ldr	r2, [pc, #268]	; (8003e20 <HAL_GPIO_Init+0x2d0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d101      	bne.n	8003d1a <HAL_GPIO_Init+0x1ca>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e006      	b.n	8003d28 <HAL_GPIO_Init+0x1d8>
 8003d1a:	2306      	movs	r3, #6
 8003d1c:	e004      	b.n	8003d28 <HAL_GPIO_Init+0x1d8>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_Init+0x1d8>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_GPIO_Init+0x1d8>
 8003d26:	2300      	movs	r3, #0
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	00d2      	lsls	r2, r2, #3
 8003d30:	4093      	lsls	r3, r2
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003d38:	4936      	ldr	r1, [pc, #216]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3318      	adds	r3, #24
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003d46:	4a33      	ldr	r2, [pc, #204]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	58d3      	ldr	r3, [r2, r3]
 8003d4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4013      	ands	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	4013      	ands	r3, r2
 8003d62:	d003      	beq.n	8003d6c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003d6c:	4929      	ldr	r1, [pc, #164]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003d6e:	2280      	movs	r2, #128	; 0x80
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003d74:	4a27      	ldr	r2, [pc, #156]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003d76:	2384      	movs	r3, #132	; 0x84
 8003d78:	58d3      	ldr	r3, [r2, r3]
 8003d7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	43da      	mvns	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4013      	ands	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	029b      	lsls	r3, r3, #10
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003d9a:	491e      	ldr	r1, [pc, #120]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003d9c:	2284      	movs	r2, #132	; 0x84
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003da2:	4b1c      	ldr	r3, [pc, #112]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	43da      	mvns	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4013      	ands	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	2380      	movs	r3, #128	; 0x80
 8003db8:	035b      	lsls	r3, r3, #13
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003dc6:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003dcc:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	039b      	lsls	r3, r3, #14
 8003de4:	4013      	ands	r3, r2
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003df0:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_GPIO_Init+0x2c4>)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	40da      	lsrs	r2, r3
 8003e04:	1e13      	subs	r3, r2, #0
 8003e06:	d000      	beq.n	8003e0a <HAL_GPIO_Init+0x2ba>
 8003e08:	e6aa      	b.n	8003b60 <HAL_GPIO_Init+0x10>
  }
}
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021800 	.word	0x40021800
 8003e18:	50000400 	.word	0x50000400
 8003e1c:	50000800 	.word	0x50000800
 8003e20:	50001400 	.word	0x50001400

08003e24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003e32:	e0b4      	b.n	8003f9e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003e34:	2201      	movs	r2, #1
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d100      	bne.n	8003e48 <HAL_GPIO_DeInit+0x24>
 8003e46:	e0a7      	b.n	8003f98 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8003e48:	4a5a      	ldr	r2, [pc, #360]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	089b      	lsrs	r3, r3, #2
 8003e4e:	3318      	adds	r3, #24
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	589b      	ldr	r3, [r3, r2]
 8003e54:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	220f      	movs	r2, #15
 8003e60:	409a      	lsls	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	4013      	ands	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	23a0      	movs	r3, #160	; 0xa0
 8003e6c:	05db      	lsls	r3, r3, #23
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_DeInit+0x76>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	; (8003fb8 <HAL_GPIO_DeInit+0x194>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_DeInit+0x72>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <HAL_GPIO_DeInit+0x198>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_DeInit+0x6e>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a4e      	ldr	r2, [pc, #312]	; (8003fc0 <HAL_GPIO_DeInit+0x19c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_DeInit+0x6a>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_DeInit+0x78>
 8003e8e:	2306      	movs	r3, #6
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_DeInit+0x78>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_DeInit+0x78>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_DeInit+0x78>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	00d2      	lsls	r2, r2, #3
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d136      	bne.n	8003f1a <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003eac:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	58d3      	ldr	r3, [r2, r3]
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	43d2      	mvns	r2, r2
 8003eb6:	493f      	ldr	r1, [pc, #252]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2280      	movs	r2, #128	; 0x80
 8003ebc:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003ebe:	4a3d      	ldr	r2, [pc, #244]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003ec0:	2384      	movs	r3, #132	; 0x84
 8003ec2:	58d3      	ldr	r3, [r2, r3]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	43d2      	mvns	r2, r2
 8003ec8:	493a      	ldr	r1, [pc, #232]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2284      	movs	r2, #132	; 0x84
 8003ece:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003ed0:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	43d9      	mvns	r1, r3
 8003ed8:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003eda:	400a      	ands	r2, r1
 8003edc:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003ede:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	43d9      	mvns	r1, r3
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2203      	movs	r2, #3
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	220f      	movs	r2, #15
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	0013      	movs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003efc:	4a2d      	ldr	r2, [pc, #180]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	3318      	adds	r3, #24
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	589a      	ldr	r2, [r3, r2]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	43d9      	mvns	r1, r3
 8003f0c:	4829      	ldr	r0, [pc, #164]	; (8003fb4 <HAL_GPIO_DeInit+0x190>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	400a      	ands	r2, r1
 8003f14:	3318      	adds	r3, #24
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2103      	movs	r1, #3
 8003f24:	4099      	lsls	r1, r3
 8003f26:	000b      	movs	r3, r1
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	08da      	lsrs	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	0092      	lsls	r2, r2, #2
 8003f38:	58d3      	ldr	r3, [r2, r3]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	2107      	movs	r1, #7
 8003f3e:	400a      	ands	r2, r1
 8003f40:	0092      	lsls	r2, r2, #2
 8003f42:	210f      	movs	r1, #15
 8003f44:	4091      	lsls	r1, r2
 8003f46:	000a      	movs	r2, r1
 8003f48:	43d1      	mvns	r1, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	08d2      	lsrs	r2, r2, #3
 8003f4e:	4019      	ands	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3208      	adds	r2, #8
 8003f54:	0092      	lsls	r2, r2, #2
 8003f56:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	0052      	lsls	r2, r2, #1
 8003f60:	2103      	movs	r1, #3
 8003f62:	4091      	lsls	r1, r2
 8003f64:	000a      	movs	r2, r1
 8003f66:	43d2      	mvns	r2, r2
 8003f68:	401a      	ands	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2101      	movs	r1, #1
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4091      	lsls	r1, r2
 8003f78:	000a      	movs	r2, r1
 8003f7a:	43d2      	mvns	r2, r2
 8003f7c:	401a      	ands	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	0052      	lsls	r2, r2, #1
 8003f8a:	2103      	movs	r1, #3
 8003f8c:	4091      	lsls	r1, r2
 8003f8e:	000a      	movs	r2, r1
 8003f90:	43d2      	mvns	r2, r2
 8003f92:	401a      	ands	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	40da      	lsrs	r2, r3
 8003fa4:	1e13      	subs	r3, r2, #0
 8003fa6:	d000      	beq.n	8003faa <HAL_GPIO_DeInit+0x186>
 8003fa8:	e744      	b.n	8003e34 <HAL_GPIO_DeInit+0x10>
  }
}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b006      	add	sp, #24
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40021800 	.word	0x40021800
 8003fb8:	50000400 	.word	0x50000400
 8003fbc:	50000800 	.word	0x50000800
 8003fc0:	50001400 	.word	0x50001400

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	000a      	movs	r2, r1
 8003fce:	1cbb      	adds	r3, r7, #2
 8003fd0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	1cba      	adds	r2, r7, #2
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d004      	beq.n	8003fe8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003fde:	230f      	movs	r3, #15
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e003      	b.n	8003ff0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe8:	230f      	movs	r3, #15
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	2200      	movs	r2, #0
 8003fee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003ff0:	230f      	movs	r3, #15
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	781b      	ldrb	r3, [r3, #0]
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b004      	add	sp, #16
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	0008      	movs	r0, r1
 8004008:	0011      	movs	r1, r2
 800400a:	1cbb      	adds	r3, r7, #2
 800400c:	1c02      	adds	r2, r0, #0
 800400e:	801a      	strh	r2, [r3, #0]
 8004010:	1c7b      	adds	r3, r7, #1
 8004012:	1c0a      	adds	r2, r1, #0
 8004014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004016:	1c7b      	adds	r3, r7, #1
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800401e:	1cbb      	adds	r3, r7, #2
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004026:	e003      	b.n	8004030 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004028:	1cbb      	adds	r3, r7, #2
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004030:	46c0      	nop			; (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	000a      	movs	r2, r1
 8004042:	1cbb      	adds	r3, r7, #2
 8004044:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800404c:	1cbb      	adds	r3, r7, #2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	041a      	lsls	r2, r3, #16
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	1cb9      	adds	r1, r7, #2
 800405c:	8809      	ldrh	r1, [r1, #0]
 800405e:	400b      	ands	r3, r1
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	619a      	str	r2, [r3, #24]
}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	46bd      	mov	sp, r7
 800406a:	b004      	add	sp, #16
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	0002      	movs	r2, r0
 8004078:	1dbb      	adds	r3, r7, #6
 800407a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	1dba      	adds	r2, r7, #6
 8004082:	8812      	ldrh	r2, [r2, #0]
 8004084:	4013      	ands	r3, r2
 8004086:	d008      	beq.n	800409a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004088:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800408a:	1dba      	adds	r2, r7, #6
 800408c:	8812      	ldrh	r2, [r2, #0]
 800408e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004090:	1dbb      	adds	r3, r7, #6
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	0018      	movs	r0, r3
 8004096:	f7fe f91d 	bl	80022d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	1dba      	adds	r2, r7, #6
 80040a0:	8812      	ldrh	r2, [r2, #0]
 80040a2:	4013      	ands	r3, r2
 80040a4:	d008      	beq.n	80040b8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040a6:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040a8:	1dba      	adds	r2, r7, #6
 80040aa:	8812      	ldrh	r2, [r2, #0]
 80040ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040ae:	1dbb      	adds	r3, r7, #6
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f7fe f96a 	bl	800238c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80040b8:	46c0      	nop			; (mov r8, r8)
 80040ba:	46bd      	mov	sp, r7
 80040bc:	b002      	add	sp, #8
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40021800 	.word	0x40021800

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e1d0      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	4013      	ands	r3, r2
 80040de:	d100      	bne.n	80040e2 <HAL_RCC_OscConfig+0x1e>
 80040e0:	e069      	b.n	80041b6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e2:	4bc8      	ldr	r3, [pc, #800]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2238      	movs	r2, #56	; 0x38
 80040e8:	4013      	ands	r3, r2
 80040ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d105      	bne.n	80040fe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d15d      	bne.n	80041b6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e1bc      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	025b      	lsls	r3, r3, #9
 8004106:	429a      	cmp	r2, r3
 8004108:	d107      	bne.n	800411a <HAL_RCC_OscConfig+0x56>
 800410a:	4bbe      	ldr	r3, [pc, #760]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	4bbd      	ldr	r3, [pc, #756]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004110:	2180      	movs	r1, #128	; 0x80
 8004112:	0249      	lsls	r1, r1, #9
 8004114:	430a      	orrs	r2, r1
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e020      	b.n	800415c <HAL_RCC_OscConfig+0x98>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	23a0      	movs	r3, #160	; 0xa0
 8004120:	02db      	lsls	r3, r3, #11
 8004122:	429a      	cmp	r2, r3
 8004124:	d10e      	bne.n	8004144 <HAL_RCC_OscConfig+0x80>
 8004126:	4bb7      	ldr	r3, [pc, #732]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	4bb6      	ldr	r3, [pc, #728]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800412c:	2180      	movs	r1, #128	; 0x80
 800412e:	02c9      	lsls	r1, r1, #11
 8004130:	430a      	orrs	r2, r1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	4bb3      	ldr	r3, [pc, #716]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4bb2      	ldr	r3, [pc, #712]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800413a:	2180      	movs	r1, #128	; 0x80
 800413c:	0249      	lsls	r1, r1, #9
 800413e:	430a      	orrs	r2, r1
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	e00b      	b.n	800415c <HAL_RCC_OscConfig+0x98>
 8004144:	4baf      	ldr	r3, [pc, #700]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4bae      	ldr	r3, [pc, #696]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800414a:	49af      	ldr	r1, [pc, #700]	; (8004408 <HAL_RCC_OscConfig+0x344>)
 800414c:	400a      	ands	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	4bac      	ldr	r3, [pc, #688]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	4bab      	ldr	r3, [pc, #684]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004156:	49ad      	ldr	r1, [pc, #692]	; (800440c <HAL_RCC_OscConfig+0x348>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004164:	f7ff fba6 	bl	80038b4 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800416e:	f7ff fba1 	bl	80038b4 <HAL_GetTick>
 8004172:	0002      	movs	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b64      	cmp	r3, #100	; 0x64
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e17b      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004180:	4ba0      	ldr	r3, [pc, #640]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	4013      	ands	r3, r2
 800418a:	d0f0      	beq.n	800416e <HAL_RCC_OscConfig+0xaa>
 800418c:	e013      	b.n	80041b6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418e:	f7ff fb91 	bl	80038b4 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004198:	f7ff fb8c 	bl	80038b4 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e166      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041aa:	4b96      	ldr	r3, [pc, #600]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	029b      	lsls	r3, r3, #10
 80041b2:	4013      	ands	r3, r2
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2202      	movs	r2, #2
 80041bc:	4013      	ands	r3, r2
 80041be:	d100      	bne.n	80041c2 <HAL_RCC_OscConfig+0xfe>
 80041c0:	e086      	b.n	80042d0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c2:	4b90      	ldr	r3, [pc, #576]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	2238      	movs	r2, #56	; 0x38
 80041c8:	4013      	ands	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d12f      	bne.n	8004232 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e14c      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041de:	4b89      	ldr	r3, [pc, #548]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	4a8b      	ldr	r2, [pc, #556]	; (8004410 <HAL_RCC_OscConfig+0x34c>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	0019      	movs	r1, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	021a      	lsls	r2, r3, #8
 80041ee:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80041f0:	430a      	orrs	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041fa:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a85      	ldr	r2, [pc, #532]	; (8004414 <HAL_RCC_OscConfig+0x350>)
 8004200:	4013      	ands	r3, r2
 8004202:	0019      	movs	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800420a:	430a      	orrs	r2, r1
 800420c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800420e:	4b7d      	ldr	r3, [pc, #500]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	0adb      	lsrs	r3, r3, #11
 8004214:	2207      	movs	r2, #7
 8004216:	4013      	ands	r3, r2
 8004218:	4a7f      	ldr	r2, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0x354>)
 800421a:	40da      	lsrs	r2, r3
 800421c:	4b7f      	ldr	r3, [pc, #508]	; (800441c <HAL_RCC_OscConfig+0x358>)
 800421e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004220:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <HAL_RCC_OscConfig+0x35c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0018      	movs	r0, r3
 8004226:	f7ff fae9 	bl	80037fc <HAL_InitTick>
 800422a:	1e03      	subs	r3, r0, #0
 800422c:	d050      	beq.n	80042d0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e122      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d030      	beq.n	800429c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800423a:	4b72      	ldr	r3, [pc, #456]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a75      	ldr	r2, [pc, #468]	; (8004414 <HAL_RCC_OscConfig+0x350>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	4b6e      	ldr	r3, [pc, #440]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b6c      	ldr	r3, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0049      	lsls	r1, r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7ff fb2a 	bl	80038b4 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004266:	f7ff fb25 	bl	80038b4 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0ff      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004278:	4b62      	ldr	r3, [pc, #392]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	4013      	ands	r3, r2
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b5f      	ldr	r3, [pc, #380]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4a61      	ldr	r2, [pc, #388]	; (8004410 <HAL_RCC_OscConfig+0x34c>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	021a      	lsls	r2, r3, #8
 8004294:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e019      	b.n	80042d0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800429c:	4b59      	ldr	r3, [pc, #356]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b58      	ldr	r3, [pc, #352]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80042a2:	4960      	ldr	r1, [pc, #384]	; (8004424 <HAL_RCC_OscConfig+0x360>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7ff fb04 	bl	80038b4 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80042b2:	f7ff faff 	bl	80038b4 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e0d9      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c4:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	4013      	ands	r3, r2
 80042ce:	d1f0      	bne.n	80042b2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2208      	movs	r2, #8
 80042d6:	4013      	ands	r3, r2
 80042d8:	d042      	beq.n	8004360 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2238      	movs	r2, #56	; 0x38
 80042e0:	4013      	ands	r3, r2
 80042e2:	2b18      	cmp	r3, #24
 80042e4:	d105      	bne.n	80042f2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d138      	bne.n	8004360 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0c2      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d019      	beq.n	800432e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80042fa:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80042fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004300:	2101      	movs	r1, #1
 8004302:	430a      	orrs	r2, r1
 8004304:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7ff fad5 	bl	80038b4 <HAL_GetTick>
 800430a:	0003      	movs	r3, r0
 800430c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004310:	f7ff fad0 	bl	80038b4 <HAL_GetTick>
 8004314:	0002      	movs	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b02      	cmp	r3, #2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e0aa      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004322:	4b38      	ldr	r3, [pc, #224]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004326:	2202      	movs	r2, #2
 8004328:	4013      	ands	r3, r2
 800432a:	d0f1      	beq.n	8004310 <HAL_RCC_OscConfig+0x24c>
 800432c:	e018      	b.n	8004360 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800432e:	4b35      	ldr	r3, [pc, #212]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004330:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004334:	2101      	movs	r1, #1
 8004336:	438a      	bics	r2, r1
 8004338:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7ff fabb 	bl	80038b4 <HAL_GetTick>
 800433e:	0003      	movs	r3, r0
 8004340:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004344:	f7ff fab6 	bl	80038b4 <HAL_GetTick>
 8004348:	0002      	movs	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e090      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004356:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435a:	2202      	movs	r2, #2
 800435c:	4013      	ands	r3, r2
 800435e:	d1f1      	bne.n	8004344 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2204      	movs	r2, #4
 8004366:	4013      	ands	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_RCC_OscConfig+0x2a8>
 800436a:	e084      	b.n	8004476 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800436c:	230f      	movs	r3, #15
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004374:	4b23      	ldr	r3, [pc, #140]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2238      	movs	r2, #56	; 0x38
 800437a:	4013      	ands	r3, r2
 800437c:	2b20      	cmp	r3, #32
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d000      	beq.n	800438a <HAL_RCC_OscConfig+0x2c6>
 8004388:	e075      	b.n	8004476 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e074      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d106      	bne.n	80043a4 <HAL_RCC_OscConfig+0x2e0>
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 8004398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 800439c:	2101      	movs	r1, #1
 800439e:	430a      	orrs	r2, r1
 80043a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80043a2:	e01c      	b.n	80043de <HAL_RCC_OscConfig+0x31a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d10c      	bne.n	80043c6 <HAL_RCC_OscConfig+0x302>
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043b2:	2104      	movs	r1, #4
 80043b4:	430a      	orrs	r2, r1
 80043b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80043b8:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043be:	2101      	movs	r1, #1
 80043c0:	430a      	orrs	r2, r1
 80043c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043c4:	e00b      	b.n	80043de <HAL_RCC_OscConfig+0x31a>
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ca:	4b0e      	ldr	r3, [pc, #56]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	438a      	bics	r2, r1
 80043d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x340>)
 80043d8:	2104      	movs	r1, #4
 80043da:	438a      	bics	r2, r1
 80043dc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d028      	beq.n	8004438 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7ff fa65 	bl	80038b4 <HAL_GetTick>
 80043ea:	0003      	movs	r3, r0
 80043ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80043ee:	e01d      	b.n	800442c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7ff fa60 	bl	80038b4 <HAL_GetTick>
 80043f4:	0002      	movs	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	4a0b      	ldr	r2, [pc, #44]	; (8004428 <HAL_RCC_OscConfig+0x364>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d915      	bls.n	800442c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e039      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
 8004404:	40021000 	.word	0x40021000
 8004408:	fffeffff 	.word	0xfffeffff
 800440c:	fffbffff 	.word	0xfffbffff
 8004410:	ffff80ff 	.word	0xffff80ff
 8004414:	ffffc7ff 	.word	0xffffc7ff
 8004418:	02dc6c00 	.word	0x02dc6c00
 800441c:	20000010 	.word	0x20000010
 8004420:	20000014 	.word	0x20000014
 8004424:	fffffeff 	.word	0xfffffeff
 8004428:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_RCC_OscConfig+0x3bc>)
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	2202      	movs	r2, #2
 8004432:	4013      	ands	r3, r2
 8004434:	d0dc      	beq.n	80043f0 <HAL_RCC_OscConfig+0x32c>
 8004436:	e013      	b.n	8004460 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7ff fa3c 	bl	80038b4 <HAL_GetTick>
 800443c:	0003      	movs	r3, r0
 800443e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004440:	e009      	b.n	8004456 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7ff fa37 	bl	80038b4 <HAL_GetTick>
 8004446:	0002      	movs	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	4a0d      	ldr	r2, [pc, #52]	; (8004484 <HAL_RCC_OscConfig+0x3c0>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e010      	b.n	8004478 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCC_OscConfig+0x3bc>)
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	2202      	movs	r2, #2
 800445c:	4013      	ands	r3, r2
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004460:	230f      	movs	r3, #15
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_OscConfig+0x3bc>)
 800446c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_RCC_OscConfig+0x3bc>)
 8004470:	4905      	ldr	r1, [pc, #20]	; (8004488 <HAL_RCC_OscConfig+0x3c4>)
 8004472:	400a      	ands	r2, r1
 8004474:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b006      	add	sp, #24
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40021000 	.word	0x40021000
 8004484:	00001388 	.word	0x00001388
 8004488:	efffffff 	.word	0xefffffff

0800448c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0e9      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b76      	ldr	r3, [pc, #472]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2207      	movs	r2, #7
 80044a6:	4013      	ands	r3, r2
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d91e      	bls.n	80044ec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b73      	ldr	r3, [pc, #460]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2207      	movs	r2, #7
 80044b4:	4393      	bics	r3, r2
 80044b6:	0019      	movs	r1, r3
 80044b8:	4b70      	ldr	r3, [pc, #448]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044c0:	f7ff f9f8 	bl	80038b4 <HAL_GetTick>
 80044c4:	0003      	movs	r3, r0
 80044c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044c8:	e009      	b.n	80044de <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80044ca:	f7ff f9f3 	bl	80038b4 <HAL_GetTick>
 80044ce:	0002      	movs	r2, r0
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	4a6a      	ldr	r2, [pc, #424]	; (8004680 <HAL_RCC_ClockConfig+0x1f4>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e0ca      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044de:	4b67      	ldr	r3, [pc, #412]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2207      	movs	r2, #7
 80044e4:	4013      	ands	r3, r2
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1ee      	bne.n	80044ca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2202      	movs	r2, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	d017      	beq.n	8004526 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2204      	movs	r2, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	d008      	beq.n	8004512 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004500:	4b60      	ldr	r3, [pc, #384]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a60      	ldr	r2, [pc, #384]	; (8004688 <HAL_RCC_ClockConfig+0x1fc>)
 8004506:	401a      	ands	r2, r3
 8004508:	4b5e      	ldr	r3, [pc, #376]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800450a:	21b0      	movs	r1, #176	; 0xb0
 800450c:	0109      	lsls	r1, r1, #4
 800450e:	430a      	orrs	r2, r1
 8004510:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004512:	4b5c      	ldr	r3, [pc, #368]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	4a5d      	ldr	r2, [pc, #372]	; (800468c <HAL_RCC_ClockConfig+0x200>)
 8004518:	4013      	ands	r3, r2
 800451a:	0019      	movs	r1, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	4b58      	ldr	r3, [pc, #352]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2201      	movs	r2, #1
 800452c:	4013      	ands	r3, r2
 800452e:	d055      	beq.n	80045dc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004530:	4b54      	ldr	r3, [pc, #336]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	221c      	movs	r2, #28
 8004536:	4393      	bics	r3, r2
 8004538:	0019      	movs	r1, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689a      	ldr	r2, [r3, #8]
 800453e:	4b51      	ldr	r3, [pc, #324]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004540:	430a      	orrs	r2, r1
 8004542:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d107      	bne.n	800455c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800454c:	4b4d      	ldr	r3, [pc, #308]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	029b      	lsls	r3, r3, #10
 8004554:	4013      	ands	r3, r2
 8004556:	d11f      	bne.n	8004598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e08b      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d107      	bne.n	8004574 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004564:	4b47      	ldr	r3, [pc, #284]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4013      	ands	r3, r2
 800456e:	d113      	bne.n	8004598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e07f      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b03      	cmp	r3, #3
 800457a:	d106      	bne.n	800458a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800457c:	4b41      	ldr	r3, [pc, #260]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800457e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d108      	bne.n	8004598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e074      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800458a:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800458c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458e:	2202      	movs	r2, #2
 8004590:	4013      	ands	r3, r2
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e06d      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004598:	4b3a      	ldr	r3, [pc, #232]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2207      	movs	r2, #7
 800459e:	4393      	bics	r3, r2
 80045a0:	0019      	movs	r1, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	4b37      	ldr	r3, [pc, #220]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 80045a8:	430a      	orrs	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ac:	f7ff f982 	bl	80038b4 <HAL_GetTick>
 80045b0:	0003      	movs	r3, r0
 80045b2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b4:	e009      	b.n	80045ca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80045b6:	f7ff f97d 	bl	80038b4 <HAL_GetTick>
 80045ba:	0002      	movs	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	4a2f      	ldr	r2, [pc, #188]	; (8004680 <HAL_RCC_ClockConfig+0x1f4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e054      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2238      	movs	r2, #56	; 0x38
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	429a      	cmp	r2, r3
 80045da:	d1ec      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2207      	movs	r2, #7
 80045e2:	4013      	ands	r3, r2
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d21e      	bcs.n	8004628 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b24      	ldr	r3, [pc, #144]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2207      	movs	r2, #7
 80045f0:	4393      	bics	r3, r2
 80045f2:	0019      	movs	r1, r3
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045fc:	f7ff f95a 	bl	80038b4 <HAL_GetTick>
 8004600:	0003      	movs	r3, r0
 8004602:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004604:	e009      	b.n	800461a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004606:	f7ff f955 	bl	80038b4 <HAL_GetTick>
 800460a:	0002      	movs	r2, r0
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e02c      	b.n	8004674 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_RCC_ClockConfig+0x1f0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2207      	movs	r2, #7
 8004620:	4013      	ands	r3, r2
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d1ee      	bne.n	8004606 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2204      	movs	r2, #4
 800462e:	4013      	ands	r3, r2
 8004630:	d009      	beq.n	8004646 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004632:	4b14      	ldr	r3, [pc, #80]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_RCC_ClockConfig+0x204>)
 8004638:	4013      	ands	r3, r2
 800463a:	0019      	movs	r1, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004646:	f000 f82b 	bl	80046a0 <HAL_RCC_GetSysClockFreq>
 800464a:	0001      	movs	r1, r0
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <HAL_RCC_ClockConfig+0x1f8>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	220f      	movs	r2, #15
 8004654:	401a      	ands	r2, r3
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <HAL_RCC_ClockConfig+0x208>)
 8004658:	0092      	lsls	r2, r2, #2
 800465a:	58d3      	ldr	r3, [r2, r3]
 800465c:	221f      	movs	r2, #31
 800465e:	4013      	ands	r3, r2
 8004660:	000a      	movs	r2, r1
 8004662:	40da      	lsrs	r2, r3
 8004664:	4b0c      	ldr	r3, [pc, #48]	; (8004698 <HAL_RCC_ClockConfig+0x20c>)
 8004666:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <HAL_RCC_ClockConfig+0x210>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0018      	movs	r0, r3
 800466e:	f7ff f8c5 	bl	80037fc <HAL_InitTick>
 8004672:	0003      	movs	r3, r0
}
 8004674:	0018      	movs	r0, r3
 8004676:	46bd      	mov	sp, r7
 8004678:	b004      	add	sp, #16
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40022000 	.word	0x40022000
 8004680:	00001388 	.word	0x00001388
 8004684:	40021000 	.word	0x40021000
 8004688:	ffff84ff 	.word	0xffff84ff
 800468c:	fffff0ff 	.word	0xfffff0ff
 8004690:	ffff8fff 	.word	0xffff8fff
 8004694:	08005b40 	.word	0x08005b40
 8004698:	20000010 	.word	0x20000010
 800469c:	20000014 	.word	0x20000014

080046a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_GetSysClockFreq+0x78>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2238      	movs	r2, #56	; 0x38
 80046ac:	4013      	ands	r3, r2
 80046ae:	d10f      	bne.n	80046d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCC_GetSysClockFreq+0x78>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	0adb      	lsrs	r3, r3, #11
 80046b6:	2207      	movs	r2, #7
 80046b8:	4013      	ands	r3, r2
 80046ba:	2201      	movs	r2, #1
 80046bc:	409a      	lsls	r2, r3
 80046be:	0013      	movs	r3, r2
 80046c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	4815      	ldr	r0, [pc, #84]	; (800471c <HAL_RCC_GetSysClockFreq+0x7c>)
 80046c6:	f7fb fd1f 	bl	8000108 <__udivsi3>
 80046ca:	0003      	movs	r3, r0
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	e01e      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80046d0:	4b11      	ldr	r3, [pc, #68]	; (8004718 <HAL_RCC_GetSysClockFreq+0x78>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2238      	movs	r2, #56	; 0x38
 80046d6:	4013      	ands	r3, r2
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d102      	bne.n	80046e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046dc:	4b10      	ldr	r3, [pc, #64]	; (8004720 <HAL_RCC_GetSysClockFreq+0x80>)
 80046de:	607b      	str	r3, [r7, #4]
 80046e0:	e015      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <HAL_RCC_GetSysClockFreq+0x78>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2238      	movs	r2, #56	; 0x38
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d103      	bne.n	80046f6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80046ee:	2380      	movs	r3, #128	; 0x80
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	607b      	str	r3, [r7, #4]
 80046f4:	e00b      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80046f6:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_RCC_GetSysClockFreq+0x78>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2238      	movs	r2, #56	; 0x38
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b18      	cmp	r3, #24
 8004700:	d103      	bne.n	800470a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004702:	23fa      	movs	r3, #250	; 0xfa
 8004704:	01db      	lsls	r3, r3, #7
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e001      	b.n	800470e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800470e:	687b      	ldr	r3, [r7, #4]
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b002      	add	sp, #8
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	02dc6c00 	.word	0x02dc6c00
 8004720:	007a1200 	.word	0x007a1200

08004724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e04a      	b.n	80047cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	223d      	movs	r2, #61	; 0x3d
 800473a:	5c9b      	ldrb	r3, [r3, r2]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	223c      	movs	r2, #60	; 0x3c
 8004746:	2100      	movs	r1, #0
 8004748:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fe ff77 	bl	8003640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	223d      	movs	r2, #61	; 0x3d
 8004756:	2102      	movs	r1, #2
 8004758:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	0019      	movs	r1, r3
 8004764:	0010      	movs	r0, r2
 8004766:	f000 fbdb 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2248      	movs	r2, #72	; 0x48
 800476e:	2101      	movs	r1, #1
 8004770:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	223e      	movs	r2, #62	; 0x3e
 8004776:	2101      	movs	r1, #1
 8004778:	5499      	strb	r1, [r3, r2]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	223f      	movs	r2, #63	; 0x3f
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2241      	movs	r2, #65	; 0x41
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2242      	movs	r2, #66	; 0x42
 8004796:	2101      	movs	r1, #1
 8004798:	5499      	strb	r1, [r3, r2]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2243      	movs	r2, #67	; 0x43
 800479e:	2101      	movs	r1, #1
 80047a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2244      	movs	r2, #68	; 0x44
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2245      	movs	r2, #69	; 0x45
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2246      	movs	r2, #70	; 0x46
 80047b6:	2101      	movs	r1, #1
 80047b8:	5499      	strb	r1, [r3, r2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2247      	movs	r2, #71	; 0x47
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	223d      	movs	r2, #61	; 0x3d
 80047c6:	2101      	movs	r1, #1
 80047c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	223d      	movs	r2, #61	; 0x3d
 80047e0:	5c9b      	ldrb	r3, [r3, r2]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d001      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e037      	b.n	800485c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	223d      	movs	r2, #61	; 0x3d
 80047f0:	2102      	movs	r1, #2
 80047f2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68da      	ldr	r2, [r3, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2101      	movs	r1, #1
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a16      	ldr	r2, [pc, #88]	; (8004864 <HAL_TIM_Base_Start_IT+0x90>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d004      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0x44>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a15      	ldr	r2, [pc, #84]	; (8004868 <HAL_TIM_Base_Start_IT+0x94>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d116      	bne.n	8004846 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	4a13      	ldr	r2, [pc, #76]	; (800486c <HAL_TIM_Base_Start_IT+0x98>)
 8004820:	4013      	ands	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b06      	cmp	r3, #6
 8004828:	d016      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x84>
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	025b      	lsls	r3, r3, #9
 8004830:	429a      	cmp	r2, r3
 8004832:	d011      	beq.n	8004858 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2101      	movs	r1, #1
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	e008      	b.n	8004858 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	e000      	b.n	800485a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	0018      	movs	r0, r3
 800485e:	46bd      	mov	sp, r7
 8004860:	b004      	add	sp, #16
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40012c00 	.word	0x40012c00
 8004868:	40000400 	.word	0x40000400
 800486c:	00010007 	.word	0x00010007

08004870 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e04a      	b.n	8004918 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	223d      	movs	r2, #61	; 0x3d
 8004886:	5c9b      	ldrb	r3, [r3, r2]
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	223c      	movs	r2, #60	; 0x3c
 8004892:	2100      	movs	r1, #0
 8004894:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	0018      	movs	r0, r3
 800489a:	f000 f841 	bl	8004920 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	223d      	movs	r2, #61	; 0x3d
 80048a2:	2102      	movs	r1, #2
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3304      	adds	r3, #4
 80048ae:	0019      	movs	r1, r3
 80048b0:	0010      	movs	r0, r2
 80048b2:	f000 fb35 	bl	8004f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2248      	movs	r2, #72	; 0x48
 80048ba:	2101      	movs	r1, #1
 80048bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	223e      	movs	r2, #62	; 0x3e
 80048c2:	2101      	movs	r1, #1
 80048c4:	5499      	strb	r1, [r3, r2]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	223f      	movs	r2, #63	; 0x3f
 80048ca:	2101      	movs	r1, #1
 80048cc:	5499      	strb	r1, [r3, r2]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2240      	movs	r2, #64	; 0x40
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2241      	movs	r2, #65	; 0x41
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2242      	movs	r2, #66	; 0x42
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2243      	movs	r2, #67	; 0x43
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2244      	movs	r2, #68	; 0x44
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2245      	movs	r2, #69	; 0x45
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2246      	movs	r2, #70	; 0x46
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2247      	movs	r2, #71	; 0x47
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	223d      	movs	r2, #61	; 0x3d
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004928:	46c0      	nop			; (mov r8, r8)
 800492a:	46bd      	mov	sp, r7
 800492c:	b002      	add	sp, #8
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e042      	b.n	80049ca <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	223d      	movs	r2, #61	; 0x3d
 8004948:	5c9b      	ldrb	r3, [r3, r2]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d107      	bne.n	8004960 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	223c      	movs	r2, #60	; 0x3c
 8004954:	2100      	movs	r1, #0
 8004956:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f839 	bl	80049d2 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	223d      	movs	r2, #61	; 0x3d
 8004964:	2102      	movs	r1, #2
 8004966:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	0019      	movs	r1, r3
 8004972:	0010      	movs	r0, r2
 8004974:	f000 fad4 	bl	8004f20 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2108      	movs	r1, #8
 8004984:	438a      	bics	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2248      	movs	r2, #72	; 0x48
 800499c:	2101      	movs	r1, #1
 800499e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	223e      	movs	r2, #62	; 0x3e
 80049a4:	2101      	movs	r1, #1
 80049a6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	223f      	movs	r2, #63	; 0x3f
 80049ac:	2101      	movs	r1, #1
 80049ae:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2244      	movs	r2, #68	; 0x44
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2245      	movs	r2, #69	; 0x45
 80049bc:	2101      	movs	r1, #1
 80049be:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	223d      	movs	r2, #61	; 0x3d
 80049c4:	2101      	movs	r1, #1
 80049c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b002      	add	sp, #8
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2202      	movs	r2, #2
 8004a00:	4013      	ands	r3, r2
 8004a02:	d021      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2202      	movs	r2, #2
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d01d      	beq.n	8004a48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2203      	movs	r2, #3
 8004a12:	4252      	negs	r2, r2
 8004a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2203      	movs	r2, #3
 8004a24:	4013      	ands	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fa60 	bl	8004ef0 <HAL_TIM_IC_CaptureCallback>
 8004a30:	e007      	b.n	8004a42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fa53 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	0018      	movs	r0, r3
 8004a3e:	f000 fa5f 	bl	8004f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d022      	beq.n	8004a96 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2204      	movs	r2, #4
 8004a54:	4013      	ands	r3, r2
 8004a56:	d01e      	beq.n	8004a96 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2205      	movs	r2, #5
 8004a5e:	4252      	negs	r2, r2
 8004a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2202      	movs	r2, #2
 8004a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	23c0      	movs	r3, #192	; 0xc0
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4013      	ands	r3, r2
 8004a74:	d004      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f000 fa39 	bl	8004ef0 <HAL_TIM_IC_CaptureCallback>
 8004a7e:	e007      	b.n	8004a90 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 fa2c 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fa38 	bl	8004f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d021      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2209      	movs	r2, #9
 8004aac:	4252      	negs	r2, r2
 8004aae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2203      	movs	r2, #3
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 fa13 	bl	8004ef0 <HAL_TIM_IC_CaptureCallback>
 8004aca:	e007      	b.n	8004adc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	0018      	movs	r0, r3
 8004ad0:	f000 fa06 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fa12 	bl	8004f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2210      	movs	r2, #16
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	d022      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2210      	movs	r2, #16
 8004aee:	4013      	ands	r3, r2
 8004af0:	d01e      	beq.n	8004b30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2211      	movs	r2, #17
 8004af8:	4252      	negs	r2, r2
 8004afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2208      	movs	r2, #8
 8004b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69da      	ldr	r2, [r3, #28]
 8004b08:	23c0      	movs	r3, #192	; 0xc0
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d004      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	0018      	movs	r0, r3
 8004b14:	f000 f9ec 	bl	8004ef0 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e007      	b.n	8004b2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0018      	movs	r0, r3
 8004b1e:	f000 f9df 	bl	8004ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f9eb 	bl	8004f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2201      	movs	r2, #1
 8004b34:	4013      	ands	r3, r2
 8004b36:	d00c      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	d008      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2202      	movs	r2, #2
 8004b46:	4252      	negs	r2, r2
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	f7fd fb5f 	bl	8002210 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2280      	movs	r2, #128	; 0x80
 8004b56:	4013      	ands	r3, r2
 8004b58:	d00c      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	4013      	ands	r3, r2
 8004b60:	d008      	beq.n	8004b74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2281      	movs	r2, #129	; 0x81
 8004b68:	4252      	negs	r2, r2
 8004b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 fe7a 	bl	8005868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d00b      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2280      	movs	r2, #128	; 0x80
 8004b82:	4013      	ands	r3, r2
 8004b84:	d007      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_TIM_IRQHandler+0x200>)
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fe71 	bl	8005878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2240      	movs	r2, #64	; 0x40
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2240      	movs	r2, #64	; 0x40
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	d008      	beq.n	8004bb8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2241      	movs	r2, #65	; 0x41
 8004bac:	4252      	negs	r2, r2
 8004bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f000 f9ac 	bl	8004f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d00c      	beq.n	8004bda <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d008      	beq.n	8004bda <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2221      	movs	r2, #33	; 0x21
 8004bce:	4252      	negs	r2, r2
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	0018      	movs	r0, r3
 8004bd6:	f000 fe3f 	bl	8005858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b004      	add	sp, #16
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	fffffeff 	.word	0xfffffeff

08004be8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2317      	movs	r3, #23
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	223c      	movs	r2, #60	; 0x3c
 8004c00:	5c9b      	ldrb	r3, [r3, r2]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_TIM_OC_ConfigChannel+0x22>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e048      	b.n	8004c9c <HAL_TIM_OC_ConfigChannel+0xb4>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	223c      	movs	r2, #60	; 0x3c
 8004c0e:	2101      	movs	r1, #1
 8004c10:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b14      	cmp	r3, #20
 8004c16:	d835      	bhi.n	8004c84 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	009a      	lsls	r2, r3, #2
 8004c1c:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	0011      	movs	r1, r2
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f000 f9e3 	bl	8004ff8 <TIM_OC1_SetConfig>
      break;
 8004c32:	e02c      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	0011      	movs	r1, r2
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f000 fa5b 	bl	80050f8 <TIM_OC2_SetConfig>
      break;
 8004c42:	e024      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f000 fad1 	bl	80051f4 <TIM_OC3_SetConfig>
      break;
 8004c52:	e01c      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	0018      	movs	r0, r3
 8004c5e:	f000 fb4b 	bl	80052f8 <TIM_OC4_SetConfig>
      break;
 8004c62:	e014      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 fba7 	bl	80053c0 <TIM_OC5_SetConfig>
      break;
 8004c72:	e00c      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	0011      	movs	r1, r2
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 fbf9 	bl	8005474 <TIM_OC6_SetConfig>
      break;
 8004c82:	e004      	b.n	8004c8e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004c84:	2317      	movs	r3, #23
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
      break;
 8004c8c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	223c      	movs	r2, #60	; 0x3c
 8004c92:	2100      	movs	r1, #0
 8004c94:	5499      	strb	r1, [r3, r2]

  return status;
 8004c96:	2317      	movs	r3, #23
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	781b      	ldrb	r3, [r3, #0]
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	08005b80 	.word	0x08005b80

08004ca8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb2:	230f      	movs	r3, #15
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	223c      	movs	r2, #60	; 0x3c
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_ConfigClockSource+0x20>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	e0bc      	b.n	8004e42 <HAL_TIM_ConfigClockSource+0x19a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	223c      	movs	r2, #60	; 0x3c
 8004ccc:	2101      	movs	r1, #1
 8004cce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	223d      	movs	r2, #61	; 0x3d
 8004cd4:	2102      	movs	r1, #2
 8004cd6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4a5a      	ldr	r2, [pc, #360]	; (8004e4c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	4a59      	ldr	r2, [pc, #356]	; (8004e50 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2280      	movs	r2, #128	; 0x80
 8004cfe:	0192      	lsls	r2, r2, #6
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d040      	beq.n	8004d86 <HAL_TIM_ConfigClockSource+0xde>
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	0192      	lsls	r2, r2, #6
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d900      	bls.n	8004d0e <HAL_TIM_ConfigClockSource+0x66>
 8004d0c:	e088      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	0152      	lsls	r2, r2, #5
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d100      	bne.n	8004d18 <HAL_TIM_ConfigClockSource+0x70>
 8004d16:	e088      	b.n	8004e2a <HAL_TIM_ConfigClockSource+0x182>
 8004d18:	2280      	movs	r2, #128	; 0x80
 8004d1a:	0152      	lsls	r2, r2, #5
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d900      	bls.n	8004d22 <HAL_TIM_ConfigClockSource+0x7a>
 8004d20:	e07e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d22:	2b70      	cmp	r3, #112	; 0x70
 8004d24:	d018      	beq.n	8004d58 <HAL_TIM_ConfigClockSource+0xb0>
 8004d26:	d900      	bls.n	8004d2a <HAL_TIM_ConfigClockSource+0x82>
 8004d28:	e07a      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d2a:	2b60      	cmp	r3, #96	; 0x60
 8004d2c:	d04f      	beq.n	8004dce <HAL_TIM_ConfigClockSource+0x126>
 8004d2e:	d900      	bls.n	8004d32 <HAL_TIM_ConfigClockSource+0x8a>
 8004d30:	e076      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d32:	2b50      	cmp	r3, #80	; 0x50
 8004d34:	d03b      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x106>
 8004d36:	d900      	bls.n	8004d3a <HAL_TIM_ConfigClockSource+0x92>
 8004d38:	e072      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d3a:	2b40      	cmp	r3, #64	; 0x40
 8004d3c:	d057      	beq.n	8004dee <HAL_TIM_ConfigClockSource+0x146>
 8004d3e:	d900      	bls.n	8004d42 <HAL_TIM_ConfigClockSource+0x9a>
 8004d40:	e06e      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d42:	2b30      	cmp	r3, #48	; 0x30
 8004d44:	d063      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x166>
 8004d46:	d86b      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d060      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x166>
 8004d4c:	d868      	bhi.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d05d      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x166>
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d05b      	beq.n	8004e0e <HAL_TIM_ConfigClockSource+0x166>
 8004d56:	e063      	b.n	8004e20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	f000 fcf4 	bl	8005754 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2277      	movs	r2, #119	; 0x77
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
      break;
 8004d84:	e052      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	f000 fcdd 	bl	8005754 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2180      	movs	r1, #128	; 0x80
 8004da6:	01c9      	lsls	r1, r1, #7
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
      break;
 8004dac:	e03e      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dba:	001a      	movs	r2, r3
 8004dbc:	f000 fc4e 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2150      	movs	r1, #80	; 0x50
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f000 fca8 	bl	800571c <TIM_ITRx_SetConfig>
      break;
 8004dcc:	e02e      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dda:	001a      	movs	r2, r3
 8004ddc:	f000 fc6c 	bl	80056b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2160      	movs	r1, #96	; 0x60
 8004de6:	0018      	movs	r0, r3
 8004de8:	f000 fc98 	bl	800571c <TIM_ITRx_SetConfig>
      break;
 8004dec:	e01e      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfa:	001a      	movs	r2, r3
 8004dfc:	f000 fc2e 	bl	800565c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2140      	movs	r1, #64	; 0x40
 8004e06:	0018      	movs	r0, r3
 8004e08:	f000 fc88 	bl	800571c <TIM_ITRx_SetConfig>
      break;
 8004e0c:	e00e      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	0019      	movs	r1, r3
 8004e18:	0010      	movs	r0, r2
 8004e1a:	f000 fc7f 	bl	800571c <TIM_ITRx_SetConfig>
      break;
 8004e1e:	e005      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e20:	230f      	movs	r3, #15
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
      break;
 8004e28:	e000      	b.n	8004e2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e2a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	223d      	movs	r2, #61	; 0x3d
 8004e30:	2101      	movs	r1, #1
 8004e32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	223c      	movs	r2, #60	; 0x3c
 8004e38:	2100      	movs	r1, #0
 8004e3a:	5499      	strb	r1, [r3, r2]

  return status;
 8004e3c:	230f      	movs	r3, #15
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	781b      	ldrb	r3, [r3, #0]
}
 8004e42:	0018      	movs	r0, r3
 8004e44:	46bd      	mov	sp, r7
 8004e46:	b004      	add	sp, #16
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	46c0      	nop			; (mov r8, r8)
 8004e4c:	ffceff88 	.word	0xffceff88
 8004e50:	ffff00ff 	.word	0xffff00ff

08004e54 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	223c      	movs	r2, #60	; 0x3c
 8004e62:	5c9b      	ldrb	r3, [r3, r2]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIM_SlaveConfigSynchro+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e032      	b.n	8004ed2 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	223c      	movs	r2, #60	; 0x3c
 8004e70:	2101      	movs	r1, #1
 8004e72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	223d      	movs	r2, #61	; 0x3d
 8004e78:	2102      	movs	r1, #2
 8004e7a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	0011      	movs	r1, r2
 8004e82:	0018      	movs	r0, r3
 8004e84:	f000 fb54 	bl	8005530 <TIM_SlaveTimer_SetConfig>
 8004e88:	1e03      	subs	r3, r0, #0
 8004e8a:	d009      	beq.n	8004ea0 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	223d      	movs	r2, #61	; 0x3d
 8004e90:	2101      	movs	r1, #1
 8004e92:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	223c      	movs	r2, #60	; 0x3c
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e018      	b.n	8004ed2 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2140      	movs	r1, #64	; 0x40
 8004eac:	438a      	bics	r2, r1
 8004eae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4908      	ldr	r1, [pc, #32]	; (8004edc <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004ebc:	400a      	ands	r2, r1
 8004ebe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	223d      	movs	r2, #61	; 0x3d
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	223c      	movs	r2, #60	; 0x3c
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b002      	add	sp, #8
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	ffffbfff 	.word	0xffffbfff

08004ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ef8:	46c0      	nop			; (mov r8, r8)
 8004efa:	46bd      	mov	sp, r7
 8004efc:	b002      	add	sp, #8
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b002      	add	sp, #8
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	b002      	add	sp, #8
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0x20>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a2a      	ldr	r2, [pc, #168]	; (8004fe4 <TIM_Base_SetConfig+0xc4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d108      	bne.n	8004f52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2270      	movs	r2, #112	; 0x70
 8004f44:	4393      	bics	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <TIM_Base_SetConfig+0xc4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <TIM_Base_SetConfig+0xc8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <TIM_Base_SetConfig+0xcc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0x5a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <TIM_Base_SetConfig+0xd0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <TIM_Base_SetConfig+0xd4>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2280      	movs	r2, #128	; 0x80
 8004f90:	4393      	bics	r3, r2
 8004f92:	001a      	movs	r2, r3
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a0a      	ldr	r2, [pc, #40]	; (8004fe0 <TIM_Base_SetConfig+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xaa>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <TIM_Base_SetConfig+0xcc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xaa>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <TIM_Base_SetConfig+0xd0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d103      	bne.n	8004fd2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	615a      	str	r2, [r3, #20]
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b004      	add	sp, #16
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40002000 	.word	0x40002000
 8004fec:	40014400 	.word	0x40014400
 8004ff0:	40014800 	.word	0x40014800
 8004ff4:	fffffcff 	.word	0xfffffcff

08004ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	2201      	movs	r2, #1
 800500e:	4393      	bics	r3, r2
 8005010:	001a      	movs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a2e      	ldr	r2, [pc, #184]	; (80050e0 <TIM_OC1_SetConfig+0xe8>)
 8005026:	4013      	ands	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2203      	movs	r2, #3
 800502e:	4393      	bics	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4313      	orrs	r3, r2
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2202      	movs	r2, #2
 8005040:	4393      	bics	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a24      	ldr	r2, [pc, #144]	; (80050e4 <TIM_OC1_SetConfig+0xec>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <TIM_OC1_SetConfig+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a23      	ldr	r2, [pc, #140]	; (80050e8 <TIM_OC1_SetConfig+0xf0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d003      	beq.n	8005066 <TIM_OC1_SetConfig+0x6e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a22      	ldr	r2, [pc, #136]	; (80050ec <TIM_OC1_SetConfig+0xf4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2208      	movs	r2, #8
 800506a:	4393      	bics	r3, r2
 800506c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	4313      	orrs	r3, r2
 8005076:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2204      	movs	r2, #4
 800507c:	4393      	bics	r3, r2
 800507e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <TIM_OC1_SetConfig+0xec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_OC1_SetConfig+0xa0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a17      	ldr	r2, [pc, #92]	; (80050e8 <TIM_OC1_SetConfig+0xf0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_OC1_SetConfig+0xa0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a16      	ldr	r2, [pc, #88]	; (80050ec <TIM_OC1_SetConfig+0xf4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d111      	bne.n	80050bc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <TIM_OC1_SetConfig+0xf8>)
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <TIM_OC1_SetConfig+0xfc>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	46bd      	mov	sp, r7
 80050da:	b006      	add	sp, #24
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	fffeff8f 	.word	0xfffeff8f
 80050e4:	40012c00 	.word	0x40012c00
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	fffffeff 	.word	0xfffffeff
 80050f4:	fffffdff 	.word	0xfffffdff

080050f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	2210      	movs	r2, #16
 800510e:	4393      	bics	r3, r2
 8005110:	001a      	movs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a2c      	ldr	r2, [pc, #176]	; (80051d8 <TIM_OC2_SetConfig+0xe0>)
 8005126:	4013      	ands	r3, r2
 8005128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a2b      	ldr	r2, [pc, #172]	; (80051dc <TIM_OC2_SetConfig+0xe4>)
 800512e:	4013      	ands	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2220      	movs	r2, #32
 8005142:	4393      	bics	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <TIM_OC2_SetConfig+0xe8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d10d      	bne.n	8005176 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	4393      	bics	r3, r2
 8005160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	4313      	orrs	r3, r2
 800516c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2240      	movs	r2, #64	; 0x40
 8005172:	4393      	bics	r3, r2
 8005174:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <TIM_OC2_SetConfig+0xe8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC2_SetConfig+0x96>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <TIM_OC2_SetConfig+0xec>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC2_SetConfig+0x96>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <TIM_OC2_SetConfig+0xf0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4a16      	ldr	r2, [pc, #88]	; (80051ec <TIM_OC2_SetConfig+0xf4>)
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4a15      	ldr	r2, [pc, #84]	; (80051f0 <TIM_OC2_SetConfig+0xf8>)
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	621a      	str	r2, [r3, #32]
}
 80051d0:	46c0      	nop			; (mov r8, r8)
 80051d2:	46bd      	mov	sp, r7
 80051d4:	b006      	add	sp, #24
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	feff8fff 	.word	0xfeff8fff
 80051dc:	fffffcff 	.word	0xfffffcff
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800
 80051ec:	fffffbff 	.word	0xfffffbff
 80051f0:	fffff7ff 	.word	0xfffff7ff

080051f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	4a31      	ldr	r2, [pc, #196]	; (80052d0 <TIM_OC3_SetConfig+0xdc>)
 800520a:	401a      	ands	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <TIM_OC3_SetConfig+0xe0>)
 8005220:	4013      	ands	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2203      	movs	r2, #3
 8005228:	4393      	bics	r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	4a27      	ldr	r2, [pc, #156]	; (80052d8 <TIM_OC3_SetConfig+0xe4>)
 800523a:	4013      	ands	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	4313      	orrs	r3, r2
 8005248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a23      	ldr	r2, [pc, #140]	; (80052dc <TIM_OC3_SetConfig+0xe8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	4a22      	ldr	r2, [pc, #136]	; (80052e0 <TIM_OC3_SetConfig+0xec>)
 8005256:	4013      	ands	r3, r2
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <TIM_OC3_SetConfig+0xf0>)
 800526a:	4013      	ands	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1a      	ldr	r2, [pc, #104]	; (80052dc <TIM_OC3_SetConfig+0xe8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d007      	beq.n	8005286 <TIM_OC3_SetConfig+0x92>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <TIM_OC3_SetConfig+0xf4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d003      	beq.n	8005286 <TIM_OC3_SetConfig+0x92>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <TIM_OC3_SetConfig+0xf8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d113      	bne.n	80052ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <TIM_OC3_SetConfig+0xfc>)
 800528a:	4013      	ands	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <TIM_OC3_SetConfig+0x100>)
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	011b      	lsls	r3, r3, #4
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	46c0      	nop			; (mov r8, r8)
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b006      	add	sp, #24
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	fffffeff 	.word	0xfffffeff
 80052d4:	fffeff8f 	.word	0xfffeff8f
 80052d8:	fffffdff 	.word	0xfffffdff
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	fffff7ff 	.word	0xfffff7ff
 80052e4:	fffffbff 	.word	0xfffffbff
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800
 80052f0:	ffffefff 	.word	0xffffefff
 80052f4:	ffffdfff 	.word	0xffffdfff

080052f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	4a24      	ldr	r2, [pc, #144]	; (80053a0 <TIM_OC4_SetConfig+0xa8>)
 800530e:	401a      	ands	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a20      	ldr	r2, [pc, #128]	; (80053a4 <TIM_OC4_SetConfig+0xac>)
 8005324:	4013      	ands	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a1f      	ldr	r2, [pc, #124]	; (80053a8 <TIM_OC4_SetConfig+0xb0>)
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	021b      	lsls	r3, r3, #8
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	4a1b      	ldr	r2, [pc, #108]	; (80053ac <TIM_OC4_SetConfig+0xb4>)
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	031b      	lsls	r3, r3, #12
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <TIM_OC4_SetConfig+0xb8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <TIM_OC4_SetConfig+0x70>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <TIM_OC4_SetConfig+0xbc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d003      	beq.n	8005368 <TIM_OC4_SetConfig+0x70>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a15      	ldr	r2, [pc, #84]	; (80053b8 <TIM_OC4_SetConfig+0xc0>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d109      	bne.n	800537c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4a14      	ldr	r2, [pc, #80]	; (80053bc <TIM_OC4_SetConfig+0xc4>)
 800536c:	4013      	ands	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	019b      	lsls	r3, r3, #6
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	621a      	str	r2, [r3, #32]
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b006      	add	sp, #24
 800539c:	bd80      	pop	{r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	ffffefff 	.word	0xffffefff
 80053a4:	feff8fff 	.word	0xfeff8fff
 80053a8:	fffffcff 	.word	0xfffffcff
 80053ac:	ffffdfff 	.word	0xffffdfff
 80053b0:	40012c00 	.word	0x40012c00
 80053b4:	40014400 	.word	0x40014400
 80053b8:	40014800 	.word	0x40014800
 80053bc:	ffffbfff 	.word	0xffffbfff

080053c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4a21      	ldr	r2, [pc, #132]	; (800545c <TIM_OC5_SetConfig+0x9c>)
 80053d6:	401a      	ands	r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <TIM_OC5_SetConfig+0xa0>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	4a19      	ldr	r2, [pc, #100]	; (8005464 <TIM_OC5_SetConfig+0xa4>)
 80053fe:	4013      	ands	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	041b      	lsls	r3, r3, #16
 8005408:	693a      	ldr	r2, [r7, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC5_SetConfig+0xa8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <TIM_OC5_SetConfig+0x66>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC5_SetConfig+0xac>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_OC5_SetConfig+0x66>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a13      	ldr	r2, [pc, #76]	; (8005470 <TIM_OC5_SetConfig+0xb0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d109      	bne.n	800543a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	4a0c      	ldr	r2, [pc, #48]	; (800545c <TIM_OC5_SetConfig+0x9c>)
 800542a:	4013      	ands	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b006      	add	sp, #24
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fffeffff 	.word	0xfffeffff
 8005460:	fffeff8f 	.word	0xfffeff8f
 8005464:	fffdffff 	.word	0xfffdffff
 8005468:	40012c00 	.word	0x40012c00
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	4a22      	ldr	r2, [pc, #136]	; (8005514 <TIM_OC6_SetConfig+0xa0>)
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <TIM_OC6_SetConfig+0xa4>)
 80054a0:	4013      	ands	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4a1a      	ldr	r2, [pc, #104]	; (800551c <TIM_OC6_SetConfig+0xa8>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	051b      	lsls	r3, r3, #20
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a16      	ldr	r2, [pc, #88]	; (8005520 <TIM_OC6_SetConfig+0xac>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC6_SetConfig+0x68>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a15      	ldr	r2, [pc, #84]	; (8005524 <TIM_OC6_SetConfig+0xb0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC6_SetConfig+0x68>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a14      	ldr	r2, [pc, #80]	; (8005528 <TIM_OC6_SetConfig+0xb4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4a13      	ldr	r2, [pc, #76]	; (800552c <TIM_OC6_SetConfig+0xb8>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b006      	add	sp, #24
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffefffff 	.word	0xffefffff
 8005518:	feff8fff 	.word	0xfeff8fff
 800551c:	ffdfffff 	.word	0xffdfffff
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800
 800552c:	fffbffff 	.word	0xfffbffff

08005530 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2317      	movs	r3, #23
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4a41      	ldr	r2, [pc, #260]	; (8005654 <TIM_SlaveTimer_SetConfig+0x124>)
 800554e:	4013      	ands	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4313      	orrs	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4a3e      	ldr	r2, [pc, #248]	; (8005658 <TIM_SlaveTimer_SetConfig+0x128>)
 8005560:	4013      	ands	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b70      	cmp	r3, #112	; 0x70
 800557c:	d015      	beq.n	80055aa <TIM_SlaveTimer_SetConfig+0x7a>
 800557e:	d900      	bls.n	8005582 <TIM_SlaveTimer_SetConfig+0x52>
 8005580:	e05b      	b.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 8005582:	2b60      	cmp	r3, #96	; 0x60
 8005584:	d04f      	beq.n	8005626 <TIM_SlaveTimer_SetConfig+0xf6>
 8005586:	d858      	bhi.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 8005588:	2b50      	cmp	r3, #80	; 0x50
 800558a:	d042      	beq.n	8005612 <TIM_SlaveTimer_SetConfig+0xe2>
 800558c:	d855      	bhi.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d016      	beq.n	80055c0 <TIM_SlaveTimer_SetConfig+0x90>
 8005592:	d852      	bhi.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d055      	beq.n	8005644 <TIM_SlaveTimer_SetConfig+0x114>
 8005598:	d84f      	bhi.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 800559a:	2b20      	cmp	r3, #32
 800559c:	d052      	beq.n	8005644 <TIM_SlaveTimer_SetConfig+0x114>
 800559e:	d84c      	bhi.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d04f      	beq.n	8005644 <TIM_SlaveTimer_SetConfig+0x114>
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d04d      	beq.n	8005644 <TIM_SlaveTimer_SetConfig+0x114>
 80055a8:	e047      	b.n	800563a <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	f000 f8cb 	bl	8005754 <TIM_ETR_SetConfig>
      break;
 80055be:	e042      	b.n	8005646 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b05      	cmp	r3, #5
 80055c6:	d101      	bne.n	80055cc <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e03f      	b.n	800564c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	22f0      	movs	r2, #240	; 0xf0
 80055f0:	4393      	bics	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	621a      	str	r2, [r3, #32]
      break;
 8005610:	e019      	b.n	8005646 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800561e:	001a      	movs	r2, r3
 8005620:	f000 f81c 	bl	800565c <TIM_TI1_ConfigInputStage>
      break;
 8005624:	e00f      	b.n	8005646 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005632:	001a      	movs	r2, r3
 8005634:	f000 f840 	bl	80056b8 <TIM_TI2_ConfigInputStage>
      break;
 8005638:	e005      	b.n	8005646 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800563a:	2317      	movs	r3, #23
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2201      	movs	r2, #1
 8005640:	701a      	strb	r2, [r3, #0]
      break;
 8005642:	e000      	b.n	8005646 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8005644:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8005646:	2317      	movs	r3, #23
 8005648:	18fb      	adds	r3, r7, r3
 800564a:	781b      	ldrb	r3, [r3, #0]
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b006      	add	sp, #24
 8005652:	bd80      	pop	{r7, pc}
 8005654:	ffcfff8f 	.word	0xffcfff8f
 8005658:	fffefff8 	.word	0xfffefff8

0800565c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	2201      	movs	r2, #1
 8005674:	4393      	bics	r3, r2
 8005676:	001a      	movs	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	22f0      	movs	r2, #240	; 0xf0
 8005686:	4393      	bics	r3, r2
 8005688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	220a      	movs	r2, #10
 8005698:	4393      	bics	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	621a      	str	r2, [r3, #32]
}
 80056b0:	46c0      	nop			; (mov r8, r8)
 80056b2:	46bd      	mov	sp, r7
 80056b4:	b006      	add	sp, #24
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	2210      	movs	r2, #16
 80056d0:	4393      	bics	r3, r2
 80056d2:	001a      	movs	r2, r3
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4a0d      	ldr	r2, [pc, #52]	; (8005718 <TIM_TI2_ConfigInputStage+0x60>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	031b      	lsls	r3, r3, #12
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	22a0      	movs	r2, #160	; 0xa0
 80056f4:	4393      	bics	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4313      	orrs	r3, r2
 8005700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	621a      	str	r2, [r3, #32]
}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	46bd      	mov	sp, r7
 8005712:	b006      	add	sp, #24
 8005714:	bd80      	pop	{r7, pc}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	ffff0fff 	.word	0xffff0fff

0800571c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a08      	ldr	r2, [pc, #32]	; (8005750 <TIM_ITRx_SetConfig+0x34>)
 8005730:	4013      	ands	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4313      	orrs	r3, r2
 800573a:	2207      	movs	r2, #7
 800573c:	4313      	orrs	r3, r2
 800573e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	609a      	str	r2, [r3, #8]
}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	46bd      	mov	sp, r7
 800574a:	b004      	add	sp, #16
 800574c:	bd80      	pop	{r7, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	ffcfff8f 	.word	0xffcfff8f

08005754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4a09      	ldr	r2, [pc, #36]	; (8005790 <TIM_ETR_SetConfig+0x3c>)
 800576c:	4013      	ands	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	021a      	lsls	r2, r3, #8
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	431a      	orrs	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	4313      	orrs	r3, r2
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	697a      	ldr	r2, [r7, #20]
 8005786:	609a      	str	r2, [r3, #8]
}
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b006      	add	sp, #24
 800578e:	bd80      	pop	{r7, pc}
 8005790:	ffff00ff 	.word	0xffff00ff

08005794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	223c      	movs	r2, #60	; 0x3c
 80057a2:	5c9b      	ldrb	r3, [r3, r2]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e04a      	b.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	223c      	movs	r2, #60	; 0x3c
 80057b0:	2101      	movs	r1, #1
 80057b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	223d      	movs	r2, #61	; 0x3d
 80057b8:	2102      	movs	r1, #2
 80057ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1e      	ldr	r2, [pc, #120]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a1d      	ldr	r2, [pc, #116]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2270      	movs	r2, #112	; 0x70
 80057ec:	4393      	bics	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a11      	ldr	r2, [pc, #68]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a10      	ldr	r2, [pc, #64]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2280      	movs	r2, #128	; 0x80
 800581a:	4393      	bics	r3, r2
 800581c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	223d      	movs	r2, #61	; 0x3d
 8005834:	2101      	movs	r1, #1
 8005836:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	223c      	movs	r2, #60	; 0x3c
 800583c:	2100      	movs	r1, #0
 800583e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	0018      	movs	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	b004      	add	sp, #16
 8005848:	bd80      	pop	{r7, pc}
 800584a:	46c0      	nop			; (mov r8, r8)
 800584c:	40012c00 	.word	0x40012c00
 8005850:	ff0fffff 	.word	0xff0fffff
 8005854:	40000400 	.word	0x40000400

08005858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005860:	46c0      	nop			; (mov r8, r8)
 8005862:	46bd      	mov	sp, r7
 8005864:	b002      	add	sp, #8
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	b002      	add	sp, #8
 8005876:	bd80      	pop	{r7, pc}

08005878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005880:	46c0      	nop			; (mov r8, r8)
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <malloc>:
 8005888:	b510      	push	{r4, lr}
 800588a:	4b03      	ldr	r3, [pc, #12]	; (8005898 <malloc+0x10>)
 800588c:	0001      	movs	r1, r0
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	f000 f826 	bl	80058e0 <_malloc_r>
 8005894:	bd10      	pop	{r4, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20000068 	.word	0x20000068

0800589c <sbrk_aligned>:
 800589c:	b570      	push	{r4, r5, r6, lr}
 800589e:	4e0f      	ldr	r6, [pc, #60]	; (80058dc <sbrk_aligned+0x40>)
 80058a0:	000d      	movs	r5, r1
 80058a2:	6831      	ldr	r1, [r6, #0]
 80058a4:	0004      	movs	r4, r0
 80058a6:	2900      	cmp	r1, #0
 80058a8:	d102      	bne.n	80058b0 <sbrk_aligned+0x14>
 80058aa:	f000 f8b3 	bl	8005a14 <_sbrk_r>
 80058ae:	6030      	str	r0, [r6, #0]
 80058b0:	0029      	movs	r1, r5
 80058b2:	0020      	movs	r0, r4
 80058b4:	f000 f8ae 	bl	8005a14 <_sbrk_r>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d00a      	beq.n	80058d2 <sbrk_aligned+0x36>
 80058bc:	2303      	movs	r3, #3
 80058be:	1cc5      	adds	r5, r0, #3
 80058c0:	439d      	bics	r5, r3
 80058c2:	42a8      	cmp	r0, r5
 80058c4:	d007      	beq.n	80058d6 <sbrk_aligned+0x3a>
 80058c6:	1a29      	subs	r1, r5, r0
 80058c8:	0020      	movs	r0, r4
 80058ca:	f000 f8a3 	bl	8005a14 <_sbrk_r>
 80058ce:	3001      	adds	r0, #1
 80058d0:	d101      	bne.n	80058d6 <sbrk_aligned+0x3a>
 80058d2:	2501      	movs	r5, #1
 80058d4:	426d      	negs	r5, r5
 80058d6:	0028      	movs	r0, r5
 80058d8:	bd70      	pop	{r4, r5, r6, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	2000078c 	.word	0x2000078c

080058e0 <_malloc_r>:
 80058e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058e2:	2203      	movs	r2, #3
 80058e4:	1ccb      	adds	r3, r1, #3
 80058e6:	4393      	bics	r3, r2
 80058e8:	3308      	adds	r3, #8
 80058ea:	0006      	movs	r6, r0
 80058ec:	001f      	movs	r7, r3
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d238      	bcs.n	8005964 <_malloc_r+0x84>
 80058f2:	270c      	movs	r7, #12
 80058f4:	42b9      	cmp	r1, r7
 80058f6:	d837      	bhi.n	8005968 <_malloc_r+0x88>
 80058f8:	0030      	movs	r0, r6
 80058fa:	f000 f873 	bl	80059e4 <__malloc_lock>
 80058fe:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <_malloc_r+0x100>)
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	001c      	movs	r4, r3
 8005906:	2c00      	cmp	r4, #0
 8005908:	d133      	bne.n	8005972 <_malloc_r+0x92>
 800590a:	0039      	movs	r1, r7
 800590c:	0030      	movs	r0, r6
 800590e:	f7ff ffc5 	bl	800589c <sbrk_aligned>
 8005912:	0004      	movs	r4, r0
 8005914:	1c43      	adds	r3, r0, #1
 8005916:	d15e      	bne.n	80059d6 <_malloc_r+0xf6>
 8005918:	9b00      	ldr	r3, [sp, #0]
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	0025      	movs	r5, r4
 800591e:	2d00      	cmp	r5, #0
 8005920:	d14e      	bne.n	80059c0 <_malloc_r+0xe0>
 8005922:	2c00      	cmp	r4, #0
 8005924:	d051      	beq.n	80059ca <_malloc_r+0xea>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	0029      	movs	r1, r5
 800592a:	18e3      	adds	r3, r4, r3
 800592c:	0030      	movs	r0, r6
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f000 f870 	bl	8005a14 <_sbrk_r>
 8005934:	9b01      	ldr	r3, [sp, #4]
 8005936:	4283      	cmp	r3, r0
 8005938:	d147      	bne.n	80059ca <_malloc_r+0xea>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	0030      	movs	r0, r6
 800593e:	1aff      	subs	r7, r7, r3
 8005940:	0039      	movs	r1, r7
 8005942:	f7ff ffab 	bl	800589c <sbrk_aligned>
 8005946:	3001      	adds	r0, #1
 8005948:	d03f      	beq.n	80059ca <_malloc_r+0xea>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	19db      	adds	r3, r3, r7
 800594e:	6023      	str	r3, [r4, #0]
 8005950:	9b00      	ldr	r3, [sp, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d040      	beq.n	80059da <_malloc_r+0xfa>
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	42a2      	cmp	r2, r4
 800595c:	d133      	bne.n	80059c6 <_malloc_r+0xe6>
 800595e:	2200      	movs	r2, #0
 8005960:	605a      	str	r2, [r3, #4]
 8005962:	e014      	b.n	800598e <_malloc_r+0xae>
 8005964:	2b00      	cmp	r3, #0
 8005966:	dac5      	bge.n	80058f4 <_malloc_r+0x14>
 8005968:	230c      	movs	r3, #12
 800596a:	2500      	movs	r5, #0
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	0028      	movs	r0, r5
 8005970:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	1bc9      	subs	r1, r1, r7
 8005976:	d420      	bmi.n	80059ba <_malloc_r+0xda>
 8005978:	290b      	cmp	r1, #11
 800597a:	d918      	bls.n	80059ae <_malloc_r+0xce>
 800597c:	19e2      	adds	r2, r4, r7
 800597e:	6027      	str	r7, [r4, #0]
 8005980:	42a3      	cmp	r3, r4
 8005982:	d112      	bne.n	80059aa <_malloc_r+0xca>
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	6011      	str	r1, [r2, #0]
 800598c:	6053      	str	r3, [r2, #4]
 800598e:	0030      	movs	r0, r6
 8005990:	0025      	movs	r5, r4
 8005992:	f000 f82f 	bl	80059f4 <__malloc_unlock>
 8005996:	2207      	movs	r2, #7
 8005998:	350b      	adds	r5, #11
 800599a:	1d23      	adds	r3, r4, #4
 800599c:	4395      	bics	r5, r2
 800599e:	1aea      	subs	r2, r5, r3
 80059a0:	429d      	cmp	r5, r3
 80059a2:	d0e4      	beq.n	800596e <_malloc_r+0x8e>
 80059a4:	1b5b      	subs	r3, r3, r5
 80059a6:	50a3      	str	r3, [r4, r2]
 80059a8:	e7e1      	b.n	800596e <_malloc_r+0x8e>
 80059aa:	605a      	str	r2, [r3, #4]
 80059ac:	e7ec      	b.n	8005988 <_malloc_r+0xa8>
 80059ae:	6862      	ldr	r2, [r4, #4]
 80059b0:	42a3      	cmp	r3, r4
 80059b2:	d1d5      	bne.n	8005960 <_malloc_r+0x80>
 80059b4:	9b00      	ldr	r3, [sp, #0]
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e7e9      	b.n	800598e <_malloc_r+0xae>
 80059ba:	0023      	movs	r3, r4
 80059bc:	6864      	ldr	r4, [r4, #4]
 80059be:	e7a2      	b.n	8005906 <_malloc_r+0x26>
 80059c0:	002c      	movs	r4, r5
 80059c2:	686d      	ldr	r5, [r5, #4]
 80059c4:	e7ab      	b.n	800591e <_malloc_r+0x3e>
 80059c6:	0013      	movs	r3, r2
 80059c8:	e7c4      	b.n	8005954 <_malloc_r+0x74>
 80059ca:	230c      	movs	r3, #12
 80059cc:	0030      	movs	r0, r6
 80059ce:	6033      	str	r3, [r6, #0]
 80059d0:	f000 f810 	bl	80059f4 <__malloc_unlock>
 80059d4:	e7cb      	b.n	800596e <_malloc_r+0x8e>
 80059d6:	6027      	str	r7, [r4, #0]
 80059d8:	e7d9      	b.n	800598e <_malloc_r+0xae>
 80059da:	605b      	str	r3, [r3, #4]
 80059dc:	deff      	udf	#255	; 0xff
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	20000788 	.word	0x20000788

080059e4 <__malloc_lock>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4802      	ldr	r0, [pc, #8]	; (80059f0 <__malloc_lock+0xc>)
 80059e8:	f000 f850 	bl	8005a8c <__retarget_lock_acquire_recursive>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	46c0      	nop			; (mov r8, r8)
 80059f0:	200008cc 	.word	0x200008cc

080059f4 <__malloc_unlock>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	4802      	ldr	r0, [pc, #8]	; (8005a00 <__malloc_unlock+0xc>)
 80059f8:	f000 f849 	bl	8005a8e <__retarget_lock_release_recursive>
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	46c0      	nop			; (mov r8, r8)
 8005a00:	200008cc 	.word	0x200008cc

08005a04 <memset>:
 8005a04:	0003      	movs	r3, r0
 8005a06:	1882      	adds	r2, r0, r2
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d100      	bne.n	8005a0e <memset+0xa>
 8005a0c:	4770      	bx	lr
 8005a0e:	7019      	strb	r1, [r3, #0]
 8005a10:	3301      	adds	r3, #1
 8005a12:	e7f9      	b.n	8005a08 <memset+0x4>

08005a14 <_sbrk_r>:
 8005a14:	2300      	movs	r3, #0
 8005a16:	b570      	push	{r4, r5, r6, lr}
 8005a18:	4d06      	ldr	r5, [pc, #24]	; (8005a34 <_sbrk_r+0x20>)
 8005a1a:	0004      	movs	r4, r0
 8005a1c:	0008      	movs	r0, r1
 8005a1e:	602b      	str	r3, [r5, #0]
 8005a20:	f7fd fc78 	bl	8003314 <_sbrk>
 8005a24:	1c43      	adds	r3, r0, #1
 8005a26:	d103      	bne.n	8005a30 <_sbrk_r+0x1c>
 8005a28:	682b      	ldr	r3, [r5, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d000      	beq.n	8005a30 <_sbrk_r+0x1c>
 8005a2e:	6023      	str	r3, [r4, #0]
 8005a30:	bd70      	pop	{r4, r5, r6, pc}
 8005a32:	46c0      	nop			; (mov r8, r8)
 8005a34:	200008c8 	.word	0x200008c8

08005a38 <__errno>:
 8005a38:	4b01      	ldr	r3, [pc, #4]	; (8005a40 <__errno+0x8>)
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	4770      	bx	lr
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	20000068 	.word	0x20000068

08005a44 <__libc_init_array>:
 8005a44:	b570      	push	{r4, r5, r6, lr}
 8005a46:	2600      	movs	r6, #0
 8005a48:	4c0c      	ldr	r4, [pc, #48]	; (8005a7c <__libc_init_array+0x38>)
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	; (8005a80 <__libc_init_array+0x3c>)
 8005a4c:	1b64      	subs	r4, r4, r5
 8005a4e:	10a4      	asrs	r4, r4, #2
 8005a50:	42a6      	cmp	r6, r4
 8005a52:	d109      	bne.n	8005a68 <__libc_init_array+0x24>
 8005a54:	2600      	movs	r6, #0
 8005a56:	f000 f825 	bl	8005aa4 <_init>
 8005a5a:	4c0a      	ldr	r4, [pc, #40]	; (8005a84 <__libc_init_array+0x40>)
 8005a5c:	4d0a      	ldr	r5, [pc, #40]	; (8005a88 <__libc_init_array+0x44>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	42a6      	cmp	r6, r4
 8005a64:	d105      	bne.n	8005a72 <__libc_init_array+0x2e>
 8005a66:	bd70      	pop	{r4, r5, r6, pc}
 8005a68:	00b3      	lsls	r3, r6, #2
 8005a6a:	58eb      	ldr	r3, [r5, r3]
 8005a6c:	4798      	blx	r3
 8005a6e:	3601      	adds	r6, #1
 8005a70:	e7ee      	b.n	8005a50 <__libc_init_array+0xc>
 8005a72:	00b3      	lsls	r3, r6, #2
 8005a74:	58eb      	ldr	r3, [r5, r3]
 8005a76:	4798      	blx	r3
 8005a78:	3601      	adds	r6, #1
 8005a7a:	e7f2      	b.n	8005a62 <__libc_init_array+0x1e>
 8005a7c:	08005bd4 	.word	0x08005bd4
 8005a80:	08005bd4 	.word	0x08005bd4
 8005a84:	08005bd8 	.word	0x08005bd8
 8005a88:	08005bd4 	.word	0x08005bd4

08005a8c <__retarget_lock_acquire_recursive>:
 8005a8c:	4770      	bx	lr

08005a8e <__retarget_lock_release_recursive>:
 8005a8e:	4770      	bx	lr

08005a90 <memcpy>:
 8005a90:	2300      	movs	r3, #0
 8005a92:	b510      	push	{r4, lr}
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d100      	bne.n	8005a9a <memcpy+0xa>
 8005a98:	bd10      	pop	{r4, pc}
 8005a9a:	5ccc      	ldrb	r4, [r1, r3]
 8005a9c:	54c4      	strb	r4, [r0, r3]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	e7f8      	b.n	8005a94 <memcpy+0x4>
	...

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	46c0      	nop			; (mov r8, r8)
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
