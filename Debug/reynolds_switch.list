
reynolds_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005658  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005718  08005718  00015718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800581c  0800581c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800581c  0800581c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800581c  0800581c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005824  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000068  0800588c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  0800588c  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db5a  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002569  00000000  00000000  0002dc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abd  00000000  00000000  00030fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000144da  00000000  00000000  00031a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001063a  00000000  00000000  00045f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c28f  00000000  00000000  00056579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  000d2808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d5d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005700 	.word	0x08005700

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005700 	.word	0x08005700

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <button_setup>:

#include "BoardSupport/button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	6019      	str	r1, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	1d3a      	adds	r2, r7, #4
 8000232:	3304      	adds	r3, #4
 8000234:	ca03      	ldmia	r2!, {r0, r1}
 8000236:	c303      	stmia	r3!, {r0, r1}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	70da      	strb	r2, [r3, #3]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2201      	movs	r2, #1
 800024e:	735a      	strb	r2, [r3, #13]
	button->debounce_idx = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	button->debounce_count_limit = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	615a      	str	r2, [r3, #20]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2200      	movs	r2, #0
 8000260:	709a      	strb	r2, [r3, #2]

	return 0;
 8000262:	2300      	movs	r3, #0

}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}

0800026c <button_debounce_fsm>:


uint8_t button_debounce_fsm(button_t *button)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 8000274:	211f      	movs	r1, #31
 8000276:	187b      	adds	r3, r7, r1
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	7b12      	ldrb	r2, [r2, #12]
 800027c:	701a      	strb	r2, [r3, #0]
	button_edge_t edge = button->edge;
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7852      	ldrb	r2, [r2, #1]
 8000286:	701a      	strb	r2, [r3, #0]
	uint32_t debounce_idx = button->debounce_idx;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	61bb      	str	r3, [r7, #24]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	613b      	str	r3, [r7, #16]
	button_status_t button_status;

	switch(debounce_fsm_state)
 8000294:	187b      	adds	r3, r7, r1
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d022      	beq.n	80002e2 <button_debounce_fsm+0x76>
 800029c:	dc36      	bgt.n	800030c <button_debounce_fsm+0xa0>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d002      	beq.n	80002a8 <button_debounce_fsm+0x3c>
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d011      	beq.n	80002ca <button_debounce_fsm+0x5e>
 80002a6:	e031      	b.n	800030c <button_debounce_fsm+0xa0>
	{
		case BUTTON_DEBOUNCE_IDLE:

			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7b5b      	ldrb	r3, [r3, #13]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d132      	bne.n	8000316 <button_debounce_fsm+0xaa>
			{
				if(debounce_count_limit == 0)
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <button_debounce_fsm+0x54>
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002b6:	231f      	movs	r3, #31
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
				else
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
				}
			}
			break;
 80002be:	e02a      	b.n	8000316 <button_debounce_fsm+0xaa>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80002c0:	231f      	movs	r3, #31
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
			break;
 80002c8:	e025      	b.n	8000316 <button_debounce_fsm+0xaa>
		case BUTTON_DEBOUNCE_WAIT:

			if(debounce_idx >= debounce_count_limit)
 80002ca:	69ba      	ldr	r2, [r7, #24]
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d303      	bcc.n	80002da <button_debounce_fsm+0x6e>
			{
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002d2:	231f      	movs	r3, #31
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	2202      	movs	r2, #2
 80002d8:	701a      	strb	r2, [r3, #0]
			}
			debounce_idx++;
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	3301      	adds	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]

			break;
 80002e0:	e01a      	b.n	8000318 <button_debounce_fsm+0xac>
		case BUTTON_DEBOUNCE_CLEAR_LOCK:

			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2202      	movs	r2, #2
 80002e6:	70da      	strb	r2, [r3, #3]
			button->debounce_idx = 0;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	735a      	strb	r2, [r3, #13]
			button_get_status(button, &button_status);
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fa      	adds	r2, r7, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f843 	bl	8000388 <button_get_status>

			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000302:	231f      	movs	r3, #31
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]

			break;
 800030a:	e005      	b.n	8000318 <button_debounce_fsm+0xac>
		default:
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 800030c:	231f      	movs	r3, #31
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e000      	b.n	8000318 <button_debounce_fsm+0xac>
			break;
 8000316:	46c0      	nop			; (mov r8, r8)
	}

	button->debounce_fsm_state = debounce_fsm_state;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	221f      	movs	r2, #31
 800031c:	18ba      	adds	r2, r7, r2
 800031e:	7812      	ldrb	r2, [r2, #0]
 8000320:	731a      	strb	r2, [r3, #12]
	button->edge = edge;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2217      	movs	r2, #23
 8000326:	18ba      	adds	r2, r7, r2
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	705a      	strb	r2, [r3, #1]
	button->debounce_idx = debounce_idx;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	69ba      	ldr	r2, [r7, #24]
 8000330:	611a      	str	r2, [r3, #16]

	return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b008      	add	sp, #32
 800033a:	bd80      	pop	{r7, pc}

0800033c <button_positive_edge_detected>:

}


uint8_t button_positive_edge_detected(button_t *button)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b5b      	ldrb	r3, [r3, #13]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d105      	bne.n	8000358 <button_positive_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2202      	movs	r2, #2
 8000350:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000358:	2300      	movs	r3, #0
}
 800035a:	0018      	movs	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}

08000362 <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	7b5b      	ldrb	r3, [r3, #13]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d105      	bne.n	800037e <button_negative_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	891b      	ldrh	r3, [r3, #8]
 800039a:	250f      	movs	r5, #15
 800039c:	197c      	adds	r4, r7, r5
 800039e:	0019      	movs	r1, r3
 80003a0:	0010      	movs	r0, r2
 80003a2:	f003 fc3d 	bl	8003c20 <HAL_GPIO_ReadPin>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d103      	bne.n	80003ba <button_get_status+0x32>
	{
		button->status = BUTTON_ON;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	e002      	b.n	80003c0 <button_get_status+0x38>
	}
	else
	{
		button->status = BUTTON_OFF;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
	}

	*status = button->status;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	701a      	strb	r2, [r3, #0]

	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	0018      	movs	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b004      	add	sp, #16
 80003d0:	bdb0      	pop	{r4, r5, r7, pc}

080003d2 <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 80003d2:	b084      	sub	sp, #16
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	250c      	movs	r5, #12
 80003da:	1d2c      	adds	r4, r5, #4
 80003dc:	19e4      	adds	r4, r4, r7
 80003de:	6020      	str	r0, [r4, #0]
 80003e0:	6061      	str	r1, [r4, #4]
 80003e2:	60a2      	str	r2, [r4, #8]
 80003e4:	60e3      	str	r3, [r4, #12]
	*button_isr_status = button.edge_attended;
 80003e6:	0029      	movs	r1, r5
 80003e8:	1d0b      	adds	r3, r1, #4
 80003ea:	19db      	adds	r3, r3, r7
 80003ec:	78da      	ldrb	r2, [r3, #3]
 80003ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f0:	701a      	strb	r2, [r3, #0]
	*edge = button.edge;
 80003f2:	1d0b      	adds	r3, r1, #4
 80003f4:	19db      	adds	r3, r3, r7
 80003f6:	785a      	ldrb	r2, [r3, #1]
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	701a      	strb	r2, [r3, #0]
	return 0;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bcb0      	pop	{r4, r5, r7}
 8000404:	bc08      	pop	{r3}
 8000406:	b004      	add	sp, #16
 8000408:	4718      	bx	r3

0800040a <led_signal_setup>:
 */

#include "BoardSupport/led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b084      	sub	sp, #16
 800040e:	af00      	add	r7, sp, #0
 8000410:	60f8      	str	r0, [r7, #12]
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	6019      	str	r1, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	ca03      	ldmia	r2!, {r0, r1}
 800041e:	c303      	stmia	r3!, {r0, r1}
	led_signal->type = LED_SIGNAL_OFF;
 8000420:	68fb      	ldr	r3, [r7, #12]
 8000422:	2200      	movs	r2, #0
 8000424:	725a      	strb	r2, [r3, #9]

	return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b004      	add	sp, #16
 800042e:	bd80      	pop	{r7, pc}

08000430 <led_signal_fsm>:



uint8_t led_signal_fsm(led_signal_t *led_signal)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	led_signal_type_t type = led_signal->type;
 8000438:	210f      	movs	r1, #15
 800043a:	187b      	adds	r3, r7, r1
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7a52      	ldrb	r2, [r2, #9]
 8000440:	701a      	strb	r2, [r3, #0]

	switch(type)
 8000442:	187b      	adds	r3, r7, r1
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b03      	cmp	r3, #3
 8000448:	d01c      	beq.n	8000484 <led_signal_fsm+0x54>
 800044a:	dc1d      	bgt.n	8000488 <led_signal_fsm+0x58>
 800044c:	2b02      	cmp	r3, #2
 800044e:	d014      	beq.n	800047a <led_signal_fsm+0x4a>
 8000450:	dc1a      	bgt.n	8000488 <led_signal_fsm+0x58>
 8000452:	2b00      	cmp	r3, #0
 8000454:	d002      	beq.n	800045c <led_signal_fsm+0x2c>
 8000456:	2b01      	cmp	r3, #1
 8000458:	d00a      	beq.n	8000470 <led_signal_fsm+0x40>
			led_signal_togle_fsm(led_signal);
			break;
		case LED_SIGNAL_BLINK_2:
			break;
		default:
			break;
 800045a:	e015      	b.n	8000488 <led_signal_fsm+0x58>
			led_signal_turn_off(*led_signal);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	6818      	ldr	r0, [r3, #0]
 8000460:	6859      	ldr	r1, [r3, #4]
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	f000 f912 	bl	800068c <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2200      	movs	r2, #0
 800046c:	729a      	strb	r2, [r3, #10]
			break;
 800046e:	e00c      	b.n	800048a <led_signal_fsm+0x5a>
			led_signal_solid_fsm(led_signal);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	0018      	movs	r0, r3
 8000474:	f000 f81e 	bl	80004b4 <led_signal_solid_fsm>
			break;
 8000478:	e007      	b.n	800048a <led_signal_fsm+0x5a>
			led_signal_togle_fsm(led_signal);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	0018      	movs	r0, r3
 800047e:	f000 f876 	bl	800056e <led_signal_togle_fsm>
			break;
 8000482:	e002      	b.n	800048a <led_signal_fsm+0x5a>
			break;
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	e000      	b.n	800048a <led_signal_fsm+0x5a>
			break;
 8000488:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 800048a:	2300      	movs	r3, #0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b004      	add	sp, #16
 8000492:	bd80      	pop	{r7, pc}

08000494 <led_signal_type_selector>:



uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
 800049c:	000a      	movs	r2, r1
 800049e:	1cfb      	adds	r3, r7, #3
 80004a0:	701a      	strb	r2, [r3, #0]
	led_signal->type = type;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	1cfa      	adds	r2, r7, #3
 80004a6:	7812      	ldrb	r2, [r2, #0]
 80004a8:	725a      	strb	r2, [r3, #9]
	return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 80004bc:	210f      	movs	r1, #15
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7a92      	ldrb	r2, [r2, #10]
 80004c4:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 80004c6:	230e      	movs	r3, #14
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	7a12      	ldrb	r2, [r2, #8]
 80004ce:	701a      	strb	r2, [r3, #0]


	switch(state)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	d027      	beq.n	8000528 <led_signal_solid_fsm+0x74>
 80004d8:	dc31      	bgt.n	800053e <led_signal_solid_fsm+0x8a>
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d01a      	beq.n	8000514 <led_signal_solid_fsm+0x60>
 80004de:	dc2e      	bgt.n	800053e <led_signal_solid_fsm+0x8a>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d002      	beq.n	80004ea <led_signal_solid_fsm+0x36>
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	d00a      	beq.n	80004fe <led_signal_solid_fsm+0x4a>
 80004e8:	e029      	b.n	800053e <led_signal_solid_fsm+0x8a>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 80004ea:	230e      	movs	r3, #14
 80004ec:	18fb      	adds	r3, r7, r3
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d12f      	bne.n	8000554 <led_signal_solid_fsm+0xa0>
			{
				state = LED_SIGNAL_STATE_ON;
 80004f4:	230f      	movs	r3, #15
 80004f6:	18fb      	adds	r3, r7, r3
 80004f8:	2201      	movs	r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80004fc:	e02a      	b.n	8000554 <led_signal_solid_fsm+0xa0>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	6859      	ldr	r1, [r3, #4]
 8000504:	689a      	ldr	r2, [r3, #8]
 8000506:	f000 f8ad 	bl	8000664 <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 800050a:	230f      	movs	r3, #15
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	2202      	movs	r2, #2
 8000510:	701a      	strb	r2, [r3, #0]
			break;
 8000512:	e022      	b.n	800055a <led_signal_solid_fsm+0xa6>
		case LED_SIGNAL_STATE_SOLID_ON:

			if(control == LED_SIGNAL_CTRL_STOP)
 8000514:	230e      	movs	r3, #14
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d11c      	bne.n	8000558 <led_signal_solid_fsm+0xa4>
			{
				state = LED_SIGNAL_STATE_END;
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	2204      	movs	r2, #4
 8000524:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000526:	e017      	b.n	8000558 <led_signal_solid_fsm+0xa4>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6818      	ldr	r0, [r3, #0]
 800052c:	6859      	ldr	r1, [r3, #4]
 800052e:	689a      	ldr	r2, [r3, #8]
 8000530:	f000 f8ac 	bl	800068c <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000534:	230f      	movs	r3, #15
 8000536:	18fb      	adds	r3, r7, r3
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
			break;
 800053c:	e00d      	b.n	800055a <led_signal_solid_fsm+0xa6>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
			led_signal_turn_off(*led_signal);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	6859      	ldr	r1, [r3, #4]
 800054c:	689a      	ldr	r2, [r3, #8]
 800054e:	f000 f89d 	bl	800068c <led_signal_turn_off>
			break;
 8000552:	e002      	b.n	800055a <led_signal_solid_fsm+0xa6>
			break;
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	e000      	b.n	800055a <led_signal_solid_fsm+0xa6>
			break;
 8000558:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	220f      	movs	r2, #15
 800055e:	18ba      	adds	r2, r7, r2
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	729a      	strb	r2, [r3, #10]

	return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b004      	add	sp, #16
 800056c:	bd80      	pop	{r7, pc}

0800056e <led_signal_togle_fsm>:

uint8_t led_signal_togle_fsm(led_signal_t *led_signal)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b084      	sub	sp, #16
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000576:	210f      	movs	r1, #15
 8000578:	187b      	adds	r3, r7, r1
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7a92      	ldrb	r2, [r2, #10]
 800057e:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000580:	230e      	movs	r3, #14
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	7a12      	ldrb	r2, [r2, #8]
 8000588:	701a      	strb	r2, [r3, #0]


	switch(state)
 800058a:	187b      	adds	r3, r7, r1
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d02d      	beq.n	80005ee <led_signal_togle_fsm+0x80>
 8000592:	dc37      	bgt.n	8000604 <led_signal_togle_fsm+0x96>
 8000594:	2b03      	cmp	r3, #3
 8000596:	d01a      	beq.n	80005ce <led_signal_togle_fsm+0x60>
 8000598:	dc34      	bgt.n	8000604 <led_signal_togle_fsm+0x96>
 800059a:	2b00      	cmp	r3, #0
 800059c:	d002      	beq.n	80005a4 <led_signal_togle_fsm+0x36>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00a      	beq.n	80005b8 <led_signal_togle_fsm+0x4a>
 80005a2:	e02f      	b.n	8000604 <led_signal_togle_fsm+0x96>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 80005a4:	230e      	movs	r3, #14
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d135      	bne.n	800061a <led_signal_togle_fsm+0xac>
			{
				state = LED_SIGNAL_STATE_ON;
 80005ae:	230f      	movs	r3, #15
 80005b0:	18fb      	adds	r3, r7, r3
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005b6:	e030      	b.n	800061a <led_signal_togle_fsm+0xac>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	6859      	ldr	r1, [r3, #4]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	f000 f850 	bl	8000664 <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 80005c4:	230f      	movs	r3, #15
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	2203      	movs	r2, #3
 80005ca:	701a      	strb	r2, [r3, #0]
			break;
 80005cc:	e028      	b.n	8000620 <led_signal_togle_fsm+0xb2>
		case LED_SIGNAL_STATE_TOGLE:

			led_signal_toggle(*led_signal);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6818      	ldr	r0, [r3, #0]
 80005d2:	6859      	ldr	r1, [r3, #4]
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	f000 f86d 	bl	80006b4 <led_signal_toggle>

			if(control == LED_SIGNAL_CTRL_STOP)
 80005da:	230e      	movs	r3, #14
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d11c      	bne.n	800061e <led_signal_togle_fsm+0xb0>
			{
				state = LED_SIGNAL_STATE_END;
 80005e4:	230f      	movs	r3, #15
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	2204      	movs	r2, #4
 80005ea:	701a      	strb	r2, [r3, #0]
			}
			break;
 80005ec:	e017      	b.n	800061e <led_signal_togle_fsm+0xb0>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6818      	ldr	r0, [r3, #0]
 80005f2:	6859      	ldr	r1, [r3, #4]
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f000 f849 	bl	800068c <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 80005fa:	230f      	movs	r3, #15
 80005fc:	18fb      	adds	r3, r7, r3
 80005fe:	2200      	movs	r2, #0
 8000600:	701a      	strb	r2, [r3, #0]
			break;
 8000602:	e00d      	b.n	8000620 <led_signal_togle_fsm+0xb2>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000604:	230f      	movs	r3, #15
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
			led_signal_turn_off(*led_signal);
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6818      	ldr	r0, [r3, #0]
 8000610:	6859      	ldr	r1, [r3, #4]
 8000612:	689a      	ldr	r2, [r3, #8]
 8000614:	f000 f83a 	bl	800068c <led_signal_turn_off>
			break;
 8000618:	e002      	b.n	8000620 <led_signal_togle_fsm+0xb2>
			break;
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	e000      	b.n	8000620 <led_signal_togle_fsm+0xb2>
			break;
 800061e:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	220f      	movs	r2, #15
 8000624:	18ba      	adds	r2, r7, r2
 8000626:	7812      	ldrb	r2, [r2, #0]
 8000628:	729a      	strb	r2, [r3, #10]

	return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b004      	add	sp, #16
 8000632:	bd80      	pop	{r7, pc}

08000634 <led_signal_start>:


uint8_t led_signal_start(led_signal_t *led_signal)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_START;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	721a      	strb	r2, [r3, #8]

	return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b002      	add	sp, #8
 800064a:	bd80      	pop	{r7, pc}

0800064c <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2201      	movs	r2, #1
 8000658:	721a      	strb	r2, [r3, #8]

	return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}

08000664 <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	6018      	str	r0, [r3, #0]
 800066e:	6059      	str	r1, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	6818      	ldr	r0, [r3, #0]
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	2201      	movs	r2, #1
 800067c:	0019      	movs	r1, r3
 800067e:	f003 faec 	bl	8003c5a <HAL_GPIO_WritePin>
	return 0;
 8000682:	2300      	movs	r3, #0
}
 8000684:	0018      	movs	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	b004      	add	sp, #16
 800068a:	bd80      	pop	{r7, pc}

0800068c <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	6059      	str	r1, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	889b      	ldrh	r3, [r3, #4]
 80006a2:	2200      	movs	r2, #0
 80006a4:	0019      	movs	r1, r3
 80006a6:	f003 fad8 	bl	8003c5a <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
 80006aa:	2300      	movs	r3, #0
}
 80006ac:	0018      	movs	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b004      	add	sp, #16
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	6018      	str	r0, [r3, #0]
 80006be:	6059      	str	r1, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	0019      	movs	r1, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f003 fae1 	bl	8003c94 <HAL_GPIO_TogglePin>
	return 0;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	0018      	movs	r0, r3
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bd80      	pop	{r7, pc}

080006dc <light_setup>:
#include "BoardSupport/lights.h"


uint8_t light_setup(light_t *light, light_gpio_t hardware_output_1,
												light_gpio_t hardware_output_2)
{
 80006dc:	b082      	sub	sp, #8
 80006de:	b590      	push	{r4, r7, lr}
 80006e0:	b085      	sub	sp, #20
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	1d38      	adds	r0, r7, #4
 80006e8:	6001      	str	r1, [r0, #0]
 80006ea:	6042      	str	r2, [r0, #4]
 80006ec:	2204      	movs	r2, #4
 80006ee:	2418      	movs	r4, #24
 80006f0:	1912      	adds	r2, r2, r4
 80006f2:	2108      	movs	r1, #8
 80006f4:	468c      	mov	ip, r1
 80006f6:	44bc      	add	ip, r7
 80006f8:	4462      	add	r2, ip
 80006fa:	6013      	str	r3, [r2, #0]

	light->hardware_output_1 = hardware_output_1;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	1d3a      	adds	r2, r7, #4
 8000700:	3304      	adds	r3, #4
 8000702:	ca03      	ldmia	r2!, {r0, r1}
 8000704:	c303      	stmia	r3!, {r0, r1}
	light->hardware_output_2 = hardware_output_2;
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2204      	movs	r2, #4
 800070a:	1912      	adds	r2, r2, r4
 800070c:	2108      	movs	r1, #8
 800070e:	468c      	mov	ip, r1
 8000710:	44bc      	add	ip, r7
 8000712:	4462      	add	r2, ip
 8000714:	330c      	adds	r3, #12
 8000716:	ca03      	ldmia	r2!, {r0, r1}
 8000718:	c303      	stmia	r3!, {r0, r1}
	light_deenergize(light);
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	0018      	movs	r0, r3
 800071e:	f000 f978 	bl	8000a12 <light_deenergize>
	light->light_status = LIGHT_OFF;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2221      	movs	r2, #33	; 0x21
 800072c:	2101      	movs	r1, #1
 800072e:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2222      	movs	r2, #34	; 0x22
 8000734:	2101      	movs	r1, #1
 8000736:	5499      	strb	r1, [r3, r2]
	light->fsm_pulse_counts = 1;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	2201      	movs	r2, #1
 800073c:	619a      	str	r2, [r3, #24]
	return 0;
 800073e:	2300      	movs	r3, #0

}
 8000740:	0018      	movs	r0, r3
 8000742:	46bd      	mov	sp, r7
 8000744:	b005      	add	sp, #20
 8000746:	bc90      	pop	{r4, r7}
 8000748:	bc08      	pop	{r3}
 800074a:	b002      	add	sp, #8
 800074c:	4718      	bx	r3

0800074e <light_on_pulse_fsm>:
uint8_t light_on_pulse_fsm(light_t *light)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2221      	movs	r2, #33	; 0x21
 800075a:	5c9b      	ldrb	r3, [r3, r2]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d111      	bne.n	8000784 <light_on_pulse_fsm+0x36>
		(light->fsm_run_off != LIGHT_RUN_TRUE) )
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2222      	movs	r2, #34	; 0x22
 8000764:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00c      	beq.n	8000784 <light_on_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_ON);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2101      	movs	r1, #1
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f890 	bl	8000894 <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7d1b      	ldrb	r3, [r3, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d103      	bne.n	8000784 <light_on_pulse_fsm+0x36>
		{
			light->fsm_run_on = LIGHT_RUN_FALSE;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2221      	movs	r2, #33	; 0x21
 8000780:	2101      	movs	r1, #1
 8000782:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}

0800078e <light_off_pulse_fsm>:

uint8_t light_off_pulse_fsm(light_t *light)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2222      	movs	r2, #34	; 0x22
 800079a:	5c9b      	ldrb	r3, [r3, r2]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d111      	bne.n	80007c4 <light_off_pulse_fsm+0x36>
			(light->fsm_run_on != LIGHT_RUN_TRUE) )
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2221      	movs	r2, #33	; 0x21
 80007a4:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d00c      	beq.n	80007c4 <light_off_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_OFF);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2100      	movs	r1, #0
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 f870 	bl	8000894 <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7d1b      	ldrb	r3, [r3, #20]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d103      	bne.n	80007c4 <light_off_pulse_fsm+0x36>
		{
			light->fsm_run_off = LIGHT_RUN_FALSE;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2222      	movs	r2, #34	; 0x22
 80007c0:	2101      	movs	r1, #1
 80007c2:	5499      	strb	r1, [r3, r2]
		}
	}

	return 0;
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	0018      	movs	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b002      	add	sp, #8
 80007cc:	bd80      	pop	{r7, pc}

080007ce <light_ask_off_pulse_fsm>:


uint8_t light_ask_off_pulse_fsm(light_t *light)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 80007d6:	200f      	movs	r0, #15
 80007d8:	183b      	adds	r3, r7, r0
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_FALSE;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2221      	movs	r2, #33	; 0x21
 80007e2:	2101      	movs	r1, #1
 80007e4:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_TRUE;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2222      	movs	r2, #34	; 0x22
 80007ea:	2100      	movs	r1, #0
 80007ec:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2223      	movs	r2, #35	; 0x23
 80007f2:	2100      	movs	r1, #0
 80007f4:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2220      	movs	r2, #32
 80007fa:	2100      	movs	r1, #0
 80007fc:	5499      	strb	r1, [r3, r2]
	status = 0;
 80007fe:	183b      	adds	r3, r7, r0
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

	return status;
 8000804:	183b      	adds	r3, r7, r0
 8000806:	781b      	ldrb	r3, [r3, #0]
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b004      	add	sp, #16
 800080e:	bd80      	pop	{r7, pc}

08000810 <light_ask_on_pulse_fsm>:
uint8_t light_ask_on_pulse_fsm(light_t *light)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000818:	200f      	movs	r0, #15
 800081a:	183b      	adds	r3, r7, r0
 800081c:	2200      	movs	r2, #0
 800081e:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_TRUE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2221      	movs	r2, #33	; 0x21
 8000824:	2100      	movs	r1, #0
 8000826:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2222      	movs	r2, #34	; 0x22
 800082c:	2101      	movs	r1, #1
 800082e:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2223      	movs	r2, #35	; 0x23
 8000834:	2100      	movs	r1, #0
 8000836:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2220      	movs	r2, #32
 800083c:	2100      	movs	r1, #0
 800083e:	5499      	strb	r1, [r3, r2]

	return status;
 8000840:	183b      	adds	r3, r7, r0
 8000842:	781b      	ldrb	r3, [r3, #0]
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b004      	add	sp, #16
 800084a:	bd80      	pop	{r7, pc}

0800084c <light_check_init_fsm>:
uint8_t light_check_init_fsm(light_t light, light_fsm_init_t *init)
{
 800084c:	b084      	sub	sp, #16
 800084e:	b5b0      	push	{r4, r5, r7, lr}
 8000850:	af00      	add	r7, sp, #0
 8000852:	250c      	movs	r5, #12
 8000854:	1d2c      	adds	r4, r5, #4
 8000856:	19e4      	adds	r4, r4, r7
 8000858:	6020      	str	r0, [r4, #0]
 800085a:	6061      	str	r1, [r4, #4]
 800085c:	60a2      	str	r2, [r4, #8]
 800085e:	60e3      	str	r3, [r4, #12]
	*init = light.fsm_init;
 8000860:	1d2b      	adds	r3, r5, #4
 8000862:	19db      	adds	r3, r3, r7
 8000864:	2223      	movs	r2, #35	; 0x23
 8000866:	5c9a      	ldrb	r2, [r3, r2]
 8000868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800086a:	701a      	strb	r2, [r3, #0]
	return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	bcb0      	pop	{r4, r5, r7}
 8000874:	bc08      	pop	{r3}
 8000876:	b004      	add	sp, #16
 8000878:	4718      	bx	r3

0800087a <light_acknowledge_init_fsm>:

uint8_t light_acknowledge_init_fsm(light_t *light)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
	light->fsm_init = LIGHT_INIT_FALSE;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2223      	movs	r2, #35	; 0x23
 8000886:	2101      	movs	r1, #1
 8000888:	5499      	strb	r1, [r3, r2]
	return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}

08000894 <light_pulse_fsm>:



uint8_t light_pulse_fsm(light_t *light, light_status_t new_status)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	000a      	movs	r2, r1
 800089e:	1cfb      	adds	r3, r7, #3
 80008a0:	701a      	strb	r2, [r3, #0]
	//TODO: (high) check if the implementation of this FSM is necessary

	light_fsm_state_t state = light->fsm_state;
 80008a2:	201f      	movs	r0, #31
 80008a4:	183b      	adds	r3, r7, r0
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	2120      	movs	r1, #32
 80008aa:	5c52      	ldrb	r2, [r2, r1]
 80008ac:	701a      	strb	r2, [r3, #0]
//	light_fsm_init_t fsm_init = light->fsm_init;
	uint32_t fsm_pulse_counts = light->fsm_pulse_counts;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	613b      	str	r3, [r7, #16]
	uint32_t fsm_pulse_idx = light->fsm_pulse_idx;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	61bb      	str	r3, [r7, #24]
	light_fsm_status_t fsm_status = light->fsm_status;
 80008ba:	2317      	movs	r3, #23
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	7d12      	ldrb	r2, [r2, #20]
 80008c2:	701a      	strb	r2, [r3, #0]
	light_fsm_init_t fsm_init = light->fsm_init;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	2123      	movs	r1, #35	; 0x23
 80008cc:	5c52      	ldrb	r2, [r2, r1]
 80008ce:	701a      	strb	r2, [r3, #0]
//	light_status_t light_status = light->light_status;
//	light_status_t new_light_status = light->new_light_status;


	switch(state)
 80008d0:	183b      	adds	r3, r7, r0
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d035      	beq.n	8000944 <light_pulse_fsm+0xb0>
 80008d8:	dc41      	bgt.n	800095e <light_pulse_fsm+0xca>
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <light_pulse_fsm+0x50>
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d01e      	beq.n	8000920 <light_pulse_fsm+0x8c>
			fsm_status = LIGHT_STATE_STATUS_READY;
			state = LIGHT_STATE_IDLE;
			break;
		default:

			break;
 80008e2:	e03c      	b.n	800095e <light_pulse_fsm+0xca>
				fsm_status = LIGHT_STATE_STATUS_BUSY;
 80008e4:	2317      	movs	r3, #23
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
				if(new_status == LIGHT_ON)
 80008ec:	1cfb      	adds	r3, r7, #3
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d104      	bne.n	80008fe <light_pulse_fsm+0x6a>
					light_on(light);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 f84d 	bl	8000996 <light_on>
 80008fc:	e003      	b.n	8000906 <light_pulse_fsm+0x72>
					light_off(light);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	0018      	movs	r0, r3
 8000902:	f000 f867 	bl	80009d4 <light_off>
				if(fsm_pulse_counts == 0)
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d104      	bne.n	8000916 <light_pulse_fsm+0x82>
					state = LIGHT_STATE_DEENERGIZING;
 800090c:	231f      	movs	r3, #31
 800090e:	18fb      	adds	r3, r7, r3
 8000910:	2203      	movs	r2, #3
 8000912:	701a      	strb	r2, [r3, #0]
			break;
 8000914:	e026      	b.n	8000964 <light_pulse_fsm+0xd0>
					state = LIGHT_STATE_WAIT;
 8000916:	231f      	movs	r3, #31
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e021      	b.n	8000964 <light_pulse_fsm+0xd0>
			fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000920:	2317      	movs	r3, #23
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
			fsm_pulse_idx++;
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	3301      	adds	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
			if(fsm_pulse_idx > fsm_pulse_counts)
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	429a      	cmp	r2, r3
 8000934:	d915      	bls.n	8000962 <light_pulse_fsm+0xce>
				state = LIGHT_STATE_DEENERGIZING;
 8000936:	231f      	movs	r3, #31
 8000938:	18fb      	adds	r3, r7, r3
 800093a:	2203      	movs	r2, #3
 800093c:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
			break;
 8000942:	e00e      	b.n	8000962 <light_pulse_fsm+0xce>
			light_deenergize(light);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f863 	bl	8000a12 <light_deenergize>
			fsm_status = LIGHT_STATE_STATUS_READY;
 800094c:	2317      	movs	r3, #23
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
			state = LIGHT_STATE_IDLE;
 8000954:	231f      	movs	r3, #31
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
			break;
 800095c:	e002      	b.n	8000964 <light_pulse_fsm+0xd0>
			break;
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	e000      	b.n	8000964 <light_pulse_fsm+0xd0>
			break;
 8000962:	46c0      	nop			; (mov r8, r8)
	}

	light->fsm_state = state;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	221f      	movs	r2, #31
 8000968:	18ba      	adds	r2, r7, r2
 800096a:	2120      	movs	r1, #32
 800096c:	7812      	ldrb	r2, [r2, #0]
 800096e:	545a      	strb	r2, [r3, r1]
	light->fsm_init = fsm_init;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	220f      	movs	r2, #15
 8000974:	18ba      	adds	r2, r7, r2
 8000976:	2123      	movs	r1, #35	; 0x23
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	545a      	strb	r2, [r3, r1]
	light->fsm_pulse_idx = fsm_pulse_idx;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	61da      	str	r2, [r3, #28]
	light->fsm_status = fsm_status;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2217      	movs	r2, #23
 8000986:	18ba      	adds	r2, r7, r2
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	751a      	strb	r2, [r3, #20]

	return 0;
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b008      	add	sp, #32
 8000994:	bd80      	pop	{r7, pc}

08000996 <light_on>:

uint8_t light_on(light_t *light)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6858      	ldr	r0, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	891b      	ldrh	r3, [r3, #8]
 80009a6:	2200      	movs	r2, #0
 80009a8:	0019      	movs	r1, r3
 80009aa:	f003 f956 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68d8      	ldr	r0, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8a1b      	ldrh	r3, [r3, #16]
 80009b6:	2201      	movs	r2, #1
 80009b8:	0019      	movs	r1, r3
 80009ba:	f003 f94e 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_SET);

	light->light_status = LIGHT_ON;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_ON;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	705a      	strb	r2, [r3, #1]
	return 0;
 80009ca:	2300      	movs	r3, #0
}
 80009cc:	0018      	movs	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b002      	add	sp, #8
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <light_off>:

uint8_t light_off(light_t *light)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	891b      	ldrh	r3, [r3, #8]
 80009e4:	2201      	movs	r2, #1
 80009e6:	0019      	movs	r1, r3
 80009e8:	f003 f937 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68d8      	ldr	r0, [r3, #12]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	8a1b      	ldrh	r3, [r3, #16]
 80009f4:	2200      	movs	r2, #0
 80009f6:	0019      	movs	r1, r3
 80009f8:	f003 f92f 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->light_status = LIGHT_OFF;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_OFF;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	705a      	strb	r2, [r3, #1]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <light_deenergize>:


uint8_t light_deenergize(light_t *light)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6858      	ldr	r0, [r3, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	891b      	ldrh	r3, [r3, #8]
 8000a22:	2200      	movs	r2, #0
 8000a24:	0019      	movs	r1, r3
 8000a26:	f003 f918 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	68d8      	ldr	r0, [r3, #12]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	8a1b      	ldrh	r3, [r3, #16]
 8000a32:	2200      	movs	r2, #0
 8000a34:	0019      	movs	r1, r3
 8000a36:	f003 f910 	bl	8003c5a <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->power_status = LIGHT_POWER_STATUS_DEENERGIZED;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	705a      	strb	r2, [r3, #1]
	return 0;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <pyd1598_setup>:

/**********************************High Level**********************************/
void pyd1598_setup(pyd1598_sensor_t *sensor, pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t serin_inteface,
							pyd1598_hardware_interface_t direct_link_inteface)
{
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	b5b0      	push	{r4, r5, r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af02      	add	r7, sp, #8
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	1d38      	adds	r0, r7, #4
 8000a56:	6001      	str	r1, [r0, #0]
 8000a58:	6042      	str	r2, [r0, #4]
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	2520      	movs	r5, #32
 8000a5e:	1952      	adds	r2, r2, r5
 8000a60:	19d2      	adds	r2, r2, r7
 8000a62:	6013      	str	r3, [r2, #0]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8000a64:	68fc      	ldr	r4, [r7, #12]
 8000a66:	2304      	movs	r3, #4
 8000a68:	195b      	adds	r3, r3, r5
 8000a6a:	19db      	adds	r3, r3, r7
 8000a6c:	1d3a      	adds	r2, r7, #4
 8000a6e:	4669      	mov	r1, sp
 8000a70:	6858      	ldr	r0, [r3, #4]
 8000a72:	6008      	str	r0, [r1, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	6811      	ldr	r1, [r2, #0]
 8000a78:	6852      	ldr	r2, [r2, #4]
 8000a7a:	0020      	movs	r0, r4
 8000a7c:	f000 f831 	bl	8000ae2 <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	3320      	adds	r3, #32
 8000a84:	0018      	movs	r0, r3
 8000a86:	230c      	movs	r3, #12
 8000a88:	195b      	adds	r3, r3, r5
 8000a8a:	19db      	adds	r3, r3, r7
 8000a8c:	6819      	ldr	r1, [r3, #0]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	f000 f85f 	bl	8000b52 <pyd1598_direct_link_setup>



	sensor->current_config.blind_time = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2251      	movs	r2, #81	; 0x51
 8000a98:	2100      	movs	r1, #0
 8000a9a:	5499      	strb	r1, [r3, r2]
	sensor->current_config.count_mode = 0;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	2257      	movs	r2, #87	; 0x57
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	5499      	strb	r1, [r3, r2]
	sensor->current_config.hpf_cutoff = 0;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2256      	movs	r2, #86	; 0x56
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	5499      	strb	r1, [r3, r2]
	sensor->current_config.op_mode = 0;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2254      	movs	r2, #84	; 0x54
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	5499      	strb	r1, [r3, r2]
	sensor->current_config.pulse_counter = 0;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2252      	movs	r2, #82	; 0x52
 8000ab8:	2100      	movs	r1, #0
 8000aba:	5499      	strb	r1, [r3, r2]
	sensor->current_config.signal_source = 0;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2255      	movs	r2, #85	; 0x55
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	5499      	strb	r1, [r3, r2]
	sensor->current_config.threshold = 0;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2250      	movs	r2, #80	; 0x50
 8000ac8:	2100      	movs	r1, #0
 8000aca:	5499      	strb	r1, [r3, r2]
	sensor->current_config.window_time = 0;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2253      	movs	r2, #83	; 0x53
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	5499      	strb	r1, [r3, r2]





}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b004      	add	sp, #16
 8000ada:	bcb0      	pop	{r4, r5, r7}
 8000adc:	bc08      	pop	{r3}
 8000ade:	b002      	add	sp, #8
 8000ae0:	4718      	bx	r3

08000ae2 <pyd1598_serin_setup>:

void pyd1598_serin_setup(pyd1598_serin_t *serin,
							pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	1d38      	adds	r0, r7, #4
 8000aee:	6001      	str	r1, [r0, #0]
 8000af0:	6042      	str	r2, [r0, #4]
 8000af2:	2204      	movs	r2, #4
 8000af4:	2418      	movs	r4, #24
 8000af6:	1912      	adds	r2, r2, r4
 8000af8:	2108      	movs	r1, #8
 8000afa:	468c      	mov	ip, r1
 8000afc:	44bc      	add	ip, r7
 8000afe:	4462      	add	r2, ip
 8000b00:	6013      	str	r3, [r2, #0]
	serin->config = initial_config;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1d3a      	adds	r2, r7, #4
 8000b06:	ca03      	ldmia	r2!, {r0, r1}
 8000b08:	c303      	stmia	r3!, {r0, r1}


	pyd1598_serin_add_all_conf(serin->config, serin);
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	6859      	ldr	r1, [r3, #4]
 8000b12:	f000 fac6 	bl	80010a2 <pyd1598_serin_add_all_conf>

	serin->hardware_inteface = hardware_inteface;
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2204      	movs	r2, #4
 8000b1a:	1912      	adds	r2, r2, r4
 8000b1c:	2108      	movs	r1, #8
 8000b1e:	468c      	mov	ip, r1
 8000b20:	44bc      	add	ip, r7
 8000b22:	4462      	add	r2, ip
 8000b24:	3318      	adds	r3, #24
 8000b26:	ca03      	ldmia	r2!, {r0, r1}
 8000b28:	c303      	stmia	r3!, {r0, r1}
	//This is incremented when data is send to SERIN pin
	serin->data_idx = 0;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
	//This mask is shifted when data is send to SERIN pin.
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	0452      	lsls	r2, r2, #17
 8000b36:	60da      	str	r2, [r3, #12]
	serin->state = PYD1598_SERIN_IDLE;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	751a      	strb	r2, [r3, #20]
	serin->start_fsm = false;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	2200      	movs	r2, #0
 8000b42:	755a      	strb	r2, [r3, #21]




}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	b005      	add	sp, #20
 8000b4a:	bc90      	pop	{r4, r7}
 8000b4c:	bc08      	pop	{r3}
 8000b4e:	b002      	add	sp, #8
 8000b50:	4718      	bx	r3

08000b52 <pyd1598_direct_link_setup>:

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	6019      	str	r1, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	1d3a      	adds	r2, r7, #4
 8000b64:	3324      	adds	r3, #36	; 0x24
 8000b66:	ca03      	ldmia	r2!, {r0, r1}
 8000b68:	c303      	stmia	r3!, {r0, r1}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	705a      	strb	r2, [r3, #1]
	direct_link->config.count_mode = 0;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	2200      	movs	r2, #0
 8000b74:	71da      	strb	r2, [r3, #7]
	direct_link->config.hpf_cutoff = 0;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	719a      	strb	r2, [r3, #6]
	direct_link->config.op_mode = 0;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	711a      	strb	r2, [r3, #4]
	direct_link->config.pulse_counter = 0;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	709a      	strb	r2, [r3, #2]
	direct_link->config.signal_source = 0;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	715a      	strb	r2, [r3, #5]
	direct_link->config.threshold = 0;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
	direct_link->config.window_time = 0;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2200      	movs	r2, #0
 8000b98:	70da      	strb	r2, [r3, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	739a      	strb	r2, [r3, #14]
	direct_link->source_value.pir_bpf = 0;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	811a      	strh	r2, [r3, #8]
	direct_link->source_value.pir_lpf = 0;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	815a      	strh	r2, [r3, #10]
	direct_link->source_value.temperature = 0;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	819a      	strh	r2, [r3, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	771a      	strb	r2, [r3, #28]
	direct_link->datagram_bufffer = 0;
 8000bb8:	68f9      	ldr	r1, [r7, #12]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	610a      	str	r2, [r1, #16]
 8000bc0:	614b      	str	r3, [r1, #20]
	direct_link->start_fsm = 0;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2221      	movs	r2, #33	; 0x21
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	5499      	strb	r1, [r3, r2]
	direct_link->time_update_idx = 0;
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	2222      	movs	r2, #34	; 0x22
 8000bce:	2100      	movs	r1, #0
 8000bd0:	5499      	strb	r1, [r3, r2]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b004      	add	sp, #16
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <pyd1598_dl_readout_fsm>:
/*_________________________________Direct link FSM____________________________*/


void pyd1598_dl_readout_fsm(pyd1598_direct_link_t *direct_link,
													pyd1598_op_mode_t op_mode)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	000a      	movs	r2, r1
 8000be6:	1cfb      	adds	r3, r7, #3
 8000be8:	701a      	strb	r2, [r3, #0]

	//Information variables
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	60ba      	str	r2, [r7, #8]
 8000bf2:	60fb      	str	r3, [r7, #12]

	//FSM variables
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8000bf4:	2313      	movs	r3, #19
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	7f52      	ldrb	r2, [r2, #29]
 8000bfc:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000bfe:	231f      	movs	r3, #31
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	7fd2      	ldrb	r2, [r2, #31]
 8000c06:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000c08:	201e      	movs	r0, #30
 8000c0a:	183b      	adds	r3, r7, r0
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	2120      	movs	r1, #32
 8000c10:	5c52      	ldrb	r2, [r2, r1]
 8000c12:	701a      	strb	r2, [r3, #0]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8000c14:	231d      	movs	r3, #29
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	2122      	movs	r1, #34	; 0x22
 8000c1c:	5c52      	ldrb	r2, [r2, r1]
 8000c1e:	701a      	strb	r2, [r3, #0]
	bool start_fsm = direct_link->start_fsm;
 8000c20:	231c      	movs	r3, #28
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	2121      	movs	r1, #33	; 0x21
 8000c28:	5c52      	ldrb	r2, [r2, r1]
 8000c2a:	701a      	strb	r2, [r3, #0]
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8000c2c:	231b      	movs	r3, #27
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	2123      	movs	r1, #35	; 0x23
 8000c34:	5c52      	ldrb	r2, [r2, r1]
 8000c36:	701a      	strb	r2, [r3, #0]

	//Local variable
	uint32_t idx = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]


	//TODO: (low) implement readout abort state

	switch(readout_state)
 8000c3c:	183b      	adds	r3, r7, r0
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d900      	bls.n	8000c46 <pyd1598_dl_readout_fsm+0x6a>
 8000c44:	e0f1      	b.n	8000e2a <pyd1598_dl_readout_fsm+0x24e>
 8000c46:	009a      	lsls	r2, r3, #2
 8000c48:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <pyd1598_dl_readout_fsm+0x2b4>)
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	469f      	mov	pc, r3
	{
		case PYD1598_READOUT_IDLE:

			//This state do nothing until start_fsm is activated outside the FSM
			if(start_fsm == true)
 8000c50:	231c      	movs	r3, #28
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <pyd1598_dl_readout_fsm+0x80>
 8000c5a:	e0ef      	b.n	8000e3c <pyd1598_dl_readout_fsm+0x260>
			{
				//From Table 5 and section 2.7 of the datasheet we know that the
				//time difference from this state and the next ones should be
				// 					120μs < t_{DS} < 150μs
				if(op_mode == PYD1598_FORCE_READOUT)
 8000c5c:	1cfb      	adds	r3, r7, #3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d10e      	bne.n	8000c82 <pyd1598_dl_readout_fsm+0xa6>
				{
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c68:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c6a:	f000 fc13 	bl	8001494 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c72:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c74:	f000 fc4a 	bl	800150c <pyd1598_direct_link_set_one_pulse>
					readout_state = PYD1598_READOUT_GET_MSG;
 8000c78:	231e      	movs	r3, #30
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	e023      	b.n	8000cca <pyd1598_dl_readout_fsm+0xee>

				}
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000c82:	1cfb      	adds	r3, r7, #3
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d003      	beq.n	8000c92 <pyd1598_dl_readout_fsm+0xb6>
 8000c8a:	1cfb      	adds	r3, r7, #3
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d11b      	bne.n	8000cca <pyd1598_dl_readout_fsm+0xee>
						(op_mode == PYD1598_WAKE_UP))
				{
					//TODO: (high) is it possible to set another flag if it
					//comes from an interrupt

					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000c96:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c98:	f000 fbfc 	bl	8001494 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000ca0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ca2:	f000 fc4d 	bl	8001540 <pyd1598_direct_link_set_negative_edge>

					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8000ca6:	1cfb      	adds	r3, r7, #3
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d009      	beq.n	8000cc2 <pyd1598_dl_readout_fsm+0xe6>
 8000cae:	2313      	movs	r3, #19
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <pyd1598_dl_readout_fsm+0xe6>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
					{
						//since in Wake-up mode read is optional:
						readout_state = PYD1598_READOUT_END_COM;
 8000cb8:	231e      	movs	r3, #30
 8000cba:	18fb      	adds	r3, r7, r3
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	e003      	b.n	8000cca <pyd1598_dl_readout_fsm+0xee>
					}
					else
					{
						readout_state = PYD1598_READOUT_GET_MSG;
 8000cc2:	231e      	movs	r3, #30
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	701a      	strb	r2, [r3, #0]
				else
				{
					//TODO: (low) define an error handler
				}

				start_fsm = false;
 8000cca:	231c      	movs	r3, #28
 8000ccc:	18fb      	adds	r3, r7, r3
 8000cce:	2200      	movs	r2, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]

			}

			break;
 8000cda:	e0af      	b.n	8000e3c <pyd1598_dl_readout_fsm+0x260>
		case PYD1598_READOUT_GET_MSG:

			//TODO: (HIGH) remember to protect from interrupts!!!!!!!!!!!!!

			datagram_bufffer = 0;
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60ba      	str	r2, [r7, #8]
 8000ce2:	60fb      	str	r3, [r7, #12]

			//Proceeding with the Readout:
			for(idx = 0; idx < 40; idx++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e01e      	b.n	8000d28 <pyd1598_dl_readout_fsm+0x14c>
			{
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000cee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cf0:	f000 fc0c 	bl	800150c <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000cf8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000cfa:	f000 fbdf 	bl	80014bc <pyd1598_direct_link_set_as_input>

				//TODO: (low) Test without using a function call so the pin bit
				// can be faster.
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2208      	movs	r2, #8
 8000d02:	18ba      	adds	r2, r7, r2
 8000d04:	6879      	ldr	r1, [r7, #4]
 8000d06:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8000d08:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8000d0a:	f000 fc2b 	bl	8001564 <pyd1598_direct_link_read_pin>
													&datagram_bufffer, idx);

				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d12:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d14:	f000 fc14 	bl	8001540 <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d1c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d1e:	f000 fbb9 	bl	8001494 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	2b27      	cmp	r3, #39	; 0x27
 8000d2c:	d9dd      	bls.n	8000cea <pyd1598_dl_readout_fsm+0x10e>

			//host controller must force DIRECT LINK pin to LOW for at least
			//t_{UP} >  1250μs and subsequently release DIRECT LINK (High Z)


			time_update_idx = 0;
 8000d2e:	231d      	movs	r3, #29
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]

			readout_status = READOUT_BUSY;
 8000d36:	231f      	movs	r3, #31
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8000d3e:	231e      	movs	r3, #30
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2203      	movs	r2, #3
 8000d44:	701a      	strb	r2, [r3, #0]

			break;
 8000d46:	e07c      	b.n	8000e42 <pyd1598_dl_readout_fsm+0x266>
		case PYD1598_READOUT_SIGNAL_DOWN:
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d4c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d4e:	f000 fba1 	bl	8001494 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d58:	f000 fbf2 	bl	8001540 <pyd1598_direct_link_set_negative_edge>

			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000d5c:	1cfb      	adds	r3, r7, #3
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d003      	beq.n	8000d6c <pyd1598_dl_readout_fsm+0x190>
 8000d64:	1cfb      	adds	r3, r7, #3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b02      	cmp	r3, #2
 8000d6a:	d119      	bne.n	8000da0 <pyd1598_dl_readout_fsm+0x1c4>
				(op_mode == PYD1598_WAKE_UP))
			{
				//since these op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d70:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d72:	f000 fbb7 	bl	80014e4 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 8000d76:	231f      	movs	r3, #31
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_IDLE;
 8000d7e:	231e      	movs	r3, #30
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
				time_update_idx = 0;
 8000d86:	231d      	movs	r3, #29
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]

				if(op_mode == PYD1598_WAKE_UP)
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d10c      	bne.n	8000db0 <pyd1598_dl_readout_fsm+0x1d4>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000d96:	231b      	movs	r3, #27
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	701a      	strb	r2, [r3, #0]
				if(op_mode == PYD1598_WAKE_UP)
 8000d9e:	e007      	b.n	8000db0 <pyd1598_dl_readout_fsm+0x1d4>


			}
			else
			{
				readout_status = READOUT_BUSY;
 8000da0:	231f      	movs	r3, #31
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 8000da8:	231e      	movs	r3, #30
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	2202      	movs	r2, #2
 8000dae:	701a      	strb	r2, [r3, #0]
			// 					120μs < t_{DS} < 150μs,
			//and since
			//					t_{UP} >  1250μs
			//this state should remain at least 1250/120 = 10.42 -> 11 cycles.

			time_update_idx++;
 8000db0:	211d      	movs	r1, #29
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	3201      	adds	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]

			//TODO: (low) create a mechanism to configure the number of cycles
			if(time_update_idx >= 11)
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b0a      	cmp	r3, #10
 8000dc2:	d93d      	bls.n	8000e40 <pyd1598_dl_readout_fsm+0x264>
			{
				time_update_idx = 0;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 8000dca:	231f      	movs	r3, #31
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_END_COM;
 8000dd2:	231e      	movs	r3, #30
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	701a      	strb	r2, [r3, #0]
			}

			break;
 8000dda:	e031      	b.n	8000e40 <pyd1598_dl_readout_fsm+0x264>
		case PYD1598_READOUT_END_COM:
			//TODO: (low) check if this conditional is required since it is done
			//in PYD1598_READOUT_SIGNAL_DOWN.

			//release DIRECT LINK (High Z)
			if(op_mode == PYD1598_FORCE_READOUT)
 8000ddc:	1cfb      	adds	r3, r7, #3
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d105      	bne.n	8000df0 <pyd1598_dl_readout_fsm+0x214>
			{
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000de8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000dea:	f000 fb67 	bl	80014bc <pyd1598_direct_link_set_as_input>
 8000dee:	e014      	b.n	8000e1a <pyd1598_dl_readout_fsm+0x23e>
			}
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000df0:	1cfb      	adds	r3, r7, #3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d003      	beq.n	8000e00 <pyd1598_dl_readout_fsm+0x224>
 8000df8:	1cfb      	adds	r3, r7, #3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d10c      	bne.n	8000e1a <pyd1598_dl_readout_fsm+0x23e>
					(op_mode == PYD1598_WAKE_UP))
			{
				//since this op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000e04:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000e06:	f000 fb6d 	bl	80014e4 <pyd1598_direct_link_set_as_interrupt_input>

				if(op_mode == PYD1598_WAKE_UP)
 8000e0a:	1cfb      	adds	r3, r7, #3
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d103      	bne.n	8000e1a <pyd1598_dl_readout_fsm+0x23e>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8000e12:	231b      	movs	r3, #27
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	2202      	movs	r2, #2
 8000e18:	701a      	strb	r2, [r3, #0]
				}

			}
			readout_status = READOUT_READY;
 8000e1a:	231f      	movs	r3, #31
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_IDLE;
 8000e22:	231e      	movs	r3, #30
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

		default:
			readout_state = PYD1598_READOUT_IDLE;
 8000e2a:	231e      	movs	r3, #30
 8000e2c:	18fb      	adds	r3, r7, r3
 8000e2e:	2200      	movs	r2, #0
 8000e30:	701a      	strb	r2, [r3, #0]
			readout_status = READOUT_READY;
 8000e32:	231f      	movs	r3, #31
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
			break;
 8000e3a:	e002      	b.n	8000e42 <pyd1598_dl_readout_fsm+0x266>
			break;
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	e000      	b.n	8000e42 <pyd1598_dl_readout_fsm+0x266>
			break;
 8000e40:	46c0      	nop			; (mov r8, r8)
	}

	direct_link->readout_state = readout_state;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	221e      	movs	r2, #30
 8000e46:	18ba      	adds	r2, r7, r2
 8000e48:	2120      	movs	r1, #32
 8000e4a:	7812      	ldrb	r2, [r2, #0]
 8000e4c:	545a      	strb	r2, [r3, r1]
	direct_link->readout_status = readout_status;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	221f      	movs	r2, #31
 8000e52:	18ba      	adds	r2, r7, r2
 8000e54:	7812      	ldrb	r2, [r2, #0]
 8000e56:	77da      	strb	r2, [r3, #31]
	direct_link->time_update_idx = time_update_idx;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	221d      	movs	r2, #29
 8000e5c:	18ba      	adds	r2, r7, r2
 8000e5e:	2122      	movs	r1, #34	; 0x22
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	545a      	strb	r2, [r3, r1]
	direct_link->start_fsm = start_fsm;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	221c      	movs	r2, #28
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	2121      	movs	r1, #33	; 0x21
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	545a      	strb	r2, [r3, r1]
	//Saving datagram to be read outside the ISR:
	direct_link->datagram_bufffer = datagram_bufffer;
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	610a      	str	r2, [r1, #16]
 8000e78:	614b      	str	r3, [r1, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	221b      	movs	r2, #27
 8000e7e:	18ba      	adds	r2, r7, r2
 8000e80:	2123      	movs	r1, #35	; 0x23
 8000e82:	7812      	ldrb	r2, [r2, #0]
 8000e84:	545a      	strb	r2, [r3, r1]


}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b008      	add	sp, #32
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	08005718 	.word	0x08005718

08000e94 <pyd1598_request_write>:


/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	sensor->serin.start_fsm = true;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	755a      	strb	r2, [r3, #21]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b002      	add	sp, #8
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <pyd1598_serin_send_datagram_fsm>:


void pyd1598_serin_send_datagram_fsm(pyd1598_serin_t *serin,
									pyd1598_hardware_interface_t data_link_pin)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08f      	sub	sp, #60	; 0x3c
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	6019      	str	r1, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
	//Declaring the FSM variables and define them to protect the serin variables
	//from any outside change

	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8000eba:	2437      	movs	r4, #55	; 0x37
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	7d12      	ldrb	r2, [r2, #20]
 8000ec2:	701a      	strb	r2, [r3, #0]
	uint32_t data_idx = serin->data_idx;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
	bool start_fsm = serin->start_fsm;
 8000eca:	232f      	movs	r3, #47	; 0x2f
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	7d52      	ldrb	r2, [r2, #21]
 8000ed2:	701a      	strb	r2, [r3, #0]
	pyd1598_config_t config = serin->config;
 8000ed4:	231c      	movs	r3, #28
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	ca03      	ldmia	r2!, {r0, r1}
 8000edc:	c303      	stmia	r3!, {r0, r1}
	uint32_t mask = serin->mask;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t conf_datagram = serin->conf_datagram;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24

	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8000eea:	2314      	movs	r3, #20
 8000eec:	18fa      	adds	r2, r7, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3318      	adds	r3, #24
 8000ef2:	cb03      	ldmia	r3!, {r0, r1}
 8000ef4:	c203      	stmia	r2!, {r0, r1}

	switch(state)
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b05      	cmp	r3, #5
 8000efc:	d900      	bls.n	8000f00 <pyd1598_serin_send_datagram_fsm+0x54>
 8000efe:	e07f      	b.n	8001000 <pyd1598_serin_send_datagram_fsm+0x154>
 8000f00:	009a      	lsls	r2, r3, #2
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <pyd1598_serin_send_datagram_fsm+0x190>)
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	469f      	mov	pc, r3
	{
		case PYD1598_SERIN_IDLE:
			if(start_fsm == true)
 8000f0a:	242f      	movs	r4, #47	; 0x2f
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d100      	bne.n	8000f16 <pyd1598_serin_send_datagram_fsm+0x6a>
 8000f14:	e079      	b.n	800100a <pyd1598_serin_send_datagram_fsm+0x15e>
			{
				pyd1598_direct_link_set_as_output(data_link_pin);
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	6818      	ldr	r0, [r3, #0]
 8000f1a:	6859      	ldr	r1, [r3, #4]
 8000f1c:	f000 faba 	bl	8001494 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000f20:	1d3b      	adds	r3, r7, #4
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	6859      	ldr	r1, [r3, #4]
 8000f26:	f000 fb0b 	bl	8001540 <pyd1598_direct_link_set_negative_edge>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 8000f2a:	2337      	movs	r3, #55	; 0x37
 8000f2c:	18fb      	adds	r3, r7, r3
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
				start_fsm = false;
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000f38:	e067      	b.n	800100a <pyd1598_serin_send_datagram_fsm+0x15e>
		case PYD1598_SERIN_SETUP_FOR_MESSAGE:

			data_idx = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
//			pyd1598_direct_link_set_as_output();
//			pyd1598_direct_link_set_negative_edge();

			mask = PYD1598_SERIN_BIT_24_MASK;
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	045b      	lsls	r3, r3, #17
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
			state = PYD1598_SERIN_SEND_MSG;
 8000f44:	2337      	movs	r3, #55	; 0x37
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	2202      	movs	r2, #2
 8000f4a:	701a      	strb	r2, [r3, #0]

			break;
 8000f4c:	e05e      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_MSG:
			// program the timer interrupt considering: t_{SHD} = 80-150μs
			if((conf_datagram & mask) == 0)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f52:	4013      	ands	r3, r2
 8000f54:	d106      	bne.n	8000f64 <pyd1598_serin_send_datagram_fsm+0xb8>
			{
				pyd1598_serin_set_zero_pulse(output);
 8000f56:	2314      	movs	r3, #20
 8000f58:	18fb      	adds	r3, r7, r3
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	6859      	ldr	r1, [r3, #4]
 8000f5e:	f000 fa5d 	bl	800141c <pyd1598_serin_set_zero_pulse>
 8000f62:	e005      	b.n	8000f70 <pyd1598_serin_send_datagram_fsm+0xc4>
			}
			else
			{
				pyd1598_serin_set_one_pulse(output);
 8000f64:	2314      	movs	r3, #20
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	6818      	ldr	r0, [r3, #0]
 8000f6a:	6859      	ldr	r1, [r3, #4]
 8000f6c:	f000 fa78 	bl	8001460 <pyd1598_serin_set_one_pulse>
			}

			mask >>= 1;
 8000f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f72:	085b      	lsrs	r3, r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28

//			if(data_idx >= (PYD1598_SERIN_MSG_LONG+1))
			if(mask == 0)
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <pyd1598_serin_send_datagram_fsm+0xda>
			{
				state = PYD1598_SERIN_SEND_DOWN;
 8000f7c:	2337      	movs	r3, #55	; 0x37
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	2203      	movs	r2, #3
 8000f82:	701a      	strb	r2, [r3, #0]
			else
			{
				data_idx++;
			}

			break;
 8000f84:	e042      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8000f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f88:	3301      	adds	r3, #1
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8000f8c:	e03e      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_DOWN:
			pyd1598_direct_link_set_as_output(data_link_pin);
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	6859      	ldr	r1, [r3, #4]
 8000f94:	f000 fa7e 	bl	8001494 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	f000 facf 	bl	8001540 <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 8000fa2:	2337      	movs	r3, #55	; 0x37
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	701a      	strb	r2, [r3, #0]

			break;
 8000faa:	e02f      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>

		case PYD1598_SERIN_WAIT_LOAD_TIME:
			//Data Load Time t_{SLT} > 650μs. i.e. 8.125 to 4.333 times
			//(9 times for a 80μs interrupt or 4 times for a 150μs interrupt)
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8000fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fae:	2b22      	cmp	r3, #34	; 0x22
 8000fb0:	d904      	bls.n	8000fbc <pyd1598_serin_send_datagram_fsm+0x110>
			{
				state = PYD1598_SERIN_END_COM;
 8000fb2:	2337      	movs	r3, #55	; 0x37
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				data_idx++;
			}
			break;
 8000fba:	e027      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8000fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8000fc2:	e023      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_END_COM:

			if(config.op_mode == PYD1598_FORCE_READOUT)
 8000fc4:	231c      	movs	r3, #28
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d105      	bne.n	8000fda <pyd1598_serin_send_datagram_fsm+0x12e>
			{
				pyd1598_direct_link_set_as_input(data_link_pin);
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	6818      	ldr	r0, [r3, #0]
 8000fd2:	6859      	ldr	r1, [r3, #4]
 8000fd4:	f000 fa72 	bl	80014bc <pyd1598_direct_link_set_as_input>
 8000fd8:	e00d      	b.n	8000ff6 <pyd1598_serin_send_datagram_fsm+0x14a>
			}
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000fda:	221c      	movs	r2, #28
 8000fdc:	18bb      	adds	r3, r7, r2
 8000fde:	791b      	ldrb	r3, [r3, #4]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d003      	beq.n	8000fec <pyd1598_serin_send_datagram_fsm+0x140>
					(config.op_mode == PYD1598_WAKE_UP) )
 8000fe4:	18bb      	adds	r3, r7, r2
 8000fe6:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d104      	bne.n	8000ff6 <pyd1598_serin_send_datagram_fsm+0x14a>
			{
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	6818      	ldr	r0, [r3, #0]
 8000ff0:	6859      	ldr	r1, [r3, #4]
 8000ff2:	f000 fa77 	bl	80014e4 <pyd1598_direct_link_set_as_interrupt_input>
			}
			state = PYD1598_SERIN_IDLE;
 8000ff6:	2337      	movs	r3, #55	; 0x37
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
			break;
 8000ffe:	e005      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
		default:
			state = PYD1598_SERIN_IDLE;
 8001000:	2337      	movs	r3, #55	; 0x37
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
			break;
 8001008:	e000      	b.n	800100c <pyd1598_serin_send_datagram_fsm+0x160>
			break;
 800100a:	46c0      	nop			; (mov r8, r8)

	}

	//This are the FSM variables that are changed in this function.
	serin->state = state;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	2237      	movs	r2, #55	; 0x37
 8001010:	18ba      	adds	r2, r7, r2
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	751a      	strb	r2, [r3, #20]
	serin->data_idx = data_idx;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800101a:	611a      	str	r2, [r3, #16]
	serin->start_fsm = false;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	755a      	strb	r2, [r3, #21]
	serin->mask = mask;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001026:	60da      	str	r2, [r3, #12]
	serin->start_fsm = start_fsm;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	222f      	movs	r2, #47	; 0x2f
 800102c:	18ba      	adds	r2, r7, r2
 800102e:	7812      	ldrb	r2, [r2, #0]
 8001030:	755a      	strb	r2, [r3, #21]

}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00f      	add	sp, #60	; 0x3c
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	0800572c 	.word	0x0800572c

08001040 <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8001040:	b084      	sub	sp, #16
 8001042:	b5b0      	push	{r4, r5, r7, lr}
 8001044:	af00      	add	r7, sp, #0
 8001046:	250c      	movs	r5, #12
 8001048:	1d2c      	adds	r4, r5, #4
 800104a:	19e4      	adds	r4, r4, r7
 800104c:	6020      	str	r0, [r4, #0]
 800104e:	6061      	str	r1, [r4, #4]
 8001050:	60a2      	str	r2, [r4, #8]
 8001052:	60e3      	str	r3, [r4, #12]
	*motion_isr_status = sensor.motion_sensed;
 8001054:	1d2b      	adds	r3, r5, #4
 8001056:	19db      	adds	r3, r3, r7
 8001058:	2258      	movs	r2, #88	; 0x58
 800105a:	5c9a      	ldrb	r2, [r3, r2]
 800105c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800105e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001060:	2300      	movs	r3, #0
}
 8001062:	0018      	movs	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	bcb0      	pop	{r4, r5, r7}
 8001068:	bc08      	pop	{r3}
 800106a:	b004      	add	sp, #16
 800106c:	4718      	bx	r3

0800106e <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2243      	movs	r2, #67	; 0x43
 800107c:	5c9b      	ldrb	r3, [r3, r2]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d10a      	bne.n	8001098 <pyd1598_read_wakeup_signal+0x2a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2243      	movs	r2, #67	; 0x43
 8001086:	2100      	movs	r1, #0
 8001088:	5499      	strb	r1, [r3, r2]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2202      	movs	r2, #2
 800108e:	701a      	strb	r2, [r3, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2258      	movs	r2, #88	; 0x58
 8001094:	2102      	movs	r1, #2
 8001096:	5499      	strb	r1, [r3, r2]
	}

	return 0;
 8001098:	2300      	movs	r3, #0
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <pyd1598_serin_add_all_conf>:
/*______________________________SERIN functions_______________________________*/


uint8_t pyd1598_serin_add_all_conf(pyd1598_config_t config,
													pyd1598_serin_t *serin)
{
 80010a2:	b5b0      	push	{r4, r5, r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	2408      	movs	r4, #8
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	6018      	str	r0, [r3, #0]
 80010ae:	6059      	str	r1, [r3, #4]
 80010b0:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 80010b2:	2517      	movs	r5, #23
 80010b4:	197b      	adds	r3, r7, r5
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
	//TODO: (low) set error handler
	pyd1598_serin_add_threshold(config.threshold, serin);
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	0011      	movs	r1, r2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 f838 	bl	8001138 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 80010c8:	193b      	adds	r3, r7, r4
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	0011      	movs	r1, r2
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 f855 	bl	8001180 <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 80010d6:	193b      	adds	r3, r7, r4
 80010d8:	789b      	ldrb	r3, [r3, #2]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	0011      	movs	r1, r2
 80010de:	0018      	movs	r0, r3
 80010e0:	f000 f878 	bl	80011d4 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	78db      	ldrb	r3, [r3, #3]
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f89b 	bl	8001228 <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	791b      	ldrb	r3, [r3, #4]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	0011      	movs	r1, r2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 f8be 	bl	800127c <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8001100:	193b      	adds	r3, r7, r4
 8001102:	795b      	ldrb	r3, [r3, #5]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 f8db 	bl	80012c4 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 800110e:	193b      	adds	r3, r7, r4
 8001110:	799b      	ldrb	r3, [r3, #6]
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 f8fe 	bl	8001318 <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 800111c:	193b      	adds	r3, r7, r4
 800111e:	79db      	ldrb	r3, [r3, #7]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	0011      	movs	r1, r2
 8001124:	0018      	movs	r0, r3
 8001126:	f000 f921 	bl	800136c <pyd1598_serin_add_count_mode>
	return status;
 800112a:	197b      	adds	r3, r7, r5
 800112c:	781b      	ldrb	r3, [r3, #0]
}
 800112e:	0018      	movs	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	b006      	add	sp, #24
 8001134:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001138 <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	0002      	movs	r2, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8001146:	200f      	movs	r0, #15
 8001148:	183b      	adds	r3, r7, r0
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]

	serin->config.threshold = new_threshold;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	1dfa      	adds	r2, r7, #7
 8001152:	7812      	ldrb	r2, [r2, #0]
 8001154:	701a      	strb	r2, [r3, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	3308      	adds	r3, #8
 800115a:	0019      	movs	r1, r3
 800115c:	0005      	movs	r5, r0
 800115e:	183c      	adds	r4, r7, r0
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <pyd1598_serin_add_threshold+0x44>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	7818      	ldrb	r0, [r3, #0]
 8001166:	2311      	movs	r3, #17
 8001168:	f000 f92a 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 800116c:	0003      	movs	r3, r0
 800116e:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_THRESHOLD,
											PYD1598_SHIFT_THRESHOLD);
	return status;
 8001170:	197b      	adds	r3, r7, r5
 8001172:	781b      	ldrb	r3, [r3, #0]
}
 8001174:	0018      	movs	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	b004      	add	sp, #16
 800117a:	bdb0      	pop	{r4, r5, r7, pc}
 800117c:	0001ffff 	.word	0x0001ffff

08001180 <pyd1598_serin_add_blind_time>:
//Reg Val is 4 bits ...
//max_value 8sec =8000ms
//min value 0.5sec =500ms
uint8_t pyd1598_serin_add_blind_time(pyd1598_blind_time_t new_blind_time,
														pyd1598_serin_t *serin)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	0002      	movs	r2, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800118e:	200f      	movs	r0, #15
 8001190:	183b      	adds	r3, r7, r0
 8001192:	2200      	movs	r2, #0
 8001194:	701a      	strb	r2, [r3, #0]

	new_blind_time &= 0x0F;
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	1dfa      	adds	r2, r7, #7
 800119a:	7812      	ldrb	r2, [r2, #0]
 800119c:	210f      	movs	r1, #15
 800119e:	400a      	ands	r2, r1
 80011a0:	701a      	strb	r2, [r3, #0]
	serin->config.blind_time = new_blind_time;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	1dfa      	adds	r2, r7, #7
 80011a6:	7812      	ldrb	r2, [r2, #0]
 80011a8:	705a      	strb	r2, [r3, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	3308      	adds	r3, #8
 80011ae:	0019      	movs	r1, r3
 80011b0:	0005      	movs	r5, r0
 80011b2:	183c      	adds	r4, r7, r0
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <pyd1598_serin_add_blind_time+0x50>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	7818      	ldrb	r0, [r3, #0]
 80011ba:	230d      	movs	r3, #13
 80011bc:	f000 f900 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 80011c0:	0003      	movs	r3, r0
 80011c2:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_BLIND_TIME,
											PYD1598_SHIFT_BLIND_TIME);
	return status;
 80011c4:	197b      	adds	r3, r7, r5
 80011c6:	781b      	ldrb	r3, [r3, #0]
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	b004      	add	sp, #16
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}
 80011d0:	01fe1fff 	.word	0x01fe1fff

080011d4 <pyd1598_serin_add_pulse_counter>:

uint8_t pyd1598_serin_add_pulse_counter(pyd1598_pulse_counter_t pulse_counter,
														pyd1598_serin_t *serin)
{
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	0002      	movs	r2, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80011e2:	200f      	movs	r0, #15
 80011e4:	183b      	adds	r3, r7, r0
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

	pulse_counter &= 0x03;
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	1dfa      	adds	r2, r7, #7
 80011ee:	7812      	ldrb	r2, [r2, #0]
 80011f0:	2103      	movs	r1, #3
 80011f2:	400a      	ands	r2, r1
 80011f4:	701a      	strb	r2, [r3, #0]
	serin->config.pulse_counter = pulse_counter;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	1dfa      	adds	r2, r7, #7
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	709a      	strb	r2, [r3, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3308      	adds	r3, #8
 8001202:	0019      	movs	r1, r3
 8001204:	0005      	movs	r5, r0
 8001206:	183c      	adds	r4, r7, r0
 8001208:	4a06      	ldr	r2, [pc, #24]	; (8001224 <pyd1598_serin_add_pulse_counter+0x50>)
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	7818      	ldrb	r0, [r3, #0]
 800120e:	230b      	movs	r3, #11
 8001210:	f000 f8d6 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 8001214:	0003      	movs	r3, r0
 8001216:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_PULSE_COUNTER,
											PYD1598_SHIFT_PULSE_COUNTER);
	return status;
 8001218:	197b      	adds	r3, r7, r5
 800121a:	781b      	ldrb	r3, [r3, #0]
}
 800121c:	0018      	movs	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	b004      	add	sp, #16
 8001222:	bdb0      	pop	{r4, r5, r7, pc}
 8001224:	01ffe7ff 	.word	0x01ffe7ff

08001228 <pyd1598_serin_add_window_time>:
uint8_t pyd1598_serin_add_window_time(pyd1598_window_time_t window_time,
														pyd1598_serin_t *serin)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	0002      	movs	r2, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8001236:	200f      	movs	r0, #15
 8001238:	183b      	adds	r3, r7, r0
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]

	window_time &= 0x03;
 800123e:	1dfb      	adds	r3, r7, #7
 8001240:	1dfa      	adds	r2, r7, #7
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	2103      	movs	r1, #3
 8001246:	400a      	ands	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]
	serin->config.window_time = window_time;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	1dfa      	adds	r2, r7, #7
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	70da      	strb	r2, [r3, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	3308      	adds	r3, #8
 8001256:	0019      	movs	r1, r3
 8001258:	0005      	movs	r5, r0
 800125a:	183c      	adds	r4, r7, r0
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <pyd1598_serin_add_window_time+0x50>)
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	7818      	ldrb	r0, [r3, #0]
 8001262:	2309      	movs	r3, #9
 8001264:	f000 f8ac 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 8001268:	0003      	movs	r3, r0
 800126a:	7023      	strb	r3, [r4, #0]
										PYD1598_MASK_WINDOW_TIME,
										PYD1598_SHIFT_WINDOW_TIME);
	return status;
 800126c:	197b      	adds	r3, r7, r5
 800126e:	781b      	ldrb	r3, [r3, #0]
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b004      	add	sp, #16
 8001276:	bdb0      	pop	{r4, r5, r7, pc}
 8001278:	01fff9ff 	.word	0x01fff9ff

0800127c <pyd1598_serin_add_operation_mode>:
uint8_t pyd1598_serin_add_operation_mode(pyd1598_op_mode_t new_op_mode,
														pyd1598_serin_t *serin)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	0002      	movs	r2, r0
 8001284:	6039      	str	r1, [r7, #0]
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800128a:	200f      	movs	r0, #15
 800128c:	183b      	adds	r3, r7, r0
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
	serin->config.op_mode = new_op_mode;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	1dfa      	adds	r2, r7, #7
 8001296:	7812      	ldrb	r2, [r2, #0]
 8001298:	711a      	strb	r2, [r3, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3308      	adds	r3, #8
 800129e:	0019      	movs	r1, r3
 80012a0:	0005      	movs	r5, r0
 80012a2:	183c      	adds	r4, r7, r0
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <pyd1598_serin_add_operation_mode+0x44>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	7818      	ldrb	r0, [r3, #0]
 80012aa:	2307      	movs	r3, #7
 80012ac:	f000 f888 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 80012b0:	0003      	movs	r3, r0
 80012b2:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_OPERATION_MODES,
											PYD1598_SHIFT_OPERATION_MODES);
	return status;
 80012b4:	197b      	adds	r3, r7, r5
 80012b6:	781b      	ldrb	r3, [r3, #0]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b004      	add	sp, #16
 80012be:	bdb0      	pop	{r4, r5, r7, pc}
 80012c0:	01fffe7f 	.word	0x01fffe7f

080012c4 <pyd1598_serin_add_signal_source>:
uint8_t pyd1598_serin_add_signal_source(pyd1598_signal_source_t signal_source,
														pyd1598_serin_t *serin)
{
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	0002      	movs	r2, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80012d2:	200f      	movs	r0, #15
 80012d4:	183b      	adds	r3, r7, r0
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]

	signal_source &= 0x03;
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	1dfa      	adds	r2, r7, #7
 80012de:	7812      	ldrb	r2, [r2, #0]
 80012e0:	2103      	movs	r1, #3
 80012e2:	400a      	ands	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
	serin->config.signal_source = signal_source;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	1dfa      	adds	r2, r7, #7
 80012ea:	7812      	ldrb	r2, [r2, #0]
 80012ec:	715a      	strb	r2, [r3, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	3308      	adds	r3, #8
 80012f2:	0019      	movs	r1, r3
 80012f4:	0005      	movs	r5, r0
 80012f6:	183c      	adds	r4, r7, r0
 80012f8:	4a06      	ldr	r2, [pc, #24]	; (8001314 <pyd1598_serin_add_signal_source+0x50>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	7818      	ldrb	r0, [r3, #0]
 80012fe:	2305      	movs	r3, #5
 8001300:	f000 f85e 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 8001304:	0003      	movs	r3, r0
 8001306:	7023      	strb	r3, [r4, #0]
												&serin->conf_datagram,
												PYD1598_MASK_SIGNAL_SOURCE,
												PYD1598_SHIFT_SIGNAL_SOURCE);
	return status;
 8001308:	197b      	adds	r3, r7, r5
 800130a:	781b      	ldrb	r3, [r3, #0]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bdb0      	pop	{r4, r5, r7, pc}
 8001314:	01ffff9f 	.word	0x01ffff9f

08001318 <pyd1598_serin_add_hpf_cutoff>:

uint8_t pyd1598_serin_add_hpf_cutoff(pyd1598_hpf_cutoff_t new_hpf_cutoff,
														pyd1598_serin_t *serin)
{
 8001318:	b5b0      	push	{r4, r5, r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	0002      	movs	r2, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8001326:	200f      	movs	r0, #15
 8001328:	183b      	adds	r3, r7, r0
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]

	new_hpf_cutoff &= 0x03;
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	1dfa      	adds	r2, r7, #7
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	2103      	movs	r1, #3
 8001336:	400a      	ands	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	1dfa      	adds	r2, r7, #7
 800133e:	7812      	ldrb	r2, [r2, #0]
 8001340:	719a      	strb	r2, [r3, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	3308      	adds	r3, #8
 8001346:	0019      	movs	r1, r3
 8001348:	0005      	movs	r5, r0
 800134a:	183c      	adds	r4, r7, r0
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <pyd1598_serin_add_hpf_cutoff+0x50>)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	7818      	ldrb	r0, [r3, #0]
 8001352:	2302      	movs	r3, #2
 8001354:	f000 f834 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 8001358:	0003      	movs	r3, r0
 800135a:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_HPF_CUTOFF,
											PYD1598_SHIFT_HPF_CUTOFF);
	return status;
 800135c:	197b      	adds	r3, r7, r5
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bdb0      	pop	{r4, r5, r7, pc}
 8001368:	01fffffb 	.word	0x01fffffb

0800136c <pyd1598_serin_add_count_mode>:

uint8_t pyd1598_serin_add_count_mode(pyd1598_count_mode_t new_count_mode,
														pyd1598_serin_t *serin)
{
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800137a:	200f      	movs	r0, #15
 800137c:	183b      	adds	r3, r7, r0
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]

	new_count_mode &= 0x03;
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	1dfa      	adds	r2, r7, #7
 8001386:	7812      	ldrb	r2, [r2, #0]
 8001388:	2103      	movs	r1, #3
 800138a:	400a      	ands	r2, r1
 800138c:	701a      	strb	r2, [r3, #0]
	serin->config.count_mode = new_count_mode;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	1dfa      	adds	r2, r7, #7
 8001392:	7812      	ldrb	r2, [r2, #0]
 8001394:	71da      	strb	r2, [r3, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3308      	adds	r3, #8
 800139a:	0019      	movs	r1, r3
 800139c:	0005      	movs	r5, r0
 800139e:	183c      	adds	r4, r7, r0
 80013a0:	4a06      	ldr	r2, [pc, #24]	; (80013bc <pyd1598_serin_add_count_mode+0x50>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	7818      	ldrb	r0, [r3, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	f000 f80a 	bl	80013c0 <pyd1598_serin_add_to_datagram>
 80013ac:	0003      	movs	r3, r0
 80013ae:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_COUNT_MODE,
											PYD1598_SHIFT_COUNT_MODE);
	return status;
 80013b0:	197b      	adds	r3, r7, r5
 80013b2:	781b      	ldrb	r3, [r3, #0]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b004      	add	sp, #16
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}
 80013bc:	01fffffd 	.word	0x01fffffd

080013c0 <pyd1598_serin_add_to_datagram>:

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	0019      	movs	r1, r3
 80013cc:	240f      	movs	r4, #15
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	1c02      	adds	r2, r0, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	200e      	movs	r0, #14
 80013d6:	183b      	adds	r3, r7, r0
 80013d8:	1c0a      	adds	r2, r1, #0
 80013da:	701a      	strb	r2, [r3, #0]
	uint32_t old_config = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]
	uint32_t new_config = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	617b      	str	r3, [r7, #20]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	4013      	ands	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 80013f2:	193b      	adds	r3, r7, r4
 80013f4:	781a      	ldrb	r2, [r3, #0]
 80013f6:	183b      	adds	r3, r7, r0
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

	//Adding data to the datagram copy
	new_config |= old_config;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	601a      	str	r2, [r3, #0]

	return 0;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b007      	add	sp, #28
 800141a:	bd90      	pop	{r4, r7, pc}

0800141c <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	003b      	movs	r3, r7
 8001424:	6018      	str	r0, [r3, #0]
 8001426:	6059      	str	r1, [r3, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8001428:	003b      	movs	r3, r7
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	003b      	movs	r3, r7
 800142e:	889b      	ldrh	r3, [r3, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	0019      	movs	r1, r3
 8001434:	f002 fc11 	bl	8003c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8001438:	003b      	movs	r3, r7
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	003b      	movs	r3, r7
 800143e:	889b      	ldrh	r3, [r3, #4]
 8001440:	2201      	movs	r2, #1
 8001442:	0019      	movs	r1, r3
 8001444:	f002 fc09 	bl	8003c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8001448:	003b      	movs	r3, r7
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	003b      	movs	r3, r7
 800144e:	889b      	ldrh	r3, [r3, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	0019      	movs	r1, r3
 8001454:	f002 fc01 	bl	8003c5a <HAL_GPIO_WritePin>
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	003b      	movs	r3, r7
 8001468:	6018      	str	r0, [r3, #0]
 800146a:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 800146c:	003b      	movs	r3, r7
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	003b      	movs	r3, r7
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	0019      	movs	r1, r3
 8001478:	f002 fbef 	bl	8003c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 800147c:	003b      	movs	r3, r7
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	003b      	movs	r3, r7
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	0019      	movs	r1, r3
 8001488:	f002 fbe7 	bl	8003c5a <HAL_GPIO_WritePin>
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b002      	add	sp, #8
 8001492:	bd80      	pop	{r7, pc}

08001494 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	003b      	movs	r3, r7
 800149c:	6018      	str	r0, [r3, #0]
 800149e:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 80014a0:	003b      	movs	r3, r7
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	003b      	movs	r3, r7
 80014a6:	8899      	ldrh	r1, [r3, #4]
 80014a8:	003b      	movs	r3, r7
 80014aa:	799b      	ldrb	r3, [r3, #6]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	001a      	movs	r2, r3
 80014b0:	f000 fb3e 	bl	8001b30 <HAL_DIRECT_LINK_conf_as_output>
}
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}

080014bc <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	003b      	movs	r3, r7
 80014c4:	6018      	str	r0, [r3, #0]
 80014c6:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 80014c8:	003b      	movs	r3, r7
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	003b      	movs	r3, r7
 80014ce:	8899      	ldrh	r1, [r3, #4]
 80014d0:	003b      	movs	r3, r7
 80014d2:	799b      	ldrb	r3, [r3, #6]
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	001a      	movs	r2, r3
 80014d8:	f000 fab4 	bl	8001a44 <HAL_DIRECT_LINK_conf_as_input>
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	003b      	movs	r3, r7
 80014ec:	6018      	str	r0, [r3, #0]
 80014ee:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 80014f0:	003b      	movs	r3, r7
 80014f2:	6818      	ldr	r0, [r3, #0]
 80014f4:	003b      	movs	r3, r7
 80014f6:	8899      	ldrh	r1, [r3, #4]
 80014f8:	003b      	movs	r3, r7
 80014fa:	799b      	ldrb	r3, [r3, #6]
 80014fc:	b25b      	sxtb	r3, r3
 80014fe:	001a      	movs	r2, r3
 8001500:	f000 fad6 	bl	8001ab0 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	003b      	movs	r3, r7
 8001514:	6018      	str	r0, [r3, #0]
 8001516:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8001518:	003b      	movs	r3, r7
 800151a:	6818      	ldr	r0, [r3, #0]
 800151c:	003b      	movs	r3, r7
 800151e:	889b      	ldrh	r3, [r3, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	0019      	movs	r1, r3
 8001524:	f002 fb99 	bl	8003c5a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8001528:	003b      	movs	r3, r7
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	003b      	movs	r3, r7
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	0019      	movs	r1, r3
 8001534:	f002 fb91 	bl	8003c5a <HAL_GPIO_WritePin>
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	003b      	movs	r3, r7
 8001548:	6018      	str	r0, [r3, #0]
 800154a:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 800154c:	003b      	movs	r3, r7
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	003b      	movs	r3, r7
 8001552:	889b      	ldrh	r3, [r3, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	0019      	movs	r1, r3
 8001558:	f002 fb7f 	bl	8003c5a <HAL_GPIO_WritePin>
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}

08001564 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b08f      	sub	sp, #60	; 0x3c
 8001568:	af00      	add	r7, sp, #0
 800156a:	2608      	movs	r6, #8
 800156c:	2418      	movs	r4, #24
 800156e:	1935      	adds	r5, r6, r4
 8001570:	2608      	movs	r6, #8
 8001572:	19be      	adds	r6, r7, r6
 8001574:	19ae      	adds	r6, r5, r6
 8001576:	6030      	str	r0, [r6, #0]
 8001578:	6071      	str	r1, [r6, #4]
 800157a:	627a      	str	r2, [r7, #36]	; 0x24
 800157c:	623b      	str	r3, [r7, #32]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;
 800157e:	2017      	movs	r0, #23
 8001580:	0026      	movs	r6, r4
 8001582:	1983      	adds	r3, r0, r6
 8001584:	2208      	movs	r2, #8
 8001586:	4694      	mov	ip, r2
 8001588:	44bc      	add	ip, r7
 800158a:	4463      	add	r3, ip
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8001590:	2108      	movs	r1, #8
 8001592:	198b      	adds	r3, r1, r6
 8001594:	2208      	movs	r2, #8
 8001596:	4694      	mov	ip, r2
 8001598:	44bc      	add	ip, r7
 800159a:	4463      	add	r3, ip
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	198b      	adds	r3, r1, r6
 80015a0:	2108      	movs	r1, #8
 80015a2:	468c      	mov	ip, r1
 80015a4:	44bc      	add	ip, r7
 80015a6:	4463      	add	r3, ip
 80015a8:	889b      	ldrh	r3, [r3, #4]
 80015aa:	0034      	movs	r4, r6
 80015ac:	1981      	adds	r1, r0, r6
 80015ae:	2008      	movs	r0, #8
 80015b0:	1838      	adds	r0, r7, r0
 80015b2:	180e      	adds	r6, r1, r0
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f002 fb32 	bl	8003c20 <HAL_GPIO_ReadPin>
 80015bc:	0003      	movs	r3, r0
 80015be:	7033      	strb	r3, [r6, #0]

	if(pin_value == GPIO_PIN_SET)
 80015c0:	2017      	movs	r0, #23
 80015c2:	0026      	movs	r6, r4
 80015c4:	1983      	adds	r3, r0, r6
 80015c6:	2208      	movs	r2, #8
 80015c8:	4694      	mov	ip, r2
 80015ca:	44bc      	add	ip, r7
 80015cc:	4463      	add	r3, ip
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d110      	bne.n	80015f6 <pyd1598_direct_link_read_pin+0x92>
	{
		*buffer  |= readout_mask;
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	4b27      	ldr	r3, [pc, #156]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	0006      	movs	r6, r0
 80015e2:	4316      	orrs	r6, r2
 80015e4:	613e      	str	r6, [r7, #16]
 80015e6:	4319      	orrs	r1, r3
 80015e8:	6179      	str	r1, [r7, #20]
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	6939      	ldr	r1, [r7, #16]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	6019      	str	r1, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	e020      	b.n	8001638 <pyd1598_direct_link_read_pin+0xd4>
	}
	else if(pin_value == GPIO_PIN_RESET)
 80015f6:	2317      	movs	r3, #23
 80015f8:	2218      	movs	r2, #24
 80015fa:	189b      	adds	r3, r3, r2
 80015fc:	2208      	movs	r2, #8
 80015fe:	4694      	mov	ip, r2
 8001600:	44bc      	add	ip, r7
 8001602:	4463      	add	r3, ip
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d115      	bne.n	8001636 <pyd1598_direct_link_read_pin+0xd2>
	{
		*buffer  &= ~readout_mask;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4919      	ldr	r1, [pc, #100]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 8001612:	6808      	ldr	r0, [r1, #0]
 8001614:	6849      	ldr	r1, [r1, #4]
 8001616:	43c6      	mvns	r6, r0
 8001618:	61be      	str	r6, [r7, #24]
 800161a:	43c9      	mvns	r1, r1
 800161c:	61f9      	str	r1, [r7, #28]
 800161e:	69b9      	ldr	r1, [r7, #24]
 8001620:	4011      	ands	r1, r2
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	69f9      	ldr	r1, [r7, #28]
 8001626:	4019      	ands	r1, r3
 8001628:	60f9      	str	r1, [r7, #12]
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	6019      	str	r1, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	e000      	b.n	8001638 <pyd1598_direct_link_read_pin+0xd4>
	}
	else
	{
		__NOP();
 8001636:	46c0      	nop			; (mov r8, r8)
	}

	readout_mask = (readout_mask >> 1);
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	07d9      	lsls	r1, r3, #31
 8001640:	0850      	lsrs	r0, r2, #1
 8001642:	6038      	str	r0, [r7, #0]
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	4308      	orrs	r0, r1
 8001648:	6038      	str	r0, [r7, #0]
 800164a:	085b      	lsrs	r3, r3, #1
 800164c:	607b      	str	r3, [r7, #4]
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 8001650:	6839      	ldr	r1, [r7, #0]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6019      	str	r1, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

	if(readout_mask == ((uint64_t) 0))
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	0011      	movs	r1, r2
 8001660:	4319      	orrs	r1, r3
 8001662:	d104      	bne.n	800166e <pyd1598_direct_link_read_pin+0x10a>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <pyd1598_direct_link_read_pin+0x114>)
 8001666:	2200      	movs	r2, #0
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	600a      	str	r2, [r1, #0]
 800166c:	604b      	str	r3, [r1, #4]
	}
	return 0;
 800166e:	2300      	movs	r3, #0

}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b00f      	add	sp, #60	; 0x3c
 8001676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001678:	20000000 	.word	0x20000000

0800167c <switch_selector_setup>:
#include "BoardSupport/switch_selector.h"

uint8_t switch_selector_setup(switch_selector_t *switch_selector,
								switch_selector_gpio_t *switch_selector_gpio,
								uint8_t switch_size)
{
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	1dfb      	adds	r3, r7, #7
 8001688:	701a      	strb	r2, [r3, #0]

	uint8_t status = 0;
 800168a:	231f      	movs	r3, #31
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8001692:	231e      	movs	r3, #30
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]



	if(switch_size > 32)
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b20      	cmp	r3, #32
 80016a0:	d901      	bls.n	80016a6 <switch_selector_setup+0x2a>
	{
		return 2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	e050      	b.n	8001748 <switch_selector_setup+0xcc>
	}


	switch_selector->value = 0;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
	switch_selector->switch_size = switch_size;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	711a      	strb	r2, [r3, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 80016b4:	1dfb      	adds	r3, r7, #7
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	0018      	movs	r0, r3
 80016bc:	f003 ff12 	bl	80054e4 <malloc>
 80016c0:	0003      	movs	r3, r0
 80016c2:	001a      	movs	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]
	uint32_t value;
	switch_selector_status_t pin_status;

	for(idx = 0; idx < switch_size; idx++)
 80016c8:	231e      	movs	r3, #30
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
 80016d0:	e030      	b.n	8001734 <switch_selector_setup+0xb8>
	{
		if((switch_selector_gpio + idx) != NULL)
 80016d2:	201e      	movs	r0, #30
 80016d4:	183b      	adds	r3, r7, r0
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	18d3      	adds	r3, r2, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d012      	beq.n	8001708 <switch_selector_setup+0x8c>
		{
//			switch_selector->switch_selector_gpio[idx] = switch_selector_gpio[idx];
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 80016e2:	183b      	adds	r3, r7, r0
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	18d1      	adds	r1, r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	183b      	adds	r3, r7, r0
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	18d3      	adds	r3, r2, r3
 80016f8:	000a      	movs	r2, r1
 80016fa:	ca03      	ldmia	r2!, {r0, r1}
 80016fc:	c303      	stmia	r3!, {r0, r1}

			status = 0;
 80016fe:	231f      	movs	r3, #31
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	e004      	b.n	8001712 <switch_selector_setup+0x96>
		}
		else
		{
			status = 1;
 8001708:	231f      	movs	r3, #31
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	2201      	movs	r2, #1
 800170e:	701a      	strb	r2, [r3, #0]
			break;
 8001710:	e017      	b.n	8001742 <switch_selector_setup+0xc6>
		}

		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8001712:	2318      	movs	r3, #24
 8001714:	18fc      	adds	r4, r7, r3
 8001716:	2317      	movs	r3, #23
 8001718:	18fa      	adds	r2, r7, r3
 800171a:	251e      	movs	r5, #30
 800171c:	197b      	adds	r3, r7, r5
 800171e:	7819      	ldrb	r1, [r3, #0]
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	0023      	movs	r3, r4
 8001724:	f000 f814 	bl	8001750 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8001728:	0029      	movs	r1, r5
 800172a:	187b      	adds	r3, r7, r1
 800172c:	781a      	ldrb	r2, [r3, #0]
 800172e:	187b      	adds	r3, r7, r1
 8001730:	3201      	adds	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	231e      	movs	r3, #30
 8001736:	18fa      	adds	r2, r7, r3
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	7812      	ldrb	r2, [r2, #0]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3c7      	bcc.n	80016d2 <switch_selector_setup+0x56>

	}

	return status;
 8001742:	231f      	movs	r3, #31
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	781b      	ldrb	r3, [r3, #0]

}
 8001748:	0018      	movs	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	b008      	add	sp, #32
 800174e:	bdb0      	pop	{r4, r5, r7, pc}

08001750 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	250b      	movs	r5, #11
 800175e:	197b      	adds	r3, r7, r5
 8001760:	1c0a      	adds	r2, r1, #0
 8001762:	701a      	strb	r2, [r3, #0]
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]

	switch_mask <<= pin;
 8001768:	197b      	adds	r3, r7, r5
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	617b      	str	r3, [r7, #20]

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	197b      	adds	r3, r7, r5
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	18d3      	adds	r3, r2, r3
 8001780:	6818      	ldr	r0, [r3, #0]
							(switch_selector->switch_selector_gpio + pin)->pin);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	197b      	adds	r3, r7, r5
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	18d3      	adds	r3, r2, r3
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 800178e:	889b      	ldrh	r3, [r3, #4]
 8001790:	2613      	movs	r6, #19
 8001792:	19bc      	adds	r4, r7, r6
 8001794:	0019      	movs	r1, r3
 8001796:	f002 fa43 	bl	8003c20 <HAL_GPIO_ReadPin>
 800179a:	0003      	movs	r3, r0
 800179c:	7023      	strb	r3, [r4, #0]

	if(pin_value == GPIO_PIN_SET)
 800179e:	19bb      	adds	r3, r7, r6
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10e      	bne.n	80017c4 <switch_selector_read_bit+0x74>
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	197b      	adds	r3, r7, r5
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	18d3      	adds	r3, r2, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	719a      	strb	r2, [r3, #6]

		switch_selector->value |= switch_mask;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	431a      	orrs	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	e00f      	b.n	80017e4 <switch_selector_read_bit+0x94>
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	230b      	movs	r3, #11
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	18d3      	adds	r3, r2, r3
 80017d2:	2200      	movs	r2, #0
 80017d4:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	43d2      	mvns	r2, r2
 80017de:	401a      	ands	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	609a      	str	r2, [r3, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	230b      	movs	r3, #11
 80017ea:	18fb      	adds	r3, r7, r3
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	18d3      	adds	r3, r2, r3
 80017f2:	799a      	ldrb	r2, [r3, #6]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	701a      	strb	r2, [r3, #0]

	*value = switch_selector->value;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	601a      	str	r2, [r3, #0]

	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b007      	add	sp, #28
 8001808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800180a <deadline_timer_setup>:
#include "Middleware/deadline_timer.h"

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 800180a:	b082      	sub	sp, #8
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af04      	add	r7, sp, #16
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	2418      	movs	r4, #24
 8001816:	1939      	adds	r1, r7, r4
 8001818:	600a      	str	r2, [r1, #0]
 800181a:	604b      	str	r3, [r1, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2260      	movs	r2, #96	; 0x60
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]

	timer_clock_clear(&deadline_timer->time_current);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	0018      	movs	r0, r3
 8001828:	f000 f87a 	bl	8001920 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	0018      	movs	r0, r3
 8001832:	f000 f875 	bl	8001920 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3348      	adds	r3, #72	; 0x48
 800183a:	0018      	movs	r0, r3
 800183c:	f000 f870 	bl	8001920 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3318      	adds	r3, #24
 8001844:	001d      	movs	r5, r3
 8001846:	193c      	adds	r4, r7, r4
 8001848:	466b      	mov	r3, sp
 800184a:	0018      	movs	r0, r3
 800184c:	0023      	movs	r3, r4
 800184e:	3308      	adds	r3, #8
 8001850:	2210      	movs	r2, #16
 8001852:	0019      	movs	r1, r3
 8001854:	f003 ff4a 	bl	80056ec <memcpy>
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	6863      	ldr	r3, [r4, #4]
 800185c:	0028      	movs	r0, r5
 800185e:	f000 f873 	bl	8001948 <timer_clock_set_time>
	return 0;
 8001862:	2300      	movs	r3, #0

}
 8001864:	0018      	movs	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bcb0      	pop	{r4, r5, r7}
 800186c:	bc08      	pop	{r3}
 800186e:	b002      	add	sp, #8
 8001870:	4718      	bx	r3

08001872 <deadline_timer_force_expiration>:
	time_current = time_current_2;
}


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2260      	movs	r2, #96	; 0x60
 800187e:	2101      	movs	r1, #1
 8001880:	5499      	strb	r1, [r3, r2]
	return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	b002      	add	sp, #8
 800188a:	bd80      	pop	{r7, pc}

0800188c <deadline_timer_check>:
uint8_t deadline_timer_check(deadline_timer_t *deadline_timer,
								deadline_timer_expired_t *deadline_expired)
{
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	b087      	sub	sp, #28
 8001890:	af02      	add	r7, sp, #8
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8001896:	260f      	movs	r6, #15
 8001898:	19bb      	adds	r3, r7, r6
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
	//TODO: (High) fix this to include seconds

//	deadline_timer_expired_t deadline_expired_sec = TIMER_EXPIRED_FALSE;
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 800189e:	250e      	movs	r5, #14
 80018a0:	197b      	adds	r3, r7, r5
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]

//	uint32_t time_current = deadline_timer->time_current.msec;
//	uint32_t deadline = deadline_timer->deadline.msec;
//	uint32_t time_initial = deadline_timer->time_initial.msec;

	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6898      	ldr	r0, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a19      	ldr	r1, [r3, #32]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b2:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <deadline_timer_check+0x50>)
 80018b4:	197b      	adds	r3, r7, r5
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	0023      	movs	r3, r4
 80018ba:	f000 f881 	bl	80019c0 <deadline_timer_compare_check>
											deadline_timer->deadline.msec,
											deadline_timer->time_initial.msec,
											DEADLINE_MAX_MSEC,
											&deadline_expired_msec);

	*deadline_expired = deadline_expired_msec;
 80018be:	197b      	adds	r3, r7, r5
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	701a      	strb	r2, [r3, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 80018c6:	197b      	adds	r3, r7, r5
 80018c8:	7819      	ldrb	r1, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2260      	movs	r2, #96	; 0x60
 80018ce:	5499      	strb	r1, [r3, r2]
	return status;
 80018d0:	19bb      	adds	r3, r7, r6
 80018d2:	781b      	ldrb	r3, [r3, #0]

}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b005      	add	sp, #20
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018dc:	3b9aca00 	.word	0x3b9aca00

080018e0 <deadline_timer_count>:

uint8_t deadline_timer_count(deadline_timer_t *deadline_timer)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	deadline_timer_increment(&deadline_timer->time_current);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	0018      	movs	r0, r3
 80018ec:	f000 f846 	bl	800197c <deadline_timer_increment>
	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b002      	add	sp, #8
 80018f8:	bd80      	pop	{r7, pc}

080018fa <deadline_timer_set_initial_time>:

	return 0;
}

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
	//memcpy fails after several assignations.
	//copy uint32_t variables directly to avoid a race condition
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	630a      	str	r2, [r1, #48]	; 0x30
 800190c:	634b      	str	r3, [r1, #52]	; 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}

08001920 <timer_clock_clear>:
	return 0;
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	timer->counts = 0;
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	2300      	movs	r3, #0
 800192e:	600a      	str	r2, [r1, #0]
 8001930:	604b      	str	r3, [r1, #4]
	timer->msec = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
	timer->sec = 0;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
	return 0;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b002      	add	sp, #8
 8001946:	bd80      	pop	{r7, pc}

08001948 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8001948:	b082      	sub	sp, #8
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	2010      	movs	r0, #16
 8001954:	1839      	adds	r1, r7, r0
 8001956:	600a      	str	r2, [r1, #0]
 8001958:	604b      	str	r3, [r1, #4]
	timer->msec = new_time.msec;
 800195a:	0001      	movs	r1, r0
 800195c:	187b      	adds	r3, r7, r1
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
	timer->sec = new_time.sec;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	60da      	str	r2, [r3, #12]
	return 0;
 800196c:	2300      	movs	r3, #0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bc80      	pop	{r7}
 8001976:	bc08      	pop	{r3}
 8001978:	b002      	add	sp, #8
 800197a:	4718      	bx	r3

0800197c <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]

	timer->msec++;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	609a      	str	r2, [r3, #8]
	timer->counts++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	2001      	movs	r0, #1
 8001996:	2100      	movs	r1, #0
 8001998:	1812      	adds	r2, r2, r0
 800199a:	414b      	adcs	r3, r1
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	600a      	str	r2, [r1, #0]
 80019a0:	604b      	str	r3, [r1, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	4a05      	ldr	r2, [pc, #20]	; (80019bc <deadline_timer_increment+0x40>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d902      	bls.n	80019b2 <deadline_timer_increment+0x36>
	{
//		timer->sec++;
		timer->msec = 0;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
//	if(timer->counts >= (DEADLINE_MAX_COUNT) )
//	{
//		timer->counts = 0;
//	}

	return 0;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b002      	add	sp, #8
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	3b9ac9ff 	.word	0x3b9ac9ff

080019c0 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 80019c0:	b5b0      	push	{r4, r5, r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6178      	str	r0, [r7, #20]
 80019c8:	6139      	str	r1, [r7, #16]
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 80019ce:	2317      	movs	r3, #23
 80019d0:	2208      	movs	r2, #8
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	19db      	adds	r3, r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
	int64_t remaining = 0;
 80019da:	2200      	movs	r2, #0
 80019dc:	2300      	movs	r3, #0
 80019de:	623a      	str	r2, [r7, #32]
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t deadline_difference = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	603b      	str	r3, [r7, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	001c      	movs	r4, r3
 80019f2:	2300      	movs	r3, #0
 80019f4:	001d      	movs	r5, r3
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	1b12      	subs	r2, r2, r4
 80019fc:	41ab      	sbcs	r3, r5
 80019fe:	623a      	str	r2, [r7, #32]
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24

	if(remaining < 0)
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da07      	bge.n	8001a18 <deadline_timer_compare_check+0x58>
	{
		remaining = (max_time - time_initial) + time_current;
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad2      	subs	r2, r2, r3
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	18d3      	adds	r3, r2, r3
 8001a12:	623b      	str	r3, [r7, #32]
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24

	}
	deadline_difference = (uint32_t) remaining;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	61bb      	str	r3, [r7, #24]

	if(deadline_difference >= deadline)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d803      	bhi.n	8001a2c <deadline_timer_compare_check+0x6c>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 8001a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	e002      	b.n	8001a32 <deadline_timer_compare_check+0x72>
	}
	else
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
 8001a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001a32:	2317      	movs	r3, #23
 8001a34:	2208      	movs	r2, #8
 8001a36:	189b      	adds	r3, r3, r2
 8001a38:	19db      	adds	r3, r3, r7
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b00a      	add	sp, #40	; 0x28
 8001a42:	bdb0      	pop	{r4, r5, r7, pc}

08001a44 <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	0008      	movs	r0, r1
 8001a4e:	0011      	movs	r1, r2
 8001a50:	1cbb      	adds	r3, r7, #2
 8001a52:	1c02      	adds	r2, r0, #0
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	1c7b      	adds	r3, r7, #1
 8001a58:	1c0a      	adds	r2, r1, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(irq_type);
 8001a5c:	1c7b      	adds	r3, r7, #1
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b25b      	sxtb	r3, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	f001 fe85 	bl	8003772 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	240c      	movs	r4, #12
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	2314      	movs	r3, #20
 8001a70:	001a      	movs	r2, r3
 8001a72:	2100      	movs	r1, #0
 8001a74:	f003 fdf4 	bl	8005660 <memset>

	HAL_GPIO_DeInit(port, pin);
 8001a78:	1cbb      	adds	r3, r7, #2
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f001 fffd 	bl	8003a80 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8001a86:	1cbb      	adds	r3, r7, #2
 8001a88:	881a      	ldrh	r2, [r3, #0]
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	193b      	adds	r3, r7, r4
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001a9a:	193a      	adds	r2, r7, r4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f001 fe83 	bl	80037ac <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b009      	add	sp, #36	; 0x24
 8001aac:	bd90      	pop	{r4, r7, pc}
	...

08001ab0 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001ab0:	b590      	push	{r4, r7, lr}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	0008      	movs	r0, r1
 8001aba:	0011      	movs	r1, r2
 8001abc:	1cbb      	adds	r3, r7, #2
 8001abe:	1c02      	adds	r2, r0, #0
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	1c7b      	adds	r3, r7, #1
 8001ac4:	1c0a      	adds	r2, r1, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	240c      	movs	r4, #12
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	0018      	movs	r0, r3
 8001ace:	2314      	movs	r3, #20
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f003 fdc4 	bl	8005660 <memset>
	HAL_GPIO_DeInit(port, pin);
 8001ad8:	1cbb      	adds	r3, r7, #2
 8001ada:	881a      	ldrh	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0011      	movs	r1, r2
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 ffcd 	bl	8003a80 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8001ae6:	1cbb      	adds	r3, r7, #2
 8001ae8:	881a      	ldrh	r2, [r3, #0]
 8001aea:	193b      	adds	r3, r7, r4
 8001aec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	4a0e      	ldr	r2, [pc, #56]	; (8001b2c <HAL_DIRECT_LINK_conf_as_interrupt_input+0x7c>)
 8001af2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001afa:	193a      	adds	r2, r7, r4
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0011      	movs	r1, r2
 8001b00:	0018      	movs	r0, r3
 8001b02:	f001 fe53 	bl	80037ac <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 8001b06:	1c7b      	adds	r3, r7, #1
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b25b      	sxtb	r3, r3
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	2100      	movs	r1, #0
 8001b10:	0018      	movs	r0, r3
 8001b12:	f001 fe09 	bl	8003728 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 8001b16:	1c7b      	adds	r3, r7, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f001 fe18 	bl	8003752 <HAL_NVIC_EnableIRQ>


}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	b009      	add	sp, #36	; 0x24
 8001b28:	bd90      	pop	{r4, r7, pc}
 8001b2a:	46c0      	nop			; (mov r8, r8)
 8001b2c:	10110000 	.word	0x10110000

08001b30 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	0008      	movs	r0, r1
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	1cbb      	adds	r3, r7, #2
 8001b3e:	1c02      	adds	r2, r0, #0
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	1c7b      	adds	r3, r7, #1
 8001b44:	1c0a      	adds	r2, r1, #0
 8001b46:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	240c      	movs	r4, #12
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	2314      	movs	r3, #20
 8001b50:	001a      	movs	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	f003 fd84 	bl	8005660 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 8001b58:	1c7b      	adds	r3, r7, #1
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f001 fe07 	bl	8003772 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 8001b64:	1cbb      	adds	r3, r7, #2
 8001b66:	881a      	ldrh	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f001 ff87 	bl	8003a80 <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8001b72:	1cbb      	adds	r3, r7, #2
 8001b74:	881a      	ldrh	r2, [r3, #0]
 8001b76:	0021      	movs	r1, r4
 8001b78:	187b      	adds	r3, r7, r1
 8001b7a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	187b      	adds	r3, r7, r1
 8001b7e:	2201      	movs	r2, #1
 8001b80:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001b8e:	187a      	adds	r2, r7, r1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0011      	movs	r1, r2
 8001b94:	0018      	movs	r0, r3
 8001b96:	f001 fe09 	bl	80037ac <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8001b9a:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0289      	lsls	r1, r1, #10
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]

}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b009      	add	sp, #36	; 0x24
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	40010000 	.word	0x40010000

08001bb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08b      	sub	sp, #44	; 0x2c
 8001bb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	2414      	movs	r4, #20
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	2314      	movs	r3, #20
 8001bc2:	001a      	movs	r2, r3
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f003 fd4b 	bl	8005660 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b73      	ldr	r3, [pc, #460]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bce:	4b72      	ldr	r3, [pc, #456]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8001bd6:	4b70      	ldr	r3, [pc, #448]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bda:	2204      	movs	r2, #4
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be2:	4b6d      	ldr	r3, [pc, #436]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001be4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001be8:	2120      	movs	r1, #32
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
 8001bee:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	4b66      	ldr	r3, [pc, #408]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
 8001c06:	4b64      	ldr	r3, [pc, #400]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b61      	ldr	r3, [pc, #388]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c16:	4b60      	ldr	r3, [pc, #384]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001c18:	2102      	movs	r1, #2
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1e:	4b5e      	ldr	r3, [pc, #376]	; (8001d98 <MX_GPIO_Init+0x1e4>)
 8001c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c22:	2202      	movs	r2, #2
 8001c24:	4013      	ands	r3, r2
 8001c26:	607b      	str	r3, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 8001c2a:	23c0      	movs	r3, #192	; 0xc0
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	485b      	ldr	r0, [pc, #364]	; (8001d9c <MX_GPIO_Init+0x1e8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	0019      	movs	r1, r3
 8001c34:	f002 f811 	bl	8003c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <MX_GPIO_Init+0x1ec>)
 8001c3a:	23a0      	movs	r3, #160	; 0xa0
 8001c3c:	05db      	lsls	r3, r3, #23
 8001c3e:	2200      	movs	r2, #0
 8001c40:	0018      	movs	r0, r3
 8001c42:	f002 f80a 	bl	8003c5a <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8001c46:	4b57      	ldr	r3, [pc, #348]	; (8001da4 <MX_GPIO_Init+0x1f0>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2140      	movs	r1, #64	; 0x40
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f002 f804 	bl	8003c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	22c0      	movs	r2, #192	; 0xc0
 8001c56:	0212      	lsls	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	193b      	adds	r3, r7, r4
 8001c6e:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <MX_GPIO_Init+0x1e8>)
 8001c70:	0019      	movs	r1, r3
 8001c72:	0010      	movs	r0, r2
 8001c74:	f001 fd9a 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001c78:	193b      	adds	r3, r7, r4
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2200      	movs	r2, #0
 8001c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	2200      	movs	r2, #0
 8001c88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <MX_GPIO_Init+0x1f4>)
 8001c8e:	0019      	movs	r1, r3
 8001c90:	0010      	movs	r0, r2
 8001c92:	f001 fd8b 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8001c96:	193b      	adds	r3, r7, r4
 8001c98:	4a41      	ldr	r2, [pc, #260]	; (8001da0 <MX_GPIO_Init+0x1ec>)
 8001c9a:	601a      	str	r2, [r3, #0]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	193b      	adds	r3, r7, r4
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	193a      	adds	r2, r7, r4
 8001cb0:	23a0      	movs	r3, #160	; 0xa0
 8001cb2:	05db      	lsls	r3, r3, #23
 8001cb4:	0011      	movs	r1, r2
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f001 fd78 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8001cbc:	193b      	adds	r3, r7, r4
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cc2:	193b      	adds	r3, r7, r4
 8001cc4:	4a39      	ldr	r2, [pc, #228]	; (8001dac <MX_GPIO_Init+0x1f8>)
 8001cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 8001cce:	193a      	adds	r2, r7, r4
 8001cd0:	23a0      	movs	r3, #160	; 0xa0
 8001cd2:	05db      	lsls	r3, r3, #23
 8001cd4:	0011      	movs	r1, r2
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 fd68 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 8001cdc:	193b      	adds	r3, r7, r4
 8001cde:	2282      	movs	r2, #130	; 0x82
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ce4:	193b      	adds	r3, r7, r4
 8001ce6:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <MX_GPIO_Init+0x1fc>)
 8001ce8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	193b      	adds	r3, r7, r4
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	193a      	adds	r2, r7, r4
 8001cf2:	23a0      	movs	r3, #160	; 0xa0
 8001cf4:	05db      	lsls	r3, r3, #23
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f001 fd57 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	2260      	movs	r2, #96	; 0x60
 8001d02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d04:	193b      	adds	r3, r7, r4
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	193a      	adds	r2, r7, r4
 8001d12:	23a0      	movs	r3, #160	; 0xa0
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f001 fd47 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2240      	movs	r2, #64	; 0x40
 8001d22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	2201      	movs	r2, #1
 8001d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	4a1a      	ldr	r2, [pc, #104]	; (8001da4 <MX_GPIO_Init+0x1f0>)
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f001 fd35 	bl	80037ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8001d42:	0021      	movs	r1, r4
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d4a:	187b      	adds	r3, r7, r1
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <MX_GPIO_Init+0x200>)
 8001d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <MX_GPIO_Init+0x1f0>)
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	f001 fd25 	bl	80037ac <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <MX_GPIO_Init+0x204>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_GPIO_Init+0x204>)
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	0449      	lsls	r1, r1, #17
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2006      	movs	r0, #6
 8001d76:	f001 fcd7 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001d7a:	2006      	movs	r0, #6
 8001d7c:	f001 fce9 	bl	8003752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2007      	movs	r0, #7
 8001d86:	f001 fccf 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d8a:	2007      	movs	r0, #7
 8001d8c:	f001 fce1 	bl	8003752 <HAL_NVIC_EnableIRQ>

}
 8001d90:	46c0      	nop			; (mov r8, r8)
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b00b      	add	sp, #44	; 0x2c
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	50000800 	.word	0x50000800
 8001da0:	00000583 	.word	0x00000583
 8001da4:	50000400 	.word	0x50000400
 8001da8:	50001400 	.word	0x50001400
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10310000 	.word	0x10310000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40010000 	.word	0x40010000

08001dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbe:	b0a9      	sub	sp, #164	; 0xa4
 8001dc0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001dc2:	f001 fb32 	bl	800342a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc6:	f000 fbbd 	bl	8002544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dca:	f7ff fef3 	bl	8001bb4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001dce:	f001 f911 	bl	8002ff4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8001dd2:	f001 f9f1 	bl	80031b8 <MX_TIM14_Init>
  MX_TIM3_Init();
 8001dd6:	f001 f967 	bl	80030a8 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001dda:	f001 fa39 	bl	8003250 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001dde:	f001 fa0f 	bl	8003200 <MX_TIM16_Init>


  //DIP SWITCH SETUP
  switch_selector_t switch_selector;
  switch_selector_gpio_t switch_selector_gpio[2];//We can use malloc also
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8001de2:	2164      	movs	r1, #100	; 0x64
 8001de4:	187b      	adds	r3, r7, r1
 8001de6:	22a0      	movs	r2, #160	; 0xa0
 8001de8:	05d2      	lsls	r2, r2, #23
 8001dea:	601a      	str	r2, [r3, #0]
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2220      	movs	r2, #32
 8001df0:	809a      	strh	r2, [r3, #4]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	22a0      	movs	r2, #160	; 0xa0
 8001df6:	05d2      	lsls	r2, r2, #23
 8001df8:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001dfa:	187b      	adds	r3, r7, r1
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	819a      	strh	r2, [r3, #12]

  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8001e00:	1879      	adds	r1, r7, r1
 8001e02:	2474      	movs	r4, #116	; 0x74
 8001e04:	193b      	adds	r3, r7, r4
 8001e06:	2202      	movs	r2, #2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7ff fc37 	bl	800167c <switch_selector_setup>

  //MOTION SENSOR SETUP
  //-------------------

  switch(switch_selector.value)
 8001e0e:	193b      	adds	r3, r7, r4
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d018      	beq.n	8001e48 <main+0x8c>
 8001e16:	d819      	bhi.n	8001e4c <main+0x90>
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d013      	beq.n	8001e44 <main+0x88>
 8001e1c:	d816      	bhi.n	8001e4c <main+0x90>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <main+0x6c>
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d007      	beq.n	8001e36 <main+0x7a>
 8001e26:	e011      	b.n	8001e4c <main+0x90>
  {
	case MOTION_SWITCH_MODE_0:
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001e28:	4bbc      	ldr	r3, [pc, #752]	; (800211c <main+0x360>)
 8001e2a:	2206      	movs	r2, #6
 8001e2c:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = OFFICE_MOTION_SENSOR_WINDOW;
 8001e2e:	2203      	movs	r2, #3
 8001e30:	4bba      	ldr	r3, [pc, #744]	; (800211c <main+0x360>)
 8001e32:	70da      	strb	r2, [r3, #3]
	  break;
 8001e34:	e00c      	b.n	8001e50 <main+0x94>
	case MOTION_SWITCH_MODE_1:
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001e36:	4bb9      	ldr	r3, [pc, #740]	; (800211c <main+0x360>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	4bb7      	ldr	r3, [pc, #732]	; (800211c <main+0x360>)
 8001e40:	70da      	strb	r2, [r3, #3]
	  break;
 8001e42:	e005      	b.n	8001e50 <main+0x94>
	case MOTION_SWITCH_MODE_2:
		//do nothing
		__NOP();
 8001e44:	46c0      	nop			; (mov r8, r8)
		break;
 8001e46:	e003      	b.n	8001e50 <main+0x94>
	case MOTION_SWITCH_MODE_3:
		//do nothing
		__NOP();
 8001e48:	46c0      	nop			; (mov r8, r8)
		break;
 8001e4a:	e001      	b.n	8001e50 <main+0x94>
	default:
		//do nothing
		__NOP();
 8001e4c:	46c0      	nop			; (mov r8, r8)
	  break;
 8001e4e:	46c0      	nop			; (mov r8, r8)
  }

  //Good initial conf.
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001e50:	4bb2      	ldr	r3, [pc, #712]	; (800211c <main+0x360>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8001e56:	4bb1      	ldr	r3, [pc, #708]	; (800211c <main+0x360>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8001e5c:	4baf      	ldr	r3, [pc, #700]	; (800211c <main+0x360>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	719a      	strb	r2, [r3, #6]
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8001e62:	4bae      	ldr	r3, [pc, #696]	; (800211c <main+0x360>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	711a      	strb	r2, [r3, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_2_PULSES;
 8001e68:	4bac      	ldr	r3, [pc, #688]	; (800211c <main+0x360>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	709a      	strb	r2, [r3, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001e6e:	4bab      	ldr	r3, [pc, #684]	; (800211c <main+0x360>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	715a      	strb	r2, [r3, #5]

  //Hardware assignation:
  pyd1598_hardware_interface_t setin_pin;
  pyd1598_hardware_interface_t direct_link_pin;

  setin_pin.pin = SERIN_Pin;
 8001e74:	215c      	movs	r1, #92	; 0x5c
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2280      	movs	r2, #128	; 0x80
 8001e7a:	01d2      	lsls	r2, r2, #7
 8001e7c:	809a      	strh	r2, [r3, #4]
  setin_pin.port = SERIN_GPIO_Port;
 8001e7e:	187b      	adds	r3, r7, r1
 8001e80:	4aa7      	ldr	r2, [pc, #668]	; (8002120 <main+0x364>)
 8001e82:	601a      	str	r2, [r3, #0]
  setin_pin.irq_type = EXTI4_15_IRQn;
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	2207      	movs	r2, #7
 8001e88:	719a      	strb	r2, [r3, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8001e8a:	2054      	movs	r0, #84	; 0x54
 8001e8c:	183b      	adds	r3, r7, r0
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	809a      	strh	r2, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	4aa3      	ldr	r2, [pc, #652]	; (8002124 <main+0x368>)
 8001e96:	601a      	str	r2, [r3, #0]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8001e98:	183b      	adds	r3, r7, r0
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	719a      	strb	r2, [r3, #6]

//  uint8_t idx = 0;

  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8001e9e:	187b      	adds	r3, r7, r1
 8001ea0:	4a9e      	ldr	r2, [pc, #632]	; (800211c <main+0x360>)
 8001ea2:	4ca1      	ldr	r4, [pc, #644]	; (8002128 <main+0x36c>)
 8001ea4:	1838      	adds	r0, r7, r0
 8001ea6:	2104      	movs	r1, #4
 8001ea8:	4469      	add	r1, sp
 8001eaa:	c860      	ldmia	r0!, {r5, r6}
 8001eac:	c160      	stmia	r1!, {r5, r6}
 8001eae:	4669      	mov	r1, sp
 8001eb0:	6858      	ldr	r0, [r3, #4]
 8001eb2:	6008      	str	r0, [r1, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6811      	ldr	r1, [r2, #0]
 8001eb8:	6852      	ldr	r2, [r2, #4]
 8001eba:	0020      	movs	r0, r4
 8001ebc:	f7fe fdc5 	bl	8000a4a <pyd1598_setup>

//  pyd1598_serin_set_zero_pulse(setin_pin);
  HAL_Delay(1000);
 8001ec0:	23fa      	movs	r3, #250	; 0xfa
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f001 fb2d 	bl	8003524 <HAL_Delay>

  pyd1598_request_write(&motion_sensor);
 8001eca:	4b97      	ldr	r3, [pc, #604]	; (8002128 <main+0x36c>)
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe ffe1 	bl	8000e94 <pyd1598_request_write>

  //LIGHTS SETUP
  //-----------

  deadline.msec = 100;
 8001ed2:	4b96      	ldr	r3, [pc, #600]	; (800212c <main+0x370>)
 8001ed4:	2264      	movs	r2, #100	; 0x64
 8001ed6:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001ed8:	4c94      	ldr	r4, [pc, #592]	; (800212c <main+0x370>)
 8001eda:	4d95      	ldr	r5, [pc, #596]	; (8002130 <main+0x374>)
 8001edc:	466b      	mov	r3, sp
 8001ede:	0018      	movs	r0, r3
 8001ee0:	0023      	movs	r3, r4
 8001ee2:	3308      	adds	r3, #8
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	f003 fc00 	bl	80056ec <memcpy>
 8001eec:	6822      	ldr	r2, [r4, #0]
 8001eee:	6863      	ldr	r3, [r4, #4]
 8001ef0:	0028      	movs	r0, r5
 8001ef2:	f7ff fc8a 	bl	800180a <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8001ef6:	4c8d      	ldr	r4, [pc, #564]	; (800212c <main+0x370>)
 8001ef8:	4d8e      	ldr	r5, [pc, #568]	; (8002134 <main+0x378>)
 8001efa:	466b      	mov	r3, sp
 8001efc:	0018      	movs	r0, r3
 8001efe:	0023      	movs	r3, r4
 8001f00:	3308      	adds	r3, #8
 8001f02:	2210      	movs	r2, #16
 8001f04:	0019      	movs	r1, r3
 8001f06:	f003 fbf1 	bl	80056ec <memcpy>
 8001f0a:	6822      	ldr	r2, [r4, #0]
 8001f0c:	6863      	ldr	r3, [r4, #4]
 8001f0e:	0028      	movs	r0, r5
 8001f10:	f7ff fc7b 	bl	800180a <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8001f14:	4c85      	ldr	r4, [pc, #532]	; (800212c <main+0x370>)
 8001f16:	4d88      	ldr	r5, [pc, #544]	; (8002138 <main+0x37c>)
 8001f18:	466b      	mov	r3, sp
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	0023      	movs	r3, r4
 8001f1e:	3308      	adds	r3, #8
 8001f20:	2210      	movs	r2, #16
 8001f22:	0019      	movs	r1, r3
 8001f24:	f003 fbe2 	bl	80056ec <memcpy>
 8001f28:	6822      	ldr	r2, [r4, #0]
 8001f2a:	6863      	ldr	r3, [r4, #4]
 8001f2c:	0028      	movs	r0, r5
 8001f2e:	f7ff fc6c 	bl	800180a <deadline_timer_setup>
  light_gpio_t light_2_output_a;
  light_gpio_t light_2_output_b;
  light_gpio_t light_uv_output_a;
  light_gpio_t light_uv_output_b;

  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8001f32:	214c      	movs	r1, #76	; 0x4c
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	809a      	strh	r2, [r3, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001f3a:	253c      	movs	r5, #60	; 0x3c
 8001f3c:	197b      	adds	r3, r7, r5
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	809a      	strh	r2, [r3, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8001f44:	262c      	movs	r6, #44	; 0x2c
 8001f46:	19bb      	adds	r3, r7, r6
 8001f48:	2201      	movs	r2, #1
 8001f4a:	809a      	strh	r2, [r3, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001f4c:	2044      	movs	r0, #68	; 0x44
 8001f4e:	183b      	adds	r3, r7, r0
 8001f50:	2280      	movs	r2, #128	; 0x80
 8001f52:	00d2      	lsls	r2, r2, #3
 8001f54:	809a      	strh	r2, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8001f56:	2434      	movs	r4, #52	; 0x34
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	2280      	movs	r2, #128	; 0x80
 8001f5c:	809a      	strh	r2, [r3, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001f5e:	2324      	movs	r3, #36	; 0x24
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	4a76      	ldr	r2, [pc, #472]	; (800213c <main+0x380>)
 8001f64:	809a      	strh	r2, [r3, #4]

  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <main+0x368>)
 8001f6a:	601a      	str	r2, [r3, #0]
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001f6c:	197b      	adds	r3, r7, r5
 8001f6e:	22a0      	movs	r2, #160	; 0xa0
 8001f70:	05d2      	lsls	r2, r2, #23
 8001f72:	601a      	str	r2, [r3, #0]
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8001f74:	19bb      	adds	r3, r7, r6
 8001f76:	22a0      	movs	r2, #160	; 0xa0
 8001f78:	05d2      	lsls	r2, r2, #23
 8001f7a:	601a      	str	r2, [r3, #0]
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8001f7c:	183b      	adds	r3, r7, r0
 8001f7e:	22a0      	movs	r2, #160	; 0xa0
 8001f80:	05d2      	lsls	r2, r2, #23
 8001f82:	601a      	str	r2, [r3, #0]
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8001f84:	193b      	adds	r3, r7, r4
 8001f86:	22a0      	movs	r2, #160	; 0xa0
 8001f88:	05d2      	lsls	r2, r2, #23
 8001f8a:	601a      	str	r2, [r3, #0]
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8001f8c:	2324      	movs	r3, #36	; 0x24
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	4a63      	ldr	r2, [pc, #396]	; (8002120 <main+0x364>)
 8001f92:	601a      	str	r2, [r3, #0]

  light_setup(&light_1,light_1_output_a, light_1_output_b);
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	187a      	adds	r2, r7, r1
 8001f98:	4c69      	ldr	r4, [pc, #420]	; (8002140 <main+0x384>)
 8001f9a:	4669      	mov	r1, sp
 8001f9c:	6858      	ldr	r0, [r3, #4]
 8001f9e:	6008      	str	r0, [r1, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6811      	ldr	r1, [r2, #0]
 8001fa4:	6852      	ldr	r2, [r2, #4]
 8001fa6:	0020      	movs	r0, r4
 8001fa8:	f7fe fb98 	bl	80006dc <light_setup>
  light_setup(&light_2,light_2_output_a, light_2_output_b);
 8001fac:	2434      	movs	r4, #52	; 0x34
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	197a      	adds	r2, r7, r5
 8001fb2:	4c64      	ldr	r4, [pc, #400]	; (8002144 <main+0x388>)
 8001fb4:	4669      	mov	r1, sp
 8001fb6:	6858      	ldr	r0, [r3, #4]
 8001fb8:	6008      	str	r0, [r1, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6811      	ldr	r1, [r2, #0]
 8001fbe:	6852      	ldr	r2, [r2, #4]
 8001fc0:	0020      	movs	r0, r4
 8001fc2:	f7fe fb8b 	bl	80006dc <light_setup>
  light_setup(&light_uv,light_uv_output_a, light_uv_output_b);
 8001fc6:	2324      	movs	r3, #36	; 0x24
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	19ba      	adds	r2, r7, r6
 8001fcc:	4c5e      	ldr	r4, [pc, #376]	; (8002148 <main+0x38c>)
 8001fce:	4669      	mov	r1, sp
 8001fd0:	6858      	ldr	r0, [r3, #4]
 8001fd2:	6008      	str	r0, [r1, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6811      	ldr	r1, [r2, #0]
 8001fd8:	6852      	ldr	r2, [r2, #4]
 8001fda:	0020      	movs	r0, r4
 8001fdc:	f7fe fb7e 	bl	80006dc <light_setup>

  //BUTTONS SETUP
  //-------------

  //timers config:
  timer_buttons.msec = 1;
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <main+0x390>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8001fe6:	4c59      	ldr	r4, [pc, #356]	; (800214c <main+0x390>)
 8001fe8:	4d59      	ldr	r5, [pc, #356]	; (8002150 <main+0x394>)
 8001fea:	466b      	mov	r3, sp
 8001fec:	0018      	movs	r0, r3
 8001fee:	0023      	movs	r3, r4
 8001ff0:	3308      	adds	r3, #8
 8001ff2:	2210      	movs	r2, #16
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	f003 fb79 	bl	80056ec <memcpy>
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	6863      	ldr	r3, [r4, #4]
 8001ffe:	0028      	movs	r0, r5
 8002000:	f7ff fc03 	bl	800180a <deadline_timer_setup>

  //Hardware assignation:
  button_gpio_t button_input;
  button_input.pin = LAMP1_IN_Pin;
 8002004:	211c      	movs	r1, #28
 8002006:	187b      	adds	r3, r7, r1
 8002008:	2280      	movs	r2, #128	; 0x80
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	22a0      	movs	r2, #160	; 0xa0
 8002012:	05d2      	lsls	r2, r2, #23
 8002014:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_1, button_input);
 8002016:	000c      	movs	r4, r1
 8002018:	187b      	adds	r3, r7, r1
 800201a:	484e      	ldr	r0, [pc, #312]	; (8002154 <main+0x398>)
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	f7fe f8fe 	bl	8000220 <button_setup>

  button_input.pin = LAMP2_IN_Pin;
 8002024:	0021      	movs	r1, r4
 8002026:	187b      	adds	r3, r7, r1
 8002028:	2208      	movs	r2, #8
 800202a:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP2_IN_GPIO_Port;
 800202c:	187b      	adds	r3, r7, r1
 800202e:	22a0      	movs	r2, #160	; 0xa0
 8002030:	05d2      	lsls	r2, r2, #23
 8002032:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_2, button_input);
 8002034:	000c      	movs	r4, r1
 8002036:	187b      	adds	r3, r7, r1
 8002038:	4847      	ldr	r0, [pc, #284]	; (8002158 <main+0x39c>)
 800203a:	6819      	ldr	r1, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	f7fe f8ef 	bl	8000220 <button_setup>

  button_input.pin = UV_IN_Pin;
 8002042:	0021      	movs	r1, r4
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2204      	movs	r2, #4
 8002048:	809a      	strh	r2, [r3, #4]
  button_input.port = UV_IN_GPIO_Port;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	22a0      	movs	r2, #160	; 0xa0
 800204e:	05d2      	lsls	r2, r2, #23
 8002050:	601a      	str	r2, [r3, #0]
  button_setup(&button_uv, button_input);
 8002052:	187b      	adds	r3, r7, r1
 8002054:	4841      	ldr	r0, [pc, #260]	; (800215c <main+0x3a0>)
 8002056:	6819      	ldr	r1, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	f7fe f8e1 	bl	8000220 <button_setup>
  //-------------
  led_signal_t signal_led;
  led_signal_gpio_t signal_led_gpio;
  deadline_timer_expired_t indicator_timer_expired;

  signal_led_gpio.pin = LED_Pin;
 800205e:	2108      	movs	r1, #8
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2202      	movs	r2, #2
 8002064:	809a      	strh	r2, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	22a0      	movs	r2, #160	; 0xa0
 800206a:	05d2      	lsls	r2, r2, #23
 800206c:	601a      	str	r2, [r3, #0]
  led_signal_setup(&signal_led, signal_led_gpio);
 800206e:	187b      	adds	r3, r7, r1
 8002070:	2610      	movs	r6, #16
 8002072:	19b8      	adds	r0, r7, r6
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	f7fe f9c7 	bl	800040a <led_signal_setup>
  deadline.msec = 500;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <main+0x370>)
 800207e:	22fa      	movs	r2, #250	; 0xfa
 8002080:	0052      	lsls	r2, r2, #1
 8002082:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8002084:	4b29      	ldr	r3, [pc, #164]	; (800212c <main+0x370>)
 8002086:	2200      	movs	r2, #0
 8002088:	60da      	str	r2, [r3, #12]

//  deadline_timer_setup_shared_clock(&deadline_led_indicator, &deadline_buttons.time_current,
//  		  	  	  	  	  	  	  	  	  deadline);
  deadline_timer_setup(&deadline_led_indicator, deadline);
 800208a:	4c28      	ldr	r4, [pc, #160]	; (800212c <main+0x370>)
 800208c:	4d34      	ldr	r5, [pc, #208]	; (8002160 <main+0x3a4>)
 800208e:	466b      	mov	r3, sp
 8002090:	0018      	movs	r0, r3
 8002092:	0023      	movs	r3, r4
 8002094:	3308      	adds	r3, #8
 8002096:	2210      	movs	r2, #16
 8002098:	0019      	movs	r1, r3
 800209a:	f003 fb27 	bl	80056ec <memcpy>
 800209e:	6822      	ldr	r2, [r4, #0]
 80020a0:	6863      	ldr	r3, [r4, #4]
 80020a2:	0028      	movs	r0, r5
 80020a4:	f7ff fbb1 	bl	800180a <deadline_timer_setup>

  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 80020a8:	19bb      	adds	r3, r7, r6
 80020aa:	2101      	movs	r1, #1
 80020ac:	0018      	movs	r0, r3
 80020ae:	f7fe f9f1 	bl	8000494 <led_signal_type_selector>
     * MOTION_SWITCH_MODE_0	=	OFFFICE
     * MOTION_SWITCH_MODE_1	=	RESIDENTIAL
     * MOTION_SWITCH_MODE_2	=
     * */
    //timers config:
    switch(switch_selector.value)
 80020b2:	2374      	movs	r3, #116	; 0x74
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d02a      	beq.n	8002112 <main+0x356>
 80020bc:	d82b      	bhi.n	8002116 <main+0x35a>
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d062      	beq.n	8002188 <main+0x3cc>
 80020c2:	d828      	bhi.n	8002116 <main+0x35a>
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d002      	beq.n	80020ce <main+0x312>
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d011      	beq.n	80020f0 <main+0x334>
 80020cc:	e023      	b.n	8002116 <main+0x35a>
    {
      case MOTION_SWITCH_MODE_0:
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <main+0x3a8>)
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <main+0x3ac>)
 80020d2:	609a      	str	r2, [r3, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 80020d4:	4b25      	ldr	r3, [pc, #148]	; (800216c <main+0x3b0>)
 80020d6:	4a24      	ldr	r2, [pc, #144]	; (8002168 <main+0x3ac>)
 80020d8:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <main+0x3b4>)
 80020dc:	22e1      	movs	r2, #225	; 0xe1
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <main+0x3b8>)
 80020e4:	4a24      	ldr	r2, [pc, #144]	; (8002178 <main+0x3bc>)
 80020e6:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_timeout.msec = OFFICE_LAMP_UV_TIMEOUT_MS;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <main+0x3c0>)
 80020ea:	4a25      	ldr	r2, [pc, #148]	; (8002180 <main+0x3c4>)
 80020ec:	609a      	str	r2, [r3, #8]
    	  break;
 80020ee:	e04c      	b.n	800218a <main+0x3ce>
      case MOTION_SWITCH_MODE_1:
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <main+0x3a8>)
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <main+0x3ac>)
 80020f4:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <main+0x3b0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <main+0x3b4>)
 80020fe:	22e1      	movs	r2, #225	; 0xe1
 8002100:	0092      	lsls	r2, r2, #2
 8002102:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <main+0x3b8>)
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <main+0x3c8>)
 8002108:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <main+0x3c0>)
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <main+0x3c4>)
 800210e:	609a      	str	r2, [r3, #8]
    	  break;
 8002110:	e03b      	b.n	800218a <main+0x3ce>
      case MOTION_SWITCH_MODE_2:
    	  break;
      case MOTION_SWITCH_MODE_3:
    	  //do nothing
    	  __NOP();
 8002112:	46c0      	nop			; (mov r8, r8)
    	  break;
 8002114:	e039      	b.n	800218a <main+0x3ce>
      default:
    	  //do nothing
    	  __NOP();
 8002116:	46c0      	nop			; (mov r8, r8)
    	  break;
 8002118:	e037      	b.n	800218a <main+0x3ce>
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	200000e8 	.word	0x200000e8
 8002120:	50000800 	.word	0x50000800
 8002124:	50000400 	.word	0x50000400
 8002128:	20000088 	.word	0x20000088
 800212c:	200000f0 	.word	0x200000f0
 8002130:	20000108 	.word	0x20000108
 8002134:	20000170 	.word	0x20000170
 8002138:	200001d8 	.word	0x200001d8
 800213c:	ffff8000 	.word	0xffff8000
 8002140:	20000240 	.word	0x20000240
 8002144:	20000264 	.word	0x20000264
 8002148:	20000288 	.word	0x20000288
 800214c:	20000318 	.word	0x20000318
 8002150:	200002b0 	.word	0x200002b0
 8002154:	20000330 	.word	0x20000330
 8002158:	20000348 	.word	0x20000348
 800215c:	20000360 	.word	0x20000360
 8002160:	20000380 	.word	0x20000380
 8002164:	20000450 	.word	0x20000450
 8002168:	000927c0 	.word	0x000927c0
 800216c:	200004d8 	.word	0x200004d8
 8002170:	200005e0 	.word	0x200005e0
 8002174:	20000560 	.word	0x20000560
 8002178:	00124f80 	.word	0x00124f80
 800217c:	20000660 	.word	0x20000660
 8002180:	00002710 	.word	0x00002710
 8002184:	00a4cb80 	.word	0x00a4cb80
    	  break;
 8002188:	46c0      	nop			; (mov r8, r8)
    }

  //Light 1
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 800218a:	4cc9      	ldr	r4, [pc, #804]	; (80024b0 <main+0x6f4>)
 800218c:	4dc9      	ldr	r5, [pc, #804]	; (80024b4 <main+0x6f8>)
 800218e:	466b      	mov	r3, sp
 8002190:	0018      	movs	r0, r3
 8002192:	0023      	movs	r3, r4
 8002194:	3308      	adds	r3, #8
 8002196:	2210      	movs	r2, #16
 8002198:	0019      	movs	r1, r3
 800219a:	f003 faa7 	bl	80056ec <memcpy>
 800219e:	6822      	ldr	r2, [r4, #0]
 80021a0:	6863      	ldr	r3, [r4, #4]
 80021a2:	0028      	movs	r0, r5
 80021a4:	f7ff fb31 	bl	800180a <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 80021a8:	4bc3      	ldr	r3, [pc, #780]	; (80024b8 <main+0x6fc>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
  //Light 2
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 80021ae:	4cc0      	ldr	r4, [pc, #768]	; (80024b0 <main+0x6f4>)
 80021b0:	4dc2      	ldr	r5, [pc, #776]	; (80024bc <main+0x700>)
 80021b2:	466b      	mov	r3, sp
 80021b4:	0018      	movs	r0, r3
 80021b6:	0023      	movs	r3, r4
 80021b8:	3308      	adds	r3, #8
 80021ba:	2210      	movs	r2, #16
 80021bc:	0019      	movs	r1, r3
 80021be:	f003 fa95 	bl	80056ec <memcpy>
 80021c2:	6822      	ldr	r2, [r4, #0]
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	0028      	movs	r0, r5
 80021c8:	f7ff fb1f 	bl	800180a <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 80021cc:	4bbc      	ldr	r3, [pc, #752]	; (80024c0 <main+0x704>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  //Light UV
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 80021d2:	4cbc      	ldr	r4, [pc, #752]	; (80024c4 <main+0x708>)
 80021d4:	4dbc      	ldr	r5, [pc, #752]	; (80024c8 <main+0x70c>)
 80021d6:	466b      	mov	r3, sp
 80021d8:	0018      	movs	r0, r3
 80021da:	0023      	movs	r3, r4
 80021dc:	3308      	adds	r3, #8
 80021de:	2210      	movs	r2, #16
 80021e0:	0019      	movs	r1, r3
 80021e2:	f003 fa83 	bl	80056ec <memcpy>
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	6863      	ldr	r3, [r4, #4]
 80021ea:	0028      	movs	r0, r5
 80021ec:	f7ff fb0d 	bl	800180a <deadline_timer_setup>
  //Light safe UV
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 80021f0:	4cb6      	ldr	r4, [pc, #728]	; (80024cc <main+0x710>)
 80021f2:	4db7      	ldr	r5, [pc, #732]	; (80024d0 <main+0x714>)
 80021f4:	466b      	mov	r3, sp
 80021f6:	0018      	movs	r0, r3
 80021f8:	0023      	movs	r3, r4
 80021fa:	3308      	adds	r3, #8
 80021fc:	2210      	movs	r2, #16
 80021fe:	0019      	movs	r1, r3
 8002200:	f003 fa74 	bl	80056ec <memcpy>
 8002204:	6822      	ldr	r2, [r4, #0]
 8002206:	6863      	ldr	r3, [r4, #4]
 8002208:	0028      	movs	r0, r5
 800220a:	f7ff fafe 	bl	800180a <deadline_timer_setup>
  //Light UV Timeout
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 800220e:	4cb1      	ldr	r4, [pc, #708]	; (80024d4 <main+0x718>)
 8002210:	4db1      	ldr	r5, [pc, #708]	; (80024d8 <main+0x71c>)
 8002212:	466b      	mov	r3, sp
 8002214:	0018      	movs	r0, r3
 8002216:	0023      	movs	r3, r4
 8002218:	3308      	adds	r3, #8
 800221a:	2210      	movs	r2, #16
 800221c:	0019      	movs	r1, r3
 800221e:	f003 fa65 	bl	80056ec <memcpy>
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	6863      	ldr	r3, [r4, #4]
 8002226:	0028      	movs	r0, r5
 8002228:	f7ff faef 	bl	800180a <deadline_timer_setup>
  //Light UV Wait Timeout
  deadline.msec = 5000;
 800222c:	4bab      	ldr	r3, [pc, #684]	; (80024dc <main+0x720>)
 800222e:	4aac      	ldr	r2, [pc, #688]	; (80024e0 <main+0x724>)
 8002230:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8002232:	4caa      	ldr	r4, [pc, #680]	; (80024dc <main+0x720>)
 8002234:	4dab      	ldr	r5, [pc, #684]	; (80024e4 <main+0x728>)
 8002236:	466b      	mov	r3, sp
 8002238:	0018      	movs	r0, r3
 800223a:	0023      	movs	r3, r4
 800223c:	3308      	adds	r3, #8
 800223e:	2210      	movs	r2, #16
 8002240:	0019      	movs	r1, r3
 8002242:	f003 fa53 	bl	80056ec <memcpy>
 8002246:	6822      	ldr	r2, [r4, #0]
 8002248:	6863      	ldr	r3, [r4, #4]
 800224a:	0028      	movs	r0, r5
 800224c:	f7ff fadd 	bl	800180a <deadline_timer_setup>

  uv_state = MOTION_LIGHT_UV_IDLE;
 8002250:	4ba5      	ldr	r3, [pc, #660]	; (80024e8 <main+0x72c>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
  abort_uv = MOTION_ABORT_FALSE;
 8002256:	4ba5      	ldr	r3, [pc, #660]	; (80024ec <main+0x730>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
  //Light timeout UV

  //motion switch
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 800225c:	4ba4      	ldr	r3, [pc, #656]	; (80024f0 <main+0x734>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 8002262:	4ba4      	ldr	r3, [pc, #656]	; (80024f4 <main+0x738>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 8002268:	4ba3      	ldr	r3, [pc, #652]	; (80024f8 <main+0x73c>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]

  //Start interrupts:
  HAL_TIM_Base_Start_IT(&htim1);
 800226e:	4ba3      	ldr	r3, [pc, #652]	; (80024fc <main+0x740>)
 8002270:	0018      	movs	r0, r3
 8002272:	f002 f8dd 	bl	8004430 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 8002276:	4ba2      	ldr	r3, [pc, #648]	; (8002500 <main+0x744>)
 8002278:	0018      	movs	r0, r3
 800227a:	f002 f8d9 	bl	8004430 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 800227e:	4ba1      	ldr	r3, [pc, #644]	; (8002504 <main+0x748>)
 8002280:	0018      	movs	r0, r3
 8002282:	f002 f8d5 	bl	8004430 <HAL_TIM_Base_Start_IT>

  //Direct Link communication timer
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2016      	movs	r0, #22
 800228c:	f001 fa4c 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002290:	2016      	movs	r0, #22
 8002292:	f001 fa5e 	bl	8003752 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim17);
 8002296:	4b9c      	ldr	r3, [pc, #624]	; (8002508 <main+0x74c>)
 8002298:	0018      	movs	r0, r3
 800229a:	f002 f8c9 	bl	8004430 <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	2100      	movs	r1, #0
 80022a2:	2007      	movs	r0, #7
 80022a4:	f001 fa40 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80022a8:	2007      	movs	r0, #7
 80022aa:	f001 fa52 	bl	8003752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2103      	movs	r1, #3
 80022b2:	2006      	movs	r0, #6
 80022b4:	f001 fa38 	bl	8003728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80022b8:	2006      	movs	r0, #6
 80022ba:	f001 fa4a 	bl	8003752 <HAL_NVIC_EnableIRQ>

  light_ask_off_pulse_fsm(&light_1);
 80022be:	4b93      	ldr	r3, [pc, #588]	; (800250c <main+0x750>)
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fe fa84 	bl	80007ce <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_2);
 80022c6:	4b92      	ldr	r3, [pc, #584]	; (8002510 <main+0x754>)
 80022c8:	0018      	movs	r0, r3
 80022ca:	f7fe fa80 	bl	80007ce <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_uv);
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <main+0x758>)
 80022d0:	0018      	movs	r0, r3
 80022d2:	f7fe fa7c 	bl	80007ce <light_ask_off_pulse_fsm>
  led_signal_stop(&signal_led);
 80022d6:	2310      	movs	r3, #16
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fe f9b6 	bl	800064c <led_signal_stop>
    /* USER CODE BEGIN 3 */
	/**************************************************************************/



	  switch(switch_selector.value)
 80022e0:	2374      	movs	r3, #116	; 0x74
 80022e2:	18fb      	adds	r3, r7, r3
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d100      	bne.n	80022ec <main+0x530>
 80022ea:	e0ad      	b.n	8002448 <main+0x68c>
 80022ec:	d900      	bls.n	80022f0 <main+0x534>
 80022ee:	e0b5      	b.n	800245c <main+0x6a0>
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d100      	bne.n	80022f6 <main+0x53a>
 80022f4:	e09f      	b.n	8002436 <main+0x67a>
 80022f6:	d900      	bls.n	80022fa <main+0x53e>
 80022f8:	e0b0      	b.n	800245c <main+0x6a0>
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <main+0x548>
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d051      	beq.n	80023a6 <main+0x5ea>
 8002302:	e0ab      	b.n	800245c <main+0x6a0>
	  {
		  case MOTION_SWITCH_MODE_0:

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8002304:	4c84      	ldr	r4, [pc, #528]	; (8002518 <main+0x75c>)
 8002306:	4a85      	ldr	r2, [pc, #532]	; (800251c <main+0x760>)
 8002308:	4985      	ldr	r1, [pc, #532]	; (8002520 <main+0x764>)
 800230a:	4886      	ldr	r0, [pc, #536]	; (8002524 <main+0x768>)
 800230c:	4b77      	ldr	r3, [pc, #476]	; (80024ec <main+0x730>)
 800230e:	9304      	str	r3, [sp, #16]
 8002310:	4b79      	ldr	r3, [pc, #484]	; (80024f8 <main+0x73c>)
 8002312:	9303      	str	r3, [sp, #12]
 8002314:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <main+0x738>)
 8002316:	9302      	str	r3, [sp, #8]
 8002318:	4b75      	ldr	r3, [pc, #468]	; (80024f0 <main+0x734>)
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	4b82      	ldr	r3, [pc, #520]	; (8002528 <main+0x76c>)
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	0023      	movs	r3, r4
 8002322:	f000 f9ca 	bl	80026ba <events_detection_uv_waits>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_light_2,
								  &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8002326:	4c63      	ldr	r4, [pc, #396]	; (80024b4 <main+0x6f8>)
 8002328:	4a7e      	ldr	r2, [pc, #504]	; (8002524 <main+0x768>)
 800232a:	497c      	ldr	r1, [pc, #496]	; (800251c <main+0x760>)
 800232c:	4877      	ldr	r0, [pc, #476]	; (800250c <main+0x750>)
 800232e:	4b70      	ldr	r3, [pc, #448]	; (80024f0 <main+0x734>)
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	4b61      	ldr	r3, [pc, #388]	; (80024b8 <main+0x6fc>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	0023      	movs	r3, r4
 8002338:	f000 fa36 	bl	80027a8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 800233c:	4c5f      	ldr	r4, [pc, #380]	; (80024bc <main+0x700>)
 800233e:	4a79      	ldr	r2, [pc, #484]	; (8002524 <main+0x768>)
 8002340:	4975      	ldr	r1, [pc, #468]	; (8002518 <main+0x75c>)
 8002342:	4873      	ldr	r0, [pc, #460]	; (8002510 <main+0x754>)
 8002344:	4b6b      	ldr	r3, [pc, #428]	; (80024f4 <main+0x738>)
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	4b5d      	ldr	r3, [pc, #372]	; (80024c0 <main+0x704>)
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	0023      	movs	r3, r4
 800234e:	f000 fa2b 	bl	80027a8 <motion_light_control_fsm>
										&deadline_motion_light_2, &light_2_state,
										&motion_sensed_light_2);

			  if((light_1.light_status == LIGHT_ON) ||
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <main+0x750>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d003      	beq.n	8002362 <main+0x5a6>
				 (light_2.light_status == LIGHT_ON))
 800235a:	4b6d      	ldr	r3, [pc, #436]	; (8002510 <main+0x754>)
 800235c:	781b      	ldrb	r3, [r3, #0]
			  if((light_1.light_status == LIGHT_ON) ||
 800235e:	2b01      	cmp	r3, #1
 8002360:	d103      	bne.n	800236a <main+0x5ae>
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <main+0x770>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e002      	b.n	8002370 <main+0x5b4>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 800236a:	4b70      	ldr	r3, [pc, #448]	; (800252c <main+0x770>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8002370:	4b6e      	ldr	r3, [pc, #440]	; (800252c <main+0x770>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4d54      	ldr	r5, [pc, #336]	; (80024c8 <main+0x70c>)
 8002376:	4c6b      	ldr	r4, [pc, #428]	; (8002524 <main+0x768>)
 8002378:	496b      	ldr	r1, [pc, #428]	; (8002528 <main+0x76c>)
 800237a:	4866      	ldr	r0, [pc, #408]	; (8002514 <main+0x758>)
 800237c:	2210      	movs	r2, #16
 800237e:	18ba      	adds	r2, r7, r2
 8002380:	9207      	str	r2, [sp, #28]
 8002382:	9306      	str	r3, [sp, #24]
 8002384:	4b59      	ldr	r3, [pc, #356]	; (80024ec <main+0x730>)
 8002386:	9305      	str	r3, [sp, #20]
 8002388:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <main+0x73c>)
 800238a:	9304      	str	r3, [sp, #16]
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <main+0x72c>)
 800238e:	9303      	str	r3, [sp, #12]
 8002390:	4b54      	ldr	r3, [pc, #336]	; (80024e4 <main+0x728>)
 8002392:	9302      	str	r3, [sp, #8]
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <main+0x71c>)
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <main+0x714>)
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	002b      	movs	r3, r5
 800239e:	0022      	movs	r2, r4
 80023a0:	f000 fab8 	bl	8002914 <motion_uv_ctrl_wait_fsm>
								&deadline_motion_uv_timeout,
								&deadline_uv_wait_timeout,
								&uv_state, &motion_sensed_uv, &abort_uv, wait,
								&signal_led);

			  break;
 80023a4:	e05c      	b.n	8002460 <main+0x6a4>
//			  events_detection_motion_in_one_lamp(&motion_sensor, &deadline_buttons,
//								  &button_light_1, &button_light_2, &button_uv,
//								  &motion_sensed_light_1, &motion_sensed_uv,
//								  &abort_uv);

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 80023a6:	4c5c      	ldr	r4, [pc, #368]	; (8002518 <main+0x75c>)
 80023a8:	4a5c      	ldr	r2, [pc, #368]	; (800251c <main+0x760>)
 80023aa:	495d      	ldr	r1, [pc, #372]	; (8002520 <main+0x764>)
 80023ac:	485d      	ldr	r0, [pc, #372]	; (8002524 <main+0x768>)
 80023ae:	4b4f      	ldr	r3, [pc, #316]	; (80024ec <main+0x730>)
 80023b0:	9304      	str	r3, [sp, #16]
 80023b2:	4b51      	ldr	r3, [pc, #324]	; (80024f8 <main+0x73c>)
 80023b4:	9303      	str	r3, [sp, #12]
 80023b6:	4b4f      	ldr	r3, [pc, #316]	; (80024f4 <main+0x738>)
 80023b8:	9302      	str	r3, [sp, #8]
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <main+0x734>)
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <main+0x76c>)
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	0023      	movs	r3, r4
 80023c4:	f000 f979 	bl	80026ba <events_detection_uv_waits>
			  								  &button_light_1, &button_light_2, &button_uv,
			  								  &motion_sensed_light_1, &motion_sensed_light_2,
			  								  &motion_sensed_uv,
			  								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80023c8:	4c3a      	ldr	r4, [pc, #232]	; (80024b4 <main+0x6f8>)
 80023ca:	4a56      	ldr	r2, [pc, #344]	; (8002524 <main+0x768>)
 80023cc:	4953      	ldr	r1, [pc, #332]	; (800251c <main+0x760>)
 80023ce:	484f      	ldr	r0, [pc, #316]	; (800250c <main+0x750>)
 80023d0:	4b47      	ldr	r3, [pc, #284]	; (80024f0 <main+0x734>)
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	4b38      	ldr	r3, [pc, #224]	; (80024b8 <main+0x6fc>)
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	0023      	movs	r3, r4
 80023da:	f000 f9e5 	bl	80027a8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  direct_light_control_fsm(&light_2, &button_light_2,
 80023de:	4b54      	ldr	r3, [pc, #336]	; (8002530 <main+0x774>)
 80023e0:	4a36      	ldr	r2, [pc, #216]	; (80024bc <main+0x700>)
 80023e2:	494d      	ldr	r1, [pc, #308]	; (8002518 <main+0x75c>)
 80023e4:	484a      	ldr	r0, [pc, #296]	; (8002510 <main+0x754>)
 80023e6:	f000 fba5 	bl	8002b34 <direct_light_control_fsm>
//			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
//								&deadline_motion_uv, &deadline_motion_uv_safe,
//								&uv_state, &motion_sensed_uv, &abort_uv,
//								&signal_led);

			  if(light_1.light_status == LIGHT_ON)
 80023ea:	4b48      	ldr	r3, [pc, #288]	; (800250c <main+0x750>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d103      	bne.n	80023fa <main+0x63e>
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <main+0x770>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e002      	b.n	8002400 <main+0x644>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 80023fa:	4b4c      	ldr	r3, [pc, #304]	; (800252c <main+0x770>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8002400:	4b4a      	ldr	r3, [pc, #296]	; (800252c <main+0x770>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4d30      	ldr	r5, [pc, #192]	; (80024c8 <main+0x70c>)
 8002406:	4c47      	ldr	r4, [pc, #284]	; (8002524 <main+0x768>)
 8002408:	4947      	ldr	r1, [pc, #284]	; (8002528 <main+0x76c>)
 800240a:	4842      	ldr	r0, [pc, #264]	; (8002514 <main+0x758>)
 800240c:	2210      	movs	r2, #16
 800240e:	18ba      	adds	r2, r7, r2
 8002410:	9207      	str	r2, [sp, #28]
 8002412:	9306      	str	r3, [sp, #24]
 8002414:	4b35      	ldr	r3, [pc, #212]	; (80024ec <main+0x730>)
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	4b37      	ldr	r3, [pc, #220]	; (80024f8 <main+0x73c>)
 800241a:	9304      	str	r3, [sp, #16]
 800241c:	4b32      	ldr	r3, [pc, #200]	; (80024e8 <main+0x72c>)
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <main+0x728>)
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <main+0x71c>)
 8002426:	9301      	str	r3, [sp, #4]
 8002428:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <main+0x714>)
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	002b      	movs	r3, r5
 800242e:	0022      	movs	r2, r4
 8002430:	f000 fa70 	bl	8002914 <motion_uv_ctrl_wait_fsm>
								&deadline_uv_wait_timeout,
								&uv_state, &motion_sensed_uv, &abort_uv, wait,
								&signal_led);


			  break;
 8002434:	e014      	b.n	8002460 <main+0x6a4>
//										&motion_sensed_light_2);
//
//			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
//								&deadline_motion_uv, &deadline_motion_uv_safe,
//								&uv_state,&motion_sensed_uv, &abort_uv, &signal_led);
			  led_signal_start(&signal_led);
 8002436:	2410      	movs	r4, #16
 8002438:	193b      	adds	r3, r7, r4
 800243a:	0018      	movs	r0, r3
 800243c:	f7fe f8fa 	bl	8000634 <led_signal_start>
			  signal_led.type = LED_SIGNAL_BLINK;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	2202      	movs	r2, #2
 8002444:	725a      	strb	r2, [r3, #9]

			  break;
 8002446:	e00b      	b.n	8002460 <main+0x6a4>
		  case MOTION_SWITCH_MODE_3:
			  //do nothing
			  led_signal_start(&signal_led);
 8002448:	2410      	movs	r4, #16
 800244a:	193b      	adds	r3, r7, r4
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe f8f1 	bl	8000634 <led_signal_start>
			  signal_led.type = LED_SIGNAL_BLINK;
 8002452:	193b      	adds	r3, r7, r4
 8002454:	2202      	movs	r2, #2
 8002456:	725a      	strb	r2, [r3, #9]
			  __NOP();
 8002458:	46c0      	nop			; (mov r8, r8)
			  break;
 800245a:	e001      	b.n	8002460 <main+0x6a4>
		  default:
			  //do nothing
			  __NOP();
 800245c:	46c0      	nop			; (mov r8, r8)
			  break;
 800245e:	46c0      	nop			; (mov r8, r8)
	  }

	  //Actuator routines:
	  discreate_actuator(&light_1, &deadline_timer_light_1);
 8002460:	4a34      	ldr	r2, [pc, #208]	; (8002534 <main+0x778>)
 8002462:	4b2a      	ldr	r3, [pc, #168]	; (800250c <main+0x750>)
 8002464:	0011      	movs	r1, r2
 8002466:	0018      	movs	r0, r3
 8002468:	f000 f8af 	bl	80025ca <discreate_actuator>
	  discreate_actuator(&light_2, &deadline_timer_light_2);
 800246c:	4a32      	ldr	r2, [pc, #200]	; (8002538 <main+0x77c>)
 800246e:	4b28      	ldr	r3, [pc, #160]	; (8002510 <main+0x754>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f000 f8a9 	bl	80025ca <discreate_actuator>
	  discreate_actuator(&light_uv, &deadline_timer_uv);
 8002478:	4a30      	ldr	r2, [pc, #192]	; (800253c <main+0x780>)
 800247a:	4b26      	ldr	r3, [pc, #152]	; (8002514 <main+0x758>)
 800247c:	0011      	movs	r1, r2
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f8a3 	bl	80025ca <discreate_actuator>

	  //LED indicator
	  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 8002484:	1dfa      	adds	r2, r7, #7
 8002486:	4b2e      	ldr	r3, [pc, #184]	; (8002540 <main+0x784>)
 8002488:	0011      	movs	r1, r2
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff f9fe 	bl	800188c <deadline_timer_check>

	  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8002490:	1dfb      	adds	r3, r7, #7
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d000      	beq.n	800249a <main+0x6de>
 8002498:	e722      	b.n	80022e0 <main+0x524>
	  {
		  led_signal_fsm(&signal_led);
 800249a:	2310      	movs	r3, #16
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fd ffc6 	bl	8000430 <led_signal_fsm>
		  deadline_timer_set_initial_time(&deadline_led_indicator);
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <main+0x784>)
 80024a6:	0018      	movs	r0, r3
 80024a8:	f7ff fa27 	bl	80018fa <deadline_timer_set_initial_time>
	  switch(switch_selector.value)
 80024ac:	e718      	b.n	80022e0 <main+0x524>
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	20000450 	.word	0x20000450
 80024b4:	200003e8 	.word	0x200003e8
 80024b8:	20000468 	.word	0x20000468
 80024bc:	20000470 	.word	0x20000470
 80024c0:	200004f0 	.word	0x200004f0
 80024c4:	20000560 	.word	0x20000560
 80024c8:	200004f8 	.word	0x200004f8
 80024cc:	200005e0 	.word	0x200005e0
 80024d0:	20000578 	.word	0x20000578
 80024d4:	20000660 	.word	0x20000660
 80024d8:	200005f8 	.word	0x200005f8
 80024dc:	200000f0 	.word	0x200000f0
 80024e0:	00001388 	.word	0x00001388
 80024e4:	20000678 	.word	0x20000678
 80024e8:	200006e0 	.word	0x200006e0
 80024ec:	20000008 	.word	0x20000008
 80024f0:	20000378 	.word	0x20000378
 80024f4:	20000379 	.word	0x20000379
 80024f8:	2000037a 	.word	0x2000037a
 80024fc:	200006e8 	.word	0x200006e8
 8002500:	20000780 	.word	0x20000780
 8002504:	200007cc 	.word	0x200007cc
 8002508:	20000818 	.word	0x20000818
 800250c:	20000240 	.word	0x20000240
 8002510:	20000264 	.word	0x20000264
 8002514:	20000288 	.word	0x20000288
 8002518:	20000348 	.word	0x20000348
 800251c:	20000330 	.word	0x20000330
 8002520:	200002b0 	.word	0x200002b0
 8002524:	20000088 	.word	0x20000088
 8002528:	20000360 	.word	0x20000360
 800252c:	20000009 	.word	0x20000009
 8002530:	200004f1 	.word	0x200004f1
 8002534:	20000108 	.word	0x20000108
 8002538:	20000170 	.word	0x20000170
 800253c:	200001d8 	.word	0x200001d8
 8002540:	20000380 	.word	0x20000380

08002544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08d      	sub	sp, #52	; 0x34
 8002548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800254a:	2414      	movs	r4, #20
 800254c:	193b      	adds	r3, r7, r4
 800254e:	0018      	movs	r0, r3
 8002550:	231c      	movs	r3, #28
 8002552:	001a      	movs	r2, r3
 8002554:	2100      	movs	r1, #0
 8002556:	f003 f883 	bl	8005660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800255a:	003b      	movs	r3, r7
 800255c:	0018      	movs	r0, r3
 800255e:	2314      	movs	r3, #20
 8002560:	001a      	movs	r2, r3
 8002562:	2100      	movs	r1, #0
 8002564:	f003 f87c 	bl	8005660 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002568:	193b      	adds	r3, r7, r4
 800256a:	2202      	movs	r2, #2
 800256c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2280      	movs	r2, #128	; 0x80
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002576:	193b      	adds	r3, r7, r4
 8002578:	2200      	movs	r2, #0
 800257a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800257c:	193b      	adds	r3, r7, r4
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002582:	193b      	adds	r3, r7, r4
 8002584:	0018      	movs	r0, r3
 8002586:	f001 fbcb 	bl	8003d20 <HAL_RCC_OscConfig>
 800258a:	1e03      	subs	r3, r0, #0
 800258c:	d001      	beq.n	8002592 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800258e:	f000 fc53 	bl	8002e38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002592:	003b      	movs	r3, r7
 8002594:	2207      	movs	r2, #7
 8002596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002598:	003b      	movs	r3, r7
 800259a:	2200      	movs	r2, #0
 800259c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800259e:	003b      	movs	r3, r7
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80025a4:	003b      	movs	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80025aa:	003b      	movs	r3, r7
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80025b0:	003b      	movs	r3, r7
 80025b2:	2101      	movs	r1, #1
 80025b4:	0018      	movs	r0, r3
 80025b6:	f001 fd97 	bl	80040e8 <HAL_RCC_ClockConfig>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d001      	beq.n	80025c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80025be:	f000 fc3b 	bl	8002e38 <Error_Handler>
  }
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b00d      	add	sp, #52	; 0x34
 80025c8:	bd90      	pop	{r4, r7, pc}

080025ca <discreate_actuator>:

//TODO: (medium) all the digital outputs behave light a light. Last requirement
//changes added other kind of actuators. Change the HAL layer and middleware
//layer to set a proper name
void discreate_actuator(light_t *actuator, deadline_timer_t *deadline_timer)
{
 80025ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025cc:	b08b      	sub	sp, #44	; 0x2c
 80025ce:	af06      	add	r7, sp, #24
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]

	light_fsm_init_t init = LIGHT_INIT_FALSE;
 80025d4:	260f      	movs	r6, #15
 80025d6:	19bb      	adds	r3, r7, r6
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == LIGHT_RUN_TRUE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2221      	movs	r2, #33	; 0x21
 80025e0:	5c9b      	ldrb	r3, [r3, r2]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d12f      	bne.n	8002646 <discreate_actuator+0x7c>
	{
		//		if(actuator_state == MOTION_LIGHT_TURN_ON_LIGHT)
		light_check_init_fsm(*actuator, &init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	19ba      	adds	r2, r7, r6
 80025ea:	9205      	str	r2, [sp, #20]
 80025ec:	466a      	mov	r2, sp
 80025ee:	0011      	movs	r1, r2
 80025f0:	001a      	movs	r2, r3
 80025f2:	3210      	adds	r2, #16
 80025f4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80025f6:	c131      	stmia	r1!, {r0, r4, r5}
 80025f8:	ca11      	ldmia	r2!, {r0, r4}
 80025fa:	c111      	stmia	r1!, {r0, r4}
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f7fe f922 	bl	800084c <light_check_init_fsm>

		if(init == LIGHT_INIT_TRUE)
 8002608:	19bb      	adds	r3, r7, r6
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <discreate_actuator+0x56>
		{
			deadline_timer_set_initial_time(deadline_timer);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff f971 	bl	80018fa <deadline_timer_set_initial_time>
			light_acknowledge_init_fsm(actuator);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe f92d 	bl	800087a <light_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 8002620:	240e      	movs	r4, #14
 8002622:	193a      	adds	r2, r7, r4
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff f92f 	bl	800188c <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 800262e:	193b      	adds	r3, r7, r4
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d107      	bne.n	8002646 <discreate_actuator+0x7c>
		{
			light_on_pulse_fsm(actuator);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	0018      	movs	r0, r3
 800263a:	f7fe f888 	bl	800074e <light_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff f95a 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == LIGHT_RUN_TRUE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2222      	movs	r2, #34	; 0x22
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d130      	bne.n	80026b2 <discreate_actuator+0xe8>
	{
//	  if(actuator_state == MOTION_LIGHT_TURN_OFF_LIGHT)

	  light_check_init_fsm(*actuator, &init);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	260f      	movs	r6, #15
 8002654:	19ba      	adds	r2, r7, r6
 8002656:	9205      	str	r2, [sp, #20]
 8002658:	466a      	mov	r2, sp
 800265a:	0011      	movs	r1, r2
 800265c:	001a      	movs	r2, r3
 800265e:	3210      	adds	r2, #16
 8002660:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002662:	c131      	stmia	r1!, {r0, r4, r5}
 8002664:	ca11      	ldmia	r2!, {r0, r4}
 8002666:	c111      	stmia	r1!, {r0, r4}
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f7fe f8ec 	bl	800084c <light_check_init_fsm>

	  if(init == LIGHT_INIT_TRUE)
 8002674:	19bb      	adds	r3, r7, r6
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d107      	bne.n	800268c <discreate_actuator+0xc2>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	0018      	movs	r0, r3
 8002680:	f7ff f93b 	bl	80018fa <deadline_timer_set_initial_time>
		  light_acknowledge_init_fsm(actuator);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0018      	movs	r0, r3
 8002688:	f7fe f8f7 	bl	800087a <light_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 800268c:	240e      	movs	r4, #14
 800268e:	193a      	adds	r2, r7, r4
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	0011      	movs	r1, r2
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff f8f9 	bl	800188c <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 800269a:	193b      	adds	r3, r7, r4
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d107      	bne.n	80026b2 <discreate_actuator+0xe8>
	  {
		  light_off_pulse_fsm(actuator);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	0018      	movs	r0, r3
 80026a6:	f7fe f872 	bl	800078e <light_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff f924 	bl	80018fa <deadline_timer_set_initial_time>
	  }
	}
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b005      	add	sp, #20
 80026b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026ba <events_detection_uv_waits>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 80026ba:	b5b0      	push	{r4, r5, r7, lr}
 80026bc:	b08a      	sub	sp, #40	; 0x28
 80026be:	af04      	add	r7, sp, #16
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 80026c8:	2417      	movs	r4, #23
 80026ca:	193a      	adds	r2, r7, r4
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	0011      	movs	r1, r2
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe fccc 	bl	800106e <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 80026d6:	193b      	adds	r3, r7, r4
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d10c      	bne.n	80026f8 <events_detection_uv_waits+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 80026de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026e0:	2202      	movs	r2, #2
 80026e2:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	2202      	movs	r2, #2
 80026ee:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2258      	movs	r2, #88	; 0x58
 80026f4:	2100      	movs	r1, #0
 80026f6:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f000 f832 	bl	8002768 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f82c 	bl	8002768 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8002710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	0011      	movs	r1, r2
 8002716:	0018      	movs	r0, r3
 8002718:	f000 f826 	bl	8002768 <sense_button_event>
		*abort_signal_uv = MOTION_ABORT_TRUE;
	}
#endif //ABORT_WITH_BUTTONS

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	2215      	movs	r2, #21
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	9203      	str	r2, [sp, #12]
 8002724:	2516      	movs	r5, #22
 8002726:	197a      	adds	r2, r7, r5
 8002728:	9202      	str	r2, [sp, #8]
 800272a:	466a      	mov	r2, sp
 800272c:	0011      	movs	r1, r2
 800272e:	001a      	movs	r2, r3
 8002730:	3210      	adds	r2, #16
 8002732:	ca11      	ldmia	r2!, {r0, r4}
 8002734:	c111      	stmia	r1!, {r0, r4}
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f7fd fe48 	bl	80003d2 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8002742:	197b      	adds	r3, r7, r5
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d10a      	bne.n	8002760 <events_detection_uv_waits+0xa6>
	{
		if(button_lamp_uv->push_status != BUTTON_PUSH_ON)
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	789b      	ldrb	r3, [r3, #2]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d003      	beq.n	800275a <events_detection_uv_waits+0xa0>
		{
			button_lamp_uv->push_status = BUTTON_PUSH_ON;
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	2201      	movs	r2, #1
 8002756:	709a      	strb	r2, [r3, #2]
		else
		{
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
		}
	}
}
 8002758:	e002      	b.n	8002760 <events_detection_uv_waits+0xa6>
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	2200      	movs	r2, #0
 800275e:	709a      	strb	r2, [r3, #2]
}
 8002760:	46c0      	nop			; (mov r8, r8)
 8002762:	46bd      	mov	sp, r7
 8002764:	b006      	add	sp, #24
 8002766:	bdb0      	pop	{r4, r5, r7, pc}

08002768 <sense_button_event>:
	}

}

void sense_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8002768:	b590      	push	{r4, r7, lr}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]

	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7b5b      	ldrb	r3, [r3, #13]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <sense_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 800277a:	240f      	movs	r4, #15
 800277c:	193a      	adds	r2, r7, r4
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0011      	movs	r1, r2
 8002782:	0018      	movs	r0, r3
 8002784:	f7ff f882 	bl	800188c <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 8002788:	193b      	adds	r3, r7, r4
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d107      	bne.n	80027a0 <sense_button_event+0x38>
		{
			button_debounce_fsm(button);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	0018      	movs	r0, r3
 8002794:	f7fd fd6a 	bl	800026c <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff f8ad 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}


}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b005      	add	sp, #20
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <motion_light_control_fsm>:
								button_t *button,
								pyd1598_sensor_t *motion_sensor,
								deadline_timer_t *deadline_timer,
								motion_light_state_t *fsm_state,
								motion_sensed_t *motion_sensed)
{
 80027a8:	b5b0      	push	{r4, r5, r7, lr}
 80027aa:	b08a      	sub	sp, #40	; 0x28
 80027ac:	af04      	add	r7, sp, #16
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
 80027b4:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	785a      	ldrb	r2, [r3, #1]
 80027ba:	2116      	movs	r1, #22
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	187a      	adds	r2, r7, r1
 80027c4:	9203      	str	r2, [sp, #12]
 80027c6:	2517      	movs	r5, #23
 80027c8:	197a      	adds	r2, r7, r5
 80027ca:	9202      	str	r2, [sp, #8]
 80027cc:	466a      	mov	r2, sp
 80027ce:	0011      	movs	r1, r2
 80027d0:	001a      	movs	r2, r3
 80027d2:	3210      	adds	r2, #16
 80027d4:	ca11      	ldmia	r2!, {r0, r4}
 80027d6:	c111      	stmia	r1!, {r0, r4}
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	f7fd fdf7 	bl	80003d2 <button_check_isr_request>

	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 80027e4:	197b      	adds	r3, r7, r5
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d003      	beq.n	80027f4 <motion_light_control_fsm+0x4c>
		(*motion_sensed == MOTION_ISR_UNATTENDED))
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	781b      	ldrb	r3, [r3, #0]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d121      	bne.n	8002838 <motion_light_control_fsm+0x90>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80027f4:	2217      	movs	r2, #23
 80027f6:	18bb      	adds	r3, r7, r2
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d10e      	bne.n	800281c <motion_light_control_fsm+0x74>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80027fe:	18bb      	adds	r3, r7, r2
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 8002804:	2316      	movs	r3, #22
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d103      	bne.n	8002816 <motion_light_control_fsm+0x6e>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	2205      	movs	r2, #5
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e002      	b.n	800281c <motion_light_control_fsm+0x74>
			}
			else
			{
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
			}
		}

		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b02      	cmp	r3, #2
 8002822:	d109      	bne.n	8002838 <motion_light_control_fsm+0x90>
			(*fsm_state == MOTION_LIGHT_IDLE))
 8002824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002826:	781b      	ldrb	r3, [r3, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <motion_light_control_fsm+0x90>
		{
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	2201      	movs	r2, #1
 8002830:	701a      	strb	r2, [r3, #0]
			*motion_sensed = MOTION_ISR_ATTENDED;
 8002832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
		}

	}

	switch(*fsm_state)
 8002838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b05      	cmp	r3, #5
 800283e:	d858      	bhi.n	80028f2 <motion_light_control_fsm+0x14a>
 8002840:	009a      	lsls	r2, r3, #2
 8002842:	4b33      	ldr	r3, [pc, #204]	; (8002910 <motion_light_control_fsm+0x168>)
 8002844:	18d3      	adds	r3, r2, r3
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 800284a:	46c0      	nop			; (mov r8, r8)

			break;
 800284c:	e056      	b.n	80028fc <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 800284e:	2115      	movs	r1, #21
 8002850:	187b      	adds	r3, r7, r1
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
			button_get_status(button, &button_status);
 8002856:	000c      	movs	r4, r1
 8002858:	187a      	adds	r2, r7, r1
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	0011      	movs	r1, r2
 800285e:	0018      	movs	r0, r3
 8002860:	f7fd fd92 	bl	8000388 <button_get_status>

			if(button_status == BUTTON_ON)
 8002864:	193b      	adds	r3, r7, r4
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <motion_light_control_fsm+0xd2>
			{
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
				 //if an edge where detected an error occurred in the button
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
				*motion_sensed = MOTION_ISR_ATTENDED;
			}

			break;
 8002878:	e040      	b.n	80028fc <motion_light_control_fsm+0x154>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	2205      	movs	r2, #5
 800287e:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	2200      	movs	r2, #0
 8002884:	701a      	strb	r2, [r3, #0]
			break;
 8002886:	e039      	b.n	80028fc <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	0018      	movs	r0, r3
 800288c:	f7fd ffc0 	bl	8000810 <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 8002890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002892:	2203      	movs	r2, #3
 8002894:	701a      	strb	r2, [r3, #0]

			break;
 8002896:	e031      	b.n	80028fc <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(deadline_timer);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	0018      	movs	r0, r3
 800289c:	f7ff f82d 	bl	80018fa <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	2204      	movs	r2, #4
 80028a4:	701a      	strb	r2, [r3, #0]

			break;
 80028a6:	e029      	b.n	80028fc <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(deadline_timer, &deadline_expired);
 80028a8:	2414      	movs	r4, #20
 80028aa:	193a      	adds	r2, r7, r4
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f7fe ffeb 	bl	800188c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80028b6:	193b      	adds	r3, r7, r4
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d102      	bne.n	80028c4 <motion_light_control_fsm+0x11c>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	2205      	movs	r2, #5
 80028c2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d116      	bne.n	80028fa <motion_light_control_fsm+0x152>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
//					*fsm_state = MOTION_LIGHT_INIT_TIMER;
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
			}
			break;
 80028d8:	e00f      	b.n	80028fa <motion_light_control_fsm+0x152>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(deadline_timer);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe ffc8 	bl	8001872 <deadline_timer_force_expiration>
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fd ff72 	bl	80007ce <light_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
			break;
 80028f0:	e004      	b.n	80028fc <motion_light_control_fsm+0x154>
		default:
			*fsm_state = MOTION_LIGHT_IDLE;
 80028f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
			break;
 80028f8:	e000      	b.n	80028fc <motion_light_control_fsm+0x154>
			break;
 80028fa:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 80028fc:	2317      	movs	r3, #23
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	70da      	strb	r2, [r3, #3]

}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	46bd      	mov	sp, r7
 800290a:	b006      	add	sp, #24
 800290c:	bdb0      	pop	{r4, r5, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	08005744 	.word	0x08005744

08002914 <motion_uv_ctrl_wait_fsm>:
									motion_light_uv_state_t *fsm_state,
									motion_sensed_t *motion_sensed,
									motion_light_uv_abort_t *uv_abort,
									motion_uv_wait_signal_t wait,
									led_signal_t *signal)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b09c      	sub	sp, #112	; 0x70
 8002918:	af16      	add	r7, sp, #88	; 0x58
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	785a      	ldrb	r2, [r3, #1]
 8002926:	2116      	movs	r1, #22
 8002928:	187b      	adds	r3, r7, r1
 800292a:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;
	deadline_timer_expired_t deadline_safe_expired;
	deadline_timer_expired_t deadline_timeout_expired;
	deadline_timer_expired_t deadline_wait_timeout_expired;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	187a      	adds	r2, r7, r1
 8002930:	9203      	str	r2, [sp, #12]
 8002932:	2517      	movs	r5, #23
 8002934:	197a      	adds	r2, r7, r5
 8002936:	9202      	str	r2, [sp, #8]
 8002938:	466a      	mov	r2, sp
 800293a:	0011      	movs	r1, r2
 800293c:	001a      	movs	r2, r3
 800293e:	3210      	adds	r2, #16
 8002940:	ca11      	ldmia	r2!, {r0, r4}
 8002942:	c111      	stmia	r1!, {r0, r4}
 8002944:	6818      	ldr	r0, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f7fd fd41 	bl	80003d2 <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8002950:	687c      	ldr	r4, [r7, #4]
 8002952:	2315      	movs	r3, #21
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	9314      	str	r3, [sp, #80]	; 0x50
 8002958:	466b      	mov	r3, sp
 800295a:	0018      	movs	r0, r3
 800295c:	0023      	movs	r3, r4
 800295e:	3310      	adds	r3, #16
 8002960:	2250      	movs	r2, #80	; 0x50
 8002962:	0019      	movs	r1, r3
 8002964:	f002 fec2 	bl	80056ec <memcpy>
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	6861      	ldr	r1, [r4, #4]
 800296c:	68a2      	ldr	r2, [r4, #8]
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	f7fe fb66 	bl	8001040 <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8002974:	197b      	adds	r3, r7, r5
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10e      	bne.n	800299a <motion_uv_ctrl_wait_fsm+0x86>
	{

		//Change if abort is not required with a second push
		if(button_uv->push_status == BUTTON_PUSH_ON)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	789b      	ldrb	r3, [r3, #2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d103      	bne.n	800298c <motion_uv_ctrl_wait_fsm+0x78>
		{
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 8002984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	e002      	b.n	8002992 <motion_uv_ctrl_wait_fsm+0x7e>
		}
		else
		{
			*fsm_state = MOTION_LIGHT_UV_ABORT;
 800298c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800298e:	220a      	movs	r2, #10
 8002990:	701a      	strb	r2, [r3, #0]
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8002992:	2317      	movs	r3, #23
 8002994:	18fb      	adds	r3, r7, r3
 8002996:	2200      	movs	r2, #0
 8002998:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 800299a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d105      	bne.n	80029ae <motion_uv_ctrl_wait_fsm+0x9a>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 80029a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a4:	220a      	movs	r2, #10
 80029a6:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b0a      	cmp	r3, #10
 80029b4:	d900      	bls.n	80029b8 <motion_uv_ctrl_wait_fsm+0xa4>
 80029b6:	e0a9      	b.n	8002b0c <motion_uv_ctrl_wait_fsm+0x1f8>
 80029b8:	009a      	lsls	r2, r3, #2
 80029ba:	4b5d      	ldr	r3, [pc, #372]	; (8002b30 <motion_uv_ctrl_wait_fsm+0x21c>)
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 80029c2:	46c0      	nop			; (mov r8, r8)

			break;
 80029c4:	e0ab      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER:
			//Initialize deadline_timeout
			deadline_timer_set_initial_time(deadline_timeout);
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7fe ff96 	bl	80018fa <deadline_timer_set_initial_time>
			deadline_timer_set_initial_time(deadline_wait_timeout);
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe ff92 	bl	80018fa <deadline_timer_set_initial_time>

			//Start LED indicator
			led_signal_start(signal);
 80029d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fd fe2b 	bl	8000634 <led_signal_start>
			signal->type = LED_SIGNAL_BLINK;
 80029de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e0:	2202      	movs	r2, #2
 80029e2:	725a      	strb	r2, [r3, #9]

			*fsm_state = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 80029e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e6:	2203      	movs	r2, #3
 80029e8:	701a      	strb	r2, [r3, #0]

			break;
 80029ea:	e098      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
#ifndef TEST_TIMEOUT
		case MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT:

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 80029ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d102      	bne.n	80029fa <motion_uv_ctrl_wait_fsm+0xe6>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 80029f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
			}


			deadline_timer_check(deadline_timeout, &deadline_timeout_expired);
 80029fa:	2413      	movs	r4, #19
 80029fc:	193a      	adds	r2, r7, r4
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7fe ff42 	bl	800188c <deadline_timer_check>

			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d000      	beq.n	8002a12 <motion_uv_ctrl_wait_fsm+0xfe>
 8002a10:	e080      	b.n	8002b14 <motion_uv_ctrl_wait_fsm+0x200>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	2204      	movs	r2, #4
 8002a1c:	701a      	strb	r2, [r3, #0]
				signal->type = LED_SIGNAL_SOLID;
 8002a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a20:	2201      	movs	r2, #1
 8002a22:	725a      	strb	r2, [r3, #9]
			}



			break;
 8002a24:	e076      	b.n	8002b14 <motion_uv_ctrl_wait_fsm+0x200>
			break;
#endif //TEST_TIMEOUT

		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe ff66 	bl	80018fa <deadline_timer_set_initial_time>

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a30:	2205      	movs	r2, #5
 8002a32:	701a      	strb	r2, [r3, #0]
			break;
 8002a34:	e073      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>

		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8002a36:	2414      	movs	r4, #20
 8002a38:	193a      	adds	r2, r7, r4
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	0011      	movs	r1, r2
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fe ff24 	bl	800188c <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d103      	bne.n	8002a54 <motion_uv_ctrl_wait_fsm+0x140>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	2206      	movs	r2, #6
 8002a50:	701a      	strb	r2, [r3, #0]
					}
				}

			}

			break;
 8002a52:	e061      	b.n	8002b18 <motion_uv_ctrl_wait_fsm+0x204>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d106      	bne.n	8002a6a <motion_uv_ctrl_wait_fsm+0x156>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_ABORT;
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a64:	220a      	movs	r2, #10
 8002a66:	701a      	strb	r2, [r3, #0]
			break;
 8002a68:	e056      	b.n	8002b18 <motion_uv_ctrl_wait_fsm+0x204>
					if(wait == MOTION_UV_WAIT_TRUE)
 8002a6a:	2340      	movs	r3, #64	; 0x40
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d151      	bne.n	8002b18 <motion_uv_ctrl_wait_fsm+0x204>
						*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
			break;
 8002a7a:	e04d      	b.n	8002b18 <motion_uv_ctrl_wait_fsm+0x204>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
			light_ask_on_pulse_fsm(light_uv);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f7fd fec6 	bl	8000810 <light_ask_on_pulse_fsm>
//			signal->type = LED_SIGNAL_SOLID;
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	2207      	movs	r2, #7
 8002a88:	701a      	strb	r2, [r3, #0]

			break;
 8002a8a:	e048      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fe ff33 	bl	80018fa <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8002a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a96:	2208      	movs	r2, #8
 8002a98:	701a      	strb	r2, [r3, #0]
			break;
 8002a9a:	e040      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 8002a9c:	2412      	movs	r4, #18
 8002a9e:	193a      	adds	r2, r7, r4
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7fe fef1 	bl	800188c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <motion_uv_ctrl_wait_fsm+0x1a4>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8002ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab4:	2209      	movs	r2, #9
 8002ab6:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d12d      	bne.n	8002b1c <motion_uv_ctrl_wait_fsm+0x208>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	220a      	movs	r2, #10
 8002aca:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002acc:	e026      	b.n	8002b1c <motion_uv_ctrl_wait_fsm+0x208>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	2209      	movs	r2, #9
 8002ad2:	701a      	strb	r2, [r3, #0]
			break;
 8002ad4:	e023      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f7fe feca 	bl	8001872 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_timeout);
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f7fe fec6 	bl	8001872 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_wait_timeout);
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7fe fec2 	bl	8001872 <deadline_timer_force_expiration>
			button_uv->push_status = BUTTON_PUSH_OFF;
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	709a      	strb	r2, [r3, #2]


			//Send signal to turn off UV lamp
			light_ask_off_pulse_fsm(light_uv);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd fe69 	bl	80007ce <light_ask_off_pulse_fsm>
			//Send signal stop LED indicator
			led_signal_stop(signal);
 8002afc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002afe:	0018      	movs	r0, r3
 8002b00:	f7fd fda4 	bl	800064c <led_signal_stop>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
			break;
 8002b0a:	e008      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
			break;
 8002b12:	e004      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8002b14:	46c0      	nop			; (mov r8, r8)
 8002b16:	e002      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	e000      	b.n	8002b1e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8002b1c:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8002b1e:	2317      	movs	r3, #23
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	70da      	strb	r2, [r3, #3]
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b006      	add	sp, #24
 8002b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b30:	0800575c 	.word	0x0800575c

08002b34 <direct_light_control_fsm>:

void direct_light_control_fsm(light_t *light,
						button_t *button,
						deadline_timer_t *deadline_timer,
						motion_light_no_motion_state_t *fsm_state)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b08b      	sub	sp, #44	; 0x2c
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785a      	ldrb	r2, [r3, #1]
 8002b46:	2516      	movs	r5, #22
 8002b48:	197b      	adds	r3, r7, r5
 8002b4a:	701a      	strb	r2, [r3, #0]
	button_status_t button_status = BUTTON_OFF;
 8002b4c:	2315      	movs	r3, #21
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	197a      	adds	r2, r7, r5
 8002b58:	9203      	str	r2, [sp, #12]
 8002b5a:	2617      	movs	r6, #23
 8002b5c:	19ba      	adds	r2, r7, r6
 8002b5e:	9202      	str	r2, [sp, #8]
 8002b60:	466a      	mov	r2, sp
 8002b62:	0011      	movs	r1, r2
 8002b64:	001a      	movs	r2, r3
 8002b66:	3210      	adds	r2, #16
 8002b68:	ca11      	ldmia	r2!, {r0, r4}
 8002b6a:	c111      	stmia	r1!, {r0, r4}
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f7fd fc2d 	bl	80003d2 <button_check_isr_request>

	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8002b78:	19bb      	adds	r3, r7, r6
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d10d      	bne.n	8002b9c <direct_light_control_fsm+0x68>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8002b80:	19bb      	adds	r3, r7, r6
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]

		if(edge == BUTTON_EDGE_NEGATIVE)
 8002b86:	197b      	adds	r3, r7, r5
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d103      	bne.n	8002b96 <direct_light_control_fsm+0x62>
		{
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2203      	movs	r2, #3
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e002      	b.n	8002b9c <direct_light_control_fsm+0x68>
		}
		else
		{
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(*fsm_state)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d021      	beq.n	8002be8 <direct_light_control_fsm+0xb4>
 8002ba4:	dc28      	bgt.n	8002bf8 <direct_light_control_fsm+0xc4>
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d007      	beq.n	8002bba <direct_light_control_fsm+0x86>
 8002baa:	dc25      	bgt.n	8002bf8 <direct_light_control_fsm+0xc4>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <direct_light_control_fsm+0x82>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d00a      	beq.n	8002bca <direct_light_control_fsm+0x96>
 8002bb4:	e020      	b.n	8002bf8 <direct_light_control_fsm+0xc4>
	{
		case NO_MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8002bb6:	46c0      	nop			; (mov r8, r8)

			break;
 8002bb8:	e023      	b.n	8002c02 <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fd fe27 	bl	8000810 <light_ask_on_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]

			break;
 8002bc8:	e01b      	b.n	8002c02 <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_CHECK_BUTTON:
			//This updates the timer count
			button_get_status(button, &button_status);
 8002bca:	2415      	movs	r4, #21
 8002bcc:	193a      	adds	r2, r7, r4
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f7fd fbd8 	bl	8000388 <button_get_status>

			//TODO: (low) This step is just to ensure things are done
			if(button_status == BUTTON_OFF)
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10f      	bne.n	8002c00 <direct_light_control_fsm+0xcc>
			{
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002be6:	e00b      	b.n	8002c00 <direct_light_control_fsm+0xcc>
		case NO_MOTION_LIGHT_TURN_OFF_LIGHT:
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7fd fdef 	bl	80007ce <light_ask_off_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
			break;
 8002bf6:	e004      	b.n	8002c02 <direct_light_control_fsm+0xce>
		default:
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
			break;
 8002bfe:	e000      	b.n	8002c02 <direct_light_control_fsm+0xce>
			break;
 8002c00:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8002c02:	2317      	movs	r3, #23
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	781a      	ldrb	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	70da      	strb	r2, [r3, #3]

}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b007      	add	sp, #28
 8002c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c14 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]

	if (htim == &htim17)
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d106      	bne.n	8002c32 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c26:	791a      	ldrb	r2, [r3, #4]
 8002c28:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002c2a:	0011      	movs	r1, r2
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7fd ffd5 	bl	8000bdc <pyd1598_dl_readout_fsm>
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	4b21      	ldr	r3, [pc, #132]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d105      	bne.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c3c:	481d      	ldr	r0, [pc, #116]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002c3e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002c40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c42:	f7fe f933 	bl	8000eac <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d12b      	bne.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x92>
	{

		//TODO: (low)can I change this to the infinite while loop in the main?
		deadline_timer_count(&deadline_timer_light_1);
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7fe fe45 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c58:	0018      	movs	r0, r3
 8002c5a:	f7fe fe41 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7fe fe3d 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7fe fe39 	bl	80018e0 <deadline_timer_count>
		//
		deadline_timer_count(&deadline_motion_light_1);
 8002c6e:	4b19      	ldr	r3, [pc, #100]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002c70:	0018      	movs	r0, r3
 8002c72:	f7fe fe35 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fe fe31 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8002c7e:	4b17      	ldr	r3, [pc, #92]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7fe fe2d 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fe fe29 	bl	80018e0 <deadline_timer_count>

		deadline_timer_count(&deadline_led_indicator);
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7fe fe25 	bl	80018e0 <deadline_timer_count>

		deadline_timer_count(&deadline_motion_uv_timeout);
 8002c96:	4b14      	ldr	r3, [pc, #80]	; (8002ce8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7fe fe21 	bl	80018e0 <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f7fe fe1d 	bl	80018e0 <deadline_timer_count>

	}



}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	20000818 	.word	0x20000818
 8002cb4:	20000088 	.word	0x20000088
 8002cb8:	200000a8 	.word	0x200000a8
 8002cbc:	20000780 	.word	0x20000780
 8002cc0:	200007cc 	.word	0x200007cc
 8002cc4:	20000108 	.word	0x20000108
 8002cc8:	20000170 	.word	0x20000170
 8002ccc:	200001d8 	.word	0x200001d8
 8002cd0:	200002b0 	.word	0x200002b0
 8002cd4:	200003e8 	.word	0x200003e8
 8002cd8:	20000470 	.word	0x20000470
 8002cdc:	200004f8 	.word	0x200004f8
 8002ce0:	20000578 	.word	0x20000578
 8002ce4:	20000380 	.word	0x20000380
 8002ce8:	200005f8 	.word	0x200005f8
 8002cec:	20000678 	.word	0x20000678

08002cf0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	1dbb      	adds	r3, r7, #6
 8002cfa:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8002cfe:	2248      	movs	r2, #72	; 0x48
 8002d00:	5a9b      	ldrh	r3, [r3, r2]
 8002d02:	1dba      	adds	r2, r7, #6
 8002d04:	8812      	ldrh	r2, [r2, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d107      	bne.n	8002d1a <HAL_GPIO_EXTI_Rising_Callback+0x2a>
	{
//		pyd1598_direct_link_isr_init_set();
		motion_sensor.direct_link.start_fsm = true;
 8002d0a:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8002d0c:	2241      	movs	r2, #65	; 0x41
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8002d12:	4b20      	ldr	r3, [pc, #128]	; (8002d94 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
 8002d18:	e000      	b.n	8002d1c <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	}
	else
	{
		__NOP();
 8002d1a:	46c0      	nop			; (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8002d1e:	891b      	ldrh	r3, [r3, #8]
 8002d20:	1dba      	adds	r2, r7, #6
 8002d22:	8812      	ldrh	r2, [r2, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10b      	bne.n	8002d40 <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8002d2a:	7b5b      	ldrb	r3, [r3, #13]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d107      	bne.n	8002d40 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_1);
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fd fb02 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002d38:	4b18      	ldr	r3, [pc, #96]	; (8002d9c <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f7fe fddd 	bl	80018fa <deadline_timer_set_initial_time>
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002d40:	4b17      	ldr	r3, [pc, #92]	; (8002da0 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8002d42:	891b      	ldrh	r3, [r3, #8]
 8002d44:	1dba      	adds	r2, r7, #6
 8002d46:	8812      	ldrh	r2, [r2, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d10b      	bne.n	8002d64 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8002d4e:	7b5b      	ldrb	r3, [r3, #13]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		{
			button_positive_edge_detected(&button_light_2);
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7fd faf0 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7fe fdcb 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8002d66:	891b      	ldrh	r3, [r3, #8]
 8002d68:	1dba      	adds	r2, r7, #6
 8002d6a:	8812      	ldrh	r2, [r2, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d10b      	bne.n	8002d88 <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8002d72:	7b5b      	ldrb	r3, [r3, #13]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d107      	bne.n	8002d88 <HAL_GPIO_EXTI_Rising_Callback+0x98>
		{
			button_positive_edge_detected(&button_uv);
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f7fd fade 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8002d82:	0018      	movs	r0, r3
 8002d84:	f7fe fdb9 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000088 	.word	0x20000088
 8002d94:	40014800 	.word	0x40014800
 8002d98:	20000330 	.word	0x20000330
 8002d9c:	200002b0 	.word	0x200002b0
 8002da0:	20000348 	.word	0x20000348
 8002da4:	20000360 	.word	0x20000360

08002da8 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8002db4:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002db6:	891b      	ldrh	r3, [r3, #8]
 8002db8:	1dba      	adds	r2, r7, #6
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002dc2:	7b5b      	ldrb	r3, [r3, #13]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d107      	bne.n	8002dd8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
		{
			button_negative_edge_detected(&button_light_1);
 8002dc8:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fd fac9 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 8002dd0:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f7fe fd91 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002dd8:	4b15      	ldr	r3, [pc, #84]	; (8002e30 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002dda:	891b      	ldrh	r3, [r3, #8]
 8002ddc:	1dba      	adds	r2, r7, #6
 8002dde:	8812      	ldrh	r2, [r2, #0]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d10b      	bne.n	8002dfc <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002de4:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002de6:	7b5b      	ldrb	r3, [r3, #13]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d107      	bne.n	8002dfc <HAL_GPIO_EXTI_Falling_Callback+0x54>
		{
			button_negative_edge_detected(&button_light_2);
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7fd fab7 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002df4:	4b0d      	ldr	r3, [pc, #52]	; (8002e2c <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fe fd7f 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8002dfe:	891b      	ldrh	r3, [r3, #8]
 8002e00:	1dba      	adds	r2, r7, #6
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10b      	bne.n	8002e20 <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8002e0a:	7b5b      	ldrb	r3, [r3, #13]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button_negative_edge_detected(&button_uv);
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f7fd faa5 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002e18:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f7fe fd6d 	bl	80018fa <deadline_timer_set_initial_time>
		}
	}
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b002      	add	sp, #8
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000330 	.word	0x20000330
 8002e2c:	200002b0 	.word	0x200002b0
 8002e30:	20000348 	.word	0x20000348
 8002e34:	20000360 	.word	0x20000360

08002e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e3c:	b672      	cpsid	i
}
 8002e3e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <Error_Handler+0x8>
	...

08002e44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_MspInit+0x50>)
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	4b11      	ldr	r3, [pc, #68]	; (8002e94 <HAL_MspInit+0x50>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	430a      	orrs	r2, r1
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_MspInit+0x50>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	607b      	str	r3, [r7, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <HAL_MspInit+0x50>)
 8002e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e66:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_MspInit+0x50>)
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	0549      	lsls	r1, r1, #21
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_MspInit+0x50>)
 8002e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e74:	2380      	movs	r3, #128	; 0x80
 8002e76:	055b      	lsls	r3, r3, #21
 8002e78:	4013      	ands	r3, r2
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002e7e:	2008      	movs	r0, #8
 8002e80:	f000 fb74 	bl	800356c <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002e84:	2010      	movs	r0, #16
 8002e86:	f000 fb71 	bl	800356c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e8a:	46c0      	nop			; (mov r8, r8)
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <NMI_Handler+0x4>

08002e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler+0x4>

08002ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ebc:	f000 fb16 	bl	80034ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 8002eca:	2004      	movs	r0, #4
 8002ecc:	f000 fefe 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 8002ed0:	2008      	movs	r0, #8
 8002ed2:	f000 fefb 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 8002ee0:	2080      	movs	r0, #128	; 0x80
 8002ee2:	f000 fef3 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 8002ee6:	2380      	movs	r3, #128	; 0x80
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 feee 	bl	8003ccc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 fb9e 	bl	8004640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002f04:	46c0      	nop			; (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	200006e8 	.word	0x200006e8

08002f10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <TIM1_CC_IRQHandler+0x14>)
 8002f16:	0018      	movs	r0, r3
 8002f18:	f001 fb92 	bl	8004640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	200006e8 	.word	0x200006e8

08002f28 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <TIM14_IRQHandler+0x14>)
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f001 fb86 	bl	8004640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	20000780 	.word	0x20000780

08002f40 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002f44:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <TIM16_IRQHandler+0x14>)
 8002f46:	0018      	movs	r0, r3
 8002f48:	f001 fb7a 	bl	8004640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	200007cc 	.word	0x200007cc

08002f58 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <TIM17_IRQHandler+0x14>)
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 fb6e 	bl	8004640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	20000818 	.word	0x20000818

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	18d3      	adds	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f002 fb78 	bl	8005694 <__errno>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	2301      	movs	r3, #1
 8002fac:	425b      	negs	r3, r3
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	18d2      	adds	r2, r2, r3
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b006      	add	sp, #24
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20001800 	.word	0x20001800
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	200006e4 	.word	0x200006e4
 8002fd8:	200009b0 	.word	0x200009b0

08002fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <SystemInit+0x14>)
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	0512      	lsls	r2, r2, #20
 8002fe6:	609a      	str	r2, [r3, #8]
#endif
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	18fb      	adds	r3, r7, r3
 8002ffe:	0018      	movs	r0, r3
 8003000:	2310      	movs	r3, #16
 8003002:	001a      	movs	r2, r3
 8003004:	2100      	movs	r1, #0
 8003006:	f002 fb2b 	bl	8005660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800300a:	1d3b      	adds	r3, r7, #4
 800300c:	0018      	movs	r0, r3
 800300e:	230c      	movs	r3, #12
 8003010:	001a      	movs	r2, r3
 8003012:	2100      	movs	r1, #0
 8003014:	f002 fb24 	bl	8005660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <MX_TIM1_Init+0xac>)
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <MX_TIM1_Init+0xb0>)
 800301c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003020:	222f      	movs	r2, #47	; 0x2f
 8003022:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003026:	2200      	movs	r2, #0
 8003028:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <MX_TIM1_Init+0xac>)
 800302c:	22fa      	movs	r2, #250	; 0xfa
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003032:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003038:	4b19      	ldr	r3, [pc, #100]	; (80030a0 <MX_TIM1_Init+0xac>)
 800303a:	2200      	movs	r2, #0
 800303c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003046:	0018      	movs	r0, r3
 8003048:	f001 f99a 	bl	8004380 <HAL_TIM_Base_Init>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8003050:	f7ff fef2 	bl	8002e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003054:	2110      	movs	r1, #16
 8003056:	187b      	adds	r3, r7, r1
 8003058:	2280      	movs	r2, #128	; 0x80
 800305a:	0152      	lsls	r2, r2, #5
 800305c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800305e:	187a      	adds	r2, r7, r1
 8003060:	4b0f      	ldr	r3, [pc, #60]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f001 fc4d 	bl	8004904 <HAL_TIM_ConfigClockSource>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800306e:	f7ff fee3 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	2200      	movs	r2, #0
 800307c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003084:	1d3a      	adds	r2, r7, #4
 8003086:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <MX_TIM1_Init+0xac>)
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f002 f9b0 	bl	80053f0 <HAL_TIMEx_MasterConfigSynchronization>
 8003090:	1e03      	subs	r3, r0, #0
 8003092:	d001      	beq.n	8003098 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003094:	f7ff fed0 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b008      	add	sp, #32
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	200006e8 	.word	0x200006e8
 80030a4:	40012c00 	.word	0x40012c00

080030a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b090      	sub	sp, #64	; 0x40
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80030ae:	232c      	movs	r3, #44	; 0x2c
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	0018      	movs	r0, r3
 80030b4:	2314      	movs	r3, #20
 80030b6:	001a      	movs	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	f002 fad1 	bl	8005660 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030be:	2320      	movs	r3, #32
 80030c0:	18fb      	adds	r3, r7, r3
 80030c2:	0018      	movs	r0, r3
 80030c4:	230c      	movs	r3, #12
 80030c6:	001a      	movs	r2, r3
 80030c8:	2100      	movs	r1, #0
 80030ca:	f002 fac9 	bl	8005660 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030ce:	1d3b      	adds	r3, r7, #4
 80030d0:	0018      	movs	r0, r3
 80030d2:	231c      	movs	r3, #28
 80030d4:	001a      	movs	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f002 fac2 	bl	8005660 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <MX_TIM3_Init+0x104>)
 80030de:	4a34      	ldr	r2, [pc, #208]	; (80031b0 <MX_TIM3_Init+0x108>)
 80030e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80030e2:	4b32      	ldr	r3, [pc, #200]	; (80031ac <MX_TIM3_Init+0x104>)
 80030e4:	222f      	movs	r2, #47	; 0x2f
 80030e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <MX_TIM3_Init+0x104>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030ee:	4b2f      	ldr	r3, [pc, #188]	; (80031ac <MX_TIM3_Init+0x104>)
 80030f0:	4a30      	ldr	r2, [pc, #192]	; (80031b4 <MX_TIM3_Init+0x10c>)
 80030f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f4:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <MX_TIM3_Init+0x104>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030fa:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <MX_TIM3_Init+0x104>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003100:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <MX_TIM3_Init+0x104>)
 8003102:	0018      	movs	r0, r3
 8003104:	f001 f93c 	bl	8004380 <HAL_TIM_Base_Init>
 8003108:	1e03      	subs	r3, r0, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800310c:	f7ff fe94 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <MX_TIM3_Init+0x104>)
 8003112:	0018      	movs	r0, r3
 8003114:	f001 f9da 	bl	80044cc <HAL_TIM_OC_Init>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800311c:	f7ff fe8c 	bl	8002e38 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <MX_TIM3_Init+0x104>)
 8003122:	2108      	movs	r1, #8
 8003124:	0018      	movs	r0, r3
 8003126:	f001 fa31 	bl	800458c <HAL_TIM_OnePulse_Init>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800312e:	f7ff fe83 	bl	8002e38 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	187b      	adds	r3, r7, r1
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800313a:	187b      	adds	r3, r7, r1
 800313c:	2210      	movs	r2, #16
 800313e:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8003140:	187a      	adds	r2, r7, r1
 8003142:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <MX_TIM3_Init+0x104>)
 8003144:	0011      	movs	r1, r2
 8003146:	0018      	movs	r0, r3
 8003148:	f001 fcb2 	bl	8004ab0 <HAL_TIM_SlaveConfigSynchro>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 8003150:	f7ff fe72 	bl	8002e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003154:	2120      	movs	r1, #32
 8003156:	187b      	adds	r3, r7, r1
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2200      	movs	r2, #0
 8003160:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003162:	187a      	adds	r2, r7, r1
 8003164:	4b11      	ldr	r3, [pc, #68]	; (80031ac <MX_TIM3_Init+0x104>)
 8003166:	0011      	movs	r1, r2
 8003168:	0018      	movs	r0, r3
 800316a:	f002 f941 	bl	80053f0 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d001      	beq.n	8003176 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8003172:	f7ff fe61 	bl	8002e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 130;
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	2282      	movs	r2, #130	; 0x82
 8003180:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800318e:	1d39      	adds	r1, r7, #4
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <MX_TIM3_Init+0x104>)
 8003192:	2200      	movs	r2, #0
 8003194:	0018      	movs	r0, r3
 8003196:	f001 fb55 	bl	8004844 <HAL_TIM_OC_ConfigChannel>
 800319a:	1e03      	subs	r3, r0, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800319e:	f7ff fe4b 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b010      	add	sp, #64	; 0x40
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	20000734 	.word	0x20000734
 80031b0:	40000400 	.word	0x40000400
 80031b4:	0000ffff 	.word	0x0000ffff

080031b8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031be:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <MX_TIM14_Init+0x44>)
 80031c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031c4:	222f      	movs	r2, #47	; 0x2f
 80031c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 145;
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031d0:	2291      	movs	r2, #145	; 0x91
 80031d2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031dc:	2200      	movs	r2, #0
 80031de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <MX_TIM14_Init+0x40>)
 80031e2:	0018      	movs	r0, r3
 80031e4:	f001 f8cc 	bl	8004380 <HAL_TIM_Base_Init>
 80031e8:	1e03      	subs	r3, r0, #0
 80031ea:	d001      	beq.n	80031f0 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80031ec:	f7ff fe24 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	20000780 	.word	0x20000780
 80031fc:	40002000 	.word	0x40002000

08003200 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003204:	4b10      	ldr	r3, [pc, #64]	; (8003248 <MX_TIM16_Init+0x48>)
 8003206:	4a11      	ldr	r2, [pc, #68]	; (800324c <MX_TIM16_Init+0x4c>)
 8003208:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 800320a:	4b0f      	ldr	r3, [pc, #60]	; (8003248 <MX_TIM16_Init+0x48>)
 800320c:	222f      	movs	r2, #47	; 0x2f
 800320e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <MX_TIM16_Init+0x48>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <MX_TIM16_Init+0x48>)
 8003218:	22fa      	movs	r2, #250	; 0xfa
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <MX_TIM16_Init+0x48>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003224:	4b08      	ldr	r3, [pc, #32]	; (8003248 <MX_TIM16_Init+0x48>)
 8003226:	2200      	movs	r2, #0
 8003228:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <MX_TIM16_Init+0x48>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003230:	4b05      	ldr	r3, [pc, #20]	; (8003248 <MX_TIM16_Init+0x48>)
 8003232:	0018      	movs	r0, r3
 8003234:	f001 f8a4 	bl	8004380 <HAL_TIM_Base_Init>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800323c:	f7ff fdfc 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	200007cc 	.word	0x200007cc
 800324c:	40014400 	.word	0x40014400

08003250 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <MX_TIM17_Init+0x44>)
 8003256:	4a10      	ldr	r2, [pc, #64]	; (8003298 <MX_TIM17_Init+0x48>)
 8003258:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <MX_TIM17_Init+0x44>)
 800325c:	222f      	movs	r2, #47	; 0x2f
 800325e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <MX_TIM17_Init+0x44>)
 8003262:	2200      	movs	r2, #0
 8003264:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 130;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <MX_TIM17_Init+0x44>)
 8003268:	2282      	movs	r2, #130	; 0x82
 800326a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326c:	4b09      	ldr	r3, [pc, #36]	; (8003294 <MX_TIM17_Init+0x44>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <MX_TIM17_Init+0x44>)
 8003274:	2200      	movs	r2, #0
 8003276:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <MX_TIM17_Init+0x44>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <MX_TIM17_Init+0x44>)
 8003280:	0018      	movs	r0, r3
 8003282:	f001 f87d 	bl	8004380 <HAL_TIM_Base_Init>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800328a:	f7ff fdd5 	bl	8002e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	20000818 	.word	0x20000818
 8003298:	40014800 	.word	0x40014800

0800329c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a45      	ldr	r2, [pc, #276]	; (80033c0 <HAL_TIM_Base_MspInit+0x124>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11e      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ae:	4b45      	ldr	r3, [pc, #276]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	4b44      	ldr	r3, [pc, #272]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 80032b4:	2180      	movs	r1, #128	; 0x80
 80032b6:	0109      	lsls	r1, r1, #4
 80032b8:	430a      	orrs	r2, r1
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 80032be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	4013      	ands	r3, r2
 80032c6:	61fb      	str	r3, [r7, #28]
 80032c8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80032ca:	2200      	movs	r2, #0
 80032cc:	2100      	movs	r1, #0
 80032ce:	200d      	movs	r0, #13
 80032d0:	f000 fa2a 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80032d4:	200d      	movs	r0, #13
 80032d6:	f000 fa3c 	bl	8003752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032da:	2200      	movs	r2, #0
 80032dc:	2100      	movs	r1, #0
 80032de:	200e      	movs	r0, #14
 80032e0:	f000 fa22 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032e4:	200e      	movs	r0, #14
 80032e6:	f000 fa34 	bl	8003752 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80032ea:	e064      	b.n	80033b6 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a35      	ldr	r2, [pc, #212]	; (80033c8 <HAL_TIM_Base_MspInit+0x12c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10c      	bne.n	8003310 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032f6:	4b33      	ldr	r3, [pc, #204]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 80032f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032fa:	4b32      	ldr	r3, [pc, #200]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 80032fc:	2102      	movs	r1, #2
 80032fe:	430a      	orrs	r2, r1
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	69bb      	ldr	r3, [r7, #24]
}
 800330e:	e052      	b.n	80033b6 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM14)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2d      	ldr	r2, [pc, #180]	; (80033cc <HAL_TIM_Base_MspInit+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d116      	bne.n	8003348 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 800331c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0209      	lsls	r1, r1, #8
 8003324:	430a      	orrs	r2, r1
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 800332a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4013      	ands	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003336:	2200      	movs	r2, #0
 8003338:	2100      	movs	r1, #0
 800333a:	2013      	movs	r0, #19
 800333c:	f000 f9f4 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003340:	2013      	movs	r0, #19
 8003342:	f000 fa06 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 8003346:	e036      	b.n	80033b6 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM16)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_TIM_Base_MspInit+0x134>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d116      	bne.n	8003380 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003352:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	0289      	lsls	r1, r1, #10
 800335c:	430a      	orrs	r2, r1
 800335e:	641a      	str	r2, [r3, #64]	; 0x40
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003364:	2380      	movs	r3, #128	; 0x80
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	2015      	movs	r0, #21
 8003374:	f000 f9d8 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003378:	2015      	movs	r0, #21
 800337a:	f000 f9ea 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 800337e:	e01a      	b.n	80033b6 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM17)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a13      	ldr	r2, [pc, #76]	; (80033d4 <HAL_TIM_Base_MspInit+0x138>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d115      	bne.n	80033b6 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800338a:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 800338c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	02c9      	lsls	r1, r1, #11
 8003394:	430a      	orrs	r2, r1
 8003396:	641a      	str	r2, [r3, #64]	; 0x40
 8003398:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_TIM_Base_MspInit+0x128>)
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	02db      	lsls	r3, r3, #11
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	2100      	movs	r1, #0
 80033aa:	2016      	movs	r0, #22
 80033ac:	f000 f9bc 	bl	8003728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80033b0:	2016      	movs	r0, #22
 80033b2:	f000 f9ce 	bl	8003752 <HAL_NVIC_EnableIRQ>
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b008      	add	sp, #32
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	40012c00 	.word	0x40012c00
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40002000 	.word	0x40002000
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800

080033d8 <Reset_Handler>:
 80033d8:	480d      	ldr	r0, [pc, #52]	; (8003410 <LoopForever+0x2>)
 80033da:	4685      	mov	sp, r0
 80033dc:	f7ff fdfe 	bl	8002fdc <SystemInit>
 80033e0:	2100      	movs	r1, #0
 80033e2:	e003      	b.n	80033ec <LoopCopyDataInit>

080033e4 <CopyDataInit>:
 80033e4:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <LoopForever+0x6>)
 80033e6:	585b      	ldr	r3, [r3, r1]
 80033e8:	5043      	str	r3, [r0, r1]
 80033ea:	3104      	adds	r1, #4

080033ec <LoopCopyDataInit>:
 80033ec:	480a      	ldr	r0, [pc, #40]	; (8003418 <LoopForever+0xa>)
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <LoopForever+0xe>)
 80033f0:	1842      	adds	r2, r0, r1
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d3f6      	bcc.n	80033e4 <CopyDataInit>
 80033f6:	4a0a      	ldr	r2, [pc, #40]	; (8003420 <LoopForever+0x12>)
 80033f8:	e002      	b.n	8003400 <LoopFillZerobss>

080033fa <FillZerobss>:
 80033fa:	2300      	movs	r3, #0
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	3204      	adds	r2, #4

08003400 <LoopFillZerobss>:
 8003400:	4b08      	ldr	r3, [pc, #32]	; (8003424 <LoopForever+0x16>)
 8003402:	429a      	cmp	r2, r3
 8003404:	d3f9      	bcc.n	80033fa <FillZerobss>
 8003406:	f002 f94b 	bl	80056a0 <__libc_init_array>
 800340a:	f7fe fcd7 	bl	8001dbc <main>

0800340e <LoopForever>:
 800340e:	e7fe      	b.n	800340e <LoopForever>
 8003410:	20001800 	.word	0x20001800
 8003414:	08005824 	.word	0x08005824
 8003418:	20000000 	.word	0x20000000
 800341c:	20000068 	.word	0x20000068
 8003420:	20000068 	.word	0x20000068
 8003424:	200009b0 	.word	0x200009b0

08003428 <ADC1_IRQHandler>:
 8003428:	e7fe      	b.n	8003428 <ADC1_IRQHandler>

0800342a <HAL_Init>:
 800342a:	b580      	push	{r7, lr}
 800342c:	b082      	sub	sp, #8
 800342e:	af00      	add	r7, sp, #0
 8003430:	1dfb      	adds	r3, r7, #7
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
 8003436:	2003      	movs	r0, #3
 8003438:	f000 f80e 	bl	8003458 <HAL_InitTick>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d003      	beq.n	8003448 <HAL_Init+0x1e>
 8003440:	1dfb      	adds	r3, r7, #7
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e001      	b.n	800344c <HAL_Init+0x22>
 8003448:	f7ff fcfc 	bl	8002e44 <HAL_MspInit>
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_InitTick>:
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <HAL_InitTick+0x88>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d02b      	beq.n	80034c8 <HAL_InitTick+0x70>
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_InitTick+0x8c>)
 8003472:	681c      	ldr	r4, [r3, #0]
 8003474:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <HAL_InitTick+0x88>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	0019      	movs	r1, r3
 800347a:	23fa      	movs	r3, #250	; 0xfa
 800347c:	0098      	lsls	r0, r3, #2
 800347e:	f7fc fe43 	bl	8000108 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	0019      	movs	r1, r3
 8003486:	0020      	movs	r0, r4
 8003488:	f7fc fe3e 	bl	8000108 <__udivsi3>
 800348c:	0003      	movs	r3, r0
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f97f 	bl	8003792 <HAL_SYSTICK_Config>
 8003494:	1e03      	subs	r3, r0, #0
 8003496:	d112      	bne.n	80034be <HAL_InitTick+0x66>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d80a      	bhi.n	80034b4 <HAL_InitTick+0x5c>
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	2301      	movs	r3, #1
 80034a2:	425b      	negs	r3, r3
 80034a4:	2200      	movs	r2, #0
 80034a6:	0018      	movs	r0, r3
 80034a8:	f000 f93e 	bl	8003728 <HAL_NVIC_SetPriority>
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <HAL_InitTick+0x90>)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	e00d      	b.n	80034d0 <HAL_InitTick+0x78>
 80034b4:	230f      	movs	r3, #15
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e008      	b.n	80034d0 <HAL_InitTick+0x78>
 80034be:	230f      	movs	r3, #15
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	2201      	movs	r2, #1
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e003      	b.n	80034d0 <HAL_InitTick+0x78>
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b005      	add	sp, #20
 80034dc:	bd90      	pop	{r4, r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	20000014 	.word	0x20000014
 80034e4:	2000000c 	.word	0x2000000c
 80034e8:	20000010 	.word	0x20000010

080034ec <HAL_IncTick>:
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <HAL_IncTick+0x1c>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	001a      	movs	r2, r3
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_IncTick+0x20>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	18d2      	adds	r2, r2, r3
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_IncTick+0x20>)
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	20000014 	.word	0x20000014
 800350c:	20000864 	.word	0x20000864

08003510 <HAL_GetTick>:
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
 8003514:	4b02      	ldr	r3, [pc, #8]	; (8003520 <HAL_GetTick+0x10>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	20000864 	.word	0x20000864

08003524 <HAL_Delay>:
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	f7ff fff0 	bl	8003510 <HAL_GetTick>
 8003530:	0003      	movs	r3, r0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3301      	adds	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_Delay+0x26>
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <HAL_Delay+0x44>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	001a      	movs	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	189b      	adds	r3, r3, r2
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	f7ff ffe0 	bl	8003510 <HAL_GetTick>
 8003550:	0002      	movs	r2, r0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	429a      	cmp	r2, r3
 800355a:	d8f7      	bhi.n	800354c <HAL_Delay+0x28>
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}
 8003566:	46c0      	nop			; (mov r8, r8)
 8003568:	20000014 	.word	0x20000014

0800356c <HAL_SYSCFG_EnableRemap>:
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_SYSCFG_EnableRemap+0x1c>)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	430a      	orrs	r2, r1
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b002      	add	sp, #8
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40010000 	.word	0x40010000

0800358c <__NVIC_EnableIRQ>:
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	0002      	movs	r2, r0
 8003594:	1dfb      	adds	r3, r7, #7
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	1dfb      	adds	r3, r7, #7
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b7f      	cmp	r3, #127	; 0x7f
 800359e:	d809      	bhi.n	80035b4 <__NVIC_EnableIRQ+0x28>
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	001a      	movs	r2, r3
 80035a6:	231f      	movs	r3, #31
 80035a8:	401a      	ands	r2, r3
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_EnableIRQ+0x30>)
 80035ac:	2101      	movs	r1, #1
 80035ae:	4091      	lsls	r1, r2
 80035b0:	000a      	movs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	46c0      	nop			; (mov r8, r8)
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b002      	add	sp, #8
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	e000e100 	.word	0xe000e100

080035c0 <__NVIC_DisableIRQ>:
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b7f      	cmp	r3, #127	; 0x7f
 80035d2:	d810      	bhi.n	80035f6 <__NVIC_DisableIRQ+0x36>
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	001a      	movs	r2, r3
 80035da:	231f      	movs	r3, #31
 80035dc:	4013      	ands	r3, r2
 80035de:	4908      	ldr	r1, [pc, #32]	; (8003600 <__NVIC_DisableIRQ+0x40>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	508b      	str	r3, [r1, r2]
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	46bd      	mov	sp, r7
 80035fa:	b002      	add	sp, #8
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	e000e100 	.word	0xe000e100

08003604 <__NVIC_SetPriority>:
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	0002      	movs	r2, r0
 800360c:	6039      	str	r1, [r7, #0]
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b7f      	cmp	r3, #127	; 0x7f
 8003618:	d828      	bhi.n	800366c <__NVIC_SetPriority+0x68>
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <__NVIC_SetPriority+0xd4>)
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b25b      	sxtb	r3, r3
 8003622:	089b      	lsrs	r3, r3, #2
 8003624:	33c0      	adds	r3, #192	; 0xc0
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	589b      	ldr	r3, [r3, r2]
 800362a:	1dfa      	adds	r2, r7, #7
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	0011      	movs	r1, r2
 8003630:	2203      	movs	r2, #3
 8003632:	400a      	ands	r2, r1
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	21ff      	movs	r1, #255	; 0xff
 8003638:	4091      	lsls	r1, r2
 800363a:	000a      	movs	r2, r1
 800363c:	43d2      	mvns	r2, r2
 800363e:	401a      	ands	r2, r3
 8003640:	0011      	movs	r1, r2
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	22ff      	movs	r2, #255	; 0xff
 8003648:	401a      	ands	r2, r3
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	2303      	movs	r3, #3
 8003652:	4003      	ands	r3, r0
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	409a      	lsls	r2, r3
 8003658:	481f      	ldr	r0, [pc, #124]	; (80036d8 <__NVIC_SetPriority+0xd4>)
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	b25b      	sxtb	r3, r3
 8003660:	089b      	lsrs	r3, r3, #2
 8003662:	430a      	orrs	r2, r1
 8003664:	33c0      	adds	r3, #192	; 0xc0
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	501a      	str	r2, [r3, r0]
 800366a:	e031      	b.n	80036d0 <__NVIC_SetPriority+0xcc>
 800366c:	4a1b      	ldr	r2, [pc, #108]	; (80036dc <__NVIC_SetPriority+0xd8>)
 800366e:	1dfb      	adds	r3, r7, #7
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	0019      	movs	r1, r3
 8003674:	230f      	movs	r3, #15
 8003676:	400b      	ands	r3, r1
 8003678:	3b08      	subs	r3, #8
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	3306      	adds	r3, #6
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	18d3      	adds	r3, r2, r3
 8003682:	3304      	adds	r3, #4
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	1dfa      	adds	r2, r7, #7
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	0011      	movs	r1, r2
 800368c:	2203      	movs	r2, #3
 800368e:	400a      	ands	r2, r1
 8003690:	00d2      	lsls	r2, r2, #3
 8003692:	21ff      	movs	r1, #255	; 0xff
 8003694:	4091      	lsls	r1, r2
 8003696:	000a      	movs	r2, r1
 8003698:	43d2      	mvns	r2, r2
 800369a:	401a      	ands	r2, r3
 800369c:	0011      	movs	r1, r2
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	019b      	lsls	r3, r3, #6
 80036a2:	22ff      	movs	r2, #255	; 0xff
 80036a4:	401a      	ands	r2, r3
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	0018      	movs	r0, r3
 80036ac:	2303      	movs	r3, #3
 80036ae:	4003      	ands	r3, r0
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	409a      	lsls	r2, r3
 80036b4:	4809      	ldr	r0, [pc, #36]	; (80036dc <__NVIC_SetPriority+0xd8>)
 80036b6:	1dfb      	adds	r3, r7, #7
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	001c      	movs	r4, r3
 80036bc:	230f      	movs	r3, #15
 80036be:	4023      	ands	r3, r4
 80036c0:	3b08      	subs	r3, #8
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	430a      	orrs	r2, r1
 80036c6:	3306      	adds	r3, #6
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	18c3      	adds	r3, r0, r3
 80036cc:	3304      	adds	r3, #4
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b003      	add	sp, #12
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	e000e100 	.word	0xe000e100
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <SysTick_Config>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1e5a      	subs	r2, r3, #1
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	045b      	lsls	r3, r3, #17
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d301      	bcc.n	80036f8 <SysTick_Config+0x18>
 80036f4:	2301      	movs	r3, #1
 80036f6:	e010      	b.n	800371a <SysTick_Config+0x3a>
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <SysTick_Config+0x44>)
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	3a01      	subs	r2, #1
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	2301      	movs	r3, #1
 8003702:	425b      	negs	r3, r3
 8003704:	2103      	movs	r1, #3
 8003706:	0018      	movs	r0, r3
 8003708:	f7ff ff7c 	bl	8003604 <__NVIC_SetPriority>
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <SysTick_Config+0x44>)
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <SysTick_Config+0x44>)
 8003714:	2207      	movs	r2, #7
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	2300      	movs	r3, #0
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b002      	add	sp, #8
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	e000e010 	.word	0xe000e010

08003728 <HAL_NVIC_SetPriority>:
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]
 8003732:	210f      	movs	r1, #15
 8003734:	187b      	adds	r3, r7, r1
 8003736:	1c02      	adds	r2, r0, #0
 8003738:	701a      	strb	r2, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	187b      	adds	r3, r7, r1
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	b25b      	sxtb	r3, r3
 8003742:	0011      	movs	r1, r2
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff ff5d 	bl	8003604 <__NVIC_SetPriority>
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_NVIC_EnableIRQ>:
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	0002      	movs	r2, r0
 800375a:	1dfb      	adds	r3, r7, #7
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b25b      	sxtb	r3, r3
 8003764:	0018      	movs	r0, r3
 8003766:	f7ff ff11 	bl	800358c <__NVIC_EnableIRQ>
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	46bd      	mov	sp, r7
 800376e:	b002      	add	sp, #8
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_NVIC_DisableIRQ>:
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	0002      	movs	r2, r0
 800377a:	1dfb      	adds	r3, r7, #7
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b25b      	sxtb	r3, r3
 8003784:	0018      	movs	r0, r3
 8003786:	f7ff ff1b 	bl	80035c0 <__NVIC_DisableIRQ>
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	46bd      	mov	sp, r7
 800378e:	b002      	add	sp, #8
 8003790:	bd80      	pop	{r7, pc}

08003792 <HAL_SYSTICK_Config>:
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff9f 	bl	80036e0 <SysTick_Config>
 80037a2:	0003      	movs	r3, r0
 80037a4:	0018      	movs	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	b002      	add	sp, #8
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_GPIO_Init>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	e14d      	b.n	8003a58 <HAL_GPIO_Init+0x2ac>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4091      	lsls	r1, r2
 80037c6:	000a      	movs	r2, r1
 80037c8:	4013      	ands	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d100      	bne.n	80037d4 <HAL_GPIO_Init+0x28>
 80037d2:	e13e      	b.n	8003a52 <HAL_GPIO_Init+0x2a6>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d003      	beq.n	80037e4 <HAL_GPIO_Init+0x38>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b12      	cmp	r3, #18
 80037e2:	d125      	bne.n	8003830 <HAL_GPIO_Init+0x84>
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	08da      	lsrs	r2, r3, #3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3208      	adds	r2, #8
 80037ec:	0092      	lsls	r2, r2, #2
 80037ee:	58d3      	ldr	r3, [r2, r3]
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2207      	movs	r2, #7
 80037f6:	4013      	ands	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	220f      	movs	r2, #15
 80037fc:	409a      	lsls	r2, r3
 80037fe:	0013      	movs	r3, r2
 8003800:	43da      	mvns	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	4013      	ands	r3, r2
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	220f      	movs	r2, #15
 800380e:	401a      	ands	r2, r3
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2107      	movs	r1, #7
 8003814:	400b      	ands	r3, r1
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	409a      	lsls	r2, r3
 800381a:	0013      	movs	r3, r2
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	08da      	lsrs	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	3208      	adds	r2, #8
 800382a:	0092      	lsls	r2, r2, #2
 800382c:	6979      	ldr	r1, [r7, #20]
 800382e:	50d1      	str	r1, [r2, r3]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	409a      	lsls	r2, r3
 800383e:	0013      	movs	r3, r2
 8003840:	43da      	mvns	r2, r3
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4013      	ands	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	401a      	ands	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	0013      	movs	r3, r2
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d00b      	beq.n	8003884 <HAL_GPIO_Init+0xd8>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d007      	beq.n	8003884 <HAL_GPIO_Init+0xd8>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b11      	cmp	r3, #17
 800387a:	d003      	beq.n	8003884 <HAL_GPIO_Init+0xd8>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b12      	cmp	r3, #18
 8003882:	d130      	bne.n	80038e6 <HAL_GPIO_Init+0x13a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	2203      	movs	r2, #3
 8003890:	409a      	lsls	r2, r3
 8003892:	0013      	movs	r3, r2
 8003894:	43da      	mvns	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	4013      	ands	r3, r2
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	409a      	lsls	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	2201      	movs	r2, #1
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	409a      	lsls	r2, r3
 80038c0:	0013      	movs	r3, r2
 80038c2:	43da      	mvns	r2, r3
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	091b      	lsrs	r3, r3, #4
 80038d0:	2201      	movs	r2, #1
 80038d2:	401a      	ands	r2, r3
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	409a      	lsls	r2, r3
 80038d8:	0013      	movs	r3, r2
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d017      	beq.n	800391e <HAL_GPIO_Init+0x172>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	2203      	movs	r2, #3
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	43da      	mvns	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	4013      	ands	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	409a      	lsls	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	4313      	orrs	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	2380      	movs	r3, #128	; 0x80
 8003924:	055b      	lsls	r3, r3, #21
 8003926:	4013      	ands	r3, r2
 8003928:	d100      	bne.n	800392c <HAL_GPIO_Init+0x180>
 800392a:	e092      	b.n	8003a52 <HAL_GPIO_Init+0x2a6>
 800392c:	4a50      	ldr	r2, [pc, #320]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3318      	adds	r3, #24
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	589b      	ldr	r3, [r3, r2]
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2203      	movs	r2, #3
 800393e:	4013      	ands	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	220f      	movs	r2, #15
 8003944:	409a      	lsls	r2, r3
 8003946:	0013      	movs	r3, r2
 8003948:	43da      	mvns	r2, r3
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4013      	ands	r3, r2
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	23a0      	movs	r3, #160	; 0xa0
 8003954:	05db      	lsls	r3, r3, #23
 8003956:	429a      	cmp	r2, r3
 8003958:	d013      	beq.n	8003982 <HAL_GPIO_Init+0x1d6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a45      	ldr	r2, [pc, #276]	; (8003a74 <HAL_GPIO_Init+0x2c8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00d      	beq.n	800397e <HAL_GPIO_Init+0x1d2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a44      	ldr	r2, [pc, #272]	; (8003a78 <HAL_GPIO_Init+0x2cc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d007      	beq.n	800397a <HAL_GPIO_Init+0x1ce>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a43      	ldr	r2, [pc, #268]	; (8003a7c <HAL_GPIO_Init+0x2d0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_GPIO_Init+0x1ca>
 8003972:	2305      	movs	r3, #5
 8003974:	e006      	b.n	8003984 <HAL_GPIO_Init+0x1d8>
 8003976:	2306      	movs	r3, #6
 8003978:	e004      	b.n	8003984 <HAL_GPIO_Init+0x1d8>
 800397a:	2302      	movs	r3, #2
 800397c:	e002      	b.n	8003984 <HAL_GPIO_Init+0x1d8>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <HAL_GPIO_Init+0x1d8>
 8003982:	2300      	movs	r3, #0
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	2103      	movs	r1, #3
 8003988:	400a      	ands	r2, r1
 800398a:	00d2      	lsls	r2, r2, #3
 800398c:	4093      	lsls	r3, r2
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	4936      	ldr	r1, [pc, #216]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3318      	adds	r3, #24
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	505a      	str	r2, [r3, r1]
 80039a2:	4a33      	ldr	r2, [pc, #204]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	58d3      	ldr	r3, [r2, r3]
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	025b      	lsls	r3, r3, #9
 80039bc:	4013      	ands	r3, r2
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x21c>
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	4929      	ldr	r1, [pc, #164]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	508b      	str	r3, [r1, r2]
 80039d0:	4a27      	ldr	r2, [pc, #156]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 80039d2:	2384      	movs	r3, #132	; 0x84
 80039d4:	58d3      	ldr	r3, [r2, r3]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	43da      	mvns	r2, r3
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	4013      	ands	r3, r2
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	2380      	movs	r3, #128	; 0x80
 80039e8:	029b      	lsls	r3, r3, #10
 80039ea:	4013      	ands	r3, r2
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x24a>
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	491e      	ldr	r1, [pc, #120]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 80039f8:	2284      	movs	r2, #132	; 0x84
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	508b      	str	r3, [r1, r2]
 80039fe:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43da      	mvns	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	035b      	lsls	r3, r3, #13
 8003a16:	4013      	ands	r3, r2
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x276>
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43da      	mvns	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	2380      	movs	r3, #128	; 0x80
 8003a3e:	039b      	lsls	r3, r3, #14
 8003a40:	4013      	ands	r3, r2
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2a0>
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_GPIO_Init+0x2c4>)
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3301      	adds	r3, #1
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	40da      	lsrs	r2, r3
 8003a60:	1e13      	subs	r3, r2, #0
 8003a62:	d000      	beq.n	8003a66 <HAL_GPIO_Init+0x2ba>
 8003a64:	e6aa      	b.n	80037bc <HAL_GPIO_Init+0x10>
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021800 	.word	0x40021800
 8003a74:	50000400 	.word	0x50000400
 8003a78:	50000800 	.word	0x50000800
 8003a7c:	50001400 	.word	0x50001400

08003a80 <HAL_GPIO_DeInit>:
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e0b4      	b.n	8003bfa <HAL_GPIO_DeInit+0x17a>
 8003a90:	2201      	movs	r2, #1
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	409a      	lsls	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <HAL_GPIO_DeInit+0x24>
 8003aa2:	e0a7      	b.n	8003bf4 <HAL_GPIO_DeInit+0x174>
 8003aa4:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3318      	adds	r3, #24
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	589b      	ldr	r3, [r3, r2]
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	220f      	movs	r2, #15
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	23a0      	movs	r3, #160	; 0xa0
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d013      	beq.n	8003af6 <HAL_GPIO_DeInit+0x76>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a50      	ldr	r2, [pc, #320]	; (8003c14 <HAL_GPIO_DeInit+0x194>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00d      	beq.n	8003af2 <HAL_GPIO_DeInit+0x72>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a4f      	ldr	r2, [pc, #316]	; (8003c18 <HAL_GPIO_DeInit+0x198>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <HAL_GPIO_DeInit+0x6e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4e      	ldr	r2, [pc, #312]	; (8003c1c <HAL_GPIO_DeInit+0x19c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d101      	bne.n	8003aea <HAL_GPIO_DeInit+0x6a>
 8003ae6:	2305      	movs	r3, #5
 8003ae8:	e006      	b.n	8003af8 <HAL_GPIO_DeInit+0x78>
 8003aea:	2306      	movs	r3, #6
 8003aec:	e004      	b.n	8003af8 <HAL_GPIO_DeInit+0x78>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e002      	b.n	8003af8 <HAL_GPIO_DeInit+0x78>
 8003af2:	2301      	movs	r3, #1
 8003af4:	e000      	b.n	8003af8 <HAL_GPIO_DeInit+0x78>
 8003af6:	2300      	movs	r3, #0
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	2103      	movs	r1, #3
 8003afc:	400a      	ands	r2, r1
 8003afe:	00d2      	lsls	r2, r2, #3
 8003b00:	4093      	lsls	r3, r2
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d136      	bne.n	8003b76 <HAL_GPIO_DeInit+0xf6>
 8003b08:	4a41      	ldr	r2, [pc, #260]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	58d3      	ldr	r3, [r2, r3]
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	43d2      	mvns	r2, r2
 8003b12:	493f      	ldr	r1, [pc, #252]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	508b      	str	r3, [r1, r2]
 8003b1a:	4a3d      	ldr	r2, [pc, #244]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b1c:	2384      	movs	r3, #132	; 0x84
 8003b1e:	58d3      	ldr	r3, [r2, r3]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	43d2      	mvns	r2, r2
 8003b24:	493a      	ldr	r1, [pc, #232]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	2284      	movs	r2, #132	; 0x84
 8003b2a:	508b      	str	r3, [r1, r2]
 8003b2c:	4b38      	ldr	r3, [pc, #224]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43d9      	mvns	r1, r3
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b36:	400a      	ands	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	43d9      	mvns	r1, r3
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	220f      	movs	r2, #15
 8003b52:	409a      	lsls	r2, r3
 8003b54:	0013      	movs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	4a2d      	ldr	r2, [pc, #180]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	3318      	adds	r3, #24
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	589a      	ldr	r2, [r3, r2]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	43d9      	mvns	r1, r3
 8003b68:	4829      	ldr	r0, [pc, #164]	; (8003c10 <HAL_GPIO_DeInit+0x190>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	400a      	ands	r2, r1
 8003b70:	3318      	adds	r3, #24
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	501a      	str	r2, [r3, r0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2103      	movs	r1, #3
 8003b80:	4099      	lsls	r1, r3
 8003b82:	000b      	movs	r3, r1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	0092      	lsls	r2, r2, #2
 8003b94:	58d3      	ldr	r3, [r2, r3]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	2107      	movs	r1, #7
 8003b9a:	400a      	ands	r2, r1
 8003b9c:	0092      	lsls	r2, r2, #2
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	4091      	lsls	r1, r2
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	43d1      	mvns	r1, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	08d2      	lsrs	r2, r2, #3
 8003baa:	4019      	ands	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3208      	adds	r2, #8
 8003bb0:	0092      	lsls	r2, r2, #2
 8003bb2:	50d1      	str	r1, [r2, r3]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	0052      	lsls	r2, r2, #1
 8003bbc:	2103      	movs	r1, #3
 8003bbe:	4091      	lsls	r1, r2
 8003bc0:	000a      	movs	r2, r1
 8003bc2:	43d2      	mvns	r2, r2
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2101      	movs	r1, #1
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4091      	lsls	r1, r2
 8003bd4:	000a      	movs	r2, r1
 8003bd6:	43d2      	mvns	r2, r2
 8003bd8:	401a      	ands	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	0052      	lsls	r2, r2, #1
 8003be6:	2103      	movs	r1, #3
 8003be8:	4091      	lsls	r1, r2
 8003bea:	000a      	movs	r2, r1
 8003bec:	43d2      	mvns	r2, r2
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	40da      	lsrs	r2, r3
 8003c00:	1e13      	subs	r3, r2, #0
 8003c02:	d000      	beq.n	8003c06 <HAL_GPIO_DeInit+0x186>
 8003c04:	e744      	b.n	8003a90 <HAL_GPIO_DeInit+0x10>
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b006      	add	sp, #24
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40021800 	.word	0x40021800
 8003c14:	50000400 	.word	0x50000400
 8003c18:	50000800 	.word	0x50000800
 8003c1c:	50001400 	.word	0x50001400

08003c20 <HAL_GPIO_ReadPin>:
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	000a      	movs	r2, r1
 8003c2a:	1cbb      	adds	r3, r7, #2
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	1cba      	adds	r2, r7, #2
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	4013      	ands	r3, r2
 8003c38:	d004      	beq.n	8003c44 <HAL_GPIO_ReadPin+0x24>
 8003c3a:	230f      	movs	r3, #15
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
 8003c42:	e003      	b.n	8003c4c <HAL_GPIO_ReadPin+0x2c>
 8003c44:	230f      	movs	r3, #15
 8003c46:	18fb      	adds	r3, r7, r3
 8003c48:	2200      	movs	r2, #0
 8003c4a:	701a      	strb	r2, [r3, #0]
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b004      	add	sp, #16
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_GPIO_WritePin>:
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	0008      	movs	r0, r1
 8003c64:	0011      	movs	r1, r2
 8003c66:	1cbb      	adds	r3, r7, #2
 8003c68:	1c02      	adds	r2, r0, #0
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	1c7b      	adds	r3, r7, #1
 8003c6e:	1c0a      	adds	r2, r1, #0
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	1c7b      	adds	r3, r7, #1
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_GPIO_WritePin+0x2a>
 8003c7a:	1cbb      	adds	r3, r7, #2
 8003c7c:	881a      	ldrh	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	619a      	str	r2, [r3, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_GPIO_WritePin+0x32>
 8003c84:	1cbb      	adds	r3, r7, #2
 8003c86:	881a      	ldrh	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b002      	add	sp, #8
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_GPIO_TogglePin>:
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	000a      	movs	r2, r1
 8003c9e:	1cbb      	adds	r3, r7, #2
 8003ca0:	801a      	strh	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	1cbb      	adds	r3, r7, #2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	1cb9      	adds	r1, r7, #2
 8003cb8:	8809      	ldrh	r1, [r1, #0]
 8003cba:	400b      	ands	r3, r1
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	619a      	str	r2, [r3, #24]
 8003cc2:	46c0      	nop			; (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b004      	add	sp, #16
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_GPIO_EXTI_IRQHandler>:
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	1dba      	adds	r2, r7, #6
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d008      	beq.n	8003cf6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ce6:	1dba      	adds	r2, r7, #6
 8003ce8:	8812      	ldrh	r2, [r2, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fe fffd 	bl	8002cf0 <HAL_GPIO_EXTI_Rising_Callback>
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	1dba      	adds	r2, r7, #6
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d008      	beq.n	8003d14 <HAL_GPIO_EXTI_IRQHandler+0x48>
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d04:	1dba      	adds	r2, r7, #6
 8003d06:	8812      	ldrh	r2, [r2, #0]
 8003d08:	611a      	str	r2, [r3, #16]
 8003d0a:	1dbb      	adds	r3, r7, #6
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f7ff f84a 	bl	8002da8 <HAL_GPIO_EXTI_Falling_Callback>
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b002      	add	sp, #8
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021800 	.word	0x40021800

08003d20 <HAL_RCC_OscConfig>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x12>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e1d0      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <HAL_RCC_OscConfig+0x1e>
 8003d3c:	e069      	b.n	8003e12 <HAL_RCC_OscConfig+0xf2>
 8003d3e:	4bc8      	ldr	r3, [pc, #800]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2238      	movs	r2, #56	; 0x38
 8003d44:	4013      	ands	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d105      	bne.n	8003d5a <HAL_RCC_OscConfig+0x3a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d15d      	bne.n	8003e12 <HAL_RCC_OscConfig+0xf2>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1bc      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_OscConfig+0x56>
 8003d66:	4bbe      	ldr	r3, [pc, #760]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4bbd      	ldr	r3, [pc, #756]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0249      	lsls	r1, r1, #9
 8003d70:	430a      	orrs	r2, r1
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	e020      	b.n	8003db8 <HAL_RCC_OscConfig+0x98>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	23a0      	movs	r3, #160	; 0xa0
 8003d7c:	02db      	lsls	r3, r3, #11
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d10e      	bne.n	8003da0 <HAL_RCC_OscConfig+0x80>
 8003d82:	4bb7      	ldr	r3, [pc, #732]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4bb6      	ldr	r3, [pc, #728]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	02c9      	lsls	r1, r1, #11
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4bb3      	ldr	r3, [pc, #716]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4bb2      	ldr	r3, [pc, #712]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003d96:	2180      	movs	r1, #128	; 0x80
 8003d98:	0249      	lsls	r1, r1, #9
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0x98>
 8003da0:	4baf      	ldr	r3, [pc, #700]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4bae      	ldr	r3, [pc, #696]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003da6:	49af      	ldr	r1, [pc, #700]	; (8004064 <HAL_RCC_OscConfig+0x344>)
 8003da8:	400a      	ands	r2, r1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	4bac      	ldr	r3, [pc, #688]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4bab      	ldr	r3, [pc, #684]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003db2:	49ad      	ldr	r1, [pc, #692]	; (8004068 <HAL_RCC_OscConfig+0x348>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d014      	beq.n	8003dea <HAL_RCC_OscConfig+0xca>
 8003dc0:	f7ff fba6 	bl	8003510 <HAL_GetTick>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0xbc>
 8003dca:	f7ff fba1 	bl	8003510 <HAL_GetTick>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	; 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0xbc>
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e17b      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003ddc:	4ba0      	ldr	r3, [pc, #640]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	2380      	movs	r3, #128	; 0x80
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	4013      	ands	r3, r2
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0xaa>
 8003de8:	e013      	b.n	8003e12 <HAL_RCC_OscConfig+0xf2>
 8003dea:	f7ff fb91 	bl	8003510 <HAL_GetTick>
 8003dee:	0003      	movs	r3, r0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0xe6>
 8003df4:	f7ff fb8c 	bl	8003510 <HAL_GetTick>
 8003df8:	0002      	movs	r2, r0
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0xe6>
 8003e02:	2303      	movs	r3, #3
 8003e04:	e166      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003e06:	4b96      	ldr	r3, [pc, #600]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d1f0      	bne.n	8003df4 <HAL_RCC_OscConfig+0xd4>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2202      	movs	r2, #2
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d100      	bne.n	8003e1e <HAL_RCC_OscConfig+0xfe>
 8003e1c:	e086      	b.n	8003f2c <HAL_RCC_OscConfig+0x20c>
 8003e1e:	4b90      	ldr	r3, [pc, #576]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	2238      	movs	r2, #56	; 0x38
 8003e24:	4013      	ands	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d12f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x16e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x11a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e14c      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003e3a:	4b89      	ldr	r3, [pc, #548]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	4a8b      	ldr	r2, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x34c>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	4b85      	ldr	r3, [pc, #532]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d112      	bne.n	8003e7c <HAL_RCC_OscConfig+0x15c>
 8003e56:	4b82      	ldr	r3, [pc, #520]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a85      	ldr	r2, [pc, #532]	; (8004070 <HAL_RCC_OscConfig+0x350>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	0019      	movs	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691a      	ldr	r2, [r3, #16]
 8003e64:	4b7e      	ldr	r3, [pc, #504]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4b7d      	ldr	r3, [pc, #500]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0adb      	lsrs	r3, r3, #11
 8003e70:	2207      	movs	r2, #7
 8003e72:	4013      	ands	r3, r2
 8003e74:	4a7f      	ldr	r2, [pc, #508]	; (8004074 <HAL_RCC_OscConfig+0x354>)
 8003e76:	40da      	lsrs	r2, r3
 8003e78:	4b7f      	ldr	r3, [pc, #508]	; (8004078 <HAL_RCC_OscConfig+0x358>)
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	4b7f      	ldr	r3, [pc, #508]	; (800407c <HAL_RCC_OscConfig+0x35c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7ff fae9 	bl	8003458 <HAL_InitTick>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d050      	beq.n	8003f2c <HAL_RCC_OscConfig+0x20c>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e122      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d030      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x1d8>
 8003e96:	4b72      	ldr	r3, [pc, #456]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a75      	ldr	r2, [pc, #468]	; (8004070 <HAL_RCC_OscConfig+0x350>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	4b6e      	ldr	r3, [pc, #440]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4b6d      	ldr	r3, [pc, #436]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4b6c      	ldr	r3, [pc, #432]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	0049      	lsls	r1, r1, #1
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f7ff fb2a 	bl	8003510 <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x1b4>
 8003ec2:	f7ff fb25 	bl	8003510 <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x1b4>
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e0ff      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4013      	ands	r3, r2
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1a2>
 8003ee0:	4b5f      	ldr	r3, [pc, #380]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4a61      	ldr	r2, [pc, #388]	; (800406c <HAL_RCC_OscConfig+0x34c>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	0019      	movs	r1, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	021a      	lsls	r2, r3, #8
 8003ef0:	4b5b      	ldr	r3, [pc, #364]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e019      	b.n	8003f2c <HAL_RCC_OscConfig+0x20c>
 8003ef8:	4b59      	ldr	r3, [pc, #356]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b58      	ldr	r3, [pc, #352]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003efe:	4960      	ldr	r1, [pc, #384]	; (8004080 <HAL_RCC_OscConfig+0x360>)
 8003f00:	400a      	ands	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	f7ff fb04 	bl	8003510 <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x200>
 8003f0e:	f7ff faff 	bl	8003510 <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x200>
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e0d9      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003f20:	4b4f      	ldr	r3, [pc, #316]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2380      	movs	r3, #128	; 0x80
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4013      	ands	r3, r2
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x1ee>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2208      	movs	r2, #8
 8003f32:	4013      	ands	r3, r2
 8003f34:	d042      	beq.n	8003fbc <HAL_RCC_OscConfig+0x29c>
 8003f36:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2238      	movs	r2, #56	; 0x38
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b18      	cmp	r3, #24
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_OscConfig+0x22e>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d138      	bne.n	8003fbc <HAL_RCC_OscConfig+0x29c>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0c2      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d019      	beq.n	8003f8a <HAL_RCC_OscConfig+0x26a>
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	661a      	str	r2, [r3, #96]	; 0x60
 8003f62:	f7ff fad5 	bl	8003510 <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x25e>
 8003f6c:	f7ff fad0 	bl	8003510 <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x25e>
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0aa      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003f7e:	4b38      	ldr	r3, [pc, #224]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f82:	2202      	movs	r2, #2
 8003f84:	4013      	ands	r3, r2
 8003f86:	d0f1      	beq.n	8003f6c <HAL_RCC_OscConfig+0x24c>
 8003f88:	e018      	b.n	8003fbc <HAL_RCC_OscConfig+0x29c>
 8003f8a:	4b35      	ldr	r3, [pc, #212]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f8e:	4b34      	ldr	r3, [pc, #208]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	438a      	bics	r2, r1
 8003f94:	661a      	str	r2, [r3, #96]	; 0x60
 8003f96:	f7ff fabb 	bl	8003510 <HAL_GetTick>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x292>
 8003fa0:	f7ff fab6 	bl	8003510 <HAL_GetTick>
 8003fa4:	0002      	movs	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x292>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e090      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	d1f1      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x280>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d100      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2a8>
 8003fc6:	e084      	b.n	80040d2 <HAL_RCC_OscConfig+0x3b2>
 8003fc8:	230f      	movs	r3, #15
 8003fca:	18fb      	adds	r3, r7, r3
 8003fcc:	2200      	movs	r2, #0
 8003fce:	701a      	strb	r2, [r3, #0]
 8003fd0:	4b23      	ldr	r3, [pc, #140]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2238      	movs	r2, #56	; 0x38
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d106      	bne.n	8003fea <HAL_RCC_OscConfig+0x2ca>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d000      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x2c6>
 8003fe4:	e075      	b.n	80040d2 <HAL_RCC_OscConfig+0x3b2>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e074      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d106      	bne.n	8004000 <HAL_RCC_OscConfig+0x2e0>
 8003ff2:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ff4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x31a>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x302>
 8004008:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 800400a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800400c:	4b14      	ldr	r3, [pc, #80]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 800400e:	2104      	movs	r1, #4
 8004010:	430a      	orrs	r2, r1
 8004012:	65da      	str	r2, [r3, #92]	; 0x5c
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8004016:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004018:	4b11      	ldr	r3, [pc, #68]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 800401a:	2101      	movs	r1, #1
 800401c:	430a      	orrs	r2, r1
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0x31a>
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8004024:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004026:	4b0e      	ldr	r3, [pc, #56]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8004028:	2101      	movs	r1, #1
 800402a:	438a      	bics	r2, r1
 800402c:	65da      	str	r2, [r3, #92]	; 0x5c
 800402e:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8004030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <HAL_RCC_OscConfig+0x340>)
 8004034:	2104      	movs	r1, #4
 8004036:	438a      	bics	r2, r1
 8004038:	65da      	str	r2, [r3, #92]	; 0x5c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d028      	beq.n	8004094 <HAL_RCC_OscConfig+0x374>
 8004042:	f7ff fa65 	bl	8003510 <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	e01d      	b.n	8004088 <HAL_RCC_OscConfig+0x368>
 800404c:	f7ff fa60 	bl	8003510 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a0b      	ldr	r2, [pc, #44]	; (8004084 <HAL_RCC_OscConfig+0x364>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d915      	bls.n	8004088 <HAL_RCC_OscConfig+0x368>
 800405c:	2303      	movs	r3, #3
 800405e:	e039      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 8004060:	40021000 	.word	0x40021000
 8004064:	fffeffff 	.word	0xfffeffff
 8004068:	fffbffff 	.word	0xfffbffff
 800406c:	ffff80ff 	.word	0xffff80ff
 8004070:	ffffc7ff 	.word	0xffffc7ff
 8004074:	02dc6c00 	.word	0x02dc6c00
 8004078:	2000000c 	.word	0x2000000c
 800407c:	20000010 	.word	0x20000010
 8004080:	fffffeff 	.word	0xfffffeff
 8004084:	00001388 	.word	0x00001388
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <HAL_RCC_OscConfig+0x3bc>)
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2202      	movs	r2, #2
 800408e:	4013      	ands	r3, r2
 8004090:	d0dc      	beq.n	800404c <HAL_RCC_OscConfig+0x32c>
 8004092:	e013      	b.n	80040bc <HAL_RCC_OscConfig+0x39c>
 8004094:	f7ff fa3c 	bl	8003510 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	613b      	str	r3, [r7, #16]
 800409c:	e009      	b.n	80040b2 <HAL_RCC_OscConfig+0x392>
 800409e:	f7ff fa37 	bl	8003510 <HAL_GetTick>
 80040a2:	0002      	movs	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <HAL_RCC_OscConfig+0x3c0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x392>
 80040ae:	2303      	movs	r3, #3
 80040b0:	e010      	b.n	80040d4 <HAL_RCC_OscConfig+0x3b4>
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <HAL_RCC_OscConfig+0x3bc>)
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	2202      	movs	r2, #2
 80040b8:	4013      	ands	r3, r2
 80040ba:	d1f0      	bne.n	800409e <HAL_RCC_OscConfig+0x37e>
 80040bc:	230f      	movs	r3, #15
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d105      	bne.n	80040d2 <HAL_RCC_OscConfig+0x3b2>
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_OscConfig+0x3bc>)
 80040c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ca:	4b04      	ldr	r3, [pc, #16]	; (80040dc <HAL_RCC_OscConfig+0x3bc>)
 80040cc:	4905      	ldr	r1, [pc, #20]	; (80040e4 <HAL_RCC_OscConfig+0x3c4>)
 80040ce:	400a      	ands	r2, r1
 80040d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80040d2:	2300      	movs	r3, #0
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b006      	add	sp, #24
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40021000 	.word	0x40021000
 80040e0:	00001388 	.word	0x00001388
 80040e4:	efffffff 	.word	0xefffffff

080040e8 <HAL_RCC_ClockConfig>:
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0e9      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2207      	movs	r2, #7
 8004102:	4013      	ands	r3, r2
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d91e      	bls.n	8004148 <HAL_RCC_ClockConfig+0x60>
 800410a:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2207      	movs	r2, #7
 8004110:	4393      	bics	r3, r2
 8004112:	0019      	movs	r1, r3
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f7ff f9f8 	bl	8003510 <HAL_GetTick>
 8004120:	0003      	movs	r3, r0
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e009      	b.n	800413a <HAL_RCC_ClockConfig+0x52>
 8004126:	f7ff f9f3 	bl	8003510 <HAL_GetTick>
 800412a:	0002      	movs	r2, r0
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	4a6a      	ldr	r2, [pc, #424]	; (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x52>
 8004136:	2303      	movs	r3, #3
 8004138:	e0ca      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 800413a:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2207      	movs	r2, #7
 8004140:	4013      	ands	r3, r2
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d1ee      	bne.n	8004126 <HAL_RCC_ClockConfig+0x3e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2202      	movs	r2, #2
 800414e:	4013      	ands	r3, r2
 8004150:	d017      	beq.n	8004182 <HAL_RCC_ClockConfig+0x9a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2204      	movs	r2, #4
 8004158:	4013      	ands	r3, r2
 800415a:	d008      	beq.n	800416e <HAL_RCC_ClockConfig+0x86>
 800415c:	4b60      	ldr	r3, [pc, #384]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a60      	ldr	r2, [pc, #384]	; (80042e4 <HAL_RCC_ClockConfig+0x1fc>)
 8004162:	401a      	ands	r2, r3
 8004164:	4b5e      	ldr	r3, [pc, #376]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004166:	21b0      	movs	r1, #176	; 0xb0
 8004168:	0109      	lsls	r1, r1, #4
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
 800416e:	4b5c      	ldr	r3, [pc, #368]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	4a5d      	ldr	r2, [pc, #372]	; (80042e8 <HAL_RCC_ClockConfig+0x200>)
 8004174:	4013      	ands	r3, r2
 8004176:	0019      	movs	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 800417e:	430a      	orrs	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2201      	movs	r2, #1
 8004188:	4013      	ands	r3, r2
 800418a:	d055      	beq.n	8004238 <HAL_RCC_ClockConfig+0x150>
 800418c:	4b54      	ldr	r3, [pc, #336]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	221c      	movs	r2, #28
 8004192:	4393      	bics	r3, r2
 8004194:	0019      	movs	r1, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	4b51      	ldr	r3, [pc, #324]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xd0>
 80041a8:	4b4d      	ldr	r3, [pc, #308]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	4013      	ands	r3, r2
 80041b2:	d11f      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x10c>
 80041b4:	2301      	movs	r3, #1
 80041b6:	e08b      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xe8>
 80041c0:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	d113      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x10c>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e07f      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xfe>
 80041d8:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041dc:	2202      	movs	r2, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d108      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x10c>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e074      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ea:	2202      	movs	r2, #2
 80041ec:	4013      	ands	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_RCC_ClockConfig+0x10c>
 80041f0:	2301      	movs	r3, #1
 80041f2:	e06d      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 80041f4:	4b3a      	ldr	r3, [pc, #232]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2207      	movs	r2, #7
 80041fa:	4393      	bics	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4b37      	ldr	r3, [pc, #220]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004204:	430a      	orrs	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	f7ff f982 	bl	8003510 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e009      	b.n	8004226 <HAL_RCC_ClockConfig+0x13e>
 8004212:	f7ff f97d 	bl	8003510 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_ClockConfig+0x13e>
 8004222:	2303      	movs	r3, #3
 8004224:	e054      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 8004226:	4b2e      	ldr	r3, [pc, #184]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2238      	movs	r2, #56	; 0x38
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	429a      	cmp	r2, r3
 8004236:	d1ec      	bne.n	8004212 <HAL_RCC_ClockConfig+0x12a>
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2207      	movs	r2, #7
 800423e:	4013      	ands	r3, r2
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d21e      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x19c>
 8004246:	4b24      	ldr	r3, [pc, #144]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2207      	movs	r2, #7
 800424c:	4393      	bics	r3, r2
 800424e:	0019      	movs	r1, r3
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	f7ff f95a 	bl	8003510 <HAL_GetTick>
 800425c:	0003      	movs	r3, r0
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	e009      	b.n	8004276 <HAL_RCC_ClockConfig+0x18e>
 8004262:	f7ff f955 	bl	8003510 <HAL_GetTick>
 8004266:	0002      	movs	r2, r0
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_RCC_ClockConfig+0x1f4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x18e>
 8004272:	2303      	movs	r3, #3
 8004274:	e02c      	b.n	80042d0 <HAL_RCC_ClockConfig+0x1e8>
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2207      	movs	r2, #7
 800427c:	4013      	ands	r3, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_ClockConfig+0x17a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2204      	movs	r2, #4
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x1ba>
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <HAL_RCC_ClockConfig+0x204>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	4b10      	ldr	r3, [pc, #64]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	f000 f82b 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042a6:	0001      	movs	r1, r0
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	0a1b      	lsrs	r3, r3, #8
 80042ae:	220f      	movs	r2, #15
 80042b0:	401a      	ands	r2, r3
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <HAL_RCC_ClockConfig+0x208>)
 80042b4:	0092      	lsls	r2, r2, #2
 80042b6:	58d3      	ldr	r3, [r2, r3]
 80042b8:	221f      	movs	r2, #31
 80042ba:	4013      	ands	r3, r2
 80042bc:	000a      	movs	r2, r1
 80042be:	40da      	lsrs	r2, r3
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <HAL_RCC_ClockConfig+0x20c>)
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <HAL_RCC_ClockConfig+0x210>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7ff f8c5 	bl	8003458 <HAL_InitTick>
 80042ce:	0003      	movs	r3, r0
 80042d0:	0018      	movs	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b004      	add	sp, #16
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40022000 	.word	0x40022000
 80042dc:	00001388 	.word	0x00001388
 80042e0:	40021000 	.word	0x40021000
 80042e4:	ffff84ff 	.word	0xffff84ff
 80042e8:	fffff0ff 	.word	0xfffff0ff
 80042ec:	ffff8fff 	.word	0xffff8fff
 80042f0:	08005788 	.word	0x08005788
 80042f4:	2000000c 	.word	0x2000000c
 80042f8:	20000010 	.word	0x20000010

080042fc <HAL_RCC_GetSysClockFreq>:
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	4b1c      	ldr	r3, [pc, #112]	; (8004374 <HAL_RCC_GetSysClockFreq+0x78>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2238      	movs	r2, #56	; 0x38
 8004308:	4013      	ands	r3, r2
 800430a:	d10f      	bne.n	800432c <HAL_RCC_GetSysClockFreq+0x30>
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <HAL_RCC_GetSysClockFreq+0x78>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0adb      	lsrs	r3, r3, #11
 8004312:	2207      	movs	r2, #7
 8004314:	4013      	ands	r3, r2
 8004316:	2201      	movs	r2, #1
 8004318:	409a      	lsls	r2, r3
 800431a:	0013      	movs	r3, r2
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	6839      	ldr	r1, [r7, #0]
 8004320:	4815      	ldr	r0, [pc, #84]	; (8004378 <HAL_RCC_GetSysClockFreq+0x7c>)
 8004322:	f7fb fef1 	bl	8000108 <__udivsi3>
 8004326:	0003      	movs	r3, r0
 8004328:	607b      	str	r3, [r7, #4]
 800432a:	e01e      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x6e>
 800432c:	4b11      	ldr	r3, [pc, #68]	; (8004374 <HAL_RCC_GetSysClockFreq+0x78>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2238      	movs	r2, #56	; 0x38
 8004332:	4013      	ands	r3, r2
 8004334:	2b08      	cmp	r3, #8
 8004336:	d102      	bne.n	800433e <HAL_RCC_GetSysClockFreq+0x42>
 8004338:	4b10      	ldr	r3, [pc, #64]	; (800437c <HAL_RCC_GetSysClockFreq+0x80>)
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	e015      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x6e>
 800433e:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <HAL_RCC_GetSysClockFreq+0x78>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2238      	movs	r2, #56	; 0x38
 8004344:	4013      	ands	r3, r2
 8004346:	2b20      	cmp	r3, #32
 8004348:	d103      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x56>
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	e00b      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x6e>
 8004352:	4b08      	ldr	r3, [pc, #32]	; (8004374 <HAL_RCC_GetSysClockFreq+0x78>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	2238      	movs	r2, #56	; 0x38
 8004358:	4013      	ands	r3, r2
 800435a:	2b18      	cmp	r3, #24
 800435c:	d103      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x6a>
 800435e:	23fa      	movs	r3, #250	; 0xfa
 8004360:	01db      	lsls	r3, r3, #7
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	e001      	b.n	800436a <HAL_RCC_GetSysClockFreq+0x6e>
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0018      	movs	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	b002      	add	sp, #8
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40021000 	.word	0x40021000
 8004378:	02dc6c00 	.word	0x02dc6c00
 800437c:	007a1200 	.word	0x007a1200

08004380 <HAL_TIM_Base_Init>:
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_TIM_Base_Init+0x12>
 800438e:	2301      	movs	r3, #1
 8004390:	e04a      	b.n	8004428 <HAL_TIM_Base_Init+0xa8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223d      	movs	r2, #61	; 0x3d
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_TIM_Base_Init+0x2e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223c      	movs	r2, #60	; 0x3c
 80043a2:	2100      	movs	r1, #0
 80043a4:	5499      	strb	r1, [r3, r2]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	0018      	movs	r0, r3
 80043aa:	f7fe ff77 	bl	800329c <HAL_TIM_Base_MspInit>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	223d      	movs	r2, #61	; 0x3d
 80043b2:	2102      	movs	r1, #2
 80043b4:	5499      	strb	r1, [r3, r2]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3304      	adds	r3, #4
 80043be:	0019      	movs	r1, r3
 80043c0:	0010      	movs	r0, r2
 80043c2:	f000 fbdb 	bl	8004b7c <TIM_Base_SetConfig>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2248      	movs	r2, #72	; 0x48
 80043ca:	2101      	movs	r1, #1
 80043cc:	5499      	strb	r1, [r3, r2]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	223e      	movs	r2, #62	; 0x3e
 80043d2:	2101      	movs	r1, #1
 80043d4:	5499      	strb	r1, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	223f      	movs	r2, #63	; 0x3f
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2240      	movs	r2, #64	; 0x40
 80043e2:	2101      	movs	r1, #1
 80043e4:	5499      	strb	r1, [r3, r2]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2241      	movs	r2, #65	; 0x41
 80043ea:	2101      	movs	r1, #1
 80043ec:	5499      	strb	r1, [r3, r2]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2242      	movs	r2, #66	; 0x42
 80043f2:	2101      	movs	r1, #1
 80043f4:	5499      	strb	r1, [r3, r2]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2243      	movs	r2, #67	; 0x43
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2244      	movs	r2, #68	; 0x44
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2245      	movs	r2, #69	; 0x45
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2246      	movs	r2, #70	; 0x46
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2247      	movs	r2, #71	; 0x47
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	223d      	movs	r2, #61	; 0x3d
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]
 8004426:	2300      	movs	r3, #0
 8004428:	0018      	movs	r0, r3
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}

08004430 <HAL_TIM_Base_Start_IT>:
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	223d      	movs	r2, #61	; 0x3d
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d001      	beq.n	8004448 <HAL_TIM_Base_Start_IT+0x18>
 8004444:	2301      	movs	r3, #1
 8004446:	e037      	b.n	80044b8 <HAL_TIM_Base_Start_IT+0x88>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	223d      	movs	r2, #61	; 0x3d
 800444c:	2102      	movs	r1, #2
 800444e:	5499      	strb	r1, [r3, r2]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2101      	movs	r1, #1
 800445c:	430a      	orrs	r2, r1
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a16      	ldr	r2, [pc, #88]	; (80044c0 <HAL_TIM_Base_Start_IT+0x90>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_Base_Start_IT+0x44>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a15      	ldr	r2, [pc, #84]	; (80044c4 <HAL_TIM_Base_Start_IT+0x94>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d116      	bne.n	80044a2 <HAL_TIM_Base_Start_IT+0x72>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4a13      	ldr	r2, [pc, #76]	; (80044c8 <HAL_TIM_Base_Start_IT+0x98>)
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b06      	cmp	r3, #6
 8004484:	d016      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x84>
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	025b      	lsls	r3, r3, #9
 800448c:	429a      	cmp	r2, r3
 800448e:	d011      	beq.n	80044b4 <HAL_TIM_Base_Start_IT+0x84>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	e008      	b.n	80044b4 <HAL_TIM_Base_Start_IT+0x84>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
 80044b2:	e000      	b.n	80044b6 <HAL_TIM_Base_Start_IT+0x86>
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	2300      	movs	r3, #0
 80044b8:	0018      	movs	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	b004      	add	sp, #16
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400
 80044c8:	00010007 	.word	0x00010007

080044cc <HAL_TIM_OC_Init>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_TIM_OC_Init+0x12>
 80044da:	2301      	movs	r3, #1
 80044dc:	e04a      	b.n	8004574 <HAL_TIM_OC_Init+0xa8>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	223d      	movs	r2, #61	; 0x3d
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d107      	bne.n	80044fa <HAL_TIM_OC_Init+0x2e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	223c      	movs	r2, #60	; 0x3c
 80044ee:	2100      	movs	r1, #0
 80044f0:	5499      	strb	r1, [r3, r2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f841 	bl	800457c <HAL_TIM_OC_MspInit>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	223d      	movs	r2, #61	; 0x3d
 80044fe:	2102      	movs	r1, #2
 8004500:	5499      	strb	r1, [r3, r2]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	0019      	movs	r1, r3
 800450c:	0010      	movs	r0, r2
 800450e:	f000 fb35 	bl	8004b7c <TIM_Base_SetConfig>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2248      	movs	r2, #72	; 0x48
 8004516:	2101      	movs	r1, #1
 8004518:	5499      	strb	r1, [r3, r2]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	223e      	movs	r2, #62	; 0x3e
 800451e:	2101      	movs	r1, #1
 8004520:	5499      	strb	r1, [r3, r2]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	223f      	movs	r2, #63	; 0x3f
 8004526:	2101      	movs	r1, #1
 8004528:	5499      	strb	r1, [r3, r2]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2240      	movs	r2, #64	; 0x40
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2241      	movs	r2, #65	; 0x41
 8004536:	2101      	movs	r1, #1
 8004538:	5499      	strb	r1, [r3, r2]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2242      	movs	r2, #66	; 0x42
 800453e:	2101      	movs	r1, #1
 8004540:	5499      	strb	r1, [r3, r2]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2243      	movs	r2, #67	; 0x43
 8004546:	2101      	movs	r1, #1
 8004548:	5499      	strb	r1, [r3, r2]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2244      	movs	r2, #68	; 0x44
 800454e:	2101      	movs	r1, #1
 8004550:	5499      	strb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2245      	movs	r2, #69	; 0x45
 8004556:	2101      	movs	r1, #1
 8004558:	5499      	strb	r1, [r3, r2]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2246      	movs	r2, #70	; 0x46
 800455e:	2101      	movs	r1, #1
 8004560:	5499      	strb	r1, [r3, r2]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2247      	movs	r2, #71	; 0x47
 8004566:	2101      	movs	r1, #1
 8004568:	5499      	strb	r1, [r3, r2]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	223d      	movs	r2, #61	; 0x3d
 800456e:	2101      	movs	r1, #1
 8004570:	5499      	strb	r1, [r3, r2]
 8004572:	2300      	movs	r3, #0
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	b002      	add	sp, #8
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_TIM_OC_MspInit>:
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}

0800458c <HAL_TIM_OnePulse_Init>:
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_TIM_OnePulse_Init+0x14>
 800459c:	2301      	movs	r3, #1
 800459e:	e042      	b.n	8004626 <HAL_TIM_OnePulse_Init+0x9a>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	223d      	movs	r2, #61	; 0x3d
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_TIM_OnePulse_Init+0x30>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223c      	movs	r2, #60	; 0x3c
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f839 	bl	800462e <HAL_TIM_OnePulse_MspInit>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	223d      	movs	r2, #61	; 0x3d
 80045c0:	2102      	movs	r1, #2
 80045c2:	5499      	strb	r1, [r3, r2]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3304      	adds	r3, #4
 80045cc:	0019      	movs	r1, r3
 80045ce:	0010      	movs	r0, r2
 80045d0:	f000 fad4 	bl	8004b7c <TIM_Base_SetConfig>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2108      	movs	r1, #8
 80045e0:	438a      	bics	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6819      	ldr	r1, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2248      	movs	r2, #72	; 0x48
 80045f8:	2101      	movs	r1, #1
 80045fa:	5499      	strb	r1, [r3, r2]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	223e      	movs	r2, #62	; 0x3e
 8004600:	2101      	movs	r1, #1
 8004602:	5499      	strb	r1, [r3, r2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	223f      	movs	r2, #63	; 0x3f
 8004608:	2101      	movs	r1, #1
 800460a:	5499      	strb	r1, [r3, r2]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2244      	movs	r2, #68	; 0x44
 8004610:	2101      	movs	r1, #1
 8004612:	5499      	strb	r1, [r3, r2]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2245      	movs	r2, #69	; 0x45
 8004618:	2101      	movs	r1, #1
 800461a:	5499      	strb	r1, [r3, r2]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	223d      	movs	r2, #61	; 0x3d
 8004620:	2101      	movs	r1, #1
 8004622:	5499      	strb	r1, [r3, r2]
 8004624:	2300      	movs	r3, #0
 8004626:	0018      	movs	r0, r3
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_OnePulse_MspInit>:
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <HAL_TIM_IRQHandler>:
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	60fb      	str	r3, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	60bb      	str	r3, [r7, #8]
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2202      	movs	r2, #2
 800465c:	4013      	ands	r3, r2
 800465e:	d021      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x64>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2202      	movs	r2, #2
 8004664:	4013      	ands	r3, r2
 8004666:	d01d      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x64>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2203      	movs	r2, #3
 800466e:	4252      	negs	r2, r2
 8004670:	611a      	str	r2, [r3, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	771a      	strb	r2, [r3, #28]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2203      	movs	r2, #3
 8004680:	4013      	ands	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_IRQHandler+0x4e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	0018      	movs	r0, r3
 8004688:	f000 fa60 	bl	8004b4c <HAL_TIM_IC_CaptureCallback>
 800468c:	e007      	b.n	800469e <HAL_TIM_IRQHandler+0x5e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 fa53 	bl	8004b3c <HAL_TIM_OC_DelayElapsedCallback>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 fa5f 	bl	8004b5c <HAL_TIM_PWM_PulseFinishedCallback>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2204      	movs	r2, #4
 80046a8:	4013      	ands	r3, r2
 80046aa:	d022      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xb2>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2204      	movs	r2, #4
 80046b0:	4013      	ands	r3, r2
 80046b2:	d01e      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xb2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2205      	movs	r2, #5
 80046ba:	4252      	negs	r2, r2
 80046bc:	611a      	str	r2, [r3, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	771a      	strb	r2, [r3, #28]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	23c0      	movs	r3, #192	; 0xc0
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4013      	ands	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_TIM_IRQHandler+0x9c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	0018      	movs	r0, r3
 80046d6:	f000 fa39 	bl	8004b4c <HAL_TIM_IC_CaptureCallback>
 80046da:	e007      	b.n	80046ec <HAL_TIM_IRQHandler+0xac>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fa2c 	bl	8004b3c <HAL_TIM_OC_DelayElapsedCallback>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	0018      	movs	r0, r3
 80046e8:	f000 fa38 	bl	8004b5c <HAL_TIM_PWM_PulseFinishedCallback>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2208      	movs	r2, #8
 80046f6:	4013      	ands	r3, r2
 80046f8:	d021      	beq.n	800473e <HAL_TIM_IRQHandler+0xfe>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2208      	movs	r2, #8
 80046fe:	4013      	ands	r3, r2
 8004700:	d01d      	beq.n	800473e <HAL_TIM_IRQHandler+0xfe>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2209      	movs	r2, #9
 8004708:	4252      	negs	r2, r2
 800470a:	611a      	str	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2204      	movs	r2, #4
 8004710:	771a      	strb	r2, [r3, #28]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	2203      	movs	r2, #3
 800471a:	4013      	ands	r3, r2
 800471c:	d004      	beq.n	8004728 <HAL_TIM_IRQHandler+0xe8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0018      	movs	r0, r3
 8004722:	f000 fa13 	bl	8004b4c <HAL_TIM_IC_CaptureCallback>
 8004726:	e007      	b.n	8004738 <HAL_TIM_IRQHandler+0xf8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fa06 	bl	8004b3c <HAL_TIM_OC_DelayElapsedCallback>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fa12 	bl	8004b5c <HAL_TIM_PWM_PulseFinishedCallback>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2210      	movs	r2, #16
 8004742:	4013      	ands	r3, r2
 8004744:	d022      	beq.n	800478c <HAL_TIM_IRQHandler+0x14c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2210      	movs	r2, #16
 800474a:	4013      	ands	r3, r2
 800474c:	d01e      	beq.n	800478c <HAL_TIM_IRQHandler+0x14c>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2211      	movs	r2, #17
 8004754:	4252      	negs	r2, r2
 8004756:	611a      	str	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2208      	movs	r2, #8
 800475c:	771a      	strb	r2, [r3, #28]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	23c0      	movs	r3, #192	; 0xc0
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4013      	ands	r3, r2
 800476a:	d004      	beq.n	8004776 <HAL_TIM_IRQHandler+0x136>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	0018      	movs	r0, r3
 8004770:	f000 f9ec 	bl	8004b4c <HAL_TIM_IC_CaptureCallback>
 8004774:	e007      	b.n	8004786 <HAL_TIM_IRQHandler+0x146>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f9df 	bl	8004b3c <HAL_TIM_OC_DelayElapsedCallback>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f000 f9eb 	bl	8004b5c <HAL_TIM_PWM_PulseFinishedCallback>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	771a      	strb	r2, [r3, #28]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2201      	movs	r2, #1
 8004790:	4013      	ands	r3, r2
 8004792:	d00c      	beq.n	80047ae <HAL_TIM_IRQHandler+0x16e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	4013      	ands	r3, r2
 800479a:	d008      	beq.n	80047ae <HAL_TIM_IRQHandler+0x16e>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2202      	movs	r2, #2
 80047a2:	4252      	negs	r2, r2
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7fe fa33 	bl	8002c14 <HAL_TIM_PeriodElapsedCallback>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	4013      	ands	r3, r2
 80047b4:	d00c      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x190>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	4013      	ands	r3, r2
 80047bc:	d008      	beq.n	80047d0 <HAL_TIM_IRQHandler+0x190>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2281      	movs	r2, #129	; 0x81
 80047c4:	4252      	negs	r2, r2
 80047c6:	611a      	str	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 fe7a 	bl	80054c4 <HAL_TIMEx_BreakCallback>
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	4013      	ands	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x1b2>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2280      	movs	r2, #128	; 0x80
 80047de:	4013      	ands	r3, r2
 80047e0:	d007      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x1b2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <HAL_TIM_IRQHandler+0x200>)
 80047e8:	611a      	str	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f000 fe71 	bl	80054d4 <HAL_TIMEx_Break2Callback>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	4013      	ands	r3, r2
 80047f8:	d00c      	beq.n	8004814 <HAL_TIM_IRQHandler+0x1d4>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2240      	movs	r2, #64	; 0x40
 80047fe:	4013      	ands	r3, r2
 8004800:	d008      	beq.n	8004814 <HAL_TIM_IRQHandler+0x1d4>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2241      	movs	r2, #65	; 0x41
 8004808:	4252      	negs	r2, r2
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f000 f9ac 	bl	8004b6c <HAL_TIM_TriggerCallback>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2220      	movs	r2, #32
 8004818:	4013      	ands	r3, r2
 800481a:	d00c      	beq.n	8004836 <HAL_TIM_IRQHandler+0x1f6>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2220      	movs	r2, #32
 8004820:	4013      	ands	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_TIM_IRQHandler+0x1f6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2221      	movs	r2, #33	; 0x21
 800482a:	4252      	negs	r2, r2
 800482c:	611a      	str	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f000 fe3f 	bl	80054b4 <HAL_TIMEx_CommutCallback>
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	46bd      	mov	sp, r7
 800483a:	b004      	add	sp, #16
 800483c:	bd80      	pop	{r7, pc}
 800483e:	46c0      	nop			; (mov r8, r8)
 8004840:	fffffeff 	.word	0xfffffeff

08004844 <HAL_TIM_OC_ConfigChannel>:
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	2317      	movs	r3, #23
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	223c      	movs	r2, #60	; 0x3c
 800485c:	5c9b      	ldrb	r3, [r3, r2]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d101      	bne.n	8004866 <HAL_TIM_OC_ConfigChannel+0x22>
 8004862:	2302      	movs	r3, #2
 8004864:	e048      	b.n	80048f8 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	223c      	movs	r2, #60	; 0x3c
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b14      	cmp	r3, #20
 8004872:	d835      	bhi.n	80048e0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	4b21      	ldr	r3, [pc, #132]	; (8004900 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	469f      	mov	pc, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	0011      	movs	r1, r2
 8004888:	0018      	movs	r0, r3
 800488a:	f000 f9e3 	bl	8004c54 <TIM_OC1_SetConfig>
 800488e:	e02c      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	0011      	movs	r1, r2
 8004898:	0018      	movs	r0, r3
 800489a:	f000 fa5b 	bl	8004d54 <TIM_OC2_SetConfig>
 800489e:	e024      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	0011      	movs	r1, r2
 80048a8:	0018      	movs	r0, r3
 80048aa:	f000 fad1 	bl	8004e50 <TIM_OC3_SetConfig>
 80048ae:	e01c      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	0011      	movs	r1, r2
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 fb4b 	bl	8004f54 <TIM_OC4_SetConfig>
 80048be:	e014      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	0011      	movs	r1, r2
 80048c8:	0018      	movs	r0, r3
 80048ca:	f000 fba7 	bl	800501c <TIM_OC5_SetConfig>
 80048ce:	e00c      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	0011      	movs	r1, r2
 80048d8:	0018      	movs	r0, r3
 80048da:	f000 fbf9 	bl	80050d0 <TIM_OC6_SetConfig>
 80048de:	e004      	b.n	80048ea <HAL_TIM_OC_ConfigChannel+0xa6>
 80048e0:	2317      	movs	r3, #23
 80048e2:	18fb      	adds	r3, r7, r3
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	46c0      	nop			; (mov r8, r8)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	223c      	movs	r2, #60	; 0x3c
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]
 80048f2:	2317      	movs	r3, #23
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b006      	add	sp, #24
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	080057c8 	.word	0x080057c8

08004904 <HAL_TIM_ConfigClockSource>:
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
 800490e:	230f      	movs	r3, #15
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	223c      	movs	r2, #60	; 0x3c
 800491a:	5c9b      	ldrb	r3, [r3, r2]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d101      	bne.n	8004924 <HAL_TIM_ConfigClockSource+0x20>
 8004920:	2302      	movs	r3, #2
 8004922:	e0bc      	b.n	8004a9e <HAL_TIM_ConfigClockSource+0x19a>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	223c      	movs	r2, #60	; 0x3c
 8004928:	2101      	movs	r1, #1
 800492a:	5499      	strb	r1, [r3, r2]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	223d      	movs	r2, #61	; 0x3d
 8004930:	2102      	movs	r1, #2
 8004932:	5499      	strb	r1, [r3, r2]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	60bb      	str	r3, [r7, #8]
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a5a      	ldr	r2, [pc, #360]	; (8004aa8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004940:	4013      	ands	r3, r2
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a59      	ldr	r2, [pc, #356]	; (8004aac <HAL_TIM_ConfigClockSource+0x1a8>)
 8004948:	4013      	ands	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2280      	movs	r2, #128	; 0x80
 800495a:	0192      	lsls	r2, r2, #6
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xde>
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	0192      	lsls	r2, r2, #6
 8004964:	4293      	cmp	r3, r2
 8004966:	d900      	bls.n	800496a <HAL_TIM_ConfigClockSource+0x66>
 8004968:	e088      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 800496a:	2280      	movs	r2, #128	; 0x80
 800496c:	0152      	lsls	r2, r2, #5
 800496e:	4293      	cmp	r3, r2
 8004970:	d100      	bne.n	8004974 <HAL_TIM_ConfigClockSource+0x70>
 8004972:	e088      	b.n	8004a86 <HAL_TIM_ConfigClockSource+0x182>
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	0152      	lsls	r2, r2, #5
 8004978:	4293      	cmp	r3, r2
 800497a:	d900      	bls.n	800497e <HAL_TIM_ConfigClockSource+0x7a>
 800497c:	e07e      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 800497e:	2b70      	cmp	r3, #112	; 0x70
 8004980:	d018      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0xb0>
 8004982:	d900      	bls.n	8004986 <HAL_TIM_ConfigClockSource+0x82>
 8004984:	e07a      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 8004986:	2b60      	cmp	r3, #96	; 0x60
 8004988:	d04f      	beq.n	8004a2a <HAL_TIM_ConfigClockSource+0x126>
 800498a:	d900      	bls.n	800498e <HAL_TIM_ConfigClockSource+0x8a>
 800498c:	e076      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 800498e:	2b50      	cmp	r3, #80	; 0x50
 8004990:	d03b      	beq.n	8004a0a <HAL_TIM_ConfigClockSource+0x106>
 8004992:	d900      	bls.n	8004996 <HAL_TIM_ConfigClockSource+0x92>
 8004994:	e072      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d057      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0x146>
 800499a:	d900      	bls.n	800499e <HAL_TIM_ConfigClockSource+0x9a>
 800499c:	e06e      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 800499e:	2b30      	cmp	r3, #48	; 0x30
 80049a0:	d063      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x166>
 80049a2:	d86b      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 80049a4:	2b20      	cmp	r3, #32
 80049a6:	d060      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x166>
 80049a8:	d868      	bhi.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d05d      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x166>
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d05b      	beq.n	8004a6a <HAL_TIM_ConfigClockSource+0x166>
 80049b2:	e063      	b.n	8004a7c <HAL_TIM_ConfigClockSource+0x178>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6899      	ldr	r1, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f000 fcf4 	bl	80053b0 <TIM_ETR_SetConfig>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2277      	movs	r2, #119	; 0x77
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60bb      	str	r3, [r7, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	e052      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6899      	ldr	r1, [r3, #8]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f000 fcdd 	bl	80053b0 <TIM_ETR_SetConfig>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2180      	movs	r1, #128	; 0x80
 8004a02:	01c9      	lsls	r1, r1, #7
 8004a04:	430a      	orrs	r2, r1
 8004a06:	609a      	str	r2, [r3, #8]
 8004a08:	e03e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6859      	ldr	r1, [r3, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	001a      	movs	r2, r3
 8004a18:	f000 fc4e 	bl	80052b8 <TIM_TI1_ConfigInputStage>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2150      	movs	r1, #80	; 0x50
 8004a22:	0018      	movs	r0, r3
 8004a24:	f000 fca8 	bl	8005378 <TIM_ITRx_SetConfig>
 8004a28:	e02e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6818      	ldr	r0, [r3, #0]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	6859      	ldr	r1, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	001a      	movs	r2, r3
 8004a38:	f000 fc6c 	bl	8005314 <TIM_TI2_ConfigInputStage>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2160      	movs	r1, #96	; 0x60
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fc98 	bl	8005378 <TIM_ITRx_SetConfig>
 8004a48:	e01e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	001a      	movs	r2, r3
 8004a58:	f000 fc2e 	bl	80052b8 <TIM_TI1_ConfigInputStage>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	0018      	movs	r0, r3
 8004a64:	f000 fc88 	bl	8005378 <TIM_ITRx_SetConfig>
 8004a68:	e00e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	0019      	movs	r1, r3
 8004a74:	0010      	movs	r0, r2
 8004a76:	f000 fc7f 	bl	8005378 <TIM_ITRx_SetConfig>
 8004a7a:	e005      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a7c:	230f      	movs	r3, #15
 8004a7e:	18fb      	adds	r3, r7, r3
 8004a80:	2201      	movs	r2, #1
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	e000      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x184>
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	223d      	movs	r2, #61	; 0x3d
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	5499      	strb	r1, [r3, r2]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	223c      	movs	r2, #60	; 0x3c
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]
 8004a98:	230f      	movs	r3, #15
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	ffceff88 	.word	0xffceff88
 8004aac:	ffff00ff 	.word	0xffff00ff

08004ab0 <HAL_TIM_SlaveConfigSynchro>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	223c      	movs	r2, #60	; 0x3c
 8004abe:	5c9b      	ldrb	r3, [r3, r2]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e032      	b.n	8004b2e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	223c      	movs	r2, #60	; 0x3c
 8004acc:	2101      	movs	r1, #1
 8004ace:	5499      	strb	r1, [r3, r2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	223d      	movs	r2, #61	; 0x3d
 8004ad4:	2102      	movs	r1, #2
 8004ad6:	5499      	strb	r1, [r3, r2]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0011      	movs	r1, r2
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 fb54 	bl	800518c <TIM_SlaveTimer_SetConfig>
 8004ae4:	1e03      	subs	r3, r0, #0
 8004ae6:	d009      	beq.n	8004afc <HAL_TIM_SlaveConfigSynchro+0x4c>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	223d      	movs	r2, #61	; 0x3d
 8004aec:	2101      	movs	r1, #1
 8004aee:	5499      	strb	r1, [r3, r2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	223c      	movs	r2, #60	; 0x3c
 8004af4:	2100      	movs	r1, #0
 8004af6:	5499      	strb	r1, [r3, r2]
 8004af8:	2301      	movs	r3, #1
 8004afa:	e018      	b.n	8004b2e <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2140      	movs	r1, #64	; 0x40
 8004b08:	438a      	bics	r2, r1
 8004b0a:	60da      	str	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4908      	ldr	r1, [pc, #32]	; (8004b38 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004b18:	400a      	ands	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	223d      	movs	r2, #61	; 0x3d
 8004b20:	2101      	movs	r1, #1
 8004b22:	5499      	strb	r1, [r3, r2]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	223c      	movs	r2, #60	; 0x3c
 8004b28:	2100      	movs	r1, #0
 8004b2a:	5499      	strb	r1, [r3, r2]
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	0018      	movs	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b002      	add	sp, #8
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	ffffbfff 	.word	0xffffbfff

08004b3c <HAL_TIM_OC_DelayElapsedCallback>:
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_TIM_IC_CaptureCallback>:
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	46c0      	nop			; (mov r8, r8)
 8004b56:	46bd      	mov	sp, r7
 8004b58:	b002      	add	sp, #8
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_TIM_PWM_PulseFinishedCallback>:
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	46c0      	nop			; (mov r8, r8)
 8004b66:	46bd      	mov	sp, r7
 8004b68:	b002      	add	sp, #8
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_TIM_TriggerCallback>:
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	46c0      	nop			; (mov r8, r8)
 8004b76:	46bd      	mov	sp, r7
 8004b78:	b002      	add	sp, #8
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <TIM_Base_SetConfig>:
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a2b      	ldr	r2, [pc, #172]	; (8004c3c <TIM_Base_SetConfig+0xc0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d003      	beq.n	8004b9c <TIM_Base_SetConfig+0x20>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a2a      	ldr	r2, [pc, #168]	; (8004c40 <TIM_Base_SetConfig+0xc4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d108      	bne.n	8004bae <TIM_Base_SetConfig+0x32>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2270      	movs	r2, #112	; 0x70
 8004ba0:	4393      	bics	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <TIM_Base_SetConfig+0xc0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00f      	beq.n	8004bd6 <TIM_Base_SetConfig+0x5a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <TIM_Base_SetConfig+0xc4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00b      	beq.n	8004bd6 <TIM_Base_SetConfig+0x5a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a20      	ldr	r2, [pc, #128]	; (8004c44 <TIM_Base_SetConfig+0xc8>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d007      	beq.n	8004bd6 <TIM_Base_SetConfig+0x5a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1f      	ldr	r2, [pc, #124]	; (8004c48 <TIM_Base_SetConfig+0xcc>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d003      	beq.n	8004bd6 <TIM_Base_SetConfig+0x5a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <TIM_Base_SetConfig+0xd0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d108      	bne.n	8004be8 <TIM_Base_SetConfig+0x6c>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	; (8004c50 <TIM_Base_SetConfig+0xd4>)
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	68fa      	ldr	r2, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2280      	movs	r2, #128	; 0x80
 8004bec:	4393      	bics	r3, r2
 8004bee:	001a      	movs	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	689a      	ldr	r2, [r3, #8]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <TIM_Base_SetConfig+0xc0>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0xaa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <TIM_Base_SetConfig+0xcc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0xaa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <TIM_Base_SetConfig+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d103      	bne.n	8004c2e <TIM_Base_SetConfig+0xb2>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	615a      	str	r2, [r3, #20]
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b004      	add	sp, #16
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40002000 	.word	0x40002000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800
 8004c50:	fffffcff 	.word	0xfffffcff

08004c54 <TIM_OC1_SetConfig>:
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	4393      	bics	r3, r2
 8004c6c:	001a      	movs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	621a      	str	r2, [r3, #32]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4a2e      	ldr	r2, [pc, #184]	; (8004d3c <TIM_OC1_SetConfig+0xe8>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2203      	movs	r2, #3
 8004c8a:	4393      	bics	r3, r2
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	4393      	bics	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <TIM_OC1_SetConfig+0xec>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d007      	beq.n	8004cc2 <TIM_OC1_SetConfig+0x6e>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <TIM_OC1_SetConfig+0xf0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d003      	beq.n	8004cc2 <TIM_OC1_SetConfig+0x6e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <TIM_OC1_SetConfig+0xf4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10c      	bne.n	8004cdc <TIM_OC1_SetConfig+0x88>
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	4393      	bics	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <TIM_OC1_SetConfig+0xec>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d007      	beq.n	8004cf4 <TIM_OC1_SetConfig+0xa0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <TIM_OC1_SetConfig+0xf0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_OC1_SetConfig+0xa0>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a16      	ldr	r2, [pc, #88]	; (8004d48 <TIM_OC1_SetConfig+0xf4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <TIM_OC1_SetConfig+0xc4>
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4a15      	ldr	r2, [pc, #84]	; (8004d4c <TIM_OC1_SetConfig+0xf8>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <TIM_OC1_SetConfig+0xfc>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	619a      	str	r2, [r3, #24]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	635a      	str	r2, [r3, #52]	; 0x34
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
 8004d32:	46c0      	nop			; (mov r8, r8)
 8004d34:	46bd      	mov	sp, r7
 8004d36:	b006      	add	sp, #24
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	fffeff8f 	.word	0xfffeff8f
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800
 8004d4c:	fffffeff 	.word	0xfffffeff
 8004d50:	fffffdff 	.word	0xfffffdff

08004d54 <TIM_OC2_SetConfig>:
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	621a      	str	r2, [r3, #32]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <TIM_OC2_SetConfig+0xe0>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	4a2b      	ldr	r2, [pc, #172]	; (8004e38 <TIM_OC2_SetConfig+0xe4>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	4393      	bics	r3, r2
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a22      	ldr	r2, [pc, #136]	; (8004e3c <TIM_OC2_SetConfig+0xe8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10d      	bne.n	8004dd2 <TIM_OC2_SetConfig+0x7e>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2280      	movs	r2, #128	; 0x80
 8004dba:	4393      	bics	r3, r2
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2240      	movs	r2, #64	; 0x40
 8004dce:	4393      	bics	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a19      	ldr	r2, [pc, #100]	; (8004e3c <TIM_OC2_SetConfig+0xe8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d007      	beq.n	8004dea <TIM_OC2_SetConfig+0x96>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a18      	ldr	r2, [pc, #96]	; (8004e40 <TIM_OC2_SetConfig+0xec>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d003      	beq.n	8004dea <TIM_OC2_SetConfig+0x96>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a17      	ldr	r2, [pc, #92]	; (8004e44 <TIM_OC2_SetConfig+0xf0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d113      	bne.n	8004e12 <TIM_OC2_SetConfig+0xbe>
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4a16      	ldr	r2, [pc, #88]	; (8004e48 <TIM_OC2_SetConfig+0xf4>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4a15      	ldr	r2, [pc, #84]	; (8004e4c <TIM_OC2_SetConfig+0xf8>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	605a      	str	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	619a      	str	r2, [r3, #24]
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	621a      	str	r2, [r3, #32]
 8004e2c:	46c0      	nop			; (mov r8, r8)
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b006      	add	sp, #24
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	feff8fff 	.word	0xfeff8fff
 8004e38:	fffffcff 	.word	0xfffffcff
 8004e3c:	40012c00 	.word	0x40012c00
 8004e40:	40014400 	.word	0x40014400
 8004e44:	40014800 	.word	0x40014800
 8004e48:	fffffbff 	.word	0xfffffbff
 8004e4c:	fffff7ff 	.word	0xfffff7ff

08004e50 <TIM_OC3_SetConfig>:
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	4a31      	ldr	r2, [pc, #196]	; (8004f2c <TIM_OC3_SetConfig+0xdc>)
 8004e66:	401a      	ands	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4a2d      	ldr	r2, [pc, #180]	; (8004f30 <TIM_OC3_SetConfig+0xe0>)
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2203      	movs	r2, #3
 8004e84:	4393      	bics	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <TIM_OC3_SetConfig+0xe4>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <TIM_OC3_SetConfig+0xe8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10d      	bne.n	8004eca <TIM_OC3_SetConfig+0x7a>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4a22      	ldr	r2, [pc, #136]	; (8004f3c <TIM_OC3_SetConfig+0xec>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <TIM_OC3_SetConfig+0xf0>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <TIM_OC3_SetConfig+0xe8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <TIM_OC3_SetConfig+0x92>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <TIM_OC3_SetConfig+0xf4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d003      	beq.n	8004ee2 <TIM_OC3_SetConfig+0x92>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1a      	ldr	r2, [pc, #104]	; (8004f48 <TIM_OC3_SetConfig+0xf8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d113      	bne.n	8004f0a <TIM_OC3_SetConfig+0xba>
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <TIM_OC3_SetConfig+0xfc>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <TIM_OC3_SetConfig+0x100>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	605a      	str	r2, [r3, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	61da      	str	r2, [r3, #28]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	621a      	str	r2, [r3, #32]
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b006      	add	sp, #24
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	fffffeff 	.word	0xfffffeff
 8004f30:	fffeff8f 	.word	0xfffeff8f
 8004f34:	fffffdff 	.word	0xfffffdff
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	fffff7ff 	.word	0xfffff7ff
 8004f40:	fffffbff 	.word	0xfffffbff
 8004f44:	40014400 	.word	0x40014400
 8004f48:	40014800 	.word	0x40014800
 8004f4c:	ffffefff 	.word	0xffffefff
 8004f50:	ffffdfff 	.word	0xffffdfff

08004f54 <TIM_OC4_SetConfig>:
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	4a24      	ldr	r2, [pc, #144]	; (8004ffc <TIM_OC4_SetConfig+0xa8>)
 8004f6a:	401a      	ands	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	621a      	str	r2, [r3, #32]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a20      	ldr	r2, [pc, #128]	; (8005000 <TIM_OC4_SetConfig+0xac>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <TIM_OC4_SetConfig+0xb0>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <TIM_OC4_SetConfig+0xb4>)
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	031b      	lsls	r3, r3, #12
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a17      	ldr	r2, [pc, #92]	; (800500c <TIM_OC4_SetConfig+0xb8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d007      	beq.n	8004fc4 <TIM_OC4_SetConfig+0x70>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a16      	ldr	r2, [pc, #88]	; (8005010 <TIM_OC4_SetConfig+0xbc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d003      	beq.n	8004fc4 <TIM_OC4_SetConfig+0x70>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a15      	ldr	r2, [pc, #84]	; (8005014 <TIM_OC4_SetConfig+0xc0>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d109      	bne.n	8004fd8 <TIM_OC4_SetConfig+0x84>
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	4a14      	ldr	r2, [pc, #80]	; (8005018 <TIM_OC4_SetConfig+0xc4>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	019b      	lsls	r3, r3, #6
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	61da      	str	r2, [r3, #28]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	621a      	str	r2, [r3, #32]
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	b006      	add	sp, #24
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	ffffefff 	.word	0xffffefff
 8005000:	feff8fff 	.word	0xfeff8fff
 8005004:	fffffcff 	.word	0xfffffcff
 8005008:	ffffdfff 	.word	0xffffdfff
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40014400 	.word	0x40014400
 8005014:	40014800 	.word	0x40014800
 8005018:	ffffbfff 	.word	0xffffbfff

0800501c <TIM_OC5_SetConfig>:
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <TIM_OC5_SetConfig+0x9c>)
 8005032:	401a      	ands	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	621a      	str	r2, [r3, #32]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <TIM_OC5_SetConfig+0xa0>)
 8005048:	4013      	ands	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <TIM_OC5_SetConfig+0xa4>)
 800505a:	4013      	ands	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <TIM_OC5_SetConfig+0xa8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d007      	beq.n	8005082 <TIM_OC5_SetConfig+0x66>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <TIM_OC5_SetConfig+0xac>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d003      	beq.n	8005082 <TIM_OC5_SetConfig+0x66>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a13      	ldr	r2, [pc, #76]	; (80050cc <TIM_OC5_SetConfig+0xb0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d109      	bne.n	8005096 <TIM_OC5_SetConfig+0x7a>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <TIM_OC5_SetConfig+0x9c>)
 8005086:	4013      	ands	r3, r2
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	605a      	str	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	655a      	str	r2, [r3, #84]	; 0x54
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	659a      	str	r2, [r3, #88]	; 0x58
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	46c0      	nop			; (mov r8, r8)
 80050b2:	46bd      	mov	sp, r7
 80050b4:	b006      	add	sp, #24
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	fffeffff 	.word	0xfffeffff
 80050bc:	fffeff8f 	.word	0xfffeff8f
 80050c0:	fffdffff 	.word	0xfffdffff
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC6_SetConfig>:
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <TIM_OC6_SetConfig+0xa0>)
 80050e6:	401a      	ands	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	621a      	str	r2, [r3, #32]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <TIM_OC6_SetConfig+0xa4>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4313      	orrs	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <TIM_OC6_SetConfig+0xa8>)
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a16      	ldr	r2, [pc, #88]	; (800517c <TIM_OC6_SetConfig+0xac>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_OC6_SetConfig+0x68>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a15      	ldr	r2, [pc, #84]	; (8005180 <TIM_OC6_SetConfig+0xb0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_OC6_SetConfig+0x68>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a14      	ldr	r2, [pc, #80]	; (8005184 <TIM_OC6_SetConfig+0xb4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d109      	bne.n	800514c <TIM_OC6_SetConfig+0x7c>
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	4a13      	ldr	r2, [pc, #76]	; (8005188 <TIM_OC6_SetConfig+0xb8>)
 800513c:	4013      	ands	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	695b      	ldr	r3, [r3, #20]
 8005144:	029b      	lsls	r3, r3, #10
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	621a      	str	r2, [r3, #32]
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	46bd      	mov	sp, r7
 800516a:	b006      	add	sp, #24
 800516c:	bd80      	pop	{r7, pc}
 800516e:	46c0      	nop			; (mov r8, r8)
 8005170:	ffefffff 	.word	0xffefffff
 8005174:	feff8fff 	.word	0xfeff8fff
 8005178:	ffdfffff 	.word	0xffdfffff
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	fffbffff 	.word	0xfffbffff

0800518c <TIM_SlaveTimer_SetConfig>:
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	2317      	movs	r3, #23
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4a41      	ldr	r2, [pc, #260]	; (80052b0 <TIM_SlaveTimer_SetConfig+0x124>)
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <TIM_SlaveTimer_SetConfig+0x128>)
 80051bc:	4013      	ands	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	609a      	str	r2, [r3, #8]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b70      	cmp	r3, #112	; 0x70
 80051d8:	d015      	beq.n	8005206 <TIM_SlaveTimer_SetConfig+0x7a>
 80051da:	d900      	bls.n	80051de <TIM_SlaveTimer_SetConfig+0x52>
 80051dc:	e05b      	b.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051de:	2b60      	cmp	r3, #96	; 0x60
 80051e0:	d04f      	beq.n	8005282 <TIM_SlaveTimer_SetConfig+0xf6>
 80051e2:	d858      	bhi.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051e4:	2b50      	cmp	r3, #80	; 0x50
 80051e6:	d042      	beq.n	800526e <TIM_SlaveTimer_SetConfig+0xe2>
 80051e8:	d855      	bhi.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d016      	beq.n	800521c <TIM_SlaveTimer_SetConfig+0x90>
 80051ee:	d852      	bhi.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d055      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0x114>
 80051f4:	d84f      	bhi.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d052      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0x114>
 80051fa:	d84c      	bhi.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d04f      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0x114>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d04d      	beq.n	80052a0 <TIM_SlaveTimer_SetConfig+0x114>
 8005204:	e047      	b.n	8005296 <TIM_SlaveTimer_SetConfig+0x10a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68d9      	ldr	r1, [r3, #12]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f000 f8cb 	bl	80053b0 <TIM_ETR_SetConfig>
 800521a:	e042      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x116>
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b05      	cmp	r3, #5
 8005222:	d101      	bne.n	8005228 <TIM_SlaveTimer_SetConfig+0x9c>
 8005224:	2301      	movs	r3, #1
 8005226:	e03f      	b.n	80052a8 <TIM_SlaveTimer_SetConfig+0x11c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	438a      	bics	r2, r1
 800523e:	621a      	str	r2, [r3, #32]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	60bb      	str	r3, [r7, #8]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	22f0      	movs	r2, #240	; 0xf0
 800524c:	4393      	bics	r3, r2
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	619a      	str	r2, [r3, #24]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	621a      	str	r2, [r3, #32]
 800526c:	e019      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x116>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	6899      	ldr	r1, [r3, #8]
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	001a      	movs	r2, r3
 800527c:	f000 f81c 	bl	80052b8 <TIM_TI1_ConfigInputStage>
 8005280:	e00f      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x116>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	001a      	movs	r2, r3
 8005290:	f000 f840 	bl	8005314 <TIM_TI2_ConfigInputStage>
 8005294:	e005      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x116>
 8005296:	2317      	movs	r3, #23
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2201      	movs	r2, #1
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	e000      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x116>
 80052a0:	46c0      	nop			; (mov r8, r8)
 80052a2:	2317      	movs	r3, #23
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	0018      	movs	r0, r3
 80052aa:	46bd      	mov	sp, r7
 80052ac:	b006      	add	sp, #24
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	ffcfff8f 	.word	0xffcfff8f
 80052b4:	fffefff8 	.word	0xfffefff8

080052b8 <TIM_TI1_ConfigInputStage>:
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	2201      	movs	r2, #1
 80052d0:	4393      	bics	r3, r2
 80052d2:	001a      	movs	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	621a      	str	r2, [r3, #32]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	22f0      	movs	r2, #240	; 0xf0
 80052e2:	4393      	bics	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	220a      	movs	r2, #10
 80052f4:	4393      	bics	r3, r2
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	619a      	str	r2, [r3, #24]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	621a      	str	r2, [r3, #32]
 800530c:	46c0      	nop			; (mov r8, r8)
 800530e:	46bd      	mov	sp, r7
 8005310:	b006      	add	sp, #24
 8005312:	bd80      	pop	{r7, pc}

08005314 <TIM_TI2_ConfigInputStage>:
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	617b      	str	r3, [r7, #20]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2210      	movs	r2, #16
 800532c:	4393      	bics	r3, r2
 800532e:	001a      	movs	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	4a0d      	ldr	r2, [pc, #52]	; (8005374 <TIM_TI2_ConfigInputStage+0x60>)
 800533e:	4013      	ands	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	22a0      	movs	r2, #160	; 0xa0
 8005350:	4393      	bics	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	46bd      	mov	sp, r7
 800536e:	b006      	add	sp, #24
 8005370:	bd80      	pop	{r7, pc}
 8005372:	46c0      	nop			; (mov r8, r8)
 8005374:	ffff0fff 	.word	0xffff0fff

08005378 <TIM_ITRx_SetConfig>:
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <TIM_ITRx_SetConfig+0x34>)
 800538c:	4013      	ands	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	2207      	movs	r2, #7
 8005398:	4313      	orrs	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	609a      	str	r2, [r3, #8]
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b004      	add	sp, #16
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	ffcfff8f 	.word	0xffcfff8f

080053b0 <TIM_ETR_SetConfig>:
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <TIM_ETR_SetConfig+0x3c>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
 80053e4:	46c0      	nop			; (mov r8, r8)
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b006      	add	sp, #24
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	ffff00ff 	.word	0xffff00ff

080053f0 <HAL_TIMEx_MasterConfigSynchronization>:
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	223c      	movs	r2, #60	; 0x3c
 80053fe:	5c9b      	ldrb	r3, [r3, r2]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005404:	2302      	movs	r3, #2
 8005406:	e04a      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	223c      	movs	r2, #60	; 0x3c
 800540c:	2101      	movs	r1, #1
 800540e:	5499      	strb	r1, [r3, r2]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	223d      	movs	r2, #61	; 0x3d
 8005414:	2102      	movs	r1, #2
 8005416:	5499      	strb	r1, [r3, r2]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d108      	bne.n	8005444 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005436:	4013      	ands	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4313      	orrs	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2270      	movs	r2, #112	; 0x70
 8005448:	4393      	bics	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2280      	movs	r2, #128	; 0x80
 8005476:	4393      	bics	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	223d      	movs	r2, #61	; 0x3d
 8005490:	2101      	movs	r1, #1
 8005492:	5499      	strb	r1, [r3, r2]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	223c      	movs	r2, #60	; 0x3c
 8005498:	2100      	movs	r1, #0
 800549a:	5499      	strb	r1, [r3, r2]
 800549c:	2300      	movs	r3, #0
 800549e:	0018      	movs	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	b004      	add	sp, #16
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	40012c00 	.word	0x40012c00
 80054ac:	ff0fffff 	.word	0xff0fffff
 80054b0:	40000400 	.word	0x40000400

080054b4 <HAL_TIMEx_CommutCallback>:
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	46c0      	nop			; (mov r8, r8)
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_TIMEx_BreakCallback>:
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	b002      	add	sp, #8
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <HAL_TIMEx_Break2Callback>:
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	46c0      	nop			; (mov r8, r8)
 80054de:	46bd      	mov	sp, r7
 80054e0:	b002      	add	sp, #8
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <malloc>:
 80054e4:	b510      	push	{r4, lr}
 80054e6:	4b03      	ldr	r3, [pc, #12]	; (80054f4 <malloc+0x10>)
 80054e8:	0001      	movs	r1, r0
 80054ea:	6818      	ldr	r0, [r3, #0]
 80054ec:	f000 f826 	bl	800553c <_malloc_r>
 80054f0:	bd10      	pop	{r4, pc}
 80054f2:	46c0      	nop			; (mov r8, r8)
 80054f4:	20000064 	.word	0x20000064

080054f8 <sbrk_aligned>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4e0f      	ldr	r6, [pc, #60]	; (8005538 <sbrk_aligned+0x40>)
 80054fc:	000d      	movs	r5, r1
 80054fe:	6831      	ldr	r1, [r6, #0]
 8005500:	0004      	movs	r4, r0
 8005502:	2900      	cmp	r1, #0
 8005504:	d102      	bne.n	800550c <sbrk_aligned+0x14>
 8005506:	f000 f8b3 	bl	8005670 <_sbrk_r>
 800550a:	6030      	str	r0, [r6, #0]
 800550c:	0029      	movs	r1, r5
 800550e:	0020      	movs	r0, r4
 8005510:	f000 f8ae 	bl	8005670 <_sbrk_r>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d00a      	beq.n	800552e <sbrk_aligned+0x36>
 8005518:	2303      	movs	r3, #3
 800551a:	1cc5      	adds	r5, r0, #3
 800551c:	439d      	bics	r5, r3
 800551e:	42a8      	cmp	r0, r5
 8005520:	d007      	beq.n	8005532 <sbrk_aligned+0x3a>
 8005522:	1a29      	subs	r1, r5, r0
 8005524:	0020      	movs	r0, r4
 8005526:	f000 f8a3 	bl	8005670 <_sbrk_r>
 800552a:	3001      	adds	r0, #1
 800552c:	d101      	bne.n	8005532 <sbrk_aligned+0x3a>
 800552e:	2501      	movs	r5, #1
 8005530:	426d      	negs	r5, r5
 8005532:	0028      	movs	r0, r5
 8005534:	bd70      	pop	{r4, r5, r6, pc}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	2000086c 	.word	0x2000086c

0800553c <_malloc_r>:
 800553c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800553e:	2203      	movs	r2, #3
 8005540:	1ccb      	adds	r3, r1, #3
 8005542:	4393      	bics	r3, r2
 8005544:	3308      	adds	r3, #8
 8005546:	0006      	movs	r6, r0
 8005548:	001f      	movs	r7, r3
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d238      	bcs.n	80055c0 <_malloc_r+0x84>
 800554e:	270c      	movs	r7, #12
 8005550:	42b9      	cmp	r1, r7
 8005552:	d837      	bhi.n	80055c4 <_malloc_r+0x88>
 8005554:	0030      	movs	r0, r6
 8005556:	f000 f873 	bl	8005640 <__malloc_lock>
 800555a:	4b38      	ldr	r3, [pc, #224]	; (800563c <_malloc_r+0x100>)
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	001c      	movs	r4, r3
 8005562:	2c00      	cmp	r4, #0
 8005564:	d133      	bne.n	80055ce <_malloc_r+0x92>
 8005566:	0039      	movs	r1, r7
 8005568:	0030      	movs	r0, r6
 800556a:	f7ff ffc5 	bl	80054f8 <sbrk_aligned>
 800556e:	0004      	movs	r4, r0
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d15e      	bne.n	8005632 <_malloc_r+0xf6>
 8005574:	9b00      	ldr	r3, [sp, #0]
 8005576:	681c      	ldr	r4, [r3, #0]
 8005578:	0025      	movs	r5, r4
 800557a:	2d00      	cmp	r5, #0
 800557c:	d14e      	bne.n	800561c <_malloc_r+0xe0>
 800557e:	2c00      	cmp	r4, #0
 8005580:	d051      	beq.n	8005626 <_malloc_r+0xea>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	0029      	movs	r1, r5
 8005586:	18e3      	adds	r3, r4, r3
 8005588:	0030      	movs	r0, r6
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	f000 f870 	bl	8005670 <_sbrk_r>
 8005590:	9b01      	ldr	r3, [sp, #4]
 8005592:	4283      	cmp	r3, r0
 8005594:	d147      	bne.n	8005626 <_malloc_r+0xea>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	0030      	movs	r0, r6
 800559a:	1aff      	subs	r7, r7, r3
 800559c:	0039      	movs	r1, r7
 800559e:	f7ff ffab 	bl	80054f8 <sbrk_aligned>
 80055a2:	3001      	adds	r0, #1
 80055a4:	d03f      	beq.n	8005626 <_malloc_r+0xea>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	19db      	adds	r3, r3, r7
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	9b00      	ldr	r3, [sp, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d040      	beq.n	8005636 <_malloc_r+0xfa>
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	42a2      	cmp	r2, r4
 80055b8:	d133      	bne.n	8005622 <_malloc_r+0xe6>
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e014      	b.n	80055ea <_malloc_r+0xae>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dac5      	bge.n	8005550 <_malloc_r+0x14>
 80055c4:	230c      	movs	r3, #12
 80055c6:	2500      	movs	r5, #0
 80055c8:	6033      	str	r3, [r6, #0]
 80055ca:	0028      	movs	r0, r5
 80055cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055ce:	6821      	ldr	r1, [r4, #0]
 80055d0:	1bc9      	subs	r1, r1, r7
 80055d2:	d420      	bmi.n	8005616 <_malloc_r+0xda>
 80055d4:	290b      	cmp	r1, #11
 80055d6:	d918      	bls.n	800560a <_malloc_r+0xce>
 80055d8:	19e2      	adds	r2, r4, r7
 80055da:	6027      	str	r7, [r4, #0]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d112      	bne.n	8005606 <_malloc_r+0xca>
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	6863      	ldr	r3, [r4, #4]
 80055e6:	6011      	str	r1, [r2, #0]
 80055e8:	6053      	str	r3, [r2, #4]
 80055ea:	0030      	movs	r0, r6
 80055ec:	0025      	movs	r5, r4
 80055ee:	f000 f82f 	bl	8005650 <__malloc_unlock>
 80055f2:	2207      	movs	r2, #7
 80055f4:	350b      	adds	r5, #11
 80055f6:	1d23      	adds	r3, r4, #4
 80055f8:	4395      	bics	r5, r2
 80055fa:	1aea      	subs	r2, r5, r3
 80055fc:	429d      	cmp	r5, r3
 80055fe:	d0e4      	beq.n	80055ca <_malloc_r+0x8e>
 8005600:	1b5b      	subs	r3, r3, r5
 8005602:	50a3      	str	r3, [r4, r2]
 8005604:	e7e1      	b.n	80055ca <_malloc_r+0x8e>
 8005606:	605a      	str	r2, [r3, #4]
 8005608:	e7ec      	b.n	80055e4 <_malloc_r+0xa8>
 800560a:	6862      	ldr	r2, [r4, #4]
 800560c:	42a3      	cmp	r3, r4
 800560e:	d1d5      	bne.n	80055bc <_malloc_r+0x80>
 8005610:	9b00      	ldr	r3, [sp, #0]
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	e7e9      	b.n	80055ea <_malloc_r+0xae>
 8005616:	0023      	movs	r3, r4
 8005618:	6864      	ldr	r4, [r4, #4]
 800561a:	e7a2      	b.n	8005562 <_malloc_r+0x26>
 800561c:	002c      	movs	r4, r5
 800561e:	686d      	ldr	r5, [r5, #4]
 8005620:	e7ab      	b.n	800557a <_malloc_r+0x3e>
 8005622:	0013      	movs	r3, r2
 8005624:	e7c4      	b.n	80055b0 <_malloc_r+0x74>
 8005626:	230c      	movs	r3, #12
 8005628:	0030      	movs	r0, r6
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f000 f810 	bl	8005650 <__malloc_unlock>
 8005630:	e7cb      	b.n	80055ca <_malloc_r+0x8e>
 8005632:	6027      	str	r7, [r4, #0]
 8005634:	e7d9      	b.n	80055ea <_malloc_r+0xae>
 8005636:	605b      	str	r3, [r3, #4]
 8005638:	deff      	udf	#255	; 0xff
 800563a:	46c0      	nop			; (mov r8, r8)
 800563c:	20000868 	.word	0x20000868

08005640 <__malloc_lock>:
 8005640:	b510      	push	{r4, lr}
 8005642:	4802      	ldr	r0, [pc, #8]	; (800564c <__malloc_lock+0xc>)
 8005644:	f000 f850 	bl	80056e8 <__retarget_lock_acquire_recursive>
 8005648:	bd10      	pop	{r4, pc}
 800564a:	46c0      	nop			; (mov r8, r8)
 800564c:	200009ac 	.word	0x200009ac

08005650 <__malloc_unlock>:
 8005650:	b510      	push	{r4, lr}
 8005652:	4802      	ldr	r0, [pc, #8]	; (800565c <__malloc_unlock+0xc>)
 8005654:	f000 f849 	bl	80056ea <__retarget_lock_release_recursive>
 8005658:	bd10      	pop	{r4, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	200009ac 	.word	0x200009ac

08005660 <memset>:
 8005660:	0003      	movs	r3, r0
 8005662:	1882      	adds	r2, r0, r2
 8005664:	4293      	cmp	r3, r2
 8005666:	d100      	bne.n	800566a <memset+0xa>
 8005668:	4770      	bx	lr
 800566a:	7019      	strb	r1, [r3, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	e7f9      	b.n	8005664 <memset+0x4>

08005670 <_sbrk_r>:
 8005670:	2300      	movs	r3, #0
 8005672:	b570      	push	{r4, r5, r6, lr}
 8005674:	4d06      	ldr	r5, [pc, #24]	; (8005690 <_sbrk_r+0x20>)
 8005676:	0004      	movs	r4, r0
 8005678:	0008      	movs	r0, r1
 800567a:	602b      	str	r3, [r5, #0]
 800567c:	f7fd fc78 	bl	8002f70 <_sbrk>
 8005680:	1c43      	adds	r3, r0, #1
 8005682:	d103      	bne.n	800568c <_sbrk_r+0x1c>
 8005684:	682b      	ldr	r3, [r5, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d000      	beq.n	800568c <_sbrk_r+0x1c>
 800568a:	6023      	str	r3, [r4, #0]
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	200009a8 	.word	0x200009a8

08005694 <__errno>:
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <__errno+0x8>)
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	4770      	bx	lr
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	20000064 	.word	0x20000064

080056a0 <__libc_init_array>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2600      	movs	r6, #0
 80056a4:	4c0c      	ldr	r4, [pc, #48]	; (80056d8 <__libc_init_array+0x38>)
 80056a6:	4d0d      	ldr	r5, [pc, #52]	; (80056dc <__libc_init_array+0x3c>)
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	42a6      	cmp	r6, r4
 80056ae:	d109      	bne.n	80056c4 <__libc_init_array+0x24>
 80056b0:	2600      	movs	r6, #0
 80056b2:	f000 f825 	bl	8005700 <_init>
 80056b6:	4c0a      	ldr	r4, [pc, #40]	; (80056e0 <__libc_init_array+0x40>)
 80056b8:	4d0a      	ldr	r5, [pc, #40]	; (80056e4 <__libc_init_array+0x44>)
 80056ba:	1b64      	subs	r4, r4, r5
 80056bc:	10a4      	asrs	r4, r4, #2
 80056be:	42a6      	cmp	r6, r4
 80056c0:	d105      	bne.n	80056ce <__libc_init_array+0x2e>
 80056c2:	bd70      	pop	{r4, r5, r6, pc}
 80056c4:	00b3      	lsls	r3, r6, #2
 80056c6:	58eb      	ldr	r3, [r5, r3]
 80056c8:	4798      	blx	r3
 80056ca:	3601      	adds	r6, #1
 80056cc:	e7ee      	b.n	80056ac <__libc_init_array+0xc>
 80056ce:	00b3      	lsls	r3, r6, #2
 80056d0:	58eb      	ldr	r3, [r5, r3]
 80056d2:	4798      	blx	r3
 80056d4:	3601      	adds	r6, #1
 80056d6:	e7f2      	b.n	80056be <__libc_init_array+0x1e>
 80056d8:	0800581c 	.word	0x0800581c
 80056dc:	0800581c 	.word	0x0800581c
 80056e0:	08005820 	.word	0x08005820
 80056e4:	0800581c 	.word	0x0800581c

080056e8 <__retarget_lock_acquire_recursive>:
 80056e8:	4770      	bx	lr

080056ea <__retarget_lock_release_recursive>:
 80056ea:	4770      	bx	lr

080056ec <memcpy>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b510      	push	{r4, lr}
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d100      	bne.n	80056f6 <memcpy+0xa>
 80056f4:	bd10      	pop	{r4, pc}
 80056f6:	5ccc      	ldrb	r4, [r1, r3]
 80056f8:	54c4      	strb	r4, [r0, r3]
 80056fa:	3301      	adds	r3, #1
 80056fc:	e7f8      	b.n	80056f0 <memcpy+0x4>
	...

08005700 <_init>:
 8005700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005706:	bc08      	pop	{r3}
 8005708:	469e      	mov	lr, r3
 800570a:	4770      	bx	lr

0800570c <_fini>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr
