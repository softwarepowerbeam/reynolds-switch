
reynolds_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800667c  0800667c  0001667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006840  08006840  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006840  08006840  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006840  08006840  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006840  08006840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006848  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a00  20000068  080068b0  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  080068b0  00020a68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001074d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a95  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4b  00000000  00000000  00034190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001412c  00000000  00000000  00034cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012683  00000000  00000000  00048e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007cbad  00000000  00000000  0005b48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000037d4  00000000  00000000  000d8038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000db80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006664 	.word	0x08006664

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006664 	.word	0x08006664

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <nutone_app_config>:
							deadline_timer_t *timer_fsm_fan,
							deadline_timer_t *timer_fsm_white,
							deadline_timer_t *timer_fsm_vyv,
							deadline_timer_t *timer_fsm_vyv_timeout,
							deadline_timer_t *timer_fsm_vyv_safe)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	603b      	str	r3, [r7, #0]
	nutone_app_hand->motion_hand = motion_hand;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	687a      	ldr	r2, [r7, #4]
 8000232:	605a      	str	r2, [r3, #4]
	nutone_app_hand->nutone_dev = nutone_dev;
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	68ba      	ldr	r2, [r7, #8]
 8000238:	601a      	str	r2, [r3, #0]
	nutone_app_hand->button_white = button_white;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	69ba      	ldr	r2, [r7, #24]
 800023e:	60da      	str	r2, [r3, #12]
	nutone_app_hand->button_fan = button_fan;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	683a      	ldr	r2, [r7, #0]
 8000244:	609a      	str	r2, [r3, #8]
	nutone_app_hand->button_vyv = button_vyv;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	69fa      	ldr	r2, [r7, #28]
 800024a:	611a      	str	r2, [r3, #16]
	nutone_app_hand->led_signal_hand = led_signal_hand;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	6a3a      	ldr	r2, [r7, #32]
 8000250:	61da      	str	r2, [r3, #28]
	led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	69db      	ldr	r3, [r3, #28]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fd60 	bl	8000d1e <led_signal_start>
	nutone_app_hand->timer_fsm_white = timer_fsm_white;
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000262:	621a      	str	r2, [r3, #32]
	nutone_app_hand->timer_fsm_vyv = timer_fsm_vyv;
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000268:	625a      	str	r2, [r3, #36]	; 0x24
	nutone_app_hand->timer_fsm_vyv_safe = timer_fsm_vyv_safe;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800026e:	62da      	str	r2, [r3, #44]	; 0x2c
	nutone_app_hand->timer_fsm_vyv_timeout = timer_fsm_vyv_timeout;
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000274:	629a      	str	r2, [r3, #40]	; 0x28
	nutone_app_hand->timer_fsm_fan = timer_fsm_fan;
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800027a:	631a      	str	r2, [r3, #48]	; 0x30


	nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2236      	movs	r2, #54	; 0x36
 8000280:	2101      	movs	r1, #1
 8000282:	5499      	strb	r1, [r3, r2]
	nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	2237      	movs	r2, #55	; 0x37
 8000288:	2101      	movs	r1, #1
 800028a:	5499      	strb	r1, [r3, r2]
	nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	2235      	movs	r2, #53	; 0x35
 8000290:	2100      	movs	r1, #0
 8000292:	5499      	strb	r1, [r3, r2]
	nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2234      	movs	r2, #52	; 0x34
 8000298:	2100      	movs	r1, #0
 800029a:	5499      	strb	r1, [r3, r2]
	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	0018      	movs	r0, r3
 80002a0:	46bd      	mov	sp, r7
 80002a2:	b004      	add	sp, #16
 80002a4:	bd80      	pop	{r7, pc}

080002a6 <nutone_app_process>:

uint8_t nutone_app_process(nutone_app_t *nutone_app_hand)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b082      	sub	sp, #8
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]

	nutone_app_check_events(nutone_app_hand);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	0018      	movs	r0, r3
 80002b2:	f000 fa75 	bl	80007a0 <nutone_app_check_events>

	nutone_app_fsm(nutone_app_hand);
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 f809 	bl	80002d0 <nutone_app_fsm>

	nutone_app_set_outputs(nutone_app_hand);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 faf8 	bl	80008b6 <nutone_app_set_outputs>

	return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	0018      	movs	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b002      	add	sp, #8
 80002ce:	bd80      	pop	{r7, pc}

080002d0 <nutone_app_fsm>:



uint8_t nutone_app_fsm(nutone_app_t *nutone_app_hand)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
//	led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
//	nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_BLINK;

//	relay_ask_on_pulse_fsm(nutone_app_hand->nutone_dev->lights->relay);

	nutone_fan_fsm(nutone_app_hand);
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	0018      	movs	r0, r3
 80002dc:	f000 f812 	bl	8000304 <nutone_fan_fsm>

	nutone_white_fsm(nutone_app_hand);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	0018      	movs	r0, r3
 80002e4:	f000 f836 	bl	8000354 <nutone_white_fsm>

	nutone_vyv_fsm(nutone_app_hand);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 f902 	bl	80004f4 <nutone_vyv_fsm>

	nutone_fsm(nutone_app_hand->nutone_dev);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	0018      	movs	r0, r3
 80002f6:	f001 fe5b 	bl	8001fb0 <nutone_fsm>


	return 0;
 80002fa:	2300      	movs	r3, #0

}
 80002fc:	0018      	movs	r0, r3
 80002fe:	46bd      	mov	sp, r7
 8000300:	b002      	add	sp, #8
 8000302:	bd80      	pop	{r7, pc}

08000304 <nutone_fan_fsm>:


uint8_t nutone_fan_fsm(nutone_app_t *nutone_app_hand)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
	if(nutone_app_hand->button_fan->button->edge_attended ==
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	78db      	ldrb	r3, [r3, #3]
 8000314:	2b02      	cmp	r3, #2
 8000316:	d117      	bne.n	8000348 <nutone_fan_fsm+0x44>
														BUTTON_ISR_UNATTENDED)
	{
		if(nutone_app_hand->button_fan->button->edge == BUTTON_EDGE_POSITIVE)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	785b      	ldrb	r3, [r3, #1]
 8000320:	2b02      	cmp	r3, #2
 8000322:	d106      	bne.n	8000332 <nutone_fan_fsm+0x2e>
		{
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2101      	movs	r1, #1
 800032a:	0018      	movs	r0, r3
 800032c:	f002 f864 	bl	80023f8 <nutone_set_command>
 8000330:	e005      	b.n	800033e <nutone_fan_fsm+0x3a>
														NUTONE_CMD_FAN_TURN_ON);
		}
		else
		{
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	2102      	movs	r1, #2
 8000338:	0018      	movs	r0, r3
 800033a:	f002 f85d 	bl	80023f8 <nutone_set_command>
													NUTONE_CMD_FAN_TURN_OFF);
		}
		nutone_app_hand->button_fan->button->edge_attended = BUTTON_ISR_ATTENDED;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2200      	movs	r2, #0
 8000346:	70da      	strb	r2, [r3, #3]
	}
	return 0;
 8000348:	2300      	movs	r3, #0
}
 800034a:	0018      	movs	r0, r3
 800034c:	46bd      	mov	sp, r7
 800034e:	b002      	add	sp, #8
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <nutone_white_fsm>:

uint8_t nutone_white_fsm(nutone_app_t *nutone_app_hand)
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af04      	add	r7, sp, #16
 800035a:	6078      	str	r0, [r7, #4]

	button_isr_status_t button_isr_status;
	button_edge_t edge;

	button_check_isr_request(*nutone_app_hand->button_white->button,
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	220e      	movs	r2, #14
 8000364:	18ba      	adds	r2, r7, r2
 8000366:	9203      	str	r2, [sp, #12]
 8000368:	250f      	movs	r5, #15
 800036a:	197a      	adds	r2, r7, r5
 800036c:	9202      	str	r2, [sp, #8]
 800036e:	466a      	mov	r2, sp
 8000370:	0011      	movs	r1, r2
 8000372:	001a      	movs	r2, r3
 8000374:	3210      	adds	r2, #16
 8000376:	ca11      	ldmia	r2!, {r0, r4}
 8000378:	c111      	stmia	r1!, {r0, r4}
 800037a:	6818      	ldr	r0, [r3, #0]
 800037c:	6859      	ldr	r1, [r3, #4]
 800037e:	689a      	ldr	r2, [r3, #8]
 8000380:	68db      	ldr	r3, [r3, #12]
 8000382:	f000 fb9b 	bl	8000abc <button_check_isr_request>
													&button_isr_status, &edge);


	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8000386:	197b      	adds	r3, r7, r5
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b02      	cmp	r3, #2
 800038c:	d004      	beq.n	8000398 <nutone_white_fsm+0x44>
			(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED))
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2234      	movs	r2, #52	; 0x34
 8000392:	5c9b      	ldrb	r3, [r3, r2]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8000394:	2b02      	cmp	r3, #2
 8000396:	d12e      	bne.n	80003f6 <nutone_white_fsm+0xa2>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8000398:	220f      	movs	r2, #15
 800039a:	18bb      	adds	r3, r7, r2
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d110      	bne.n	80003c4 <nutone_white_fsm+0x70>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80003a2:	18bb      	adds	r3, r7, r2
 80003a4:	2200      	movs	r2, #0
 80003a6:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 80003a8:	230e      	movs	r3, #14
 80003aa:	18fb      	adds	r3, r7, r3
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d104      	bne.n	80003bc <nutone_white_fsm+0x68>
			{
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2238      	movs	r2, #56	; 0x38
 80003b6:	2105      	movs	r1, #5
 80003b8:	5499      	strb	r1, [r3, r2]
 80003ba:	e003      	b.n	80003c4 <nutone_white_fsm+0x70>
			}
			else
			{
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	2238      	movs	r2, #56	; 0x38
 80003c0:	2101      	movs	r1, #1
 80003c2:	5499      	strb	r1, [r3, r2]
			}
		}

		nutone_app_hand->button_white->button->edge_attended = button_isr_status;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	220f      	movs	r2, #15
 80003cc:	18ba      	adds	r2, r7, r2
 80003ce:	7812      	ldrb	r2, [r2, #0]
 80003d0:	70da      	strb	r2, [r3, #3]

		if( (nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED) &&
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	2234      	movs	r2, #52	; 0x34
 80003d6:	5c9b      	ldrb	r3, [r3, r2]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d10c      	bne.n	80003f6 <nutone_white_fsm+0xa2>
			(nutone_app_hand->fsm_state_white == MOTION_LIGHT_IDLE))
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2238      	movs	r2, #56	; 0x38
 80003e0:	5c9b      	ldrb	r3, [r3, r2]
		if( (nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED) &&
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d107      	bne.n	80003f6 <nutone_white_fsm+0xa2>
		{
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_CHECK_BUTTON;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2238      	movs	r2, #56	; 0x38
 80003ea:	2101      	movs	r1, #1
 80003ec:	5499      	strb	r1, [r3, r2]
			nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2234      	movs	r2, #52	; 0x34
 80003f2:	2100      	movs	r1, #0
 80003f4:	5499      	strb	r1, [r3, r2]

	}



	switch(nutone_app_hand->fsm_state_white)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2238      	movs	r2, #56	; 0x38
 80003fa:	5c9b      	ldrb	r3, [r3, r2]
 80003fc:	2b05      	cmp	r3, #5
 80003fe:	d86c      	bhi.n	80004da <nutone_white_fsm+0x186>
 8000400:	009a      	lsls	r2, r3, #2
 8000402:	4b3b      	ldr	r3, [pc, #236]	; (80004f0 <nutone_white_fsm+0x19c>)
 8000404:	18d3      	adds	r3, r2, r3
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 800040a:	46c0      	nop			; (mov r8, r8)

			break;
 800040c:	e06b      	b.n	80004e6 <nutone_white_fsm+0x192>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 800040e:	210d      	movs	r1, #13
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
			button_get_status(nutone_app_hand->button_white->button,
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	000c      	movs	r4, r1
 800041e:	187a      	adds	r2, r7, r1
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f000 fb25 	bl	8000a72 <button_get_status>
															&button_status);

			if(button_status == BUTTON_ON)
 8000428:	193b      	adds	r3, r7, r4
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d108      	bne.n	8000442 <nutone_white_fsm+0xee>
			{
				nutone_app_hand->fsm_state_white  = MOTION_LIGHT_TURN_ON_LIGHT;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2238      	movs	r2, #56	; 0x38
 8000434:	2102      	movs	r1, #2
 8000436:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2234      	movs	r2, #52	; 0x34
 800043c:	2100      	movs	r1, #0
 800043e:	5499      	strb	r1, [r3, r2]
				 //if an edge where detected an error occurred in the button
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
			}

			break;
 8000440:	e051      	b.n	80004e6 <nutone_white_fsm+0x192>
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2238      	movs	r2, #56	; 0x38
 8000446:	2105      	movs	r1, #5
 8000448:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->signals.motion_light = MOTION_ISR_ATTENDED;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	2234      	movs	r2, #52	; 0x34
 800044e:	2100      	movs	r1, #0
 8000450:	5499      	strb	r1, [r3, r2]
			break;
 8000452:	e048      	b.n	80004e6 <nutone_white_fsm+0x192>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			nutone_set_command(nutone_app_hand->nutone_dev,
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2103      	movs	r1, #3
 800045a:	0018      	movs	r0, r3
 800045c:	f001 ffcc 	bl	80023f8 <nutone_set_command>
													NUTONE_CMD_WHITE_TURN_ON);
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2238      	movs	r2, #56	; 0x38
 8000464:	2103      	movs	r1, #3
 8000466:	5499      	strb	r1, [r3, r2]

			break;
 8000468:	e03d      	b.n	80004e6 <nutone_white_fsm+0x192>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_white);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6a1b      	ldr	r3, [r3, #32]
 800046e:	0018      	movs	r0, r3
 8000470:	f002 f8a3 	bl	80025ba <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_white  = MOTION_LIGHT_WAIT_EXPIRATION;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2238      	movs	r2, #56	; 0x38
 8000478:	2104      	movs	r1, #4
 800047a:	5499      	strb	r1, [r3, r2]

			break;
 800047c:	e033      	b.n	80004e6 <nutone_white_fsm+0x192>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(nutone_app_hand->timer_fsm_white,
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6a1b      	ldr	r3, [r3, #32]
 8000482:	240c      	movs	r4, #12
 8000484:	193a      	adds	r2, r7, r4
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f002 f85f 	bl	800254c <deadline_timer_check>
												&deadline_expired);

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 800048e:	193b      	adds	r3, r7, r4
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	2b01      	cmp	r3, #1
 8000494:	d103      	bne.n	800049e <nutone_white_fsm+0x14a>
			{
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_TURN_OFF_LIGHT;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2238      	movs	r2, #56	; 0x38
 800049a:	2105      	movs	r1, #5
 800049c:	5499      	strb	r1, [r3, r2]
			}

			if(nutone_app_hand->signals.motion_light == MOTION_ISR_UNATTENDED)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2234      	movs	r2, #52	; 0x34
 80004a2:	5c9b      	ldrb	r3, [r3, r2]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d11d      	bne.n	80004e4 <nutone_white_fsm+0x190>
			{
				nutone_app_hand->signals.motion_light  = MOTION_ISR_ATTENDED;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2234      	movs	r2, #52	; 0x34
 80004ac:	2100      	movs	r1, #0
 80004ae:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->fsm_state_white = MOTION_LIGHT_INIT_TIMER;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2238      	movs	r2, #56	; 0x38
 80004b4:	2103      	movs	r1, #3
 80004b6:	5499      	strb	r1, [r3, r2]
			}
			break;
 80004b8:	e014      	b.n	80004e4 <nutone_white_fsm+0x190>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_white);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a1b      	ldr	r3, [r3, #32]
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f836 	bl	8002530 <deadline_timer_force_expiration>
			//this is done in another fsm
			nutone_set_command(nutone_app_hand->nutone_dev,
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2104      	movs	r1, #4
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 ff94 	bl	80023f8 <nutone_set_command>
													NUTONE_CMD_WHITE_TURN_OFF);
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2238      	movs	r2, #56	; 0x38
 80004d4:	2100      	movs	r1, #0
 80004d6:	5499      	strb	r1, [r3, r2]
			break;
 80004d8:	e005      	b.n	80004e6 <nutone_white_fsm+0x192>
		default:
			nutone_app_hand->fsm_state_white = MOTION_LIGHT_IDLE;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	2238      	movs	r2, #56	; 0x38
 80004de:	2100      	movs	r1, #0
 80004e0:	5499      	strb	r1, [r3, r2]
			break;
 80004e2:	e000      	b.n	80004e6 <nutone_white_fsm+0x192>
			break;
 80004e4:	46c0      	nop			; (mov r8, r8)
	}


	return 0;
 80004e6:	2300      	movs	r3, #0



}
 80004e8:	0018      	movs	r0, r3
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b004      	add	sp, #16
 80004ee:	bdb0      	pop	{r4, r5, r7, pc}
 80004f0:	0800667c 	.word	0x0800667c

080004f4 <nutone_vyv_fsm>:


uint8_t nutone_vyv_fsm(nutone_app_t *nutone_app_hand)
{
 80004f4:	b5b0      	push	{r4, r5, r7, lr}
 80004f6:	b09a      	sub	sp, #104	; 0x68
 80004f8:	af16      	add	r7, sp, #88	; 0x58
 80004fa:	6078      	str	r0, [r7, #4]
	button_edge_t edge;
	pyd1598_motion_isr_status_t motion_isr_status;
	deadline_timer_expired_t deadline_safe_expired;
	deadline_timer_expired_t deadline_timeout_expired;

	button_check_isr_request(*nutone_app_hand->button_vyv->button, &button_isr_status, &edge);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	220e      	movs	r2, #14
 8000504:	18ba      	adds	r2, r7, r2
 8000506:	9203      	str	r2, [sp, #12]
 8000508:	250f      	movs	r5, #15
 800050a:	197a      	adds	r2, r7, r5
 800050c:	9202      	str	r2, [sp, #8]
 800050e:	466a      	mov	r2, sp
 8000510:	0011      	movs	r1, r2
 8000512:	001a      	movs	r2, r3
 8000514:	3210      	adds	r2, #16
 8000516:	ca11      	ldmia	r2!, {r0, r4}
 8000518:	c111      	stmia	r1!, {r0, r4}
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	6859      	ldr	r1, [r3, #4]
 800051e:	689a      	ldr	r2, [r3, #8]
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	f000 facb 	bl	8000abc <button_check_isr_request>
	pyd1598_check_isr_request(*nutone_app_hand->motion_hand->motion_sensor, &motion_isr_status);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	681c      	ldr	r4, [r3, #0]
 800052c:	230d      	movs	r3, #13
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	9314      	str	r3, [sp, #80]	; 0x50
 8000532:	466b      	mov	r3, sp
 8000534:	0018      	movs	r0, r3
 8000536:	0023      	movs	r3, r4
 8000538:	3310      	adds	r3, #16
 800053a:	2250      	movs	r2, #80	; 0x50
 800053c:	0019      	movs	r1, r3
 800053e:	f006 f887 	bl	8006650 <memcpy>
 8000542:	6820      	ldr	r0, [r4, #0]
 8000544:	6861      	ldr	r1, [r4, #4]
 8000546:	68a2      	ldr	r2, [r4, #8]
 8000548:	68e3      	ldr	r3, [r4, #12]
 800054a:	f000 ff37 	bl	80013bc <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 800054e:	197b      	adds	r3, r7, r5
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b02      	cmp	r3, #2
 8000554:	d112      	bne.n	800057c <nutone_vyv_fsm+0x88>
	{

		//Change if abort is not required with a second push
		if(nutone_app_hand->button_vyv->button->push_status == BUTTON_PUSH_ON)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d104      	bne.n	800056c <nutone_vyv_fsm+0x78>
		{
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2239      	movs	r2, #57	; 0x39
 8000566:	2101      	movs	r1, #1
 8000568:	5499      	strb	r1, [r3, r2]
 800056a:	e003      	b.n	8000574 <nutone_vyv_fsm+0x80>
		}
		else
		{
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2239      	movs	r2, #57	; 0x39
 8000570:	210a      	movs	r1, #10
 8000572:	5499      	strb	r1, [r3, r2]
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8000574:	230f      	movs	r3, #15
 8000576:	18fb      	adds	r3, r7, r3
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	}
	nutone_app_hand->button_vyv->button->edge_attended = button_isr_status;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	220f      	movs	r2, #15
 8000584:	18ba      	adds	r2, r7, r2
 8000586:	7812      	ldrb	r2, [r2, #0]
 8000588:	70da      	strb	r2, [r3, #3]


	if(nutone_app_hand->signals.uv_abort == MOTION_ABORT_TRUE)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2236      	movs	r2, #54	; 0x36
 800058e:	5c9b      	ldrb	r3, [r3, r2]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d107      	bne.n	80005a4 <nutone_vyv_fsm+0xb0>
	{
		nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2239      	movs	r2, #57	; 0x39
 8000598:	210a      	movs	r1, #10
 800059a:	5499      	strb	r1, [r3, r2]
		nutone_app_hand->signals.uv_abort = MOTION_ABORT_FALSE;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2236      	movs	r2, #54	; 0x36
 80005a0:	2101      	movs	r1, #1
 80005a2:	5499      	strb	r1, [r3, r2]
	}

	if(	nutone_app_hand->nutone_dev->current_light_mode ==
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	7d9b      	ldrb	r3, [r3, #22]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d104      	bne.n	80005b8 <nutone_vyv_fsm+0xc4>
														NUTONE_LIGHT_MODE_WHITE)
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_TRUE;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2237      	movs	r2, #55	; 0x37
 80005b2:	2100      	movs	r1, #0
 80005b4:	5499      	strb	r1, [r3, r2]
 80005b6:	e003      	b.n	80005c0 <nutone_vyv_fsm+0xcc>
	}
	else
	{
		nutone_app_hand->signals.wait = MOTION_UV_WAIT_FALSE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2237      	movs	r2, #55	; 0x37
 80005bc:	2101      	movs	r1, #1
 80005be:	5499      	strb	r1, [r3, r2]
	}


	switch(nutone_app_hand->fsm_state_uyu)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2239      	movs	r2, #57	; 0x39
 80005c4:	5c9b      	ldrb	r3, [r3, r2]
 80005c6:	2b0a      	cmp	r3, #10
 80005c8:	d900      	bls.n	80005cc <nutone_vyv_fsm+0xd8>
 80005ca:	e0d8      	b.n	800077e <nutone_vyv_fsm+0x28a>
 80005cc:	009a      	lsls	r2, r3, #2
 80005ce:	4b73      	ldr	r3, [pc, #460]	; (800079c <nutone_vyv_fsm+0x2a8>)
 80005d0:	18d3      	adds	r3, r2, r3
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:


			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2235      	movs	r2, #53	; 0x35
 80005da:	5c9b      	ldrb	r3, [r3, r2]
 80005dc:	2b02      	cmp	r3, #2
 80005de:	d103      	bne.n	80005e8 <nutone_vyv_fsm+0xf4>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2235      	movs	r2, #53	; 0x35
 80005e4:	2100      	movs	r1, #0
 80005e6:	5499      	strb	r1, [r3, r2]
			}

			__NOP();//Do nothing
 80005e8:	46c0      	nop			; (mov r8, r8)

			break;
 80005ea:	e0d2      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		case MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER:
			//Initialize deadline_timeout
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_timeout);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 ffe2 	bl	80025ba <deadline_timer_set_initial_time>

			//Start LED indicator
			led_signal_start(nutone_app_hand->led_signal_hand->led_signal);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fb8e 	bl	8000d1e <led_signal_start>
			nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_BLINK;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2202      	movs	r2, #2
 800060a:	725a      	strb	r2, [r3, #9]

			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2239      	movs	r2, #57	; 0x39
 8000610:	2103      	movs	r1, #3
 8000612:	5499      	strb	r1, [r3, r2]

			break;
 8000614:	e0bd      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		case MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT:

			if(nutone_app_hand->signals.motion_uv  == MOTION_ISR_UNATTENDED)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2235      	movs	r2, #53	; 0x35
 800061a:	5c9b      	ldrb	r3, [r3, r2]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d103      	bne.n	8000628 <nutone_vyv_fsm+0x134>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2235      	movs	r2, #53	; 0x35
 8000624:	2100      	movs	r1, #0
 8000626:	5499      	strb	r1, [r3, r2]
			}
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_timeout,
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800062c:	240b      	movs	r4, #11
 800062e:	193a      	adds	r2, r7, r4
 8000630:	0011      	movs	r1, r2
 8000632:	0018      	movs	r0, r3
 8000634:	f001 ff8a 	bl	800254c <deadline_timer_check>
													&deadline_timeout_expired);

			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000638:	193b      	adds	r3, r7, r4
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d000      	beq.n	8000642 <nutone_vyv_fsm+0x14e>
 8000640:	e0a2      	b.n	8000788 <nutone_vyv_fsm+0x294>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2235      	movs	r2, #53	; 0x35
 8000646:	2100      	movs	r1, #0
 8000648:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2239      	movs	r2, #57	; 0x39
 800064e:	2104      	movs	r1, #4
 8000650:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->led_signal_hand->led_signal->type = LED_SIGNAL_SOLID;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	69db      	ldr	r3, [r3, #28]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2201      	movs	r2, #1
 800065a:	725a      	strb	r2, [r3, #9]
			}
			break;
 800065c:	e094      	b.n	8000788 <nutone_vyv_fsm+0x294>

		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv_safe);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000662:	0018      	movs	r0, r3
 8000664:	f001 ffa9 	bl	80025ba <deadline_timer_set_initial_time>

			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2239      	movs	r2, #57	; 0x39
 800066c:	2105      	movs	r1, #5
 800066e:	5499      	strb	r1, [r3, r2]
			break;
 8000670:	e08f      	b.n	8000792 <nutone_vyv_fsm+0x29e>

		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_check(nutone_app_hand->timer_fsm_vyv_safe,
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000676:	240c      	movs	r4, #12
 8000678:	193a      	adds	r2, r7, r4
 800067a:	0011      	movs	r1, r2
 800067c:	0018      	movs	r0, r3
 800067e:	f001 ff65 	bl	800254c <deadline_timer_check>
														&deadline_safe_expired);

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8000682:	193b      	adds	r3, r7, r4
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2b01      	cmp	r3, #1
 8000688:	d104      	bne.n	8000694 <nutone_vyv_fsm+0x1a0>
			{
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2239      	movs	r2, #57	; 0x39
 800068e:	2106      	movs	r1, #6
 8000690:	5499      	strb	r1, [r3, r2]
					}
				}

			}

			break;
 8000692:	e07b      	b.n	800078c <nutone_vyv_fsm+0x298>
				if(nutone_app_hand->signals.motion_uv== MOTION_ISR_UNATTENDED)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2235      	movs	r2, #53	; 0x35
 8000698:	5c9b      	ldrb	r3, [r3, r2]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d108      	bne.n	80006b0 <nutone_vyv_fsm+0x1bc>
					nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2235      	movs	r2, #53	; 0x35
 80006a2:	2100      	movs	r1, #0
 80006a4:	5499      	strb	r1, [r3, r2]
					nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2239      	movs	r2, #57	; 0x39
 80006aa:	210a      	movs	r1, #10
 80006ac:	5499      	strb	r1, [r3, r2]
			break;
 80006ae:	e06d      	b.n	800078c <nutone_vyv_fsm+0x298>
					if(nutone_app_hand->signals.wait == MOTION_UV_WAIT_TRUE)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2237      	movs	r2, #55	; 0x37
 80006b4:	5c9b      	ldrb	r3, [r3, r2]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d168      	bne.n	800078c <nutone_vyv_fsm+0x298>
						nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2239      	movs	r2, #57	; 0x39
 80006be:	2104      	movs	r1, #4
 80006c0:	5499      	strb	r1, [r3, r2]
			break;
 80006c2:	e063      	b.n	800078c <nutone_vyv_fsm+0x298>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
//			relay_ask_on_pulse_fsm(light_uv);
			nutone_set_command(nutone_app_hand->nutone_dev,
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2105      	movs	r1, #5
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fe94 	bl	80023f8 <nutone_set_command>
														NUTONE_CMD_VYV_TURN_ON);
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_INIT_TIMER;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2239      	movs	r2, #57	; 0x39
 80006d4:	2107      	movs	r1, #7
 80006d6:	5499      	strb	r1, [r3, r2]

			break;
 80006d8:	e05b      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(nutone_app_hand->timer_fsm_vyv);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 ff6b 	bl	80025ba <deadline_timer_set_initial_time>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2239      	movs	r2, #57	; 0x39
 80006e8:	2108      	movs	r1, #8
 80006ea:	5499      	strb	r1, [r3, r2]
			break;
 80006ec:	e051      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(nutone_app_hand->timer_fsm_vyv,
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	240a      	movs	r4, #10
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f001 ff27 	bl	800254c <deadline_timer_check>
															&deadline_expired);

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d103      	bne.n	800070e <nutone_vyv_fsm+0x21a>
			{
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2239      	movs	r2, #57	; 0x39
 800070a:	2109      	movs	r1, #9
 800070c:	5499      	strb	r1, [r3, r2]
			else
			{
				//Do nothing
			}

			if(nutone_app_hand->signals.motion_uv == MOTION_ISR_UNATTENDED)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	2235      	movs	r2, #53	; 0x35
 8000712:	5c9b      	ldrb	r3, [r3, r2]
 8000714:	2b02      	cmp	r3, #2
 8000716:	d13b      	bne.n	8000790 <nutone_vyv_fsm+0x29c>
			{
				nutone_app_hand->signals.motion_uv = MOTION_ISR_ATTENDED;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2235      	movs	r2, #53	; 0x35
 800071c:	2100      	movs	r1, #0
 800071e:	5499      	strb	r1, [r3, r2]
				nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_ABORT;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2239      	movs	r2, #57	; 0x39
 8000724:	210a      	movs	r1, #10
 8000726:	5499      	strb	r1, [r3, r2]
			}

			break;
 8000728:	e032      	b.n	8000790 <nutone_vyv_fsm+0x29c>
		case MOTION_LIGHT_UV_ABORT:
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2239      	movs	r2, #57	; 0x39
 800072e:	2109      	movs	r1, #9
 8000730:	5499      	strb	r1, [r3, r2]

			break;
 8000732:	e02e      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fef9 	bl	8002530 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_timeout);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fef4 	bl	8002530 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(nutone_app_hand->timer_fsm_vyv_safe);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074c:	0018      	movs	r0, r3
 800074e:	f001 feef 	bl	8002530 <deadline_timer_force_expiration>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	709a      	strb	r2, [r3, #2]

			//Send signal to turn off UV lamp

			nutone_set_command(nutone_app_hand->nutone_dev,
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2106      	movs	r1, #6
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fe48 	bl	80023f8 <nutone_set_command>
														NUTONE_CMD_VYV_TURN_OFF);
			//Send signal stop LED indicator
			led_signal_stop(nutone_app_hand->led_signal_hand->led_signal);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	69db      	ldr	r3, [r3, #28]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fae1 	bl	8000d36 <led_signal_stop>
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2239      	movs	r2, #57	; 0x39
 8000778:	2100      	movs	r1, #0
 800077a:	5499      	strb	r1, [r3, r2]

			break;
 800077c:	e009      	b.n	8000792 <nutone_vyv_fsm+0x29e>
		default:
			nutone_app_hand->fsm_state_uyu = MOTION_LIGHT_UV_IDLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2239      	movs	r2, #57	; 0x39
 8000782:	2100      	movs	r1, #0
 8000784:	5499      	strb	r1, [r3, r2]
			break;
 8000786:	e004      	b.n	8000792 <nutone_vyv_fsm+0x29e>
			break;
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	e002      	b.n	8000792 <nutone_vyv_fsm+0x29e>
			break;
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	e000      	b.n	8000792 <nutone_vyv_fsm+0x29e>
			break;
 8000790:	46c0      	nop			; (mov r8, r8)
	}




	return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b004      	add	sp, #16
 800079a:	bdb0      	pop	{r4, r5, r7, pc}
 800079c:	08006694 	.word	0x08006694

080007a0 <nutone_app_check_events>:

void nutone_app_check_events(nutone_app_t *nutone_app_hand)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af04      	add	r7, sp, #16
 80007a6:	6078      	str	r0, [r7, #4]
	//To check UV button state:
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	pyd1598_read_wakeup_signal(nutone_app_hand->motion_hand->motion_sensor,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	240f      	movs	r4, #15
 80007b0:	193a      	adds	r2, r7, r4
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fe18 	bl	80013ea <pyd1598_read_wakeup_signal>
															&motion_isr_status);

	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d10d      	bne.n	80007de <nutone_app_check_events+0x3e>
	{
		nutone_app_hand->signals.motion_light = MOTION_ISR_UNATTENDED;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2234      	movs	r2, #52	; 0x34
 80007c6:	2102      	movs	r1, #2
 80007c8:	5499      	strb	r1, [r3, r2]
		nutone_app_hand->signals.motion_uv = MOTION_ISR_UNATTENDED;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2235      	movs	r2, #53	; 0x35
 80007ce:	2102      	movs	r1, #2
 80007d0:	5499      	strb	r1, [r3, r2]
		nutone_app_hand->motion_hand->motion_sensor->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2258      	movs	r2, #88	; 0x58
 80007da:	2100      	movs	r1, #0
 80007dc:	5499      	strb	r1, [r3, r2]
	}

	nutone_app_check_button_event(nutone_app_hand->button_white->btn_timer,
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	685a      	ldr	r2, [r3, #4]
								nutone_app_hand->button_white->button);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68db      	ldr	r3, [r3, #12]
	nutone_app_check_button_event(nutone_app_hand->button_white->btn_timer,
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	0019      	movs	r1, r3
 80007ec:	0010      	movs	r0, r2
 80007ee:	f000 f842 	bl	8000876 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_vyv->btn_timer,
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	685a      	ldr	r2, [r3, #4]
									nutone_app_hand->button_vyv->button);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	691b      	ldr	r3, [r3, #16]
	nutone_app_check_button_event(nutone_app_hand->button_vyv->btn_timer,
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	0019      	movs	r1, r3
 8000800:	0010      	movs	r0, r2
 8000802:	f000 f838 	bl	8000876 <nutone_app_check_button_event>
	nutone_app_check_button_event(nutone_app_hand->button_fan->btn_timer,
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	685a      	ldr	r2, [r3, #4]
									nutone_app_hand->button_fan->button);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	689b      	ldr	r3, [r3, #8]
	nutone_app_check_button_event(nutone_app_hand->button_fan->btn_timer,
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	0019      	movs	r1, r3
 8000814:	0010      	movs	r0, r2
 8000816:	f000 f82e 	bl	8000876 <nutone_app_check_button_event>


	//Since a push button does not maintain its state, memory is needed.
	button_check_isr_request(*nutone_app_hand->button_vyv->button,
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	691b      	ldr	r3, [r3, #16]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	220d      	movs	r2, #13
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	9203      	str	r2, [sp, #12]
 8000826:	250e      	movs	r5, #14
 8000828:	197a      	adds	r2, r7, r5
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	466a      	mov	r2, sp
 800082e:	0011      	movs	r1, r2
 8000830:	001a      	movs	r2, r3
 8000832:	3210      	adds	r2, #16
 8000834:	ca11      	ldmia	r2!, {r0, r4}
 8000836:	c111      	stmia	r1!, {r0, r4}
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	6859      	ldr	r1, [r3, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	f000 f93c 	bl	8000abc <button_check_isr_request>
												&button_isr_stat, &check_edge);
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8000844:	197b      	adds	r3, r7, r5
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b02      	cmp	r3, #2
 800084a:	d110      	bne.n	800086e <nutone_app_check_events+0xce>
	{
		if(nutone_app_hand->button_vyv->button->push_status != BUTTON_PUSH_ON)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	789b      	ldrb	r3, [r3, #2]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d005      	beq.n	8000864 <nutone_app_check_events+0xc4>
		{
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_ON;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2201      	movs	r2, #1
 8000860:	709a      	strb	r2, [r3, #2]
		}
	}



}
 8000862:	e004      	b.n	800086e <nutone_app_check_events+0xce>
			nutone_app_hand->button_vyv->button->push_status = BUTTON_PUSH_OFF;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	709a      	strb	r2, [r3, #2]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b004      	add	sp, #16
 8000874:	bdb0      	pop	{r4, r5, r7, pc}

08000876 <nutone_app_check_button_event>:

void nutone_app_check_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8000876:	b590      	push	{r4, r7, lr}
 8000878:	b085      	sub	sp, #20
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
 800087e:	6039      	str	r1, [r7, #0]
	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	7b5b      	ldrb	r3, [r3, #13]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d112      	bne.n	80008ae <nutone_app_check_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 8000888:	240f      	movs	r4, #15
 800088a:	193a      	adds	r2, r7, r4
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f001 fe5b 	bl	800254c <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 8000896:	193b      	adds	r3, r7, r4
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d107      	bne.n	80008ae <nutone_app_check_button_event+0x38>
		{
			button_debounce_fsm(button);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	0018      	movs	r0, r3
 80008a2:	f000 f858 	bl	8000956 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fe86 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}
}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b005      	add	sp, #20
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <nutone_app_set_outputs>:


void nutone_app_set_outputs(nutone_app_t *nutone_app_hand)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
	output_fsm_ctrl(nutone_app_hand->nutone_dev->lights->relay,
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
					nutone_app_hand->nutone_dev->lights->deadline_timer);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
	output_fsm_ctrl(nutone_app_hand->nutone_dev->lights->relay,
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	0019      	movs	r1, r3
 80008d0:	0010      	movs	r0, r2
 80008d2:	f001 ff17 	bl	8002704 <output_fsm_ctrl>

	output_fsm_ctrl(nutone_app_hand->nutone_dev->fan->relay,
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	681a      	ldr	r2, [r3, #0]
					nutone_app_hand->nutone_dev->fan->deadline_timer);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
	output_fsm_ctrl(nutone_app_hand->nutone_dev->fan->relay,
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	0019      	movs	r1, r3
 80008e8:	0010      	movs	r0, r2
 80008ea:	f001 ff0b 	bl	8002704 <output_fsm_ctrl>

	output_led_indicator(nutone_app_hand->led_signal_hand->led_signal,
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	681a      	ldr	r2, [r3, #0]
							nutone_app_hand->led_signal_hand->led_signal_timer);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	69db      	ldr	r3, [r3, #28]
	output_led_indicator(nutone_app_hand->led_signal_hand->led_signal,
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	0019      	movs	r1, r3
 80008fc:	0010      	movs	r0, r2
 80008fe:	f001 ff79 	bl	80027f4 <output_led_indicator>

}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}

0800090a <button_setup>:

#include "BoardSupport/button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	60f8      	str	r0, [r7, #12]
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	6019      	str	r1, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	3304      	adds	r3, #4
 800091e:	ca03      	ldmia	r2!, {r0, r1}
 8000920:	c303      	stmia	r3!, {r0, r1}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2200      	movs	r2, #0
 8000926:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2200      	movs	r2, #0
 800092c:	70da      	strb	r2, [r3, #3]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	731a      	strb	r2, [r3, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2201      	movs	r2, #1
 8000938:	735a      	strb	r2, [r3, #13]
	button->debounce_idx = 0;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
	button->debounce_count_limit = 1;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2201      	movs	r2, #1
 8000944:	615a      	str	r2, [r3, #20]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2200      	movs	r2, #0
 800094a:	709a      	strb	r2, [r3, #2]

	return 0;
 800094c:	2300      	movs	r3, #0

}
 800094e:	0018      	movs	r0, r3
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}

08000956 <button_debounce_fsm>:


uint8_t button_debounce_fsm(button_t *button)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b088      	sub	sp, #32
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 800095e:	211f      	movs	r1, #31
 8000960:	187b      	adds	r3, r7, r1
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	7b12      	ldrb	r2, [r2, #12]
 8000966:	701a      	strb	r2, [r3, #0]
	button_edge_t edge = button->edge;
 8000968:	2317      	movs	r3, #23
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	687a      	ldr	r2, [r7, #4]
 800096e:	7852      	ldrb	r2, [r2, #1]
 8000970:	701a      	strb	r2, [r3, #0]
	uint32_t debounce_idx = button->debounce_idx;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	61bb      	str	r3, [r7, #24]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	695b      	ldr	r3, [r3, #20]
 800097c:	613b      	str	r3, [r7, #16]
	button_status_t button_status;

	switch(debounce_fsm_state)
 800097e:	187b      	adds	r3, r7, r1
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d022      	beq.n	80009cc <button_debounce_fsm+0x76>
 8000986:	dc36      	bgt.n	80009f6 <button_debounce_fsm+0xa0>
 8000988:	2b00      	cmp	r3, #0
 800098a:	d002      	beq.n	8000992 <button_debounce_fsm+0x3c>
 800098c:	2b01      	cmp	r3, #1
 800098e:	d011      	beq.n	80009b4 <button_debounce_fsm+0x5e>
 8000990:	e031      	b.n	80009f6 <button_debounce_fsm+0xa0>
	{
		case BUTTON_DEBOUNCE_IDLE:

			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7b5b      	ldrb	r3, [r3, #13]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d132      	bne.n	8000a00 <button_debounce_fsm+0xaa>
			{
				if(debounce_count_limit == 0)
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <button_debounce_fsm+0x54>
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80009a0:	231f      	movs	r3, #31
 80009a2:	18fb      	adds	r3, r7, r3
 80009a4:	2202      	movs	r2, #2
 80009a6:	701a      	strb	r2, [r3, #0]
				else
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
				}
			}
			break;
 80009a8:	e02a      	b.n	8000a00 <button_debounce_fsm+0xaa>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80009aa:	231f      	movs	r3, #31
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	2201      	movs	r2, #1
 80009b0:	701a      	strb	r2, [r3, #0]
			break;
 80009b2:	e025      	b.n	8000a00 <button_debounce_fsm+0xaa>
		case BUTTON_DEBOUNCE_WAIT:

			if(debounce_idx >= debounce_count_limit)
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d303      	bcc.n	80009c4 <button_debounce_fsm+0x6e>
			{
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80009bc:	231f      	movs	r3, #31
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	2202      	movs	r2, #2
 80009c2:	701a      	strb	r2, [r3, #0]
			}
			debounce_idx++;
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	3301      	adds	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]

			break;
 80009ca:	e01a      	b.n	8000a02 <button_debounce_fsm+0xac>
		case BUTTON_DEBOUNCE_CLEAR_LOCK:

			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2202      	movs	r2, #2
 80009d0:	70da      	strb	r2, [r3, #3]
			button->debounce_idx = 0;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2201      	movs	r2, #1
 80009dc:	735a      	strb	r2, [r3, #13]
			button_get_status(button, &button_status);
 80009de:	230f      	movs	r3, #15
 80009e0:	18fa      	adds	r2, r7, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 f843 	bl	8000a72 <button_get_status>

			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 80009ec:	231f      	movs	r3, #31
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	2200      	movs	r2, #0
 80009f2:	701a      	strb	r2, [r3, #0]

			break;
 80009f4:	e005      	b.n	8000a02 <button_debounce_fsm+0xac>
		default:
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 80009f6:	231f      	movs	r3, #31
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	2200      	movs	r2, #0
 80009fc:	701a      	strb	r2, [r3, #0]
			break;
 80009fe:	e000      	b.n	8000a02 <button_debounce_fsm+0xac>
			break;
 8000a00:	46c0      	nop			; (mov r8, r8)
	}

	button->debounce_fsm_state = debounce_fsm_state;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	221f      	movs	r2, #31
 8000a06:	18ba      	adds	r2, r7, r2
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	731a      	strb	r2, [r3, #12]
	button->edge = edge;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2217      	movs	r2, #23
 8000a10:	18ba      	adds	r2, r7, r2
 8000a12:	7812      	ldrb	r2, [r2, #0]
 8000a14:	705a      	strb	r2, [r3, #1]
	button->debounce_idx = debounce_idx;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	611a      	str	r2, [r3, #16]

	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b008      	add	sp, #32
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <button_positive_edge_detected>:

}


uint8_t button_positive_edge_detected(button_t *button)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7b5b      	ldrb	r3, [r3, #13]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d105      	bne.n	8000a42 <button_positive_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2202      	movs	r2, #2
 8000a3a:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b002      	add	sp, #8
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	7b5b      	ldrb	r3, [r3, #13]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d105      	bne.n	8000a68 <button_negative_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000a72:	b5b0      	push	{r4, r5, r7, lr}
 8000a74:	b084      	sub	sp, #16
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	685a      	ldr	r2, [r3, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	891b      	ldrh	r3, [r3, #8]
 8000a84:	250f      	movs	r5, #15
 8000a86:	197c      	adds	r4, r7, r5
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f004 f87a 	bl	8004b84 <HAL_GPIO_ReadPin>
 8000a90:	0003      	movs	r3, r0
 8000a92:	7023      	strb	r3, [r4, #0]
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 8000a94:	197b      	adds	r3, r7, r5
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d103      	bne.n	8000aa4 <button_get_status+0x32>
	{
		button->status = BUTTON_ON;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
 8000aa2:	e002      	b.n	8000aaa <button_get_status+0x38>
	}
	else
	{
		button->status = BUTTON_OFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
	}

	*status = button->status;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	701a      	strb	r2, [r3, #0]

	return 0;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b004      	add	sp, #16
 8000aba:	bdb0      	pop	{r4, r5, r7, pc}

08000abc <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 8000abc:	b084      	sub	sp, #16
 8000abe:	b5b0      	push	{r4, r5, r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	250c      	movs	r5, #12
 8000ac4:	1d2c      	adds	r4, r5, #4
 8000ac6:	19e4      	adds	r4, r4, r7
 8000ac8:	6020      	str	r0, [r4, #0]
 8000aca:	6061      	str	r1, [r4, #4]
 8000acc:	60a2      	str	r2, [r4, #8]
 8000ace:	60e3      	str	r3, [r4, #12]
	*button_isr_status = button.edge_attended;
 8000ad0:	0029      	movs	r1, r5
 8000ad2:	1d0b      	adds	r3, r1, #4
 8000ad4:	19db      	adds	r3, r3, r7
 8000ad6:	78da      	ldrb	r2, [r3, #3]
 8000ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ada:	701a      	strb	r2, [r3, #0]
	*edge = button.edge;
 8000adc:	1d0b      	adds	r3, r1, #4
 8000ade:	19db      	adds	r3, r3, r7
 8000ae0:	785a      	ldrb	r2, [r3, #1]
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	701a      	strb	r2, [r3, #0]
	return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bcb0      	pop	{r4, r5, r7}
 8000aee:	bc08      	pop	{r3}
 8000af0:	b004      	add	sp, #16
 8000af2:	4718      	bx	r3

08000af4 <led_signal_setup>:
 */

#include "BoardSupport/led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	6019      	str	r1, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1d3a      	adds	r2, r7, #4
 8000b06:	ca03      	ldmia	r2!, {r0, r1}
 8000b08:	c303      	stmia	r3!, {r0, r1}
	led_signal->type = LED_SIGNAL_OFF;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	725a      	strb	r2, [r3, #9]

	return 0;
 8000b10:	2300      	movs	r3, #0
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b004      	add	sp, #16
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <led_signal_fsm>:



uint8_t led_signal_fsm(led_signal_t *led_signal)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
	led_signal_type_t type = led_signal->type;
 8000b22:	210f      	movs	r1, #15
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	7a52      	ldrb	r2, [r2, #9]
 8000b2a:	701a      	strb	r2, [r3, #0]

	switch(type)
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d01c      	beq.n	8000b6e <led_signal_fsm+0x54>
 8000b34:	dc1d      	bgt.n	8000b72 <led_signal_fsm+0x58>
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	d014      	beq.n	8000b64 <led_signal_fsm+0x4a>
 8000b3a:	dc1a      	bgt.n	8000b72 <led_signal_fsm+0x58>
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <led_signal_fsm+0x2c>
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d00a      	beq.n	8000b5a <led_signal_fsm+0x40>
			led_signal_togle_fsm(led_signal);
			break;
		case LED_SIGNAL_BLINK_2:
			break;
		default:
			break;
 8000b44:	e015      	b.n	8000b72 <led_signal_fsm+0x58>
			led_signal_turn_off(*led_signal);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	6859      	ldr	r1, [r3, #4]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	f000 f912 	bl	8000d76 <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2200      	movs	r2, #0
 8000b56:	729a      	strb	r2, [r3, #10]
			break;
 8000b58:	e00c      	b.n	8000b74 <led_signal_fsm+0x5a>
			led_signal_solid_fsm(led_signal);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 f81e 	bl	8000b9e <led_signal_solid_fsm>
			break;
 8000b62:	e007      	b.n	8000b74 <led_signal_fsm+0x5a>
			led_signal_togle_fsm(led_signal);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	0018      	movs	r0, r3
 8000b68:	f000 f876 	bl	8000c58 <led_signal_togle_fsm>
			break;
 8000b6c:	e002      	b.n	8000b74 <led_signal_fsm+0x5a>
			break;
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	e000      	b.n	8000b74 <led_signal_fsm+0x5a>
			break;
 8000b72:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <led_signal_type_selector>:



uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	000a      	movs	r2, r1
 8000b88:	1cfb      	adds	r3, r7, #3
 8000b8a:	701a      	strb	r2, [r3, #0]
	led_signal->type = type;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1cfa      	adds	r2, r7, #3
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	725a      	strb	r2, [r3, #9]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b084      	sub	sp, #16
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	7a92      	ldrb	r2, [r2, #10]
 8000bae:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000bb0:	230e      	movs	r3, #14
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7a12      	ldrb	r2, [r2, #8]
 8000bb8:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	d027      	beq.n	8000c12 <led_signal_solid_fsm+0x74>
 8000bc2:	dc31      	bgt.n	8000c28 <led_signal_solid_fsm+0x8a>
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d01a      	beq.n	8000bfe <led_signal_solid_fsm+0x60>
 8000bc8:	dc2e      	bgt.n	8000c28 <led_signal_solid_fsm+0x8a>
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <led_signal_solid_fsm+0x36>
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	d00a      	beq.n	8000be8 <led_signal_solid_fsm+0x4a>
 8000bd2:	e029      	b.n	8000c28 <led_signal_solid_fsm+0x8a>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000bd4:	230e      	movs	r3, #14
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d12f      	bne.n	8000c3e <led_signal_solid_fsm+0xa0>
			{
				state = LED_SIGNAL_STATE_ON;
 8000bde:	230f      	movs	r3, #15
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000be6:	e02a      	b.n	8000c3e <led_signal_solid_fsm+0xa0>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6818      	ldr	r0, [r3, #0]
 8000bec:	6859      	ldr	r1, [r3, #4]
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	f000 f8ad 	bl	8000d4e <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000bf4:	230f      	movs	r3, #15
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
			break;
 8000bfc:	e022      	b.n	8000c44 <led_signal_solid_fsm+0xa6>
		case LED_SIGNAL_STATE_SOLID_ON:

			if(control == LED_SIGNAL_CTRL_STOP)
 8000bfe:	230e      	movs	r3, #14
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d11c      	bne.n	8000c42 <led_signal_solid_fsm+0xa4>
			{
				state = LED_SIGNAL_STATE_END;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000c10:	e017      	b.n	8000c42 <led_signal_solid_fsm+0xa4>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6818      	ldr	r0, [r3, #0]
 8000c16:	6859      	ldr	r1, [r3, #4]
 8000c18:	689a      	ldr	r2, [r3, #8]
 8000c1a:	f000 f8ac 	bl	8000d76 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
			break;
 8000c26:	e00d      	b.n	8000c44 <led_signal_solid_fsm+0xa6>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
			led_signal_turn_off(*led_signal);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6818      	ldr	r0, [r3, #0]
 8000c34:	6859      	ldr	r1, [r3, #4]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	f000 f89d 	bl	8000d76 <led_signal_turn_off>
			break;
 8000c3c:	e002      	b.n	8000c44 <led_signal_solid_fsm+0xa6>
			break;
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	e000      	b.n	8000c44 <led_signal_solid_fsm+0xa6>
			break;
 8000c42:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	220f      	movs	r2, #15
 8000c48:	18ba      	adds	r2, r7, r2
 8000c4a:	7812      	ldrb	r2, [r2, #0]
 8000c4c:	729a      	strb	r2, [r3, #10]

	return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b004      	add	sp, #16
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <led_signal_togle_fsm>:

uint8_t led_signal_togle_fsm(led_signal_t *led_signal)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000c60:	210f      	movs	r1, #15
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	7a92      	ldrb	r2, [r2, #10]
 8000c68:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000c6a:	230e      	movs	r3, #14
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	7a12      	ldrb	r2, [r2, #8]
 8000c72:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b04      	cmp	r3, #4
 8000c7a:	d02d      	beq.n	8000cd8 <led_signal_togle_fsm+0x80>
 8000c7c:	dc37      	bgt.n	8000cee <led_signal_togle_fsm+0x96>
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d01a      	beq.n	8000cb8 <led_signal_togle_fsm+0x60>
 8000c82:	dc34      	bgt.n	8000cee <led_signal_togle_fsm+0x96>
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <led_signal_togle_fsm+0x36>
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d00a      	beq.n	8000ca2 <led_signal_togle_fsm+0x4a>
 8000c8c:	e02f      	b.n	8000cee <led_signal_togle_fsm+0x96>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000c8e:	230e      	movs	r3, #14
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d135      	bne.n	8000d04 <led_signal_togle_fsm+0xac>
			{
				state = LED_SIGNAL_STATE_ON;
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ca0:	e030      	b.n	8000d04 <led_signal_togle_fsm+0xac>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	f000 f850 	bl	8000d4e <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 8000cae:	230f      	movs	r3, #15
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
			break;
 8000cb6:	e028      	b.n	8000d0a <led_signal_togle_fsm+0xb2>
		case LED_SIGNAL_STATE_TOGLE:

			led_signal_toggle(*led_signal);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6818      	ldr	r0, [r3, #0]
 8000cbc:	6859      	ldr	r1, [r3, #4]
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	f000 f86d 	bl	8000d9e <led_signal_toggle>

			if(control == LED_SIGNAL_CTRL_STOP)
 8000cc4:	230e      	movs	r3, #14
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d11c      	bne.n	8000d08 <led_signal_togle_fsm+0xb0>
			{
				state = LED_SIGNAL_STATE_END;
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000cd6:	e017      	b.n	8000d08 <led_signal_togle_fsm+0xb0>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	6859      	ldr	r1, [r3, #4]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	f000 f849 	bl	8000d76 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
			break;
 8000cec:	e00d      	b.n	8000d0a <led_signal_togle_fsm+0xb2>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000cee:	230f      	movs	r3, #15
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
			led_signal_turn_off(*led_signal);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	6859      	ldr	r1, [r3, #4]
 8000cfc:	689a      	ldr	r2, [r3, #8]
 8000cfe:	f000 f83a 	bl	8000d76 <led_signal_turn_off>
			break;
 8000d02:	e002      	b.n	8000d0a <led_signal_togle_fsm+0xb2>
			break;
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	e000      	b.n	8000d0a <led_signal_togle_fsm+0xb2>
			break;
 8000d08:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	18ba      	adds	r2, r7, r2
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	729a      	strb	r2, [r3, #10]

	return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	0018      	movs	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <led_signal_start>:


uint8_t led_signal_start(led_signal_t *led_signal)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_START;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	721a      	strb	r2, [r3, #8]

	return 0;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2201      	movs	r2, #1
 8000d42:	721a      	strb	r2, [r3, #8]

	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	6018      	str	r0, [r3, #0]
 8000d58:	6059      	str	r1, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	0019      	movs	r1, r3
 8000d68:	f003 ff29 	bl	8004bbe <HAL_GPIO_WritePin>
	return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b004      	add	sp, #16
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	6018      	str	r0, [r3, #0]
 8000d80:	6059      	str	r1, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0019      	movs	r1, r3
 8000d90:	f003 ff15 	bl	8004bbe <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	0018      	movs	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	b004      	add	sp, #16
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	6018      	str	r0, [r3, #0]
 8000da8:	6059      	str	r1, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	0019      	movs	r1, r3
 8000db6:	0010      	movs	r0, r2
 8000db8:	f003 ff1e 	bl	8004bf8 <HAL_GPIO_TogglePin>
	return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <pyd1598_setup>:

/**********************************High Level**********************************/
void pyd1598_setup(pyd1598_sensor_t *sensor, pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t serin_inteface,
							pyd1598_hardware_interface_t direct_link_inteface)
{
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	1d38      	adds	r0, r7, #4
 8000dd2:	6001      	str	r1, [r0, #0]
 8000dd4:	6042      	str	r2, [r0, #4]
 8000dd6:	2204      	movs	r2, #4
 8000dd8:	2520      	movs	r5, #32
 8000dda:	1952      	adds	r2, r2, r5
 8000ddc:	19d2      	adds	r2, r2, r7
 8000dde:	6013      	str	r3, [r2, #0]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 8000de0:	68fc      	ldr	r4, [r7, #12]
 8000de2:	2304      	movs	r3, #4
 8000de4:	195b      	adds	r3, r3, r5
 8000de6:	19db      	adds	r3, r3, r7
 8000de8:	1d3a      	adds	r2, r7, #4
 8000dea:	4669      	mov	r1, sp
 8000dec:	6858      	ldr	r0, [r3, #4]
 8000dee:	6008      	str	r0, [r1, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6811      	ldr	r1, [r2, #0]
 8000df4:	6852      	ldr	r2, [r2, #4]
 8000df6:	0020      	movs	r0, r4
 8000df8:	f000 f831 	bl	8000e5e <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3320      	adds	r3, #32
 8000e00:	0018      	movs	r0, r3
 8000e02:	230c      	movs	r3, #12
 8000e04:	195b      	adds	r3, r3, r5
 8000e06:	19db      	adds	r3, r3, r7
 8000e08:	6819      	ldr	r1, [r3, #0]
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	f000 f85f 	bl	8000ece <pyd1598_direct_link_setup>



	sensor->current_config.blind_time = 0;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	2251      	movs	r2, #81	; 0x51
 8000e14:	2100      	movs	r1, #0
 8000e16:	5499      	strb	r1, [r3, r2]
	sensor->current_config.count_mode = 0;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	2257      	movs	r2, #87	; 0x57
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.hpf_cutoff = 0;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2256      	movs	r2, #86	; 0x56
 8000e24:	2100      	movs	r1, #0
 8000e26:	5499      	strb	r1, [r3, r2]
	sensor->current_config.op_mode = 0;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2254      	movs	r2, #84	; 0x54
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.pulse_counter = 0;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2252      	movs	r2, #82	; 0x52
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
	sensor->current_config.signal_source = 0;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2255      	movs	r2, #85	; 0x55
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.threshold = 0;
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2250      	movs	r2, #80	; 0x50
 8000e44:	2100      	movs	r1, #0
 8000e46:	5499      	strb	r1, [r3, r2]
	sensor->current_config.window_time = 0;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	2253      	movs	r2, #83	; 0x53
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	5499      	strb	r1, [r3, r2]





}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bcb0      	pop	{r4, r5, r7}
 8000e58:	bc08      	pop	{r3}
 8000e5a:	b002      	add	sp, #8
 8000e5c:	4718      	bx	r3

08000e5e <pyd1598_serin_setup>:

void pyd1598_serin_setup(pyd1598_serin_t *serin,
							pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000e5e:	b082      	sub	sp, #8
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	1d38      	adds	r0, r7, #4
 8000e6a:	6001      	str	r1, [r0, #0]
 8000e6c:	6042      	str	r2, [r0, #4]
 8000e6e:	2204      	movs	r2, #4
 8000e70:	2418      	movs	r4, #24
 8000e72:	1912      	adds	r2, r2, r4
 8000e74:	2108      	movs	r1, #8
 8000e76:	468c      	mov	ip, r1
 8000e78:	44bc      	add	ip, r7
 8000e7a:	4462      	add	r2, ip
 8000e7c:	6013      	str	r3, [r2, #0]
	serin->config = initial_config;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1d3a      	adds	r2, r7, #4
 8000e82:	ca03      	ldmia	r2!, {r0, r1}
 8000e84:	c303      	stmia	r3!, {r0, r1}


	pyd1598_serin_add_all_conf(serin->config, serin);
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	6859      	ldr	r1, [r3, #4]
 8000e8e:	f000 fac6 	bl	800141e <pyd1598_serin_add_all_conf>

	serin->hardware_inteface = hardware_inteface;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2204      	movs	r2, #4
 8000e96:	1912      	adds	r2, r2, r4
 8000e98:	2108      	movs	r1, #8
 8000e9a:	468c      	mov	ip, r1
 8000e9c:	44bc      	add	ip, r7
 8000e9e:	4462      	add	r2, ip
 8000ea0:	3318      	adds	r3, #24
 8000ea2:	ca03      	ldmia	r2!, {r0, r1}
 8000ea4:	c303      	stmia	r3!, {r0, r1}
	//This is incremented when data is send to SERIN pin
	serin->data_idx = 0;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
	//This mask is shifted when data is send to SERIN pin.
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0452      	lsls	r2, r2, #17
 8000eb2:	60da      	str	r2, [r3, #12]
	serin->state = PYD1598_SERIN_IDLE;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	751a      	strb	r2, [r3, #20]
	serin->start_fsm = false;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	755a      	strb	r2, [r3, #21]




}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b005      	add	sp, #20
 8000ec6:	bc90      	pop	{r4, r7}
 8000ec8:	bc08      	pop	{r3}
 8000eca:	b002      	add	sp, #8
 8000ecc:	4718      	bx	r3

08000ece <pyd1598_direct_link_setup>:

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	6019      	str	r1, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	1d3a      	adds	r2, r7, #4
 8000ee0:	3324      	adds	r3, #36	; 0x24
 8000ee2:	ca03      	ldmia	r2!, {r0, r1}
 8000ee4:	c303      	stmia	r3!, {r0, r1}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	705a      	strb	r2, [r3, #1]
	direct_link->config.count_mode = 0;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	71da      	strb	r2, [r3, #7]
	direct_link->config.hpf_cutoff = 0;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	719a      	strb	r2, [r3, #6]
	direct_link->config.op_mode = 0;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2200      	movs	r2, #0
 8000efc:	711a      	strb	r2, [r3, #4]
	direct_link->config.pulse_counter = 0;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2200      	movs	r2, #0
 8000f02:	709a      	strb	r2, [r3, #2]
	direct_link->config.signal_source = 0;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	2200      	movs	r2, #0
 8000f08:	715a      	strb	r2, [r3, #5]
	direct_link->config.threshold = 0;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
	direct_link->config.window_time = 0;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	2200      	movs	r2, #0
 8000f14:	70da      	strb	r2, [r3, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	739a      	strb	r2, [r3, #14]
	direct_link->source_value.pir_bpf = 0;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	811a      	strh	r2, [r3, #8]
	direct_link->source_value.pir_lpf = 0;
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	815a      	strh	r2, [r3, #10]
	direct_link->source_value.temperature = 0;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	819a      	strh	r2, [r3, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	771a      	strb	r2, [r3, #28]
	direct_link->datagram_bufffer = 0;
 8000f34:	68f9      	ldr	r1, [r7, #12]
 8000f36:	2200      	movs	r2, #0
 8000f38:	2300      	movs	r3, #0
 8000f3a:	610a      	str	r2, [r1, #16]
 8000f3c:	614b      	str	r3, [r1, #20]
	direct_link->start_fsm = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	2100      	movs	r1, #0
 8000f44:	5499      	strb	r1, [r3, r2]
	direct_link->time_update_idx = 0;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2222      	movs	r2, #34	; 0x22
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	5499      	strb	r1, [r3, r2]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <pyd1598_dl_readout_fsm>:
/*_________________________________Direct link FSM____________________________*/


void pyd1598_dl_readout_fsm(pyd1598_direct_link_t *direct_link,
													pyd1598_op_mode_t op_mode)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	000a      	movs	r2, r1
 8000f62:	1cfb      	adds	r3, r7, #3
 8000f64:	701a      	strb	r2, [r3, #0]

	//Information variables
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	695b      	ldr	r3, [r3, #20]
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	60fb      	str	r3, [r7, #12]

	//FSM variables
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8000f70:	2313      	movs	r3, #19
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	7f52      	ldrb	r2, [r2, #29]
 8000f78:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8000f7a:	231f      	movs	r3, #31
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	7fd2      	ldrb	r2, [r2, #31]
 8000f82:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 8000f84:	201e      	movs	r0, #30
 8000f86:	183b      	adds	r3, r7, r0
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	2120      	movs	r1, #32
 8000f8c:	5c52      	ldrb	r2, [r2, r1]
 8000f8e:	701a      	strb	r2, [r3, #0]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8000f90:	231d      	movs	r3, #29
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	2122      	movs	r1, #34	; 0x22
 8000f98:	5c52      	ldrb	r2, [r2, r1]
 8000f9a:	701a      	strb	r2, [r3, #0]
	bool start_fsm = direct_link->start_fsm;
 8000f9c:	231c      	movs	r3, #28
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	2121      	movs	r1, #33	; 0x21
 8000fa4:	5c52      	ldrb	r2, [r2, r1]
 8000fa6:	701a      	strb	r2, [r3, #0]
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8000fa8:	231b      	movs	r3, #27
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	2123      	movs	r1, #35	; 0x23
 8000fb0:	5c52      	ldrb	r2, [r2, r1]
 8000fb2:	701a      	strb	r2, [r3, #0]

	//Local variable
	uint32_t idx = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]


	//TODO: (low) implement readout abort state

	switch(readout_state)
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d900      	bls.n	8000fc2 <pyd1598_dl_readout_fsm+0x6a>
 8000fc0:	e0f1      	b.n	80011a6 <pyd1598_dl_readout_fsm+0x24e>
 8000fc2:	009a      	lsls	r2, r3, #2
 8000fc4:	4b91      	ldr	r3, [pc, #580]	; (800120c <pyd1598_dl_readout_fsm+0x2b4>)
 8000fc6:	18d3      	adds	r3, r2, r3
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	469f      	mov	pc, r3
	{
		case PYD1598_READOUT_IDLE:

			//This state do nothing until start_fsm is activated outside the FSM
			if(start_fsm == true)
 8000fcc:	231c      	movs	r3, #28
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d100      	bne.n	8000fd8 <pyd1598_dl_readout_fsm+0x80>
 8000fd6:	e0ef      	b.n	80011b8 <pyd1598_dl_readout_fsm+0x260>
			{
				//From Table 5 and section 2.7 of the datasheet we know that the
				//time difference from this state and the next ones should be
				// 					120μs < t_{DS} < 150μs
				if(op_mode == PYD1598_FORCE_READOUT)
 8000fd8:	1cfb      	adds	r3, r7, #3
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <pyd1598_dl_readout_fsm+0xa6>
				{
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fe4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000fe6:	f000 fc13 	bl	8001810 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000fee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ff0:	f000 fc4a 	bl	8001888 <pyd1598_direct_link_set_one_pulse>
					readout_state = PYD1598_READOUT_GET_MSG;
 8000ff4:	231e      	movs	r3, #30
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e023      	b.n	8001046 <pyd1598_dl_readout_fsm+0xee>

				}
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d003      	beq.n	800100e <pyd1598_dl_readout_fsm+0xb6>
 8001006:	1cfb      	adds	r3, r7, #3
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d11b      	bne.n	8001046 <pyd1598_dl_readout_fsm+0xee>
						(op_mode == PYD1598_WAKE_UP))
				{
					//TODO: (high) is it possible to set another flag if it
					//comes from an interrupt

					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001012:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001014:	f000 fbfc 	bl	8001810 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800101c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800101e:	f000 fc4d 	bl	80018bc <pyd1598_direct_link_set_negative_edge>

					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d009      	beq.n	800103e <pyd1598_dl_readout_fsm+0xe6>
 800102a:	2313      	movs	r3, #19
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d104      	bne.n	800103e <pyd1598_dl_readout_fsm+0xe6>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
					{
						//since in Wake-up mode read is optional:
						readout_state = PYD1598_READOUT_END_COM;
 8001034:	231e      	movs	r3, #30
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	2204      	movs	r2, #4
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e003      	b.n	8001046 <pyd1598_dl_readout_fsm+0xee>
					}
					else
					{
						readout_state = PYD1598_READOUT_GET_MSG;
 800103e:	231e      	movs	r3, #30
 8001040:	18fb      	adds	r3, r7, r3
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
				else
				{
					//TODO: (low) define an error handler
				}

				start_fsm = false;
 8001046:	231c      	movs	r3, #28
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 800104e:	231f      	movs	r3, #31
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]

			}

			break;
 8001056:	e0af      	b.n	80011b8 <pyd1598_dl_readout_fsm+0x260>
		case PYD1598_READOUT_GET_MSG:

			//TODO: (HIGH) remember to protect from interrupts!!!!!!!!!!!!!

			datagram_bufffer = 0;
 8001058:	2200      	movs	r2, #0
 800105a:	2300      	movs	r3, #0
 800105c:	60ba      	str	r2, [r7, #8]
 800105e:	60fb      	str	r3, [r7, #12]

			//Proceeding with the Readout:
			for(idx = 0; idx < 40; idx++)
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	e01e      	b.n	80010a4 <pyd1598_dl_readout_fsm+0x14c>
			{
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800106a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800106c:	f000 fc0c 	bl	8001888 <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001074:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001076:	f000 fbdf 	bl	8001838 <pyd1598_direct_link_set_as_input>

				//TODO: (low) Test without using a function call so the pin bit
				// can be faster.
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2208      	movs	r2, #8
 800107e:	18ba      	adds	r2, r7, r2
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001084:	6a89      	ldr	r1, [r1, #40]	; 0x28
 8001086:	f000 fc2b 	bl	80018e0 <pyd1598_direct_link_read_pin>
													&datagram_bufffer, idx);

				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800108e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001090:	f000 fc14 	bl	80018bc <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001098:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800109a:	f000 fbb9 	bl	8001810 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	3301      	adds	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	2b27      	cmp	r3, #39	; 0x27
 80010a8:	d9dd      	bls.n	8001066 <pyd1598_dl_readout_fsm+0x10e>

			//host controller must force DIRECT LINK pin to LOW for at least
			//t_{UP} >  1250μs and subsequently release DIRECT LINK (High Z)


			time_update_idx = 0;
 80010aa:	231d      	movs	r3, #29
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]

			readout_status = READOUT_BUSY;
 80010b2:	231f      	movs	r3, #31
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 80010ba:	231e      	movs	r3, #30
 80010bc:	18fb      	adds	r3, r7, r3
 80010be:	2203      	movs	r2, #3
 80010c0:	701a      	strb	r2, [r3, #0]

			break;
 80010c2:	e07c      	b.n	80011be <pyd1598_dl_readout_fsm+0x266>
		case PYD1598_READOUT_SIGNAL_DOWN:
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ca:	f000 fba1 	bl	8001810 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010d4:	f000 fbf2 	bl	80018bc <pyd1598_direct_link_set_negative_edge>

			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 80010d8:	1cfb      	adds	r3, r7, #3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d003      	beq.n	80010e8 <pyd1598_dl_readout_fsm+0x190>
 80010e0:	1cfb      	adds	r3, r7, #3
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d119      	bne.n	800111c <pyd1598_dl_readout_fsm+0x1c4>
				(op_mode == PYD1598_WAKE_UP))
			{
				//since these op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80010ec:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010ee:	f000 fbb7 	bl	8001860 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 80010f2:	231f      	movs	r3, #31
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_IDLE;
 80010fa:	231e      	movs	r3, #30
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
				time_update_idx = 0;
 8001102:	231d      	movs	r3, #29
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]

				if(op_mode == PYD1598_WAKE_UP)
 800110a:	1cfb      	adds	r3, r7, #3
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b02      	cmp	r3, #2
 8001110:	d10c      	bne.n	800112c <pyd1598_dl_readout_fsm+0x1d4>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8001112:	231b      	movs	r3, #27
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	2202      	movs	r2, #2
 8001118:	701a      	strb	r2, [r3, #0]
				if(op_mode == PYD1598_WAKE_UP)
 800111a:	e007      	b.n	800112c <pyd1598_dl_readout_fsm+0x1d4>


			}
			else
			{
				readout_status = READOUT_BUSY;
 800111c:	231f      	movs	r3, #31
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 8001124:	231e      	movs	r3, #30
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	2202      	movs	r2, #2
 800112a:	701a      	strb	r2, [r3, #0]
			// 					120μs < t_{DS} < 150μs,
			//and since
			//					t_{UP} >  1250μs
			//this state should remain at least 1250/120 = 10.42 -> 11 cycles.

			time_update_idx++;
 800112c:	211d      	movs	r1, #29
 800112e:	187b      	adds	r3, r7, r1
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	187b      	adds	r3, r7, r1
 8001134:	3201      	adds	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]

			//TODO: (low) create a mechanism to configure the number of cycles
			if(time_update_idx >= 11)
 8001138:	187b      	adds	r3, r7, r1
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b0a      	cmp	r3, #10
 800113e:	d93d      	bls.n	80011bc <pyd1598_dl_readout_fsm+0x264>
			{
				time_update_idx = 0;
 8001140:	187b      	adds	r3, r7, r1
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 8001146:	231f      	movs	r3, #31
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_END_COM;
 800114e:	231e      	movs	r3, #30
 8001150:	18fb      	adds	r3, r7, r3
 8001152:	2204      	movs	r2, #4
 8001154:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001156:	e031      	b.n	80011bc <pyd1598_dl_readout_fsm+0x264>
		case PYD1598_READOUT_END_COM:
			//TODO: (low) check if this conditional is required since it is done
			//in PYD1598_READOUT_SIGNAL_DOWN.

			//release DIRECT LINK (High Z)
			if(op_mode == PYD1598_FORCE_READOUT)
 8001158:	1cfb      	adds	r3, r7, #3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d105      	bne.n	800116c <pyd1598_dl_readout_fsm+0x214>
			{
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001164:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001166:	f000 fb67 	bl	8001838 <pyd1598_direct_link_set_as_input>
 800116a:	e014      	b.n	8001196 <pyd1598_dl_readout_fsm+0x23e>
			}
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 800116c:	1cfb      	adds	r3, r7, #3
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d003      	beq.n	800117c <pyd1598_dl_readout_fsm+0x224>
 8001174:	1cfb      	adds	r3, r7, #3
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d10c      	bne.n	8001196 <pyd1598_dl_readout_fsm+0x23e>
					(op_mode == PYD1598_WAKE_UP))
			{
				//since this op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001180:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001182:	f000 fb6d 	bl	8001860 <pyd1598_direct_link_set_as_interrupt_input>

				if(op_mode == PYD1598_WAKE_UP)
 8001186:	1cfb      	adds	r3, r7, #3
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d103      	bne.n	8001196 <pyd1598_dl_readout_fsm+0x23e>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 800118e:	231b      	movs	r3, #27
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	2202      	movs	r2, #2
 8001194:	701a      	strb	r2, [r3, #0]
				}

			}
			readout_status = READOUT_READY;
 8001196:	231f      	movs	r3, #31
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_IDLE;
 800119e:	231e      	movs	r3, #30
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]

		default:
			readout_state = PYD1598_READOUT_IDLE;
 80011a6:	231e      	movs	r3, #30
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			readout_status = READOUT_READY;
 80011ae:	231f      	movs	r3, #31
 80011b0:	18fb      	adds	r3, r7, r3
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
			break;
 80011b6:	e002      	b.n	80011be <pyd1598_dl_readout_fsm+0x266>
			break;
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	e000      	b.n	80011be <pyd1598_dl_readout_fsm+0x266>
			break;
 80011bc:	46c0      	nop			; (mov r8, r8)
	}

	direct_link->readout_state = readout_state;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	221e      	movs	r2, #30
 80011c2:	18ba      	adds	r2, r7, r2
 80011c4:	2120      	movs	r1, #32
 80011c6:	7812      	ldrb	r2, [r2, #0]
 80011c8:	545a      	strb	r2, [r3, r1]
	direct_link->readout_status = readout_status;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	221f      	movs	r2, #31
 80011ce:	18ba      	adds	r2, r7, r2
 80011d0:	7812      	ldrb	r2, [r2, #0]
 80011d2:	77da      	strb	r2, [r3, #31]
	direct_link->time_update_idx = time_update_idx;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	221d      	movs	r2, #29
 80011d8:	18ba      	adds	r2, r7, r2
 80011da:	2122      	movs	r1, #34	; 0x22
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	545a      	strb	r2, [r3, r1]
	direct_link->start_fsm = start_fsm;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	221c      	movs	r2, #28
 80011e4:	18ba      	adds	r2, r7, r2
 80011e6:	2121      	movs	r1, #33	; 0x21
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	545a      	strb	r2, [r3, r1]
	//Saving datagram to be read outside the ISR:
	direct_link->datagram_bufffer = datagram_bufffer;
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	610a      	str	r2, [r1, #16]
 80011f4:	614b      	str	r3, [r1, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	221b      	movs	r2, #27
 80011fa:	18ba      	adds	r2, r7, r2
 80011fc:	2123      	movs	r1, #35	; 0x23
 80011fe:	7812      	ldrb	r2, [r2, #0]
 8001200:	545a      	strb	r2, [r3, r1]


}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b008      	add	sp, #32
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	080066c0 	.word	0x080066c0

08001210 <pyd1598_request_write>:


/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	sensor->serin.start_fsm = true;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	755a      	strb	r2, [r3, #21]
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <pyd1598_serin_send_datagram_fsm>:


void pyd1598_serin_send_datagram_fsm(pyd1598_serin_t *serin,
									pyd1598_hardware_interface_t data_link_pin)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b08f      	sub	sp, #60	; 0x3c
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	6019      	str	r1, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
	//Declaring the FSM variables and define them to protect the serin variables
	//from any outside change

	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 8001236:	2437      	movs	r4, #55	; 0x37
 8001238:	193b      	adds	r3, r7, r4
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	7d12      	ldrb	r2, [r2, #20]
 800123e:	701a      	strb	r2, [r3, #0]
	uint32_t data_idx = serin->data_idx;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
	bool start_fsm = serin->start_fsm;
 8001246:	232f      	movs	r3, #47	; 0x2f
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	7d52      	ldrb	r2, [r2, #21]
 800124e:	701a      	strb	r2, [r3, #0]
	pyd1598_config_t config = serin->config;
 8001250:	231c      	movs	r3, #28
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	68fa      	ldr	r2, [r7, #12]
 8001256:	ca03      	ldmia	r2!, {r0, r1}
 8001258:	c303      	stmia	r3!, {r0, r1}
	uint32_t mask = serin->mask;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t conf_datagram = serin->conf_datagram;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	627b      	str	r3, [r7, #36]	; 0x24

	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 8001266:	2314      	movs	r3, #20
 8001268:	18fa      	adds	r2, r7, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3318      	adds	r3, #24
 800126e:	cb03      	ldmia	r3!, {r0, r1}
 8001270:	c203      	stmia	r2!, {r0, r1}

	switch(state)
 8001272:	193b      	adds	r3, r7, r4
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b05      	cmp	r3, #5
 8001278:	d900      	bls.n	800127c <pyd1598_serin_send_datagram_fsm+0x54>
 800127a:	e07f      	b.n	800137c <pyd1598_serin_send_datagram_fsm+0x154>
 800127c:	009a      	lsls	r2, r3, #2
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <pyd1598_serin_send_datagram_fsm+0x190>)
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	469f      	mov	pc, r3
	{
		case PYD1598_SERIN_IDLE:
			if(start_fsm == true)
 8001286:	242f      	movs	r4, #47	; 0x2f
 8001288:	193b      	adds	r3, r7, r4
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d100      	bne.n	8001292 <pyd1598_serin_send_datagram_fsm+0x6a>
 8001290:	e079      	b.n	8001386 <pyd1598_serin_send_datagram_fsm+0x15e>
			{
				pyd1598_direct_link_set_as_output(data_link_pin);
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	6859      	ldr	r1, [r3, #4]
 8001298:	f000 faba 	bl	8001810 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	6859      	ldr	r1, [r3, #4]
 80012a2:	f000 fb0b 	bl	80018bc <pyd1598_direct_link_set_negative_edge>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 80012a6:	2337      	movs	r3, #55	; 0x37
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2201      	movs	r2, #1
 80012ac:	701a      	strb	r2, [r3, #0]
				start_fsm = false;
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
			}
			break;
 80012b4:	e067      	b.n	8001386 <pyd1598_serin_send_datagram_fsm+0x15e>
		case PYD1598_SERIN_SETUP_FOR_MESSAGE:

			data_idx = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	633b      	str	r3, [r7, #48]	; 0x30
//			pyd1598_direct_link_set_as_output();
//			pyd1598_direct_link_set_negative_edge();

			mask = PYD1598_SERIN_BIT_24_MASK;
 80012ba:	2380      	movs	r3, #128	; 0x80
 80012bc:	045b      	lsls	r3, r3, #17
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
			state = PYD1598_SERIN_SEND_MSG;
 80012c0:	2337      	movs	r3, #55	; 0x37
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

			break;
 80012c8:	e05e      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_MSG:
			// program the timer interrupt considering: t_{SHD} = 80-150μs
			if((conf_datagram & mask) == 0)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80012ce:	4013      	ands	r3, r2
 80012d0:	d106      	bne.n	80012e0 <pyd1598_serin_send_datagram_fsm+0xb8>
			{
				pyd1598_serin_set_zero_pulse(output);
 80012d2:	2314      	movs	r3, #20
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	6859      	ldr	r1, [r3, #4]
 80012da:	f000 fa5d 	bl	8001798 <pyd1598_serin_set_zero_pulse>
 80012de:	e005      	b.n	80012ec <pyd1598_serin_send_datagram_fsm+0xc4>
			}
			else
			{
				pyd1598_serin_set_one_pulse(output);
 80012e0:	2314      	movs	r3, #20
 80012e2:	18fb      	adds	r3, r7, r3
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	6859      	ldr	r1, [r3, #4]
 80012e8:	f000 fa78 	bl	80017dc <pyd1598_serin_set_one_pulse>
			}

			mask >>= 1;
 80012ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ee:	085b      	lsrs	r3, r3, #1
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28

//			if(data_idx >= (PYD1598_SERIN_MSG_LONG+1))
			if(mask == 0)
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d104      	bne.n	8001302 <pyd1598_serin_send_datagram_fsm+0xda>
			{
				state = PYD1598_SERIN_SEND_DOWN;
 80012f8:	2337      	movs	r3, #55	; 0x37
 80012fa:	18fb      	adds	r3, r7, r3
 80012fc:	2203      	movs	r2, #3
 80012fe:	701a      	strb	r2, [r3, #0]
			else
			{
				data_idx++;
			}

			break;
 8001300:	e042      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8001302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001304:	3301      	adds	r3, #1
 8001306:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8001308:	e03e      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_DOWN:
			pyd1598_direct_link_set_as_output(data_link_pin);
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	f000 fa7e 	bl	8001810 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	6859      	ldr	r1, [r3, #4]
 800131a:	f000 facf 	bl	80018bc <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 800131e:	2337      	movs	r3, #55	; 0x37
 8001320:	18fb      	adds	r3, r7, r3
 8001322:	2204      	movs	r2, #4
 8001324:	701a      	strb	r2, [r3, #0]

			break;
 8001326:	e02f      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>

		case PYD1598_SERIN_WAIT_LOAD_TIME:
			//Data Load Time t_{SLT} > 650μs. i.e. 8.125 to 4.333 times
			//(9 times for a 80μs interrupt or 4 times for a 150μs interrupt)
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 8001328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132a:	2b22      	cmp	r3, #34	; 0x22
 800132c:	d904      	bls.n	8001338 <pyd1598_serin_send_datagram_fsm+0x110>
			{
				state = PYD1598_SERIN_END_COM;
 800132e:	2337      	movs	r3, #55	; 0x37
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	2205      	movs	r2, #5
 8001334:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				data_idx++;
			}
			break;
 8001336:	e027      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8001338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800133a:	3301      	adds	r3, #1
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 800133e:	e023      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_END_COM:

			if(config.op_mode == PYD1598_FORCE_READOUT)
 8001340:	231c      	movs	r3, #28
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	791b      	ldrb	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d105      	bne.n	8001356 <pyd1598_serin_send_datagram_fsm+0x12e>
			{
				pyd1598_direct_link_set_as_input(data_link_pin);
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	6818      	ldr	r0, [r3, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	f000 fa72 	bl	8001838 <pyd1598_direct_link_set_as_input>
 8001354:	e00d      	b.n	8001372 <pyd1598_serin_send_datagram_fsm+0x14a>
			}
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8001356:	221c      	movs	r2, #28
 8001358:	18bb      	adds	r3, r7, r2
 800135a:	791b      	ldrb	r3, [r3, #4]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d003      	beq.n	8001368 <pyd1598_serin_send_datagram_fsm+0x140>
					(config.op_mode == PYD1598_WAKE_UP) )
 8001360:	18bb      	adds	r3, r7, r2
 8001362:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 8001364:	2b02      	cmp	r3, #2
 8001366:	d104      	bne.n	8001372 <pyd1598_serin_send_datagram_fsm+0x14a>
			{
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	f000 fa77 	bl	8001860 <pyd1598_direct_link_set_as_interrupt_input>
			}
			state = PYD1598_SERIN_IDLE;
 8001372:	2337      	movs	r3, #55	; 0x37
 8001374:	18fb      	adds	r3, r7, r3
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
			break;
 800137a:	e005      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
		default:
			state = PYD1598_SERIN_IDLE;
 800137c:	2337      	movs	r3, #55	; 0x37
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
			break;
 8001384:	e000      	b.n	8001388 <pyd1598_serin_send_datagram_fsm+0x160>
			break;
 8001386:	46c0      	nop			; (mov r8, r8)

	}

	//This are the FSM variables that are changed in this function.
	serin->state = state;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2237      	movs	r2, #55	; 0x37
 800138c:	18ba      	adds	r2, r7, r2
 800138e:	7812      	ldrb	r2, [r2, #0]
 8001390:	751a      	strb	r2, [r3, #20]
	serin->data_idx = data_idx;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001396:	611a      	str	r2, [r3, #16]
	serin->start_fsm = false;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	755a      	strb	r2, [r3, #21]
	serin->mask = mask;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013a2:	60da      	str	r2, [r3, #12]
	serin->start_fsm = start_fsm;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	222f      	movs	r2, #47	; 0x2f
 80013a8:	18ba      	adds	r2, r7, r2
 80013aa:	7812      	ldrb	r2, [r2, #0]
 80013ac:	755a      	strb	r2, [r3, #21]

}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b00f      	add	sp, #60	; 0x3c
 80013b4:	bd90      	pop	{r4, r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	080066d4 	.word	0x080066d4

080013bc <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 80013bc:	b084      	sub	sp, #16
 80013be:	b5b0      	push	{r4, r5, r7, lr}
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	250c      	movs	r5, #12
 80013c4:	1d2c      	adds	r4, r5, #4
 80013c6:	19e4      	adds	r4, r4, r7
 80013c8:	6020      	str	r0, [r4, #0]
 80013ca:	6061      	str	r1, [r4, #4]
 80013cc:	60a2      	str	r2, [r4, #8]
 80013ce:	60e3      	str	r3, [r4, #12]
	*motion_isr_status = sensor.motion_sensed;
 80013d0:	1d2b      	adds	r3, r5, #4
 80013d2:	19db      	adds	r3, r3, r7
 80013d4:	2258      	movs	r2, #88	; 0x58
 80013d6:	5c9a      	ldrb	r2, [r3, r2]
 80013d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013da:	701a      	strb	r2, [r3, #0]
	return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bcb0      	pop	{r4, r5, r7}
 80013e4:	bc08      	pop	{r3}
 80013e6:	b004      	add	sp, #16
 80013e8:	4718      	bx	r3

080013ea <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2243      	movs	r2, #67	; 0x43
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d10a      	bne.n	8001414 <pyd1598_read_wakeup_signal+0x2a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2243      	movs	r2, #67	; 0x43
 8001402:	2100      	movs	r1, #0
 8001404:	5499      	strb	r1, [r3, r2]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2202      	movs	r2, #2
 800140a:	701a      	strb	r2, [r3, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2258      	movs	r2, #88	; 0x58
 8001410:	2102      	movs	r1, #2
 8001412:	5499      	strb	r1, [r3, r2]
	}

	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b002      	add	sp, #8
 800141c:	bd80      	pop	{r7, pc}

0800141e <pyd1598_serin_add_all_conf>:
/*______________________________SERIN functions_______________________________*/


uint8_t pyd1598_serin_add_all_conf(pyd1598_config_t config,
													pyd1598_serin_t *serin)
{
 800141e:	b5b0      	push	{r4, r5, r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	2408      	movs	r4, #8
 8001426:	193b      	adds	r3, r7, r4
 8001428:	6018      	str	r0, [r3, #0]
 800142a:	6059      	str	r1, [r3, #4]
 800142c:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 800142e:	2517      	movs	r5, #23
 8001430:	197b      	adds	r3, r7, r5
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
	//TODO: (low) set error handler
	pyd1598_serin_add_threshold(config.threshold, serin);
 8001436:	193b      	adds	r3, r7, r4
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f000 f838 	bl	80014b4 <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 8001444:	193b      	adds	r3, r7, r4
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f855 	bl	80014fc <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 8001452:	193b      	adds	r3, r7, r4
 8001454:	789b      	ldrb	r3, [r3, #2]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	0011      	movs	r1, r2
 800145a:	0018      	movs	r0, r3
 800145c:	f000 f878 	bl	8001550 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8001460:	193b      	adds	r3, r7, r4
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	0011      	movs	r1, r2
 8001468:	0018      	movs	r0, r3
 800146a:	f000 f89b 	bl	80015a4 <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 800146e:	193b      	adds	r3, r7, r4
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	0011      	movs	r1, r2
 8001476:	0018      	movs	r0, r3
 8001478:	f000 f8be 	bl	80015f8 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 800147c:	193b      	adds	r3, r7, r4
 800147e:	795b      	ldrb	r3, [r3, #5]
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f000 f8db 	bl	8001640 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 800148a:	193b      	adds	r3, r7, r4
 800148c:	799b      	ldrb	r3, [r3, #6]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	0011      	movs	r1, r2
 8001492:	0018      	movs	r0, r3
 8001494:	f000 f8fe 	bl	8001694 <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8001498:	193b      	adds	r3, r7, r4
 800149a:	79db      	ldrb	r3, [r3, #7]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	0011      	movs	r1, r2
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f921 	bl	80016e8 <pyd1598_serin_add_count_mode>
	return status;
 80014a6:	197b      	adds	r3, r7, r5
 80014a8:	781b      	ldrb	r3, [r3, #0]
}
 80014aa:	0018      	movs	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	b006      	add	sp, #24
 80014b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080014b4 <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 80014b4:	b5b0      	push	{r4, r5, r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0002      	movs	r2, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80014c2:	200f      	movs	r0, #15
 80014c4:	183b      	adds	r3, r7, r0
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]

	serin->config.threshold = new_threshold;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	1dfa      	adds	r2, r7, #7
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	701a      	strb	r2, [r3, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3308      	adds	r3, #8
 80014d6:	0019      	movs	r1, r3
 80014d8:	0005      	movs	r5, r0
 80014da:	183c      	adds	r4, r7, r0
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <pyd1598_serin_add_threshold+0x44>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	7818      	ldrb	r0, [r3, #0]
 80014e2:	2311      	movs	r3, #17
 80014e4:	f000 f92a 	bl	800173c <pyd1598_serin_add_to_datagram>
 80014e8:	0003      	movs	r3, r0
 80014ea:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_THRESHOLD,
											PYD1598_SHIFT_THRESHOLD);
	return status;
 80014ec:	197b      	adds	r3, r7, r5
 80014ee:	781b      	ldrb	r3, [r3, #0]
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bdb0      	pop	{r4, r5, r7, pc}
 80014f8:	0001ffff 	.word	0x0001ffff

080014fc <pyd1598_serin_add_blind_time>:
//Reg Val is 4 bits ...
//max_value 8sec =8000ms
//min value 0.5sec =500ms
uint8_t pyd1598_serin_add_blind_time(pyd1598_blind_time_t new_blind_time,
														pyd1598_serin_t *serin)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	0002      	movs	r2, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	1dfb      	adds	r3, r7, #7
 8001508:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800150a:	200f      	movs	r0, #15
 800150c:	183b      	adds	r3, r7, r0
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]

	new_blind_time &= 0x0F;
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	1dfa      	adds	r2, r7, #7
 8001516:	7812      	ldrb	r2, [r2, #0]
 8001518:	210f      	movs	r1, #15
 800151a:	400a      	ands	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
	serin->config.blind_time = new_blind_time;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	1dfa      	adds	r2, r7, #7
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	705a      	strb	r2, [r3, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3308      	adds	r3, #8
 800152a:	0019      	movs	r1, r3
 800152c:	0005      	movs	r5, r0
 800152e:	183c      	adds	r4, r7, r0
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <pyd1598_serin_add_blind_time+0x50>)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	7818      	ldrb	r0, [r3, #0]
 8001536:	230d      	movs	r3, #13
 8001538:	f000 f900 	bl	800173c <pyd1598_serin_add_to_datagram>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_BLIND_TIME,
											PYD1598_SHIFT_BLIND_TIME);
	return status;
 8001540:	197b      	adds	r3, r7, r5
 8001542:	781b      	ldrb	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	b004      	add	sp, #16
 800154a:	bdb0      	pop	{r4, r5, r7, pc}
 800154c:	01fe1fff 	.word	0x01fe1fff

08001550 <pyd1598_serin_add_pulse_counter>:

uint8_t pyd1598_serin_add_pulse_counter(pyd1598_pulse_counter_t pulse_counter,
														pyd1598_serin_t *serin)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	0002      	movs	r2, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800155e:	200f      	movs	r0, #15
 8001560:	183b      	adds	r3, r7, r0
 8001562:	2200      	movs	r2, #0
 8001564:	701a      	strb	r2, [r3, #0]

	pulse_counter &= 0x03;
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	1dfa      	adds	r2, r7, #7
 800156a:	7812      	ldrb	r2, [r2, #0]
 800156c:	2103      	movs	r1, #3
 800156e:	400a      	ands	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
	serin->config.pulse_counter = pulse_counter;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	1dfa      	adds	r2, r7, #7
 8001576:	7812      	ldrb	r2, [r2, #0]
 8001578:	709a      	strb	r2, [r3, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3308      	adds	r3, #8
 800157e:	0019      	movs	r1, r3
 8001580:	0005      	movs	r5, r0
 8001582:	183c      	adds	r4, r7, r0
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <pyd1598_serin_add_pulse_counter+0x50>)
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	7818      	ldrb	r0, [r3, #0]
 800158a:	230b      	movs	r3, #11
 800158c:	f000 f8d6 	bl	800173c <pyd1598_serin_add_to_datagram>
 8001590:	0003      	movs	r3, r0
 8001592:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_PULSE_COUNTER,
											PYD1598_SHIFT_PULSE_COUNTER);
	return status;
 8001594:	197b      	adds	r3, r7, r5
 8001596:	781b      	ldrb	r3, [r3, #0]
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bdb0      	pop	{r4, r5, r7, pc}
 80015a0:	01ffe7ff 	.word	0x01ffe7ff

080015a4 <pyd1598_serin_add_window_time>:
uint8_t pyd1598_serin_add_window_time(pyd1598_window_time_t window_time,
														pyd1598_serin_t *serin)
{
 80015a4:	b5b0      	push	{r4, r5, r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	0002      	movs	r2, r0
 80015ac:	6039      	str	r1, [r7, #0]
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80015b2:	200f      	movs	r0, #15
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]

	window_time &= 0x03;
 80015ba:	1dfb      	adds	r3, r7, #7
 80015bc:	1dfa      	adds	r2, r7, #7
 80015be:	7812      	ldrb	r2, [r2, #0]
 80015c0:	2103      	movs	r1, #3
 80015c2:	400a      	ands	r2, r1
 80015c4:	701a      	strb	r2, [r3, #0]
	serin->config.window_time = window_time;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	1dfa      	adds	r2, r7, #7
 80015ca:	7812      	ldrb	r2, [r2, #0]
 80015cc:	70da      	strb	r2, [r3, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	3308      	adds	r3, #8
 80015d2:	0019      	movs	r1, r3
 80015d4:	0005      	movs	r5, r0
 80015d6:	183c      	adds	r4, r7, r0
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <pyd1598_serin_add_window_time+0x50>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	7818      	ldrb	r0, [r3, #0]
 80015de:	2309      	movs	r3, #9
 80015e0:	f000 f8ac 	bl	800173c <pyd1598_serin_add_to_datagram>
 80015e4:	0003      	movs	r3, r0
 80015e6:	7023      	strb	r3, [r4, #0]
										PYD1598_MASK_WINDOW_TIME,
										PYD1598_SHIFT_WINDOW_TIME);
	return status;
 80015e8:	197b      	adds	r3, r7, r5
 80015ea:	781b      	ldrb	r3, [r3, #0]
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b004      	add	sp, #16
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	01fff9ff 	.word	0x01fff9ff

080015f8 <pyd1598_serin_add_operation_mode>:
uint8_t pyd1598_serin_add_operation_mode(pyd1598_op_mode_t new_op_mode,
														pyd1598_serin_t *serin)
{
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8001606:	200f      	movs	r0, #15
 8001608:	183b      	adds	r3, r7, r0
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	serin->config.op_mode = new_op_mode;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	1dfa      	adds	r2, r7, #7
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	711a      	strb	r2, [r3, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3308      	adds	r3, #8
 800161a:	0019      	movs	r1, r3
 800161c:	0005      	movs	r5, r0
 800161e:	183c      	adds	r4, r7, r0
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <pyd1598_serin_add_operation_mode+0x44>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	7818      	ldrb	r0, [r3, #0]
 8001626:	2307      	movs	r3, #7
 8001628:	f000 f888 	bl	800173c <pyd1598_serin_add_to_datagram>
 800162c:	0003      	movs	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_OPERATION_MODES,
											PYD1598_SHIFT_OPERATION_MODES);
	return status;
 8001630:	197b      	adds	r3, r7, r5
 8001632:	781b      	ldrb	r3, [r3, #0]
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bdb0      	pop	{r4, r5, r7, pc}
 800163c:	01fffe7f 	.word	0x01fffe7f

08001640 <pyd1598_serin_add_signal_source>:
uint8_t pyd1598_serin_add_signal_source(pyd1598_signal_source_t signal_source,
														pyd1598_serin_t *serin)
{
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	0002      	movs	r2, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800164e:	200f      	movs	r0, #15
 8001650:	183b      	adds	r3, r7, r0
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]

	signal_source &= 0x03;
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	1dfa      	adds	r2, r7, #7
 800165a:	7812      	ldrb	r2, [r2, #0]
 800165c:	2103      	movs	r1, #3
 800165e:	400a      	ands	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
	serin->config.signal_source = signal_source;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	1dfa      	adds	r2, r7, #7
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	715a      	strb	r2, [r3, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	3308      	adds	r3, #8
 800166e:	0019      	movs	r1, r3
 8001670:	0005      	movs	r5, r0
 8001672:	183c      	adds	r4, r7, r0
 8001674:	4a06      	ldr	r2, [pc, #24]	; (8001690 <pyd1598_serin_add_signal_source+0x50>)
 8001676:	1dfb      	adds	r3, r7, #7
 8001678:	7818      	ldrb	r0, [r3, #0]
 800167a:	2305      	movs	r3, #5
 800167c:	f000 f85e 	bl	800173c <pyd1598_serin_add_to_datagram>
 8001680:	0003      	movs	r3, r0
 8001682:	7023      	strb	r3, [r4, #0]
												&serin->conf_datagram,
												PYD1598_MASK_SIGNAL_SOURCE,
												PYD1598_SHIFT_SIGNAL_SOURCE);
	return status;
 8001684:	197b      	adds	r3, r7, r5
 8001686:	781b      	ldrb	r3, [r3, #0]
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bdb0      	pop	{r4, r5, r7, pc}
 8001690:	01ffff9f 	.word	0x01ffff9f

08001694 <pyd1598_serin_add_hpf_cutoff>:

uint8_t pyd1598_serin_add_hpf_cutoff(pyd1598_hpf_cutoff_t new_hpf_cutoff,
														pyd1598_serin_t *serin)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	0002      	movs	r2, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80016a2:	200f      	movs	r0, #15
 80016a4:	183b      	adds	r3, r7, r0
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]

	new_hpf_cutoff &= 0x03;
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	1dfa      	adds	r2, r7, #7
 80016ae:	7812      	ldrb	r2, [r2, #0]
 80016b0:	2103      	movs	r1, #3
 80016b2:	400a      	ands	r2, r1
 80016b4:	701a      	strb	r2, [r3, #0]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	1dfa      	adds	r2, r7, #7
 80016ba:	7812      	ldrb	r2, [r2, #0]
 80016bc:	719a      	strb	r2, [r3, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	3308      	adds	r3, #8
 80016c2:	0019      	movs	r1, r3
 80016c4:	0005      	movs	r5, r0
 80016c6:	183c      	adds	r4, r7, r0
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <pyd1598_serin_add_hpf_cutoff+0x50>)
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	7818      	ldrb	r0, [r3, #0]
 80016ce:	2302      	movs	r3, #2
 80016d0:	f000 f834 	bl	800173c <pyd1598_serin_add_to_datagram>
 80016d4:	0003      	movs	r3, r0
 80016d6:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_HPF_CUTOFF,
											PYD1598_SHIFT_HPF_CUTOFF);
	return status;
 80016d8:	197b      	adds	r3, r7, r5
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	b004      	add	sp, #16
 80016e2:	bdb0      	pop	{r4, r5, r7, pc}
 80016e4:	01fffffb 	.word	0x01fffffb

080016e8 <pyd1598_serin_add_count_mode>:

uint8_t pyd1598_serin_add_count_mode(pyd1598_count_mode_t new_count_mode,
														pyd1598_serin_t *serin)
{
 80016e8:	b5b0      	push	{r4, r5, r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	0002      	movs	r2, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80016f6:	200f      	movs	r0, #15
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]

	new_count_mode &= 0x03;
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	1dfa      	adds	r2, r7, #7
 8001702:	7812      	ldrb	r2, [r2, #0]
 8001704:	2103      	movs	r1, #3
 8001706:	400a      	ands	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
	serin->config.count_mode = new_count_mode;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	1dfa      	adds	r2, r7, #7
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	71da      	strb	r2, [r3, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3308      	adds	r3, #8
 8001716:	0019      	movs	r1, r3
 8001718:	0005      	movs	r5, r0
 800171a:	183c      	adds	r4, r7, r0
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <pyd1598_serin_add_count_mode+0x50>)
 800171e:	1dfb      	adds	r3, r7, #7
 8001720:	7818      	ldrb	r0, [r3, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	f000 f80a 	bl	800173c <pyd1598_serin_add_to_datagram>
 8001728:	0003      	movs	r3, r0
 800172a:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_COUNT_MODE,
											PYD1598_SHIFT_COUNT_MODE);
	return status;
 800172c:	197b      	adds	r3, r7, r5
 800172e:	781b      	ldrb	r3, [r3, #0]
}
 8001730:	0018      	movs	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	b004      	add	sp, #16
 8001736:	bdb0      	pop	{r4, r5, r7, pc}
 8001738:	01fffffd 	.word	0x01fffffd

0800173c <pyd1598_serin_add_to_datagram>:

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 800173c:	b590      	push	{r4, r7, lr}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	0019      	movs	r1, r3
 8001748:	240f      	movs	r4, #15
 800174a:	193b      	adds	r3, r7, r4
 800174c:	1c02      	adds	r2, r0, #0
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	200e      	movs	r0, #14
 8001752:	183b      	adds	r3, r7, r0
 8001754:	1c0a      	adds	r2, r1, #0
 8001756:	701a      	strb	r2, [r3, #0]
	uint32_t old_config = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
	uint32_t new_config = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	617b      	str	r3, [r7, #20]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	4013      	ands	r3, r2
 800176c:	617b      	str	r3, [r7, #20]

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 800176e:	193b      	adds	r3, r7, r4
 8001770:	781a      	ldrb	r2, [r3, #0]
 8001772:	183b      	adds	r3, r7, r0
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	409a      	lsls	r2, r3
 8001778:	0013      	movs	r3, r2
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

	//Adding data to the datagram copy
	new_config |= old_config;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]

	return 0;
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b007      	add	sp, #28
 8001796:	bd90      	pop	{r4, r7, pc}

08001798 <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	003b      	movs	r3, r7
 80017a0:	6018      	str	r0, [r3, #0]
 80017a2:	6059      	str	r1, [r3, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 80017a4:	003b      	movs	r3, r7
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	003b      	movs	r3, r7
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	0019      	movs	r1, r3
 80017b0:	f003 fa05 	bl	8004bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 80017b4:	003b      	movs	r3, r7
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	003b      	movs	r3, r7
 80017ba:	889b      	ldrh	r3, [r3, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	0019      	movs	r1, r3
 80017c0:	f003 f9fd 	bl	8004bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 80017c4:	003b      	movs	r3, r7
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	003b      	movs	r3, r7
 80017ca:	889b      	ldrh	r3, [r3, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	0019      	movs	r1, r3
 80017d0:	f003 f9f5 	bl	8004bbe <HAL_GPIO_WritePin>
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	003b      	movs	r3, r7
 80017e4:	6018      	str	r0, [r3, #0]
 80017e6:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 80017e8:	003b      	movs	r3, r7
 80017ea:	6818      	ldr	r0, [r3, #0]
 80017ec:	003b      	movs	r3, r7
 80017ee:	889b      	ldrh	r3, [r3, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	0019      	movs	r1, r3
 80017f4:	f003 f9e3 	bl	8004bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 80017f8:	003b      	movs	r3, r7
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	003b      	movs	r3, r7
 80017fe:	889b      	ldrh	r3, [r3, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	0019      	movs	r1, r3
 8001804:	f003 f9db 	bl	8004bbe <HAL_GPIO_WritePin>
}
 8001808:	46c0      	nop			; (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}

08001810 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	003b      	movs	r3, r7
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 800181c:	003b      	movs	r3, r7
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	003b      	movs	r3, r7
 8001822:	8899      	ldrh	r1, [r3, #4]
 8001824:	003b      	movs	r3, r7
 8001826:	799b      	ldrb	r3, [r3, #6]
 8001828:	b25b      	sxtb	r3, r3
 800182a:	001a      	movs	r2, r3
 800182c:	f001 f874 	bl	8002918 <HAL_DIRECT_LINK_conf_as_output>
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b002      	add	sp, #8
 8001836:	bd80      	pop	{r7, pc}

08001838 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	003b      	movs	r3, r7
 8001840:	6018      	str	r0, [r3, #0]
 8001842:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8001844:	003b      	movs	r3, r7
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	003b      	movs	r3, r7
 800184a:	8899      	ldrh	r1, [r3, #4]
 800184c:	003b      	movs	r3, r7
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	b25b      	sxtb	r3, r3
 8001852:	001a      	movs	r2, r3
 8001854:	f000 ffea 	bl	800282c <HAL_DIRECT_LINK_conf_as_input>
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}

08001860 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	003b      	movs	r3, r7
 8001868:	6018      	str	r0, [r3, #0]
 800186a:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 800186c:	003b      	movs	r3, r7
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	003b      	movs	r3, r7
 8001872:	8899      	ldrh	r1, [r3, #4]
 8001874:	003b      	movs	r3, r7
 8001876:	799b      	ldrb	r3, [r3, #6]
 8001878:	b25b      	sxtb	r3, r3
 800187a:	001a      	movs	r2, r3
 800187c:	f001 f80c 	bl	8002898 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8001880:	46c0      	nop			; (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	003b      	movs	r3, r7
 8001890:	6018      	str	r0, [r3, #0]
 8001892:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8001894:	003b      	movs	r3, r7
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	003b      	movs	r3, r7
 800189a:	889b      	ldrh	r3, [r3, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	0019      	movs	r1, r3
 80018a0:	f003 f98d 	bl	8004bbe <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 80018a4:	003b      	movs	r3, r7
 80018a6:	6818      	ldr	r0, [r3, #0]
 80018a8:	003b      	movs	r3, r7
 80018aa:	889b      	ldrh	r3, [r3, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	0019      	movs	r1, r3
 80018b0:	f003 f985 	bl	8004bbe <HAL_GPIO_WritePin>
}
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b002      	add	sp, #8
 80018ba:	bd80      	pop	{r7, pc}

080018bc <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	003b      	movs	r3, r7
 80018c4:	6018      	str	r0, [r3, #0]
 80018c6:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 80018c8:	003b      	movs	r3, r7
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	003b      	movs	r3, r7
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	0019      	movs	r1, r3
 80018d4:	f003 f973 	bl	8004bbe <HAL_GPIO_WritePin>
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}

080018e0 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	2608      	movs	r6, #8
 80018e8:	2418      	movs	r4, #24
 80018ea:	1935      	adds	r5, r6, r4
 80018ec:	2608      	movs	r6, #8
 80018ee:	19be      	adds	r6, r7, r6
 80018f0:	19ae      	adds	r6, r5, r6
 80018f2:	6030      	str	r0, [r6, #0]
 80018f4:	6071      	str	r1, [r6, #4]
 80018f6:	627a      	str	r2, [r7, #36]	; 0x24
 80018f8:	623b      	str	r3, [r7, #32]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;
 80018fa:	2017      	movs	r0, #23
 80018fc:	0026      	movs	r6, r4
 80018fe:	1983      	adds	r3, r0, r6
 8001900:	2208      	movs	r2, #8
 8001902:	4694      	mov	ip, r2
 8001904:	44bc      	add	ip, r7
 8001906:	4463      	add	r3, ip
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 800190c:	2108      	movs	r1, #8
 800190e:	198b      	adds	r3, r1, r6
 8001910:	2208      	movs	r2, #8
 8001912:	4694      	mov	ip, r2
 8001914:	44bc      	add	ip, r7
 8001916:	4463      	add	r3, ip
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	198b      	adds	r3, r1, r6
 800191c:	2108      	movs	r1, #8
 800191e:	468c      	mov	ip, r1
 8001920:	44bc      	add	ip, r7
 8001922:	4463      	add	r3, ip
 8001924:	889b      	ldrh	r3, [r3, #4]
 8001926:	0034      	movs	r4, r6
 8001928:	1981      	adds	r1, r0, r6
 800192a:	2008      	movs	r0, #8
 800192c:	1838      	adds	r0, r7, r0
 800192e:	180e      	adds	r6, r1, r0
 8001930:	0019      	movs	r1, r3
 8001932:	0010      	movs	r0, r2
 8001934:	f003 f926 	bl	8004b84 <HAL_GPIO_ReadPin>
 8001938:	0003      	movs	r3, r0
 800193a:	7033      	strb	r3, [r6, #0]

	if(pin_value == GPIO_PIN_SET)
 800193c:	2017      	movs	r0, #23
 800193e:	0026      	movs	r6, r4
 8001940:	1983      	adds	r3, r0, r6
 8001942:	2208      	movs	r2, #8
 8001944:	4694      	mov	ip, r2
 8001946:	44bc      	add	ip, r7
 8001948:	4463      	add	r3, ip
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d110      	bne.n	8001972 <pyd1598_direct_link_read_pin+0x92>
	{
		*buffer  |= readout_mask;
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	6859      	ldr	r1, [r3, #4]
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	0006      	movs	r6, r0
 800195e:	4316      	orrs	r6, r2
 8001960:	613e      	str	r6, [r7, #16]
 8001962:	4319      	orrs	r1, r3
 8001964:	6179      	str	r1, [r7, #20]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	6939      	ldr	r1, [r7, #16]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6019      	str	r1, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e020      	b.n	80019b4 <pyd1598_direct_link_read_pin+0xd4>
	}
	else if(pin_value == GPIO_PIN_RESET)
 8001972:	2317      	movs	r3, #23
 8001974:	2218      	movs	r2, #24
 8001976:	189b      	adds	r3, r3, r2
 8001978:	2208      	movs	r2, #8
 800197a:	4694      	mov	ip, r2
 800197c:	44bc      	add	ip, r7
 800197e:	4463      	add	r3, ip
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d115      	bne.n	80019b2 <pyd1598_direct_link_read_pin+0xd2>
	{
		*buffer  &= ~readout_mask;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4919      	ldr	r1, [pc, #100]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 800198e:	6808      	ldr	r0, [r1, #0]
 8001990:	6849      	ldr	r1, [r1, #4]
 8001992:	43c6      	mvns	r6, r0
 8001994:	61be      	str	r6, [r7, #24]
 8001996:	43c9      	mvns	r1, r1
 8001998:	61f9      	str	r1, [r7, #28]
 800199a:	69b9      	ldr	r1, [r7, #24]
 800199c:	4011      	ands	r1, r2
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	69f9      	ldr	r1, [r7, #28]
 80019a2:	4019      	ands	r1, r3
 80019a4:	60f9      	str	r1, [r7, #12]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	6019      	str	r1, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	e000      	b.n	80019b4 <pyd1598_direct_link_read_pin+0xd4>
	}
	else
	{
		__NOP();
 80019b2:	46c0      	nop			; (mov r8, r8)
	}

	readout_mask = (readout_mask >> 1);
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	07d9      	lsls	r1, r3, #31
 80019bc:	0850      	lsrs	r0, r2, #1
 80019be:	6038      	str	r0, [r7, #0]
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	4308      	orrs	r0, r1
 80019c4:	6038      	str	r0, [r7, #0]
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 80019cc:	6839      	ldr	r1, [r7, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6019      	str	r1, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]

	if(readout_mask == ((uint64_t) 0))
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0011      	movs	r1, r2
 80019dc:	4319      	orrs	r1, r3
 80019de:	d104      	bne.n	80019ea <pyd1598_direct_link_read_pin+0x10a>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 80019e0:	4904      	ldr	r1, [pc, #16]	; (80019f4 <pyd1598_direct_link_read_pin+0x114>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	600a      	str	r2, [r1, #0]
 80019e8:	604b      	str	r3, [r1, #4]
	}
	return 0;
 80019ea:	2300      	movs	r3, #0

}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b00f      	add	sp, #60	; 0x3c
 80019f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f4:	20000000 	.word	0x20000000

080019f8 <relay_setup>:
#include "BoardSupport/relay_l114fl_drv8210.h"


uint8_t relay_setup(relay_t *relay, relay_gpio_t hardware_output_1,
												relay_gpio_t hardware_output_2)
{
 80019f8:	b082      	sub	sp, #8
 80019fa:	b590      	push	{r4, r7, lr}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	60f8      	str	r0, [r7, #12]
 8001a02:	1d38      	adds	r0, r7, #4
 8001a04:	6001      	str	r1, [r0, #0]
 8001a06:	6042      	str	r2, [r0, #4]
 8001a08:	2204      	movs	r2, #4
 8001a0a:	2418      	movs	r4, #24
 8001a0c:	1912      	adds	r2, r2, r4
 8001a0e:	2108      	movs	r1, #8
 8001a10:	468c      	mov	ip, r1
 8001a12:	44bc      	add	ip, r7
 8001a14:	4462      	add	r2, ip
 8001a16:	6013      	str	r3, [r2, #0]

	relay->hardware_output_1 = hardware_output_1;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	1d3a      	adds	r2, r7, #4
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	ca03      	ldmia	r2!, {r0, r1}
 8001a20:	c303      	stmia	r3!, {r0, r1}
	relay->hardware_output_2 = hardware_output_2;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2204      	movs	r2, #4
 8001a26:	1912      	adds	r2, r2, r4
 8001a28:	2108      	movs	r1, #8
 8001a2a:	468c      	mov	ip, r1
 8001a2c:	44bc      	add	ip, r7
 8001a2e:	4462      	add	r2, ip
 8001a30:	330c      	adds	r3, #12
 8001a32:	ca03      	ldmia	r2!, {r0, r1}
 8001a34:	c303      	stmia	r3!, {r0, r1}
	relay_deenergize(relay);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 f984 	bl	8001d46 <relay_deenergize>
	relay->relay_status = RELAY_OFF;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
	relay->fsm_run_on = RELAY_RUN_FALSE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2221      	movs	r2, #33	; 0x21
 8001a48:	2101      	movs	r1, #1
 8001a4a:	5499      	strb	r1, [r3, r2]
	relay->fsm_run_off = RELAY_RUN_FALSE;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2222      	movs	r2, #34	; 0x22
 8001a50:	2101      	movs	r1, #1
 8001a52:	5499      	strb	r1, [r3, r2]
	relay->fsm_pulse_counts = 1;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2201      	movs	r2, #1
 8001a58:	619a      	str	r2, [r3, #24]
	return 0;
 8001a5a:	2300      	movs	r3, #0

}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b005      	add	sp, #20
 8001a62:	bc90      	pop	{r4, r7}
 8001a64:	bc08      	pop	{r3}
 8001a66:	b002      	add	sp, #8
 8001a68:	4718      	bx	r3

08001a6a <relay_on_pulse_fsm>:
uint8_t relay_on_pulse_fsm(relay_t *relay)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2221      	movs	r2, #33	; 0x21
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d111      	bne.n	8001aa0 <relay_on_pulse_fsm+0x36>
		(relay->fsm_run_off != RELAY_RUN_TRUE) )
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2222      	movs	r2, #34	; 0x22
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
	if( (relay->fsm_run_on == RELAY_RUN_TRUE) &&
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <relay_on_pulse_fsm+0x36>
	{
		relay_pulse_fsm(relay, RELAY_ON);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f000 f89c 	bl	8001bc8 <relay_pulse_fsm>

		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7d1b      	ldrb	r3, [r3, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d103      	bne.n	8001aa0 <relay_on_pulse_fsm+0x36>
		{
			relay->fsm_run_on = RELAY_RUN_FALSE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2221      	movs	r2, #33	; 0x21
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <relay_off_pulse_fsm>:

uint8_t relay_off_pulse_fsm(relay_t *relay)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2222      	movs	r2, #34	; 0x22
 8001ab6:	5c9b      	ldrb	r3, [r3, r2]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d111      	bne.n	8001ae0 <relay_off_pulse_fsm+0x36>
			(relay->fsm_run_on != RELAY_RUN_TRUE) )
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2221      	movs	r2, #33	; 0x21
 8001ac0:	5c9b      	ldrb	r3, [r3, r2]
	if( (relay->fsm_run_off == RELAY_RUN_TRUE) &&
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00c      	beq.n	8001ae0 <relay_off_pulse_fsm+0x36>
	{
		relay_pulse_fsm(relay, RELAY_OFF);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2100      	movs	r1, #0
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f87c 	bl	8001bc8 <relay_pulse_fsm>

		if(relay->fsm_status == RELAY_STATE_STATUS_READY)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d103      	bne.n	8001ae0 <relay_off_pulse_fsm+0x36>
		{
			relay->fsm_run_off = RELAY_RUN_FALSE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2222      	movs	r2, #34	; 0x22
 8001adc:	2101      	movs	r1, #1
 8001ade:	5499      	strb	r1, [r3, r2]
		}
	}

	return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b002      	add	sp, #8
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <relay_ask_off_pulse_fsm>:


uint8_t relay_ask_off_pulse_fsm(relay_t *relay)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001af2:	200f      	movs	r0, #15
 8001af4:	183b      	adds	r3, r7, r0
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	if(relay->fsm_run_off == RELAY_RUN_FALSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2222      	movs	r2, #34	; 0x22
 8001afe:	5c9b      	ldrb	r3, [r3, r2]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d112      	bne.n	8001b2a <relay_ask_off_pulse_fsm+0x40>
	{
		relay->fsm_run_on = RELAY_RUN_FALSE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2221      	movs	r2, #33	; 0x21
 8001b08:	2101      	movs	r1, #1
 8001b0a:	5499      	strb	r1, [r3, r2]
		relay->fsm_run_off = RELAY_RUN_TRUE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2222      	movs	r2, #34	; 0x22
 8001b10:	2100      	movs	r1, #0
 8001b12:	5499      	strb	r1, [r3, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2223      	movs	r2, #35	; 0x23
 8001b18:	2100      	movs	r1, #0
 8001b1a:	5499      	strb	r1, [r3, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	2100      	movs	r1, #0
 8001b22:	5499      	strb	r1, [r3, r2]
		status = 0;
 8001b24:	183b      	adds	r3, r7, r0
 8001b26:	2200      	movs	r2, #0
 8001b28:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8001b2a:	230f      	movs	r3, #15
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
}
 8001b30:	0018      	movs	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b004      	add	sp, #16
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <relay_ask_on_pulse_fsm>:
uint8_t relay_ask_on_pulse_fsm(relay_t *relay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
//		status = 1;
//	}


	//TODO: (high) Test this change (conditional) intensively
	if(relay->fsm_run_on == RELAY_RUN_FALSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2221      	movs	r2, #33	; 0x21
 8001b4c:	5c9b      	ldrb	r3, [r3, r2]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10f      	bne.n	8001b72 <relay_ask_on_pulse_fsm+0x3a>
	{
		relay->fsm_run_on = RELAY_RUN_TRUE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2221      	movs	r2, #33	; 0x21
 8001b56:	2100      	movs	r1, #0
 8001b58:	5499      	strb	r1, [r3, r2]
		relay->fsm_run_off = RELAY_RUN_FALSE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2222      	movs	r2, #34	; 0x22
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]
		relay->fsm_init = RELAY_INIT_TRUE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2223      	movs	r2, #35	; 0x23
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]
		relay->fsm_state = RELAY_STATE_IDLE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	2100      	movs	r1, #0
 8001b70:	5499      	strb	r1, [r3, r2]
	}
	return status;
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b004      	add	sp, #16
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <relay_check_init_fsm>:
uint8_t relay_check_init_fsm(relay_t relay, relay_fsm_init_t *init)
{
 8001b80:	b084      	sub	sp, #16
 8001b82:	b5b0      	push	{r4, r5, r7, lr}
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	250c      	movs	r5, #12
 8001b88:	1d2c      	adds	r4, r5, #4
 8001b8a:	19e4      	adds	r4, r4, r7
 8001b8c:	6020      	str	r0, [r4, #0]
 8001b8e:	6061      	str	r1, [r4, #4]
 8001b90:	60a2      	str	r2, [r4, #8]
 8001b92:	60e3      	str	r3, [r4, #12]
	*init = relay.fsm_init;
 8001b94:	1d2b      	adds	r3, r5, #4
 8001b96:	19db      	adds	r3, r3, r7
 8001b98:	2223      	movs	r2, #35	; 0x23
 8001b9a:	5c9a      	ldrb	r2, [r3, r2]
 8001b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9e:	701a      	strb	r2, [r3, #0]
	return 0;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bcb0      	pop	{r4, r5, r7}
 8001ba8:	bc08      	pop	{r3}
 8001baa:	b004      	add	sp, #16
 8001bac:	4718      	bx	r3

08001bae <relay_acknowledge_init_fsm>:

uint8_t relay_acknowledge_init_fsm(relay_t *relay)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
	relay->fsm_init = RELAY_INIT_FALSE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2223      	movs	r2, #35	; 0x23
 8001bba:	2101      	movs	r1, #1
 8001bbc:	5499      	strb	r1, [r3, r2]
	return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b002      	add	sp, #8
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <relay_pulse_fsm>:



uint8_t relay_pulse_fsm(relay_t *relay, relay_status_t new_status)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	000a      	movs	r2, r1
 8001bd2:	1cfb      	adds	r3, r7, #3
 8001bd4:	701a      	strb	r2, [r3, #0]
	//TODO: (high) check if the implementation of this FSM is necessary

	relay_fsm_state_t state = relay->fsm_state;
 8001bd6:	201f      	movs	r0, #31
 8001bd8:	183b      	adds	r3, r7, r0
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	2120      	movs	r1, #32
 8001bde:	5c52      	ldrb	r2, [r2, r1]
 8001be0:	701a      	strb	r2, [r3, #0]
//	relay_fsm_init_t fsm_init = relay->fsm_init;
	uint32_t fsm_pulse_counts = relay->fsm_pulse_counts;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	613b      	str	r3, [r7, #16]
	uint32_t fsm_pulse_idx = relay->fsm_pulse_idx;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	61bb      	str	r3, [r7, #24]
	relay_fsm_status_t fsm_status = relay->fsm_status;
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	7d12      	ldrb	r2, [r2, #20]
 8001bf6:	701a      	strb	r2, [r3, #0]
	relay_fsm_init_t fsm_init = relay->fsm_init;
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	2123      	movs	r1, #35	; 0x23
 8001c00:	5c52      	ldrb	r2, [r2, r1]
 8001c02:	701a      	strb	r2, [r3, #0]
//	relay_status_t relay_status = relay->relay_status;
//	relay_status_t new_relay_status = relay->new_relay_status;


	switch(state)
 8001c04:	183b      	adds	r3, r7, r0
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d035      	beq.n	8001c78 <relay_pulse_fsm+0xb0>
 8001c0c:	dc41      	bgt.n	8001c92 <relay_pulse_fsm+0xca>
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <relay_pulse_fsm+0x50>
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d01e      	beq.n	8001c54 <relay_pulse_fsm+0x8c>
			fsm_status = RELAY_STATE_STATUS_READY;
			state = RELAY_STATE_IDLE;
			break;
		default:

			break;
 8001c16:	e03c      	b.n	8001c92 <relay_pulse_fsm+0xca>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8001c18:	2317      	movs	r3, #23
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
			if(new_status == RELAY_ON)
 8001c20:	1cfb      	adds	r3, r7, #3
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d104      	bne.n	8001c32 <relay_pulse_fsm+0x6a>
				relay_on(relay);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 f84d 	bl	8001cca <relay_on>
 8001c30:	e003      	b.n	8001c3a <relay_pulse_fsm+0x72>
				relay_off(relay);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	0018      	movs	r0, r3
 8001c36:	f000 f867 	bl	8001d08 <relay_off>
			if(fsm_pulse_counts == 0)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d104      	bne.n	8001c4a <relay_pulse_fsm+0x82>
				state = RELAY_STATE_DEENERGIZING;
 8001c40:	231f      	movs	r3, #31
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	2203      	movs	r2, #3
 8001c46:	701a      	strb	r2, [r3, #0]
			break;
 8001c48:	e026      	b.n	8001c98 <relay_pulse_fsm+0xd0>
				state = RELAY_STATE_WAIT;
 8001c4a:	231f      	movs	r3, #31
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2202      	movs	r2, #2
 8001c50:	701a      	strb	r2, [r3, #0]
			break;
 8001c52:	e021      	b.n	8001c98 <relay_pulse_fsm+0xd0>
			fsm_status = RELAY_STATE_STATUS_BUSY;
 8001c54:	2317      	movs	r3, #23
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	2201      	movs	r2, #1
 8001c5a:	701a      	strb	r2, [r3, #0]
			fsm_pulse_idx++;
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d915      	bls.n	8001c96 <relay_pulse_fsm+0xce>
				state = RELAY_STATE_DEENERGIZING;
 8001c6a:	231f      	movs	r3, #31
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2203      	movs	r2, #3
 8001c70:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61bb      	str	r3, [r7, #24]
			break;
 8001c76:	e00e      	b.n	8001c96 <relay_pulse_fsm+0xce>
			relay_deenergize(relay);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 f863 	bl	8001d46 <relay_deenergize>
			fsm_status = RELAY_STATE_STATUS_READY;
 8001c80:	2317      	movs	r3, #23
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
			state = RELAY_STATE_IDLE;
 8001c88:	231f      	movs	r3, #31
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
			break;
 8001c90:	e002      	b.n	8001c98 <relay_pulse_fsm+0xd0>
			break;
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	e000      	b.n	8001c98 <relay_pulse_fsm+0xd0>
			break;
 8001c96:	46c0      	nop			; (mov r8, r8)
	}

	relay->fsm_state = state;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	221f      	movs	r2, #31
 8001c9c:	18ba      	adds	r2, r7, r2
 8001c9e:	2120      	movs	r1, #32
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	545a      	strb	r2, [r3, r1]
	relay->fsm_init = fsm_init;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	18ba      	adds	r2, r7, r2
 8001caa:	2123      	movs	r1, #35	; 0x23
 8001cac:	7812      	ldrb	r2, [r2, #0]
 8001cae:	545a      	strb	r2, [r3, r1]
	relay->fsm_pulse_idx = fsm_pulse_idx;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	61da      	str	r2, [r3, #28]
	relay->fsm_status = fsm_status;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2217      	movs	r2, #23
 8001cba:	18ba      	adds	r2, r7, r2
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	751a      	strb	r2, [r3, #20]

	return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b008      	add	sp, #32
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <relay_on>:

uint8_t relay_on(relay_t *relay)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6858      	ldr	r0, [r3, #4]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	891b      	ldrh	r3, [r3, #8]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	0019      	movs	r1, r3
 8001cde:	f002 ff6e 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68d8      	ldr	r0, [r3, #12]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	8a1b      	ldrh	r3, [r3, #16]
 8001cea:	2201      	movs	r2, #1
 8001cec:	0019      	movs	r1, r3
 8001cee:	f002 ff66 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_SET);

	relay->relay_status = RELAY_ON;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_ON;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	705a      	strb	r2, [r3, #1]
	return 0;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	0018      	movs	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	b002      	add	sp, #8
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <relay_off>:

uint8_t relay_off(relay_t *relay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6858      	ldr	r0, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	891b      	ldrh	r3, [r3, #8]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	f002 ff4f 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68d8      	ldr	r0, [r3, #12]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	8a1b      	ldrh	r3, [r3, #16]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	f002 ff47 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->relay_status = RELAY_OFF;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	relay->power_status = RELAY_POWER_STATUS_ENERGIZED_OFF;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
	return 0;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	0018      	movs	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	b002      	add	sp, #8
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <relay_deenergize>:


uint8_t relay_deenergize(relay_t *relay)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(relay->hardware_output_1.port,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6858      	ldr	r0, [r3, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	0019      	movs	r1, r3
 8001d5a:	f002 ff30 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(relay->hardware_output_2.port,
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68d8      	ldr	r0, [r3, #12]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	8a1b      	ldrh	r3, [r3, #16]
 8001d66:	2200      	movs	r2, #0
 8001d68:	0019      	movs	r1, r3
 8001d6a:	f002 ff28 	bl	8004bbe <HAL_GPIO_WritePin>
						relay->hardware_output_2.pin,
						GPIO_PIN_RESET);

	relay->power_status = RELAY_POWER_STATUS_DEENERGIZED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	705a      	strb	r2, [r3, #1]
	return 0;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	0018      	movs	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	b002      	add	sp, #8
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <switch_selector_setup>:
#include "BoardSupport/switch_selector.h"

uint8_t switch_selector_setup(switch_selector_t *switch_selector,
								switch_selector_gpio_t *switch_selector_gpio,
								uint8_t switch_size)
{
 8001d7e:	b5b0      	push	{r4, r5, r7, lr}
 8001d80:	b088      	sub	sp, #32
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	701a      	strb	r2, [r3, #0]

	uint8_t status = 0;
 8001d8c:	231f      	movs	r3, #31
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8001d94:	231e      	movs	r3, #30
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]



	if(switch_size > 32)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d901      	bls.n	8001da8 <switch_selector_setup+0x2a>
	{
		return 2;
 8001da4:	2302      	movs	r3, #2
 8001da6:	e050      	b.n	8001e4a <switch_selector_setup+0xcc>
	}


	switch_selector->value = 0;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
	switch_selector->switch_size = switch_size;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1dfa      	adds	r2, r7, #7
 8001db2:	7812      	ldrb	r2, [r2, #0]
 8001db4:	711a      	strb	r2, [r3, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f004 fb43 	bl	8006448 <malloc>
 8001dc2:	0003      	movs	r3, r0
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]
	uint32_t value;
	switch_selector_status_t pin_status;

	for(idx = 0; idx < switch_size; idx++)
 8001dca:	231e      	movs	r3, #30
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e030      	b.n	8001e36 <switch_selector_setup+0xb8>
	{
		if((switch_selector_gpio + idx) != NULL)
 8001dd4:	201e      	movs	r0, #30
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	68ba      	ldr	r2, [r7, #8]
 8001dde:	18d3      	adds	r3, r2, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d012      	beq.n	8001e0a <switch_selector_setup+0x8c>
		{
//			switch_selector->switch_selector_gpio[idx] = switch_selector_gpio[idx];
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 8001de4:	183b      	adds	r3, r7, r0
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	18d1      	adds	r1, r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	000a      	movs	r2, r1
 8001dfc:	ca03      	ldmia	r2!, {r0, r1}
 8001dfe:	c303      	stmia	r3!, {r0, r1}

			status = 0;
 8001e00:	231f      	movs	r3, #31
 8001e02:	18fb      	adds	r3, r7, r3
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e004      	b.n	8001e14 <switch_selector_setup+0x96>
		}
		else
		{
			status = 1;
 8001e0a:	231f      	movs	r3, #31
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2201      	movs	r2, #1
 8001e10:	701a      	strb	r2, [r3, #0]
			break;
 8001e12:	e017      	b.n	8001e44 <switch_selector_setup+0xc6>
		}

		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8001e14:	2318      	movs	r3, #24
 8001e16:	18fc      	adds	r4, r7, r3
 8001e18:	2317      	movs	r3, #23
 8001e1a:	18fa      	adds	r2, r7, r3
 8001e1c:	251e      	movs	r5, #30
 8001e1e:	197b      	adds	r3, r7, r5
 8001e20:	7819      	ldrb	r1, [r3, #0]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	0023      	movs	r3, r4
 8001e26:	f000 f814 	bl	8001e52 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8001e2a:	0029      	movs	r1, r5
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	781a      	ldrb	r2, [r3, #0]
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	3201      	adds	r2, #1
 8001e34:	701a      	strb	r2, [r3, #0]
 8001e36:	231e      	movs	r3, #30
 8001e38:	18fa      	adds	r2, r7, r3
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	7812      	ldrb	r2, [r2, #0]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d3c7      	bcc.n	8001dd4 <switch_selector_setup+0x56>

	}

	return status;
 8001e44:	231f      	movs	r3, #31
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	781b      	ldrb	r3, [r3, #0]

}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b008      	add	sp, #32
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}

08001e52 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8001e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e54:	b087      	sub	sp, #28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
 8001e5e:	250b      	movs	r5, #11
 8001e60:	197b      	adds	r3, r7, r5
 8001e62:	1c0a      	adds	r2, r1, #0
 8001e64:	701a      	strb	r2, [r3, #0]
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;
 8001e66:	2301      	movs	r3, #1
 8001e68:	617b      	str	r3, [r7, #20]

	switch_mask <<= pin;
 8001e6a:	197b      	adds	r3, r7, r5
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	197b      	adds	r3, r7, r5
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	18d3      	adds	r3, r2, r3
 8001e82:	6818      	ldr	r0, [r3, #0]
							(switch_selector->switch_selector_gpio + pin)->pin);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	197b      	adds	r3, r7, r5
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	18d3      	adds	r3, r2, r3
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8001e90:	889b      	ldrh	r3, [r3, #4]
 8001e92:	2613      	movs	r6, #19
 8001e94:	19bc      	adds	r4, r7, r6
 8001e96:	0019      	movs	r1, r3
 8001e98:	f002 fe74 	bl	8004b84 <HAL_GPIO_ReadPin>
 8001e9c:	0003      	movs	r3, r0
 8001e9e:	7023      	strb	r3, [r4, #0]

	if(pin_value == GPIO_PIN_SET)
 8001ea0:	19bb      	adds	r3, r7, r6
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10e      	bne.n	8001ec6 <switch_selector_read_bit+0x74>
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	197b      	adds	r3, r7, r5
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	18d3      	adds	r3, r2, r3
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	719a      	strb	r2, [r3, #6]

		switch_selector->value |= switch_mask;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	e00f      	b.n	8001ee6 <switch_selector_read_bit+0x94>
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	230b      	movs	r3, #11
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	18d3      	adds	r3, r2, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	43d2      	mvns	r2, r2
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	609a      	str	r2, [r3, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	230b      	movs	r3, #11
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	18d3      	adds	r3, r2, r3
 8001ef4:	799a      	ldrb	r2, [r3, #6]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	701a      	strb	r2, [r3, #0]

	*value = switch_selector->value;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	601a      	str	r2, [r3, #0]

	return 0;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b007      	add	sp, #28
 8001f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f0c <nutone_setup>:

void nutone_setup(nutone_t *exhaust_fan, nutone_relay_handler_t *lights,
											nutone_relay_handler_t *fan,
											deadline_timer_t *ctrl_timer,
											deadline_timer_t *vyv_timeoff)
{
 8001f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0e:	b08f      	sub	sp, #60	; 0x3c
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]

	timer_clock_t deadline;


	exhaust_fan->lights = lights;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	601a      	str	r2, [r3, #0]
	exhaust_fan->fan = fan;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	605a      	str	r2, [r3, #4]

	exhaust_fan->ctrl_timer = ctrl_timer;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	609a      	str	r2, [r3, #8]
	deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 8001f2c:	2610      	movs	r6, #16
 8001f2e:	19bb      	adds	r3, r7, r6
 8001f30:	2264      	movs	r2, #100	; 0x64
 8001f32:	609a      	str	r2, [r3, #8]
	deadline_timer_setup(exhaust_fan->ctrl_timer, deadline);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	689d      	ldr	r5, [r3, #8]
 8001f38:	19bc      	adds	r4, r7, r6
 8001f3a:	466b      	mov	r3, sp
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	0023      	movs	r3, r4
 8001f40:	3308      	adds	r3, #8
 8001f42:	2210      	movs	r2, #16
 8001f44:	0019      	movs	r1, r3
 8001f46:	f004 fb83 	bl	8006650 <memcpy>
 8001f4a:	6822      	ldr	r2, [r4, #0]
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	0028      	movs	r0, r5
 8001f50:	f000 faba 	bl	80024c8 <deadline_timer_setup>
//	exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;

	exhaust_fan->vyv_timeoff = vyv_timeoff;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f58:	60da      	str	r2, [r3, #12]
	deadline.msec = NUTONE_VYV_TIMEOUT;
 8001f5a:	19bb      	adds	r3, r7, r6
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <nutone_setup+0xa0>)
 8001f5e:	609a      	str	r2, [r3, #8]
	deadline_timer_setup(exhaust_fan->vyv_timeoff, deadline);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	68dd      	ldr	r5, [r3, #12]
 8001f64:	19bc      	adds	r4, r7, r6
 8001f66:	466b      	mov	r3, sp
 8001f68:	0018      	movs	r0, r3
 8001f6a:	0023      	movs	r3, r4
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2210      	movs	r2, #16
 8001f70:	0019      	movs	r1, r3
 8001f72:	f004 fb6d 	bl	8006650 <memcpy>
 8001f76:	6822      	ldr	r2, [r4, #0]
 8001f78:	6863      	ldr	r3, [r4, #4]
 8001f7a:	0028      	movs	r0, r5
 8001f7c:	f000 faa4 	bl	80024c8 <deadline_timer_setup>
//	exhaust_fan->vyv_timeoff->deadline.msec = NUTONE_VYV_TIMEOUT;



	exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2202      	movs	r2, #2
 8001f84:	75da      	strb	r2, [r3, #23]
	exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	759a      	strb	r2, [r3, #22]

	exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	755a      	strb	r2, [r3, #21]
	exhaust_fan->light_on_pulses_idx = 0;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	751a      	strb	r2, [r3, #20]

	exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	74da      	strb	r2, [r3, #19]
	exhaust_fan->command = NUTONE_CMD_NONE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	749a      	strb	r2, [r3, #18]


}
 8001fa4:	46c0      	nop			; (mov r8, r8)
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b00b      	add	sp, #44	; 0x2c
 8001faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fac:	00002710 	.word	0x00002710

08001fb0 <nutone_fsm>:



uint8_t nutone_fsm(nutone_t *exhaust_fan)
{
 8001fb0:	b590      	push	{r4, r7, lr}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

//	nutone_states_e fsm_state = exhaust_fan->fsm_state;

	deadline_timer_expired_t is_expired = TIMER_EXPIRED_FALSE;
 8001fb8:	230f      	movs	r3, #15
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t is_expired_vyv = TIMER_EXPIRED_FALSE;
 8001fc0:	230e      	movs	r3, #14
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
//	}




	switch(exhaust_fan->fsm_state)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1b      	ldrb	r3, [r3, #16]
 8001fcc:	2b11      	cmp	r3, #17
 8001fce:	d900      	bls.n	8001fd2 <nutone_fsm+0x22>
 8001fd0:	e20c      	b.n	80023ec <nutone_fsm+0x43c>
 8001fd2:	009a      	lsls	r2, r3, #2
 8001fd4:	4bd9      	ldr	r3, [pc, #868]	; (800233c <nutone_fsm+0x38c>)
 8001fd6:	18d3      	adds	r3, r2, r3
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	469f      	mov	pc, r3
	{
		case NUTONE_STE_IDLE:
			nutone_select_state(exhaust_fan);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0018      	movs	r0, r3
 8001fe0:	f000 fa1a 	bl	8002418 <nutone_select_state>
			break;
 8001fe4:	e202      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_FAN_SET_ON:
			relay_ask_on_pulse_fsm(exhaust_fan->fan->relay);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7ff fda3 	bl	8001b38 <relay_ask_on_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_ON;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	741a      	strb	r2, [r3, #16]
			break;
 8001ff8:	e1f8      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_FAN_TURNING_ON:

			if(exhaust_fan->fan->relay->fsm_run_on == RELAY_RUN_FALSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2221      	movs	r2, #33	; 0x21
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d000      	beq.n	800200a <nutone_fsm+0x5a>
 8002008:	e1e5      	b.n	80023d6 <nutone_fsm+0x426>
			{
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	74da      	strb	r2, [r3, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	741a      	strb	r2, [r3, #16]
			}
			break;
 8002016:	e1de      	b.n	80023d6 <nutone_fsm+0x426>
		case NUTONE_STE_FAN_SET_OFF:
			relay_ask_off_pulse_fsm(exhaust_fan->fan->relay);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff fd63 	bl	8001aea <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_FAN_TURNING_OFF;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2204      	movs	r2, #4
 8002028:	741a      	strb	r2, [r3, #16]
			break;
 800202a:	e1df      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_FAN_TURNING_OFF:

			if(exhaust_fan->fan->relay->fsm_run_off == RELAY_RUN_FALSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2222      	movs	r2, #34	; 0x22
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d000      	beq.n	800203c <nutone_fsm+0x8c>
 800203a:	e1ce      	b.n	80023da <nutone_fsm+0x42a>
			{
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	74da      	strb	r2, [r3, #19]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	741a      	strb	r2, [r3, #16]
			}

			break;
 8002048:	e1c7      	b.n	80023da <nutone_fsm+0x42a>
		case NUTONE_STE_WHITE_LIGHT_SET_ON:

			exhaust_fan->light_on_pulses = NUTONE_WHITE_LIGHT_ON_PULSES;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2203      	movs	r2, #3
 800204e:	755a      	strb	r2, [r3, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	751a      	strb	r2, [r3, #20]

			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	0018      	movs	r0, r3
 800205c:	f000 faad 	bl	80025ba <deadline_timer_set_initial_time>

			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	759a      	strb	r2, [r3, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	75da      	strb	r2, [r3, #23]

			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2264      	movs	r2, #100	; 0x64
 8002072:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2206      	movs	r2, #6
 8002078:	741a      	strb	r2, [r3, #16]
			break;
 800207a:	e1b7      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_WHITE_LIGHT_ON:
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff fd58 	bl	8001b38 <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 fa94 	bl	80025ba <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2208      	movs	r2, #8
 8002096:	741a      	strb	r2, [r3, #16]

			break;
 8002098:	e1a8      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_WHITE_LIGHT_OFF:
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff fd22 	bl	8001aea <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fa85 	bl	80025ba <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_TURNING_ON;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2208      	movs	r2, #8
 80020b4:	741a      	strb	r2, [r3, #16]

			break;
 80020b6:	e199      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_WHITE_LIGHT_TURNING_ON:

			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	240f      	movs	r4, #15
 80020be:	193a      	adds	r2, r7, r4
 80020c0:	0011      	movs	r1, r2
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 fa42 	bl	800254c <deadline_timer_check>

			if(is_expired != TIMER_EXPIRED_TRUE)
 80020c8:	193b      	adds	r3, r7, r4
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d001      	beq.n	80020d4 <nutone_fsm+0x124>
			{
				return 0;//NO state change no variable update needed.
 80020d0:	2300      	movs	r3, #0
 80020d2:	e18c      	b.n	80023ee <nutone_fsm+0x43e>
			}

			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d11e      	bne.n	800211e <nutone_fsm+0x16e>
			{
				//Waiting for the relay state machine to finish
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2221      	movs	r2, #33	; 0x21
 80020e8:	5c9b      	ldrb	r3, [r3, r2]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d000      	beq.n	80020f0 <nutone_fsm+0x140>
 80020ee:	e176      	b.n	80023de <nutone_fsm+0x42e>
				{

					if((exhaust_fan->light_on_pulses_idx) >=
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7d1a      	ldrb	r2, [r3, #20]
												exhaust_fan->light_on_pulses)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7d5b      	ldrb	r3, [r3, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d306      	bcc.n	800210a <nutone_fsm+0x15a>
					{
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	74da      	strb	r2, [r3, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	741a      	strb	r2, [r3, #16]
 8002108:	e002      	b.n	8002110 <nutone_fsm+0x160>
					}
					else
					{
						exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2207      	movs	r2, #7
 800210e:	741a      	strb	r2, [r3, #16]
					}

					exhaust_fan->light_on_pulses_idx++;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	751a      	strb	r2, [r3, #20]
				{
					exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
				}
			}

			break;
 800211c:	e15f      	b.n	80023de <nutone_fsm+0x42e>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2222      	movs	r2, #34	; 0x22
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d000      	beq.n	800212e <nutone_fsm+0x17e>
 800212c:	e157      	b.n	80023de <nutone_fsm+0x42e>
					exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2206      	movs	r2, #6
 8002132:	741a      	strb	r2, [r3, #16]
			break;
 8002134:	e153      	b.n	80023de <nutone_fsm+0x42e>

		case NUTONE_STE_VYV_SET_ON:
			exhaust_fan->light_on_pulses = NUTONE_VYV_ON_PULSES;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	755a      	strb	r2, [r3, #21]
			exhaust_fan->light_on_pulses_idx = 0;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	751a      	strb	r2, [r3, #20]

			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 fa37 	bl	80025ba <deadline_timer_set_initial_time>

			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	759a      	strb	r2, [r3, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	75da      	strb	r2, [r3, #23]

			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	621a      	str	r2, [r3, #32]
			exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	220b      	movs	r2, #11
 8002164:	741a      	strb	r2, [r3, #16]
			break;
 8002166:	e141      	b.n	80023ec <nutone_fsm+0x43c>

		case NUTONE_STE_VYV_ON:
			relay_ask_on_pulse_fsm(exhaust_fan->lights->relay);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0018      	movs	r0, r3
 8002170:	f7ff fce2 	bl	8001b38 <relay_ask_on_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	0018      	movs	r0, r3
 800217a:	f000 fa1e 	bl	80025ba <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	220c      	movs	r2, #12
 8002182:	741a      	strb	r2, [r3, #16]
			break;
 8002184:	e132      	b.n	80023ec <nutone_fsm+0x43c>

		case NUTONE_STE_VYV_OFF:
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0018      	movs	r0, r3
 800218e:	f7ff fcac 	bl	8001aea <relay_ask_off_pulse_fsm>
			deadline_timer_set_initial_time(exhaust_fan->ctrl_timer);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	0018      	movs	r0, r3
 8002198:	f000 fa0f 	bl	80025ba <deadline_timer_set_initial_time>
			exhaust_fan->fsm_state = NUTONE_STE_VYV_TURNING_ON;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	220c      	movs	r2, #12
 80021a0:	741a      	strb	r2, [r3, #16]
			break;
 80021a2:	e123      	b.n	80023ec <nutone_fsm+0x43c>

		case NUTONE_STE_VYV_TURNING_ON:
			deadline_timer_check(exhaust_fan->ctrl_timer, &is_expired_vyv);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	240e      	movs	r4, #14
 80021aa:	193a      	adds	r2, r7, r4
 80021ac:	0011      	movs	r1, r2
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 f9cc 	bl	800254c <deadline_timer_check>

			if(is_expired_vyv != TIMER_EXPIRED_TRUE)
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d001      	beq.n	80021c0 <nutone_fsm+0x210>
			{
				return 0;//NO state change no variable update needed.
 80021bc:	2300      	movs	r3, #0
 80021be:	e116      	b.n	80023ee <nutone_fsm+0x43e>
			}

			if(exhaust_fan->lights->relay->relay_status == RELAY_ON)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d121      	bne.n	8002210 <nutone_fsm+0x260>
			{
				//Waiting for the relay state machine to finish
				if(exhaust_fan->lights->relay->fsm_run_on == RELAY_RUN_FALSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	5c9b      	ldrb	r3, [r3, r2]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d000      	beq.n	80021dc <nutone_fsm+0x22c>
 80021da:	e102      	b.n	80023e2 <nutone_fsm+0x432>
				{

					if((exhaust_fan->light_on_pulses_idx) >=
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	7d1a      	ldrb	r2, [r3, #20]
												exhaust_fan->light_on_pulses)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7d5b      	ldrb	r3, [r3, #21]
					if((exhaust_fan->light_on_pulses_idx) >=
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d309      	bcc.n	80021fc <nutone_fsm+0x24c>
					{
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	74da      	strb	r2, [r3, #19]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	741a      	strb	r2, [r3, #16]
						exhaust_fan->light_on_pulses_idx = 0;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	751a      	strb	r2, [r3, #20]
 80021fa:	e002      	b.n	8002202 <nutone_fsm+0x252>

					}
					else
					{
						exhaust_fan->fsm_state = NUTONE_STE_VYV_OFF;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	220b      	movs	r2, #11
 8002200:	741a      	strb	r2, [r3, #16]
					}
					exhaust_fan->light_on_pulses_idx++;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	7d1b      	ldrb	r3, [r3, #20]
 8002206:	3301      	adds	r3, #1
 8002208:	b2da      	uxtb	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	751a      	strb	r2, [r3, #20]
				{
					exhaust_fan->fsm_state = NUTONE_STE_VYV_ON;
				}
			}

			break;
 800220e:	e0e8      	b.n	80023e2 <nutone_fsm+0x432>
				if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2222      	movs	r2, #34	; 0x22
 8002218:	5c9b      	ldrb	r3, [r3, r2]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d000      	beq.n	8002220 <nutone_fsm+0x270>
 800221e:	e0e0      	b.n	80023e2 <nutone_fsm+0x432>
					exhaust_fan->fsm_state = NUTONE_STE_VYV_ON;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	220a      	movs	r2, #10
 8002224:	741a      	strb	r2, [r3, #16]
			break;
 8002226:	e0dc      	b.n	80023e2 <nutone_fsm+0x432>

		//Second version
		case NUTONE_STE_WHITE_L_SET_ON:
			exhaust_fan->ctrl_timer->deadline.msec =
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2264      	movs	r2, #100	; 0x64
 800222e:	621a      	str	r2, [r3, #32]
											NUTONE_WHITE_LIGHT_ON_PULSE_TIME;
			exhaust_fan->light_on_pulses_idx = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	751a      	strb	r2, [r3, #20]

			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7d9b      	ldrb	r3, [r3, #22]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d106      	bne.n	800224c <nutone_fsm+0x29c>
			{
				exhaust_fan->light_on_pulses = 1;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	755a      	strb	r2, [r3, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2207      	movs	r2, #7
 8002248:	741a      	strb	r2, [r3, #16]
 800224a:	e01c      	b.n	8002286 <nutone_fsm+0x2d6>
			}
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7d9b      	ldrb	r3, [r3, #22]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d106      	bne.n	8002262 <nutone_fsm+0x2b2>
			{
				exhaust_fan->light_on_pulses = 0;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	755a      	strb	r2, [r3, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2207      	movs	r2, #7
 800225e:	741a      	strb	r2, [r3, #16]
 8002260:	e011      	b.n	8002286 <nutone_fsm+0x2d6>
			}
			else
			{

				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7ddb      	ldrb	r3, [r3, #23]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d103      	bne.n	8002272 <nutone_fsm+0x2c2>
				{
					exhaust_fan->light_on_pulses = 1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	755a      	strb	r2, [r3, #21]
 8002270:	e006      	b.n	8002280 <nutone_fsm+0x2d0>
				}
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7ddb      	ldrb	r3, [r3, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d102      	bne.n	8002280 <nutone_fsm+0x2d0>
				{
					exhaust_fan->light_on_pulses = 0;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	755a      	strb	r2, [r3, #21]
				}
				else
				{
					//Do nothing (not possible if the system works
				}
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2206      	movs	r2, #6
 8002284:	741a      	strb	r2, [r3, #16]

			}
			//The order of this matters
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_WHITE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	759a      	strb	r2, [r3, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	75da      	strb	r2, [r3, #23]
			break;
 8002292:	e0ab      	b.n	80023ec <nutone_fsm+0x43c>

		case NUTONE_STE_VYV_L_SET_ON:
			exhaust_fan->ctrl_timer->deadline.msec = NUTONE_VYV_ON_PULSE_TIME;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2264      	movs	r2, #100	; 0x64
 800229a:	621a      	str	r2, [r3, #32]
			exhaust_fan->light_on_pulses_idx = 0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	751a      	strb	r2, [r3, #20]

			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	7d9b      	ldrb	r3, [r3, #22]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d106      	bne.n	80022b8 <nutone_fsm+0x308>
			{
				exhaust_fan->light_on_pulses = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	755a      	strb	r2, [r3, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2207      	movs	r2, #7
 80022b4:	741a      	strb	r2, [r3, #16]
 80022b6:	e01c      	b.n	80022f2 <nutone_fsm+0x342>
			}
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7d9b      	ldrb	r3, [r3, #22]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d106      	bne.n	80022ce <nutone_fsm+0x31e>
			{
				exhaust_fan->light_on_pulses = 1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	755a      	strb	r2, [r3, #21]
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_OFF;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2207      	movs	r2, #7
 80022ca:	741a      	strb	r2, [r3, #16]
 80022cc:	e011      	b.n	80022f2 <nutone_fsm+0x342>
			}
			else
			{

				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7ddb      	ldrb	r3, [r3, #23]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <nutone_fsm+0x32e>
				{
					exhaust_fan->light_on_pulses = 0;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	755a      	strb	r2, [r3, #21]
 80022dc:	e006      	b.n	80022ec <nutone_fsm+0x33c>
				}
				else if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_WHITE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7ddb      	ldrb	r3, [r3, #23]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <nutone_fsm+0x33c>
				{
					exhaust_fan->light_on_pulses = 1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	755a      	strb	r2, [r3, #21]
				}
				else
				{
					//Do nothing (not possible if the system works
				}
				exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_ON;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2206      	movs	r2, #6
 80022f0:	741a      	strb	r2, [r3, #16]

			}
			//The order of this matters
			exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_VYV;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	759a      	strb	r2, [r3, #22]
			exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_OFF;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	75da      	strb	r2, [r3, #23]
			break;
 80022fe:	e075      	b.n	80023ec <nutone_fsm+0x43c>


		//White light and VYV just need to turn-off the relay to be deactivated
		case NUTONE_STE_LIGHTS_OFF:
			relay_ask_off_pulse_fsm(exhaust_fan->lights->relay);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	0018      	movs	r0, r3
 8002308:	f7ff fbef 	bl	8001aea <relay_ask_off_pulse_fsm>
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNING_OFF;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2210      	movs	r2, #16
 8002310:	741a      	strb	r2, [r3, #16]
			break;
 8002312:	e06b      	b.n	80023ec <nutone_fsm+0x43c>
		case NUTONE_STE_LIGHTS_TURNING_OFF:
			if(exhaust_fan->lights->relay->fsm_run_off == RELAY_RUN_FALSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2222      	movs	r2, #34	; 0x22
 800231c:	5c9b      	ldrb	r3, [r3, r2]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d161      	bne.n	80023e6 <nutone_fsm+0x436>
			{
				deadline_timer_set_initial_time(exhaust_fan->vyv_timeoff);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f947 	bl	80025ba <deadline_timer_set_initial_time>
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	74da      	strb	r2, [r3, #19]
				exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_TURNED_OFF;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2211      	movs	r2, #17
 8002336:	741a      	strb	r2, [r3, #16]
			}
			break;
 8002338:	e055      	b.n	80023e6 <nutone_fsm+0x436>
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	080066ec 	.word	0x080066ec

		case NUTONE_STE_LIGHTS_TURNED_OFF:



			if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_VYV)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7d9b      	ldrb	r3, [r3, #22]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10c      	bne.n	8002362 <nutone_fsm+0x3b2>
			{
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	759a      	strb	r2, [r3, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	75da      	strb	r2, [r3, #23]
				exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	741a      	strb	r2, [r3, #16]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	74da      	strb	r2, [r3, #19]
				{
					exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
					exhaust_fan->fsm_state = NUTONE_STE_IDLE;
				}
			}
			break;
 8002360:	e043      	b.n	80023ea <nutone_fsm+0x43a>
			else if(exhaust_fan->current_light_mode == NUTONE_LIGHT_MODE_WHITE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7d9b      	ldrb	r3, [r3, #22]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d109      	bne.n	800237e <nutone_fsm+0x3ce>
				exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2202      	movs	r2, #2
 800236e:	759a      	strb	r2, [r3, #22]
				exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_VYV;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	75da      	strb	r2, [r3, #23]
				exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	74da      	strb	r2, [r3, #19]
			break;
 800237c:	e035      	b.n	80023ea <nutone_fsm+0x43a>
				nutone_select_state(exhaust_fan);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f000 f849 	bl	8002418 <nutone_select_state>
				if(exhaust_fan->next_light_mode == NUTONE_LIGHT_MODE_VYV)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	7ddb      	ldrb	r3, [r3, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11c      	bne.n	80023c8 <nutone_fsm+0x418>
					deadline_timer_check(exhaust_fan->vyv_timeoff,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	240d      	movs	r4, #13
 8002394:	193a      	adds	r2, r7, r4
 8002396:	0011      	movs	r1, r2
 8002398:	0018      	movs	r0, r3
 800239a:	f000 f8d7 	bl	800254c <deadline_timer_check>
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 800239e:	193b      	adds	r3, r7, r4
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d121      	bne.n	80023ea <nutone_fsm+0x43a>
						(exhaust_fan->cmd_state == NUTONE_CMD_STE_READY))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7cdb      	ldrb	r3, [r3, #19]
					if( (vyv_timeout_is_expired == TIMER_EXPIRED_TRUE) &&
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d11d      	bne.n	80023ea <nutone_fsm+0x43a>
						exhaust_fan->current_light_mode = NUTONE_LIGHT_MODE_OFF;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	759a      	strb	r2, [r3, #22]
						exhaust_fan->next_light_mode = NUTONE_LIGHT_MODE_WHITE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	75da      	strb	r2, [r3, #23]
						exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	741a      	strb	r2, [r3, #16]
						exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	74da      	strb	r2, [r3, #19]
			break;
 80023c6:	e010      	b.n	80023ea <nutone_fsm+0x43a>
					exhaust_fan->cmd_state = NUTONE_CMD_STE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	74da      	strb	r2, [r3, #19]
					exhaust_fan->fsm_state = NUTONE_STE_IDLE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	741a      	strb	r2, [r3, #16]
			break;
 80023d4:	e009      	b.n	80023ea <nutone_fsm+0x43a>
			break;
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	e008      	b.n	80023ec <nutone_fsm+0x43c>
			break;
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	e006      	b.n	80023ec <nutone_fsm+0x43c>
			break;
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	e004      	b.n	80023ec <nutone_fsm+0x43c>
			break;
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	e002      	b.n	80023ec <nutone_fsm+0x43c>
			break;
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	e000      	b.n	80023ec <nutone_fsm+0x43c>
			break;
 80023ea:	46c0      	nop			; (mov r8, r8)
	}


//	exhaust_fan->fsm_state = fsm_state;
	return 0;
 80023ec:	2300      	movs	r3, #0

}
 80023ee:	0018      	movs	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b005      	add	sp, #20
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)

080023f8 <nutone_set_command>:

uint8_t nutone_set_command(nutone_t *exhaust_fan, nutone_command_e command)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	000a      	movs	r2, r1
 8002402:	1cfb      	adds	r3, r7, #3
 8002404:	701a      	strb	r2, [r3, #0]
	exhaust_fan->command = command;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1cfa      	adds	r2, r7, #3
 800240a:	7812      	ldrb	r2, [r2, #0]
 800240c:	749a      	strb	r2, [r3, #18]
	return 0;
 800240e:	2300      	movs	r3, #0
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	b002      	add	sp, #8
 8002416:	bd80      	pop	{r7, pc}

08002418 <nutone_select_state>:


//#define NO_MEMORY

uint8_t nutone_select_state(nutone_t *exhaust_fan)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
	if(exhaust_fan->cmd_state != NUTONE_CMD_STE_READY)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7cdb      	ldrb	r3, [r3, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <nutone_select_state+0x14>
	{
		return 1;
 8002428:	2301      	movs	r3, #1
 800242a:	e046      	b.n	80024ba <nutone_select_state+0xa2>
	}
	switch(exhaust_fan->command)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7c9b      	ldrb	r3, [r3, #18]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d840      	bhi.n	80024b6 <nutone_select_state+0x9e>
 8002434:	009a      	lsls	r2, r3, #2
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <nutone_select_state+0xac>)
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	469f      	mov	pc, r3
	{
		case NUTONE_CMD_FAN_TURN_ON:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_ON;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	749a      	strb	r2, [r3, #18]
			break;
 8002450:	e032      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_FAN_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_FAN_SET_OFF;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2203      	movs	r2, #3
 8002456:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	749a      	strb	r2, [r3, #18]
			break;
 8002464:	e028      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_WHITE_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_LIGHT_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_WHITE_L_SET_ON;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	220d      	movs	r2, #13
 800246a:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	749a      	strb	r2, [r3, #18]
			break;
 8002478:	e01e      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_WHITE_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	220f      	movs	r2, #15
 800247e:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	749a      	strb	r2, [r3, #18]
			break;
 800248c:	e014      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_VYV_TURN_ON:
#ifdef 	NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_SET_ON;
#else	//NO_MEMORY
			exhaust_fan->fsm_state = NUTONE_STE_VYV_L_SET_ON;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	220e      	movs	r2, #14
 8002492:	741a      	strb	r2, [r3, #16]
#endif	//NO_MEMORY
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	749a      	strb	r2, [r3, #18]
			break;
 80024a0:	e00a      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_VYV_TURN_OFF:
			exhaust_fan->fsm_state = NUTONE_STE_LIGHTS_OFF;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	220f      	movs	r2, #15
 80024a6:	741a      	strb	r2, [r3, #16]
			exhaust_fan->cmd_state = NUTONE_CMD_STE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	74da      	strb	r2, [r3, #19]
			exhaust_fan->command = NUTONE_CMD_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	749a      	strb	r2, [r3, #18]
			break;
 80024b4:	e000      	b.n	80024b8 <nutone_select_state+0xa0>
		case NUTONE_CMD_WHITE_LIGHT_SET:
			break;
		case NUTONE_CMD_WHITE_LIGHT_CLEAR:
			break;
		default:
			break;
 80024b6:	46c0      	nop			; (mov r8, r8)
	}


	return 0;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	08006734 	.word	0x08006734

080024c8 <deadline_timer_setup>:
#include "Middleware/deadline_timer.h"

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 80024c8:	b082      	sub	sp, #8
 80024ca:	b5b0      	push	{r4, r5, r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af04      	add	r7, sp, #16
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	2418      	movs	r4, #24
 80024d4:	1939      	adds	r1, r7, r4
 80024d6:	600a      	str	r2, [r1, #0]
 80024d8:	604b      	str	r3, [r1, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2260      	movs	r2, #96	; 0x60
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]

	timer_clock_clear(&deadline_timer->time_current);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f87b 	bl	80025e0 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3330      	adds	r3, #48	; 0x30
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 f876 	bl	80025e0 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3348      	adds	r3, #72	; 0x48
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 f871 	bl	80025e0 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3318      	adds	r3, #24
 8002502:	001d      	movs	r5, r3
 8002504:	193c      	adds	r4, r7, r4
 8002506:	466b      	mov	r3, sp
 8002508:	0018      	movs	r0, r3
 800250a:	0023      	movs	r3, r4
 800250c:	3308      	adds	r3, #8
 800250e:	2210      	movs	r2, #16
 8002510:	0019      	movs	r1, r3
 8002512:	f004 f89d 	bl	8006650 <memcpy>
 8002516:	6822      	ldr	r2, [r4, #0]
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	0028      	movs	r0, r5
 800251c:	f000 f874 	bl	8002608 <timer_clock_set_time>
	return 0;
 8002520:	2300      	movs	r3, #0

}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bcb0      	pop	{r4, r5, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	b002      	add	sp, #8
 800252e:	4718      	bx	r3

08002530 <deadline_timer_force_expiration>:
	time_current = time_current_2;
}


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2260      	movs	r2, #96	; 0x60
 800253c:	2101      	movs	r1, #1
 800253e:	5499      	strb	r1, [r3, r2]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	0018      	movs	r0, r3
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <deadline_timer_check>:
uint8_t deadline_timer_check(deadline_timer_t *deadline_timer,
								deadline_timer_expired_t *deadline_expired)
{
 800254c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af02      	add	r7, sp, #8
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8002556:	260f      	movs	r6, #15
 8002558:	19bb      	adds	r3, r7, r6
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
	//TODO: (High) Change if seconds are required

	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 800255e:	250e      	movs	r5, #14
 8002560:	197b      	adds	r3, r7, r5
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]

	deadline_timer_compare_check(deadline_timer->time_current.msec,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6898      	ldr	r0, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a19      	ldr	r1, [r3, #32]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002572:	4c0a      	ldr	r4, [pc, #40]	; (800259c <deadline_timer_check+0x50>)
 8002574:	197b      	adds	r3, r7, r5
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	0023      	movs	r3, r4
 800257a:	f000 f881 	bl	8002680 <deadline_timer_compare_check>
											deadline_timer->deadline.msec,
											deadline_timer->time_initial.msec,
											DEADLINE_MAX_MSEC,
											&deadline_expired_msec);

	*deadline_expired = deadline_expired_msec;
 800257e:	197b      	adds	r3, r7, r5
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	701a      	strb	r2, [r3, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 8002586:	197b      	adds	r3, r7, r5
 8002588:	7819      	ldrb	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2260      	movs	r2, #96	; 0x60
 800258e:	5499      	strb	r1, [r3, r2]
	return status;
 8002590:	19bb      	adds	r3, r7, r6
 8002592:	781b      	ldrb	r3, [r3, #0]

}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b005      	add	sp, #20
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259c:	3b9aca00 	.word	0x3b9aca00

080025a0 <deadline_timer_count>:

uint8_t deadline_timer_count(deadline_timer_t *deadline_timer)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	deadline_timer_increment(&deadline_timer->time_current);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 f846 	bl	800263c <deadline_timer_increment>
	return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b002      	add	sp, #8
 80025b8:	bd80      	pop	{r7, pc}

080025ba <deadline_timer_set_initial_time>:

	return 0;
}

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
	//memcpy fails after several assignations.
	//copy uint32_t variables directly to avoid a race condition
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	630a      	str	r2, [r1, #48]	; 0x30
 80025cc:	634b      	str	r3, [r1, #52]	; 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b002      	add	sp, #8
 80025de:	bd80      	pop	{r7, pc}

080025e0 <timer_clock_clear>:
	return 0;
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
	timer->counts = 0;
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2300      	movs	r3, #0
 80025ee:	600a      	str	r2, [r1, #0]
 80025f0:	604b      	str	r3, [r1, #4]
	timer->msec = 0;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
	timer->sec = 0;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
	return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	b002      	add	sp, #8
 8002606:	bd80      	pop	{r7, pc}

08002608 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8002608:	b082      	sub	sp, #8
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	2010      	movs	r0, #16
 8002614:	1839      	adds	r1, r7, r0
 8002616:	600a      	str	r2, [r1, #0]
 8002618:	604b      	str	r3, [r1, #4]
	timer->msec = new_time.msec;
 800261a:	0001      	movs	r1, r0
 800261c:	187b      	adds	r3, r7, r1
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	609a      	str	r2, [r3, #8]
	timer->sec = new_time.sec;
 8002624:	187b      	adds	r3, r7, r1
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]
	return 0;
 800262c:	2300      	movs	r3, #0
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bc80      	pop	{r7}
 8002636:	bc08      	pop	{r3}
 8002638:	b002      	add	sp, #8
 800263a:	4718      	bx	r3

0800263c <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

	timer->msec++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	609a      	str	r2, [r3, #8]
	timer->counts++;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2001      	movs	r0, #1
 8002656:	2100      	movs	r1, #0
 8002658:	1812      	adds	r2, r2, r0
 800265a:	414b      	adcs	r3, r1
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	600a      	str	r2, [r1, #0]
 8002660:	604b      	str	r3, [r1, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <deadline_timer_increment+0x40>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d902      	bls.n	8002672 <deadline_timer_increment+0x36>
	{
//		timer->sec++;
		timer->msec = 0;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
//	if(timer->counts >= (DEADLINE_MAX_COUNT) )
//	{
//		timer->counts = 0;
//	}

	return 0;
 8002672:	2300      	movs	r3, #0
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}
 800267c:	3b9ac9ff 	.word	0x3b9ac9ff

08002680 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 8002680:	b5b0      	push	{r4, r5, r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6178      	str	r0, [r7, #20]
 8002688:	6139      	str	r1, [r7, #16]
 800268a:	60fa      	str	r2, [r7, #12]
 800268c:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 800268e:	2317      	movs	r3, #23
 8002690:	2208      	movs	r2, #8
 8002692:	189b      	adds	r3, r3, r2
 8002694:	19db      	adds	r3, r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
	int64_t remaining = 0;
 800269a:	2200      	movs	r2, #0
 800269c:	2300      	movs	r3, #0
 800269e:	623a      	str	r2, [r7, #32]
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t deadline_difference = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61bb      	str	r3, [r7, #24]

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	001c      	movs	r4, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	001d      	movs	r5, r3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	1b12      	subs	r2, r2, r4
 80026bc:	41ab      	sbcs	r3, r5
 80026be:	623a      	str	r2, [r7, #32]
 80026c0:	627b      	str	r3, [r7, #36]	; 0x24

	if(remaining < 0)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	da07      	bge.n	80026d8 <deadline_timer_compare_check+0x58>
	{
		remaining = (max_time - time_initial) + time_current;
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1ad2      	subs	r2, r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	18d3      	adds	r3, r2, r3
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24

	}
	deadline_difference = (uint32_t) remaining;
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	61bb      	str	r3, [r7, #24]

	if(deadline_difference >= deadline)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d803      	bhi.n	80026ec <deadline_timer_compare_check+0x6c>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	2201      	movs	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e002      	b.n	80026f2 <deadline_timer_compare_check+0x72>
	}
	else
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80026f2:	2317      	movs	r3, #23
 80026f4:	2208      	movs	r2, #8
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	781b      	ldrb	r3, [r3, #0]
}
 80026fc:	0018      	movs	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	b00a      	add	sp, #40	; 0x28
 8002702:	bdb0      	pop	{r4, r5, r7, pc}

08002704 <output_fsm_ctrl>:




void output_fsm_ctrl(relay_t *actuator, deadline_timer_t *deadline_timer)
{
 8002704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af06      	add	r7, sp, #24
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
	relay_fsm_init_t init = RELAY_INIT_FALSE;
 800270e:	260f      	movs	r6, #15
 8002710:	19bb      	adds	r3, r7, r6
 8002712:	2201      	movs	r2, #1
 8002714:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == RELAY_RUN_TRUE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2221      	movs	r2, #33	; 0x21
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d12f      	bne.n	8002780 <output_fsm_ctrl+0x7c>
	{
		relay_check_init_fsm(*actuator, &init);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	19ba      	adds	r2, r7, r6
 8002724:	9205      	str	r2, [sp, #20]
 8002726:	466a      	mov	r2, sp
 8002728:	0011      	movs	r1, r2
 800272a:	001a      	movs	r2, r3
 800272c:	3210      	adds	r2, #16
 800272e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002730:	c131      	stmia	r1!, {r0, r4, r5}
 8002732:	ca11      	ldmia	r2!, {r0, r4}
 8002734:	c111      	stmia	r1!, {r0, r4}
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f7ff fa1f 	bl	8001b80 <relay_check_init_fsm>

		if(init == RELAY_INIT_TRUE)
 8002742:	19bb      	adds	r3, r7, r6
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <output_fsm_ctrl+0x56>
		{
			deadline_timer_set_initial_time(deadline_timer);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff ff34 	bl	80025ba <deadline_timer_set_initial_time>
			relay_acknowledge_init_fsm(actuator);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff fa2a 	bl	8001bae <relay_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 800275a:	240e      	movs	r4, #14
 800275c:	193a      	adds	r2, r7, r4
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	0011      	movs	r1, r2
 8002762:	0018      	movs	r0, r3
 8002764:	f7ff fef2 	bl	800254c <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 8002768:	193b      	adds	r3, r7, r4
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d107      	bne.n	8002780 <output_fsm_ctrl+0x7c>
		{
			relay_on_pulse_fsm(actuator);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff f979 	bl	8001a6a <relay_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff ff1d 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == RELAY_RUN_TRUE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2222      	movs	r2, #34	; 0x22
 8002784:	5c9b      	ldrb	r3, [r3, r2]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d130      	bne.n	80027ec <output_fsm_ctrl+0xe8>
	{
	  relay_check_init_fsm(*actuator, &init);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	260f      	movs	r6, #15
 800278e:	19ba      	adds	r2, r7, r6
 8002790:	9205      	str	r2, [sp, #20]
 8002792:	466a      	mov	r2, sp
 8002794:	0011      	movs	r1, r2
 8002796:	001a      	movs	r2, r3
 8002798:	3210      	adds	r2, #16
 800279a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800279c:	c131      	stmia	r1!, {r0, r4, r5}
 800279e:	ca11      	ldmia	r2!, {r0, r4}
 80027a0:	c111      	stmia	r1!, {r0, r4}
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f7ff f9e9 	bl	8001b80 <relay_check_init_fsm>

	  if(init == RELAY_INIT_TRUE)
 80027ae:	19bb      	adds	r3, r7, r6
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <output_fsm_ctrl+0xc2>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fefe 	bl	80025ba <deadline_timer_set_initial_time>
		  relay_acknowledge_init_fsm(actuator);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f7ff f9f4 	bl	8001bae <relay_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 80027c6:	240e      	movs	r4, #14
 80027c8:	193a      	adds	r2, r7, r4
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	0011      	movs	r1, r2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7ff febc 	bl	800254c <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 80027d4:	193b      	adds	r3, r7, r4
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <output_fsm_ctrl+0xe8>
	  {
		  relay_off_pulse_fsm(actuator);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	0018      	movs	r0, r3
 80027e0:	f7ff f963 	bl	8001aaa <relay_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff fee7 	bl	80025ba <deadline_timer_set_initial_time>
	  }
	}
}
 80027ec:	46c0      	nop			; (mov r8, r8)
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b005      	add	sp, #20
 80027f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027f4 <output_led_indicator>:


void output_led_indicator(led_signal_t *led_signal,
								deadline_timer_t *deadline_timer)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
	deadline_timer_expired_t indicator_timer_expired;
	deadline_timer_check(deadline_timer, &indicator_timer_expired);
 80027fe:	240f      	movs	r4, #15
 8002800:	193a      	adds	r2, r7, r4
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	0011      	movs	r1, r2
 8002806:	0018      	movs	r0, r3
 8002808:	f7ff fea0 	bl	800254c <deadline_timer_check>

	if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 800280c:	193b      	adds	r3, r7, r4
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d107      	bne.n	8002824 <output_led_indicator+0x30>
	{
		led_signal_fsm(led_signal);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	0018      	movs	r0, r3
 8002818:	f7fe f97f 	bl	8000b1a <led_signal_fsm>
		deadline_timer_set_initial_time(deadline_timer);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff fecb 	bl	80025ba <deadline_timer_set_initial_time>
	}
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b005      	add	sp, #20
 800282a:	bd90      	pop	{r4, r7, pc}

0800282c <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	0008      	movs	r0, r1
 8002836:	0011      	movs	r1, r2
 8002838:	1cbb      	adds	r3, r7, #2
 800283a:	1c02      	adds	r2, r0, #0
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	1c7b      	adds	r3, r7, #1
 8002840:	1c0a      	adds	r2, r1, #0
 8002842:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(irq_type);
 8002844:	1c7b      	adds	r3, r7, #1
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b25b      	sxtb	r3, r3
 800284a:	0018      	movs	r0, r3
 800284c:	f001 ff43 	bl	80046d6 <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	240c      	movs	r4, #12
 8002852:	193b      	adds	r3, r7, r4
 8002854:	0018      	movs	r0, r3
 8002856:	2314      	movs	r3, #20
 8002858:	001a      	movs	r2, r3
 800285a:	2100      	movs	r1, #0
 800285c:	f003 feb2 	bl	80065c4 <memset>

	HAL_GPIO_DeInit(port, pin);
 8002860:	1cbb      	adds	r3, r7, #2
 8002862:	881a      	ldrh	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0011      	movs	r1, r2
 8002868:	0018      	movs	r0, r3
 800286a:	f002 f8bb 	bl	80049e4 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800286e:	1cbb      	adds	r3, r7, #2
 8002870:	881a      	ldrh	r2, [r3, #0]
 8002872:	193b      	adds	r3, r7, r4
 8002874:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2200      	movs	r2, #0
 800287a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8002882:	193a      	adds	r2, r7, r4
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f001 ff41 	bl	8004710 <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b009      	add	sp, #36	; 0x24
 8002894:	bd90      	pop	{r4, r7, pc}
	...

08002898 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	0008      	movs	r0, r1
 80028a2:	0011      	movs	r1, r2
 80028a4:	1cbb      	adds	r3, r7, #2
 80028a6:	1c02      	adds	r2, r0, #0
 80028a8:	801a      	strh	r2, [r3, #0]
 80028aa:	1c7b      	adds	r3, r7, #1
 80028ac:	1c0a      	adds	r2, r1, #0
 80028ae:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	240c      	movs	r4, #12
 80028b2:	193b      	adds	r3, r7, r4
 80028b4:	0018      	movs	r0, r3
 80028b6:	2314      	movs	r3, #20
 80028b8:	001a      	movs	r2, r3
 80028ba:	2100      	movs	r1, #0
 80028bc:	f003 fe82 	bl	80065c4 <memset>
	HAL_GPIO_DeInit(port, pin);
 80028c0:	1cbb      	adds	r3, r7, #2
 80028c2:	881a      	ldrh	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	0011      	movs	r1, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f002 f88b 	bl	80049e4 <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 80028ce:	1cbb      	adds	r3, r7, #2
 80028d0:	881a      	ldrh	r2, [r3, #0]
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028d6:	193b      	adds	r3, r7, r4
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_DIRECT_LINK_conf_as_interrupt_input+0x7c>)
 80028da:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80028e2:	193a      	adds	r2, r7, r4
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	0011      	movs	r1, r2
 80028e8:	0018      	movs	r0, r3
 80028ea:	f001 ff11 	bl	8004710 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 80028ee:	1c7b      	adds	r3, r7, #1
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b25b      	sxtb	r3, r3
 80028f4:	2203      	movs	r2, #3
 80028f6:	2100      	movs	r1, #0
 80028f8:	0018      	movs	r0, r3
 80028fa:	f001 fec7 	bl	800468c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 80028fe:	1c7b      	adds	r3, r7, #1
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b25b      	sxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f001 fed6 	bl	80046b6 <HAL_NVIC_EnableIRQ>


}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b009      	add	sp, #36	; 0x24
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	10110000 	.word	0x10110000

08002918 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8002918:	b590      	push	{r4, r7, lr}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	0008      	movs	r0, r1
 8002922:	0011      	movs	r1, r2
 8002924:	1cbb      	adds	r3, r7, #2
 8002926:	1c02      	adds	r2, r0, #0
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	1c7b      	adds	r3, r7, #1
 800292c:	1c0a      	adds	r2, r1, #0
 800292e:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	240c      	movs	r4, #12
 8002932:	193b      	adds	r3, r7, r4
 8002934:	0018      	movs	r0, r3
 8002936:	2314      	movs	r3, #20
 8002938:	001a      	movs	r2, r3
 800293a:	2100      	movs	r1, #0
 800293c:	f003 fe42 	bl	80065c4 <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 8002940:	1c7b      	adds	r3, r7, #1
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	b25b      	sxtb	r3, r3
 8002946:	0018      	movs	r0, r3
 8002948:	f001 fec5 	bl	80046d6 <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 800294c:	1cbb      	adds	r3, r7, #2
 800294e:	881a      	ldrh	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f002 f845 	bl	80049e4 <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 800295a:	1cbb      	adds	r3, r7, #2
 800295c:	881a      	ldrh	r2, [r3, #0]
 800295e:	0021      	movs	r1, r4
 8002960:	187b      	adds	r3, r7, r1
 8002962:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2201      	movs	r2, #1
 8002968:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2203      	movs	r2, #3
 8002974:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8002976:	187a      	adds	r2, r7, r1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0011      	movs	r1, r2
 800297c:	0018      	movs	r0, r3
 800297e:	f001 fec7 	bl	8004710 <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 8002988:	2180      	movs	r1, #128	; 0x80
 800298a:	0289      	lsls	r1, r1, #10
 800298c:	430a      	orrs	r2, r1
 800298e:	601a      	str	r2, [r3, #0]

}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b009      	add	sp, #36	; 0x24
 8002996:	bd90      	pop	{r4, r7, pc}
 8002998:	40010000 	.word	0x40010000

0800299c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b08b      	sub	sp, #44	; 0x2c
 80029a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	2414      	movs	r4, #20
 80029a4:	193b      	adds	r3, r7, r4
 80029a6:	0018      	movs	r0, r3
 80029a8:	2314      	movs	r3, #20
 80029aa:	001a      	movs	r2, r3
 80029ac:	2100      	movs	r1, #0
 80029ae:	f003 fe09 	bl	80065c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b6:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029b8:	2104      	movs	r1, #4
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	4b70      	ldr	r3, [pc, #448]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c2:	2204      	movs	r2, #4
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029d0:	2120      	movs	r1, #32
 80029d2:	430a      	orrs	r2, r1
 80029d4:	635a      	str	r2, [r3, #52]	; 0x34
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	4b67      	ldr	r3, [pc, #412]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e6:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029e8:	2101      	movs	r1, #1
 80029ea:	430a      	orrs	r2, r1
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
 80029ee:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f2:	2201      	movs	r2, #1
 80029f4:	4013      	ands	r3, r2
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	4b61      	ldr	r3, [pc, #388]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 80029fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fe:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 8002a00:	2102      	movs	r1, #2
 8002a02:	430a      	orrs	r2, r1
 8002a04:	635a      	str	r2, [r3, #52]	; 0x34
 8002a06:	4b5e      	ldr	r3, [pc, #376]	; (8002b80 <MX_GPIO_Init+0x1e4>)
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 8002a12:	23c0      	movs	r3, #192	; 0xc0
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	485b      	ldr	r0, [pc, #364]	; (8002b84 <MX_GPIO_Init+0x1e8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	f002 f8cf 	bl	8004bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8002a20:	4959      	ldr	r1, [pc, #356]	; (8002b88 <MX_GPIO_Init+0x1ec>)
 8002a22:	23a0      	movs	r3, #160	; 0xa0
 8002a24:	05db      	lsls	r3, r3, #23
 8002a26:	2200      	movs	r2, #0
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f002 f8c8 	bl	8004bbe <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <MX_GPIO_Init+0x1f0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	0018      	movs	r0, r3
 8002a36:	f002 f8c2 	bl	8004bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 8002a3a:	193b      	adds	r3, r7, r4
 8002a3c:	22c0      	movs	r2, #192	; 0xc0
 8002a3e:	0212      	lsls	r2, r2, #8
 8002a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2201      	movs	r2, #1
 8002a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4e:	193b      	adds	r3, r7, r4
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a54:	193b      	adds	r3, r7, r4
 8002a56:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <MX_GPIO_Init+0x1e8>)
 8002a58:	0019      	movs	r1, r3
 8002a5a:	0010      	movs	r0, r2
 8002a5c:	f001 fe58 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002a60:	193b      	adds	r3, r7, r4
 8002a62:	2204      	movs	r2, #4
 8002a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	4a46      	ldr	r2, [pc, #280]	; (8002b90 <MX_GPIO_Init+0x1f4>)
 8002a76:	0019      	movs	r1, r3
 8002a78:	0010      	movs	r0, r2
 8002a7a:	f001 fe49 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8002a7e:	193b      	adds	r3, r7, r4
 8002a80:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <MX_GPIO_Init+0x1ec>)
 8002a82:	601a      	str	r2, [r3, #0]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	2201      	movs	r2, #1
 8002a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	193a      	adds	r2, r7, r4
 8002a98:	23a0      	movs	r3, #160	; 0xa0
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fe36 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	4a39      	ldr	r2, [pc, #228]	; (8002b94 <MX_GPIO_Init+0x1f8>)
 8002aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	193a      	adds	r2, r7, r4
 8002ab8:	23a0      	movs	r3, #160	; 0xa0
 8002aba:	05db      	lsls	r3, r3, #23
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f001 fe26 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 8002ac4:	193b      	adds	r3, r7, r4
 8002ac6:	2282      	movs	r2, #130	; 0x82
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002acc:	193b      	adds	r3, r7, r4
 8002ace:	4a32      	ldr	r2, [pc, #200]	; (8002b98 <MX_GPIO_Init+0x1fc>)
 8002ad0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	193b      	adds	r3, r7, r4
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad8:	193a      	adds	r2, r7, r4
 8002ada:	23a0      	movs	r3, #160	; 0xa0
 8002adc:	05db      	lsls	r3, r3, #23
 8002ade:	0011      	movs	r1, r2
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	f001 fe15 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	2260      	movs	r2, #96	; 0x60
 8002aea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	2200      	movs	r2, #0
 8002af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af8:	193a      	adds	r2, r7, r4
 8002afa:	23a0      	movs	r3, #160	; 0xa0
 8002afc:	05db      	lsls	r3, r3, #23
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f001 fe05 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	2240      	movs	r2, #64	; 0x40
 8002b0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0c:	193b      	adds	r3, r7, r4
 8002b0e:	2201      	movs	r2, #1
 8002b10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	193b      	adds	r3, r7, r4
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	193b      	adds	r3, r7, r4
 8002b20:	4a1a      	ldr	r2, [pc, #104]	; (8002b8c <MX_GPIO_Init+0x1f0>)
 8002b22:	0019      	movs	r1, r3
 8002b24:	0010      	movs	r0, r2
 8002b26:	f001 fdf3 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8002b2a:	0021      	movs	r1, r4
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <MX_GPIO_Init+0x200>)
 8002b36:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <MX_GPIO_Init+0x1f0>)
 8002b42:	0019      	movs	r1, r3
 8002b44:	0010      	movs	r0, r2
 8002b46:	f001 fde3 	bl	8004710 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <MX_GPIO_Init+0x204>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <MX_GPIO_Init+0x204>)
 8002b50:	2180      	movs	r1, #128	; 0x80
 8002b52:	0449      	lsls	r1, r1, #17
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2006      	movs	r0, #6
 8002b5e:	f001 fd95 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002b62:	2006      	movs	r0, #6
 8002b64:	f001 fda7 	bl	80046b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2007      	movs	r0, #7
 8002b6e:	f001 fd8d 	bl	800468c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002b72:	2007      	movs	r0, #7
 8002b74:	f001 fd9f 	bl	80046b6 <HAL_NVIC_EnableIRQ>

}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b00b      	add	sp, #44	; 0x2c
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	50000800 	.word	0x50000800
 8002b88:	00000583 	.word	0x00000583
 8002b8c:	50000400 	.word	0x50000400
 8002b90:	50001400 	.word	0x50001400
 8002b94:	10210000 	.word	0x10210000
 8002b98:	10310000 	.word	0x10310000
 8002b9c:	10110000 	.word	0x10110000
 8002ba0:	40010000 	.word	0x40010000

08002ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b0d7      	sub	sp, #348	; 0x15c
 8002ba8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8002baa:	f001 fbf0 	bl	800438e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bae:	f000 fce1 	bl	8003574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bb2:	f7ff fef3 	bl	800299c <MX_GPIO_Init>
  MX_TIM1_Init();
 8002bb6:	f001 f9cf 	bl	8003f58 <MX_TIM1_Init>
  MX_TIM14_Init();
 8002bba:	f001 faaf 	bl	800411c <MX_TIM14_Init>
  MX_TIM3_Init();
 8002bbe:	f001 fa25 	bl	800400c <MX_TIM3_Init>
  MX_TIM17_Init();
 8002bc2:	f001 faf7 	bl	80041b4 <MX_TIM17_Init>
  MX_TIM16_Init();
 8002bc6:	f001 facd 	bl	8004164 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  /**************************************************************************/
  general_clock.counts = 0;
 8002bca:	49e4      	ldr	r1, [pc, #912]	; (8002f5c <main+0x3b8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2300      	movs	r3, #0
 8002bd0:	600a      	str	r2, [r1, #0]
 8002bd2:	604b      	str	r3, [r1, #4]
  general_clock.msec = 0;
 8002bd4:	4be1      	ldr	r3, [pc, #900]	; (8002f5c <main+0x3b8>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]

  //DIP SWITCH SETUP
  //----------------------------------------------------------------------------
  switch_selector_t switch_selector;
  switch_selector_gpio_t switch_selector_gpio[2];//We can use malloc also
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 8002bda:	218e      	movs	r1, #142	; 0x8e
 8002bdc:	0049      	lsls	r1, r1, #1
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	22a0      	movs	r2, #160	; 0xa0
 8002be2:	05d2      	lsls	r2, r2, #23
 8002be4:	601a      	str	r2, [r3, #0]
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2220      	movs	r2, #32
 8002bea:	809a      	strh	r2, [r3, #4]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	22a0      	movs	r2, #160	; 0xa0
 8002bf0:	05d2      	lsls	r2, r2, #23
 8002bf2:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8002bf4:	187b      	adds	r3, r7, r1
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	819a      	strh	r2, [r3, #12]

  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8002bfa:	1879      	adds	r1, r7, r1
 8002bfc:	2496      	movs	r4, #150	; 0x96
 8002bfe:	0064      	lsls	r4, r4, #1
 8002c00:	193b      	adds	r3, r7, r4
 8002c02:	2202      	movs	r2, #2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7ff f8ba 	bl	8001d7e <switch_selector_setup>

  //MOTION SENSOR SETUP
  //----------------------------------------------------------------------------

  switch(switch_selector.value)
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d01e      	beq.n	8002c50 <main+0xac>
 8002c12:	d825      	bhi.n	8002c60 <main+0xbc>
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d013      	beq.n	8002c40 <main+0x9c>
 8002c18:	d822      	bhi.n	8002c60 <main+0xbc>
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d002      	beq.n	8002c24 <main+0x80>
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d007      	beq.n	8002c32 <main+0x8e>
 8002c22:	e01d      	b.n	8002c60 <main+0xbc>
  {
	case MOTION_SWITCH_MODE_0:
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8002c24:	4bce      	ldr	r3, [pc, #824]	; (8002f60 <main+0x3bc>)
 8002c26:	225a      	movs	r2, #90	; 0x5a
 8002c28:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = OFFICE_MOTION_SENSOR_WINDOW;
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	4bcc      	ldr	r3, [pc, #816]	; (8002f60 <main+0x3bc>)
 8002c2e:	70da      	strb	r2, [r3, #3]
	  break;
 8002c30:	e018      	b.n	8002c64 <main+0xc0>
	case MOTION_SWITCH_MODE_1:
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8002c32:	4bcb      	ldr	r3, [pc, #812]	; (8002f60 <main+0x3bc>)
 8002c34:	2232      	movs	r2, #50	; 0x32
 8002c36:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4bc9      	ldr	r3, [pc, #804]	; (8002f60 <main+0x3bc>)
 8002c3c:	70da      	strb	r2, [r3, #3]
	  break;
 8002c3e:	e011      	b.n	8002c64 <main+0xc0>
	case MOTION_SWITCH_MODE_2:
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8002c40:	4bc7      	ldr	r3, [pc, #796]	; (8002f60 <main+0x3bc>)
 8002c42:	2232      	movs	r2, #50	; 0x32
 8002c44:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8002c46:	2203      	movs	r2, #3
 8002c48:	4bc5      	ldr	r3, [pc, #788]	; (8002f60 <main+0x3bc>)
 8002c4a:	70da      	strb	r2, [r3, #3]
		//do nothing
		__NOP();
 8002c4c:	46c0      	nop			; (mov r8, r8)
		break;
 8002c4e:	e009      	b.n	8002c64 <main+0xc0>
	case MOTION_SWITCH_MODE_3:
		//do nothing
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 8002c50:	4bc3      	ldr	r3, [pc, #780]	; (8002f60 <main+0x3bc>)
 8002c52:	2232      	movs	r2, #50	; 0x32
 8002c54:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8002c56:	2203      	movs	r2, #3
 8002c58:	4bc1      	ldr	r3, [pc, #772]	; (8002f60 <main+0x3bc>)
 8002c5a:	70da      	strb	r2, [r3, #3]
		__NOP();
 8002c5c:	46c0      	nop			; (mov r8, r8)
		break;
 8002c5e:	e001      	b.n	8002c64 <main+0xc0>
	default:
		//do nothing
		__NOP();
 8002c60:	46c0      	nop			; (mov r8, r8)
	  break;
 8002c62:	46c0      	nop			; (mov r8, r8)
  }

  //Good initial conf.
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8002c64:	4bbe      	ldr	r3, [pc, #760]	; (8002f60 <main+0x3bc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 8002c6a:	4bbd      	ldr	r3, [pc, #756]	; (8002f60 <main+0x3bc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_2HZ;
 8002c70:	4bbb      	ldr	r3, [pc, #748]	; (8002f60 <main+0x3bc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	719a      	strb	r2, [r3, #6]
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 8002c76:	4bba      	ldr	r3, [pc, #744]	; (8002f60 <main+0x3bc>)
 8002c78:	2202      	movs	r2, #2
 8002c7a:	711a      	strb	r2, [r3, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_2_PULSES;
 8002c7c:	4bb8      	ldr	r3, [pc, #736]	; (8002f60 <main+0x3bc>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	709a      	strb	r2, [r3, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8002c82:	4bb7      	ldr	r3, [pc, #732]	; (8002f60 <main+0x3bc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	715a      	strb	r2, [r3, #5]

  //Hardware assignation:
  pyd1598_hardware_interface_t setin_pin;
  pyd1598_hardware_interface_t direct_link_pin;

  setin_pin.pin = SERIN_Pin;
 8002c88:	218a      	movs	r1, #138	; 0x8a
 8002c8a:	0049      	lsls	r1, r1, #1
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	01d2      	lsls	r2, r2, #7
 8002c92:	809a      	strh	r2, [r3, #4]
  setin_pin.port = SERIN_GPIO_Port;
 8002c94:	187b      	adds	r3, r7, r1
 8002c96:	4ab3      	ldr	r2, [pc, #716]	; (8002f64 <main+0x3c0>)
 8002c98:	601a      	str	r2, [r3, #0]
  setin_pin.irq_type = EXTI4_15_IRQn;
 8002c9a:	187b      	adds	r3, r7, r1
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	719a      	strb	r2, [r3, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 8002ca0:	2086      	movs	r0, #134	; 0x86
 8002ca2:	0040      	lsls	r0, r0, #1
 8002ca4:	183b      	adds	r3, r7, r0
 8002ca6:	2280      	movs	r2, #128	; 0x80
 8002ca8:	809a      	strh	r2, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 8002caa:	183b      	adds	r3, r7, r0
 8002cac:	4aae      	ldr	r2, [pc, #696]	; (8002f68 <main+0x3c4>)
 8002cae:	601a      	str	r2, [r3, #0]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	719a      	strb	r2, [r3, #6]

  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 8002cb6:	187b      	adds	r3, r7, r1
 8002cb8:	4aa9      	ldr	r2, [pc, #676]	; (8002f60 <main+0x3bc>)
 8002cba:	4cac      	ldr	r4, [pc, #688]	; (8002f6c <main+0x3c8>)
 8002cbc:	1838      	adds	r0, r7, r0
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	4469      	add	r1, sp
 8002cc2:	c860      	ldmia	r0!, {r5, r6}
 8002cc4:	c160      	stmia	r1!, {r5, r6}
 8002cc6:	4669      	mov	r1, sp
 8002cc8:	6858      	ldr	r0, [r3, #4]
 8002cca:	6008      	str	r0, [r1, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6811      	ldr	r1, [r2, #0]
 8002cd0:	6852      	ldr	r2, [r2, #4]
 8002cd2:	0020      	movs	r0, r4
 8002cd4:	f7fe f877 	bl	8000dc6 <pyd1598_setup>

//  pyd1598_serin_set_zero_pulse(setin_pin);
  HAL_Delay(1000);
 8002cd8:	23fa      	movs	r3, #250	; 0xfa
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f001 fbd3 	bl	8004488 <HAL_Delay>

  pyd1598_request_write(&motion_sensor);
 8002ce2:	4ba2      	ldr	r3, [pc, #648]	; (8002f6c <main+0x3c8>)
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fe fa93 	bl	8001210 <pyd1598_request_write>
  relay_t light_1;
  relay_t light_2;
  relay_t light_uv;
#endif	//LIGHT_AS_ACTUATOR

  deadline.msec = 80;
 8002cea:	4ba1      	ldr	r3, [pc, #644]	; (8002f70 <main+0x3cc>)
 8002cec:	2250      	movs	r2, #80	; 0x50
 8002cee:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8002cf0:	4c9f      	ldr	r4, [pc, #636]	; (8002f70 <main+0x3cc>)
 8002cf2:	4da0      	ldr	r5, [pc, #640]	; (8002f74 <main+0x3d0>)
 8002cf4:	466b      	mov	r3, sp
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	0023      	movs	r3, r4
 8002cfa:	3308      	adds	r3, #8
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	0019      	movs	r1, r3
 8002d00:	f003 fca6 	bl	8006650 <memcpy>
 8002d04:	6822      	ldr	r2, [r4, #0]
 8002d06:	6863      	ldr	r3, [r4, #4]
 8002d08:	0028      	movs	r0, r5
 8002d0a:	f7ff fbdd 	bl	80024c8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 8002d0e:	4c98      	ldr	r4, [pc, #608]	; (8002f70 <main+0x3cc>)
 8002d10:	4d99      	ldr	r5, [pc, #612]	; (8002f78 <main+0x3d4>)
 8002d12:	466b      	mov	r3, sp
 8002d14:	0018      	movs	r0, r3
 8002d16:	0023      	movs	r3, r4
 8002d18:	3308      	adds	r3, #8
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	f003 fc97 	bl	8006650 <memcpy>
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	6863      	ldr	r3, [r4, #4]
 8002d26:	0028      	movs	r0, r5
 8002d28:	f7ff fbce 	bl	80024c8 <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 8002d2c:	4c90      	ldr	r4, [pc, #576]	; (8002f70 <main+0x3cc>)
 8002d2e:	4d93      	ldr	r5, [pc, #588]	; (8002f7c <main+0x3d8>)
 8002d30:	466b      	mov	r3, sp
 8002d32:	0018      	movs	r0, r3
 8002d34:	0023      	movs	r3, r4
 8002d36:	3308      	adds	r3, #8
 8002d38:	2210      	movs	r2, #16
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	f003 fc88 	bl	8006650 <memcpy>
 8002d40:	6822      	ldr	r2, [r4, #0]
 8002d42:	6863      	ldr	r3, [r4, #4]
 8002d44:	0028      	movs	r0, r5
 8002d46:	f7ff fbbf 	bl	80024c8 <deadline_timer_setup>
  relay_gpio_t light_2_output_a;
  relay_gpio_t light_2_output_b;
  relay_gpio_t light_uv_output_a;
  relay_gpio_t light_uv_output_b;

  light_1_output_a.pin = LAMP1_OUTA_Pin;
 8002d4a:	2198      	movs	r1, #152	; 0x98
 8002d4c:	187b      	adds	r3, r7, r1
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	809a      	strh	r2, [r3, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8002d52:	2588      	movs	r5, #136	; 0x88
 8002d54:	197b      	adds	r3, r7, r5
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	0052      	lsls	r2, r2, #1
 8002d5a:	809a      	strh	r2, [r3, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 8002d5c:	2678      	movs	r6, #120	; 0x78
 8002d5e:	19bb      	adds	r3, r7, r6
 8002d60:	2201      	movs	r2, #1
 8002d62:	809a      	strh	r2, [r3, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8002d64:	2090      	movs	r0, #144	; 0x90
 8002d66:	183b      	adds	r3, r7, r0
 8002d68:	2280      	movs	r2, #128	; 0x80
 8002d6a:	00d2      	lsls	r2, r2, #3
 8002d6c:	809a      	strh	r2, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 8002d6e:	2480      	movs	r4, #128	; 0x80
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	809a      	strh	r2, [r3, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8002d76:	2370      	movs	r3, #112	; 0x70
 8002d78:	18fb      	adds	r3, r7, r3
 8002d7a:	4a81      	ldr	r2, [pc, #516]	; (8002f80 <main+0x3dc>)
 8002d7c:	809a      	strh	r2, [r3, #4]

  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	4a79      	ldr	r2, [pc, #484]	; (8002f68 <main+0x3c4>)
 8002d82:	601a      	str	r2, [r3, #0]
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8002d84:	197b      	adds	r3, r7, r5
 8002d86:	22a0      	movs	r2, #160	; 0xa0
 8002d88:	05d2      	lsls	r2, r2, #23
 8002d8a:	601a      	str	r2, [r3, #0]
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 8002d8c:	19bb      	adds	r3, r7, r6
 8002d8e:	22a0      	movs	r2, #160	; 0xa0
 8002d90:	05d2      	lsls	r2, r2, #23
 8002d92:	601a      	str	r2, [r3, #0]
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 8002d94:	183b      	adds	r3, r7, r0
 8002d96:	22a0      	movs	r2, #160	; 0xa0
 8002d98:	05d2      	lsls	r2, r2, #23
 8002d9a:	601a      	str	r2, [r3, #0]
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	22a0      	movs	r2, #160	; 0xa0
 8002da0:	05d2      	lsls	r2, r2, #23
 8002da2:	601a      	str	r2, [r3, #0]
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 8002da4:	2370      	movs	r3, #112	; 0x70
 8002da6:	18fb      	adds	r3, r7, r3
 8002da8:	4a6e      	ldr	r2, [pc, #440]	; (8002f64 <main+0x3c0>)
 8002daa:	601a      	str	r2, [r3, #0]

  relay_setup(&light_1, light_1_output_a, light_1_output_b);
 8002dac:	183b      	adds	r3, r7, r0
 8002dae:	187a      	adds	r2, r7, r1
 8002db0:	21e8      	movs	r1, #232	; 0xe8
 8002db2:	187c      	adds	r4, r7, r1
 8002db4:	4669      	mov	r1, sp
 8002db6:	6858      	ldr	r0, [r3, #4]
 8002db8:	6008      	str	r0, [r1, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6811      	ldr	r1, [r2, #0]
 8002dbe:	6852      	ldr	r2, [r2, #4]
 8002dc0:	0020      	movs	r0, r4
 8002dc2:	f7fe fe19 	bl	80019f8 <relay_setup>
  relay_setup(&light_2, light_2_output_a, light_2_output_b);
 8002dc6:	2480      	movs	r4, #128	; 0x80
 8002dc8:	193b      	adds	r3, r7, r4
 8002dca:	197a      	adds	r2, r7, r5
 8002dcc:	21c4      	movs	r1, #196	; 0xc4
 8002dce:	187c      	adds	r4, r7, r1
 8002dd0:	4669      	mov	r1, sp
 8002dd2:	6858      	ldr	r0, [r3, #4]
 8002dd4:	6008      	str	r0, [r1, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	6852      	ldr	r2, [r2, #4]
 8002ddc:	0020      	movs	r0, r4
 8002dde:	f7fe fe0b 	bl	80019f8 <relay_setup>
  relay_setup(&light_uv, light_uv_output_a, light_uv_output_b);
 8002de2:	2370      	movs	r3, #112	; 0x70
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	19ba      	adds	r2, r7, r6
 8002de8:	21a0      	movs	r1, #160	; 0xa0
 8002dea:	187c      	adds	r4, r7, r1
 8002dec:	4669      	mov	r1, sp
 8002dee:	6858      	ldr	r0, [r3, #4]
 8002df0:	6008      	str	r0, [r1, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6811      	ldr	r1, [r2, #0]
 8002df6:	6852      	ldr	r2, [r2, #4]
 8002df8:	0020      	movs	r0, r4
 8002dfa:	f7fe fdfd 	bl	80019f8 <relay_setup>

  //BUTTONS SETUP
  //----------------------------------------------------------------------------

  //timers config:
  timer_buttons.msec = 1;
 8002dfe:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <main+0x3e0>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 8002e04:	4c5f      	ldr	r4, [pc, #380]	; (8002f84 <main+0x3e0>)
 8002e06:	4d60      	ldr	r5, [pc, #384]	; (8002f88 <main+0x3e4>)
 8002e08:	466b      	mov	r3, sp
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	0023      	movs	r3, r4
 8002e0e:	3308      	adds	r3, #8
 8002e10:	2210      	movs	r2, #16
 8002e12:	0019      	movs	r1, r3
 8002e14:	f003 fc1c 	bl	8006650 <memcpy>
 8002e18:	6822      	ldr	r2, [r4, #0]
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	0028      	movs	r0, r5
 8002e1e:	f7ff fb53 	bl	80024c8 <deadline_timer_setup>

  //Hardware assignation:
  button_gpio_t button_input;
  button_input.pin = LAMP1_IN_Pin;
 8002e22:	2168      	movs	r1, #104	; 0x68
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	0092      	lsls	r2, r2, #2
 8002e2a:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 8002e2c:	187b      	adds	r3, r7, r1
 8002e2e:	22a0      	movs	r2, #160	; 0xa0
 8002e30:	05d2      	lsls	r2, r2, #23
 8002e32:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_1, button_input);
 8002e34:	000c      	movs	r4, r1
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	4854      	ldr	r0, [pc, #336]	; (8002f8c <main+0x3e8>)
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	f7fd fd64 	bl	800090a <button_setup>

  button_input.pin = LAMP2_IN_Pin;
 8002e42:	0021      	movs	r1, r4
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2208      	movs	r2, #8
 8002e48:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP2_IN_GPIO_Port;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	22a0      	movs	r2, #160	; 0xa0
 8002e4e:	05d2      	lsls	r2, r2, #23
 8002e50:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_2, button_input);
 8002e52:	000c      	movs	r4, r1
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	484e      	ldr	r0, [pc, #312]	; (8002f90 <main+0x3ec>)
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	f7fd fd55 	bl	800090a <button_setup>

  button_input.pin = UV_IN_Pin;
 8002e60:	0021      	movs	r1, r4
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	2204      	movs	r2, #4
 8002e66:	809a      	strh	r2, [r3, #4]
  button_input.port = UV_IN_GPIO_Port;
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	22a0      	movs	r2, #160	; 0xa0
 8002e6c:	05d2      	lsls	r2, r2, #23
 8002e6e:	601a      	str	r2, [r3, #0]
  button_setup(&button_uv, button_input);
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	4848      	ldr	r0, [pc, #288]	; (8002f94 <main+0x3f0>)
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	f7fd fd47 	bl	800090a <button_setup>
  //----------------------------------------------------------------------------
  led_signal_t signal_led;
  led_signal_gpio_t signal_led_gpio;
  deadline_timer_expired_t indicator_timer_expired;

  signal_led_gpio.pin = LED_Pin;
 8002e7c:	2154      	movs	r1, #84	; 0x54
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	2202      	movs	r2, #2
 8002e82:	809a      	strh	r2, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	22a0      	movs	r2, #160	; 0xa0
 8002e88:	05d2      	lsls	r2, r2, #23
 8002e8a:	601a      	str	r2, [r3, #0]
  led_signal_setup(&signal_led, signal_led_gpio);
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	265c      	movs	r6, #92	; 0x5c
 8002e90:	19b8      	adds	r0, r7, r6
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	f7fd fe2d 	bl	8000af4 <led_signal_setup>
  deadline.msec = 500;
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <main+0x3cc>)
 8002e9c:	22fa      	movs	r2, #250	; 0xfa
 8002e9e:	0052      	lsls	r2, r2, #1
 8002ea0:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 8002ea2:	4b33      	ldr	r3, [pc, #204]	; (8002f70 <main+0x3cc>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]

  deadline_timer_setup(&deadline_led_indicator, deadline);
 8002ea8:	4c31      	ldr	r4, [pc, #196]	; (8002f70 <main+0x3cc>)
 8002eaa:	4d3b      	ldr	r5, [pc, #236]	; (8002f98 <main+0x3f4>)
 8002eac:	466b      	mov	r3, sp
 8002eae:	0018      	movs	r0, r3
 8002eb0:	0023      	movs	r3, r4
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	f003 fbca 	bl	8006650 <memcpy>
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6863      	ldr	r3, [r4, #4]
 8002ec0:	0028      	movs	r0, r5
 8002ec2:	f7ff fb01 	bl	80024c8 <deadline_timer_setup>

  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 8002ec6:	19bb      	adds	r3, r7, r6
 8002ec8:	2101      	movs	r1, #1
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7fd fe57 	bl	8000b7e <led_signal_type_selector>
     * MOTION_SWITCH_MODE_0	=	OFFFICE
     * MOTION_SWITCH_MODE_1	=	RESIDENTIAL
     * MOTION_SWITCH_MODE_2	=
     * */
    //timers config:
    switch(switch_selector.value)
 8002ed0:	2396      	movs	r3, #150	; 0x96
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d100      	bne.n	8002ede <main+0x33a>
 8002edc:	e070      	b.n	8002fc0 <main+0x41c>
 8002ede:	d900      	bls.n	8002ee2 <main+0x33e>
 8002ee0:	e080      	b.n	8002fe4 <main+0x440>
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d028      	beq.n	8002f38 <main+0x394>
 8002ee6:	d900      	bls.n	8002eea <main+0x346>
 8002ee8:	e07c      	b.n	8002fe4 <main+0x440>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <main+0x350>
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d011      	beq.n	8002f16 <main+0x372>
 8002ef2:	e077      	b.n	8002fe4 <main+0x440>
    {
      case MOTION_SWITCH_MODE_0:
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 8002ef4:	4b29      	ldr	r3, [pc, #164]	; (8002f9c <main+0x3f8>)
 8002ef6:	4a2a      	ldr	r2, [pc, #168]	; (8002fa0 <main+0x3fc>)
 8002ef8:	609a      	str	r2, [r3, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 8002efa:	4b2a      	ldr	r3, [pc, #168]	; (8002fa4 <main+0x400>)
 8002efc:	4a28      	ldr	r2, [pc, #160]	; (8002fa0 <main+0x3fc>)
 8002efe:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <main+0x404>)
 8002f02:	22e1      	movs	r2, #225	; 0xe1
 8002f04:	0092      	lsls	r2, r2, #2
 8002f06:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <main+0x408>)
 8002f0a:	4a29      	ldr	r2, [pc, #164]	; (8002fb0 <main+0x40c>)
 8002f0c:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_timeout.msec = OFFICE_LAMP_UV_TIMEOUT_MS;
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <main+0x410>)
 8002f10:	4a29      	ldr	r2, [pc, #164]	; (8002fb8 <main+0x414>)
 8002f12:	609a      	str	r2, [r3, #8]
    	  break;
 8002f14:	e068      	b.n	8002fe8 <main+0x444>
      case MOTION_SWITCH_MODE_1:
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8002f16:	4b21      	ldr	r3, [pc, #132]	; (8002f9c <main+0x3f8>)
 8002f18:	4a27      	ldr	r2, [pc, #156]	; (8002fb8 <main+0x414>)
 8002f1a:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8002f1c:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <main+0x400>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <main+0x404>)
 8002f24:	22e1      	movs	r2, #225	; 0xe1
 8002f26:	0092      	lsls	r2, r2, #2
 8002f28:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <main+0x408>)
 8002f2c:	4a22      	ldr	r2, [pc, #136]	; (8002fb8 <main+0x414>)
 8002f2e:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <main+0x410>)
 8002f32:	4a22      	ldr	r2, [pc, #136]	; (8002fbc <main+0x418>)
 8002f34:	609a      	str	r2, [r3, #8]
    	  break;
 8002f36:	e057      	b.n	8002fe8 <main+0x444>
      case MOTION_SWITCH_MODE_2:
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <main+0x3f8>)
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <main+0x414>)
 8002f3c:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <main+0x400>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8002f44:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <main+0x404>)
 8002f46:	22e1      	movs	r2, #225	; 0xe1
 8002f48:	0092      	lsls	r2, r2, #2
 8002f4a:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <main+0x408>)
 8002f4e:	4a1a      	ldr	r2, [pc, #104]	; (8002fb8 <main+0x414>)
 8002f50:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8002f52:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <main+0x410>)
 8002f54:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <main+0x418>)
 8002f56:	609a      	str	r2, [r3, #8]
    	  break;
 8002f58:	e046      	b.n	8002fe8 <main+0x444>
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	20000240 	.word	0x20000240
 8002f60:	200000e8 	.word	0x200000e8
 8002f64:	50000800 	.word	0x50000800
 8002f68:	50000400 	.word	0x50000400
 8002f6c:	20000088 	.word	0x20000088
 8002f70:	200000f0 	.word	0x200000f0
 8002f74:	20000108 	.word	0x20000108
 8002f78:	20000170 	.word	0x20000170
 8002f7c:	200001d8 	.word	0x200001d8
 8002f80:	ffff8000 	.word	0xffff8000
 8002f84:	200002c0 	.word	0x200002c0
 8002f88:	20000258 	.word	0x20000258
 8002f8c:	200002d8 	.word	0x200002d8
 8002f90:	200002f0 	.word	0x200002f0
 8002f94:	20000308 	.word	0x20000308
 8002f98:	20000328 	.word	0x20000328
 8002f9c:	200003f8 	.word	0x200003f8
 8002fa0:	0000ea60 	.word	0x0000ea60
 8002fa4:	20000480 	.word	0x20000480
 8002fa8:	20000588 	.word	0x20000588
 8002fac:	20000508 	.word	0x20000508
 8002fb0:	0001d4c0 	.word	0x0001d4c0
 8002fb4:	20000608 	.word	0x20000608
 8002fb8:	00002710 	.word	0x00002710
 8002fbc:	00001388 	.word	0x00001388
      case MOTION_SWITCH_MODE_3:
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8002fc0:	4be3      	ldr	r3, [pc, #908]	; (8003350 <main+0x7ac>)
 8002fc2:	4ae4      	ldr	r2, [pc, #912]	; (8003354 <main+0x7b0>)
 8002fc4:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 8002fc6:	4be4      	ldr	r3, [pc, #912]	; (8003358 <main+0x7b4>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8002fcc:	4be3      	ldr	r3, [pc, #908]	; (800335c <main+0x7b8>)
 8002fce:	22e1      	movs	r2, #225	; 0xe1
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8002fd4:	4be2      	ldr	r3, [pc, #904]	; (8003360 <main+0x7bc>)
 8002fd6:	4adf      	ldr	r2, [pc, #892]	; (8003354 <main+0x7b0>)
 8002fd8:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 8002fda:	4be2      	ldr	r3, [pc, #904]	; (8003364 <main+0x7c0>)
 8002fdc:	4ae2      	ldr	r2, [pc, #904]	; (8003368 <main+0x7c4>)
 8002fde:	609a      	str	r2, [r3, #8]
    	  __NOP();
 8002fe0:	46c0      	nop			; (mov r8, r8)
    	  break;
 8002fe2:	e001      	b.n	8002fe8 <main+0x444>
      default:
    	  //do nothing
    	  __NOP();
 8002fe4:	46c0      	nop			; (mov r8, r8)
    	  break;
 8002fe6:	46c0      	nop			; (mov r8, r8)
    }

  //Light 1
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 8002fe8:	4cd9      	ldr	r4, [pc, #868]	; (8003350 <main+0x7ac>)
 8002fea:	4de0      	ldr	r5, [pc, #896]	; (800336c <main+0x7c8>)
 8002fec:	466b      	mov	r3, sp
 8002fee:	0018      	movs	r0, r3
 8002ff0:	0023      	movs	r3, r4
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	0019      	movs	r1, r3
 8002ff8:	f003 fb2a 	bl	8006650 <memcpy>
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	0028      	movs	r0, r5
 8003002:	f7ff fa61 	bl	80024c8 <deadline_timer_setup>
//  deadline_timer_setup_shared_clock(&deadline_motion_light_1, &general_clock,
//		  	  	  	  	  	  	  	  	  	  timer_motion_light_1);
  light_1_state = MOTION_LIGHT_IDLE;
 8003006:	4bda      	ldr	r3, [pc, #872]	; (8003370 <main+0x7cc>)
 8003008:	2200      	movs	r2, #0
 800300a:	701a      	strb	r2, [r3, #0]
  //Light 2
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 800300c:	4cd0      	ldr	r4, [pc, #832]	; (8003350 <main+0x7ac>)
 800300e:	4dd9      	ldr	r5, [pc, #868]	; (8003374 <main+0x7d0>)
 8003010:	466b      	mov	r3, sp
 8003012:	0018      	movs	r0, r3
 8003014:	0023      	movs	r3, r4
 8003016:	3308      	adds	r3, #8
 8003018:	2210      	movs	r2, #16
 800301a:	0019      	movs	r1, r3
 800301c:	f003 fb18 	bl	8006650 <memcpy>
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	6863      	ldr	r3, [r4, #4]
 8003024:	0028      	movs	r0, r5
 8003026:	f7ff fa4f 	bl	80024c8 <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 800302a:	4bd3      	ldr	r3, [pc, #844]	; (8003378 <main+0x7d4>)
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
  //Light UV
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 8003030:	4ccb      	ldr	r4, [pc, #812]	; (8003360 <main+0x7bc>)
 8003032:	4dd2      	ldr	r5, [pc, #840]	; (800337c <main+0x7d8>)
 8003034:	466b      	mov	r3, sp
 8003036:	0018      	movs	r0, r3
 8003038:	0023      	movs	r3, r4
 800303a:	3308      	adds	r3, #8
 800303c:	2210      	movs	r2, #16
 800303e:	0019      	movs	r1, r3
 8003040:	f003 fb06 	bl	8006650 <memcpy>
 8003044:	6822      	ldr	r2, [r4, #0]
 8003046:	6863      	ldr	r3, [r4, #4]
 8003048:	0028      	movs	r0, r5
 800304a:	f7ff fa3d 	bl	80024c8 <deadline_timer_setup>
  //Light safe UV
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 800304e:	4cc3      	ldr	r4, [pc, #780]	; (800335c <main+0x7b8>)
 8003050:	4dcb      	ldr	r5, [pc, #812]	; (8003380 <main+0x7dc>)
 8003052:	466b      	mov	r3, sp
 8003054:	0018      	movs	r0, r3
 8003056:	0023      	movs	r3, r4
 8003058:	3308      	adds	r3, #8
 800305a:	2210      	movs	r2, #16
 800305c:	0019      	movs	r1, r3
 800305e:	f003 faf7 	bl	8006650 <memcpy>
 8003062:	6822      	ldr	r2, [r4, #0]
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	0028      	movs	r0, r5
 8003068:	f7ff fa2e 	bl	80024c8 <deadline_timer_setup>
  //Light UV Timeout
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 800306c:	4cbd      	ldr	r4, [pc, #756]	; (8003364 <main+0x7c0>)
 800306e:	4dc5      	ldr	r5, [pc, #788]	; (8003384 <main+0x7e0>)
 8003070:	466b      	mov	r3, sp
 8003072:	0018      	movs	r0, r3
 8003074:	0023      	movs	r3, r4
 8003076:	3308      	adds	r3, #8
 8003078:	2210      	movs	r2, #16
 800307a:	0019      	movs	r1, r3
 800307c:	f003 fae8 	bl	8006650 <memcpy>
 8003080:	6822      	ldr	r2, [r4, #0]
 8003082:	6863      	ldr	r3, [r4, #4]
 8003084:	0028      	movs	r0, r5
 8003086:	f7ff fa1f 	bl	80024c8 <deadline_timer_setup>
  //Light UV Wait Timeout
  deadline.msec = 5000;
 800308a:	4bbf      	ldr	r3, [pc, #764]	; (8003388 <main+0x7e4>)
 800308c:	4ab6      	ldr	r2, [pc, #728]	; (8003368 <main+0x7c4>)
 800308e:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8003090:	4cbd      	ldr	r4, [pc, #756]	; (8003388 <main+0x7e4>)
 8003092:	4dbe      	ldr	r5, [pc, #760]	; (800338c <main+0x7e8>)
 8003094:	466b      	mov	r3, sp
 8003096:	0018      	movs	r0, r3
 8003098:	0023      	movs	r3, r4
 800309a:	3308      	adds	r3, #8
 800309c:	2210      	movs	r2, #16
 800309e:	0019      	movs	r1, r3
 80030a0:	f003 fad6 	bl	8006650 <memcpy>
 80030a4:	6822      	ldr	r2, [r4, #0]
 80030a6:	6863      	ldr	r3, [r4, #4]
 80030a8:	0028      	movs	r0, r5
 80030aa:	f7ff fa0d 	bl	80024c8 <deadline_timer_setup>
  motion_handler_t motion_sensor_hand;
  led_signal_handler_t led_signal_hand;
  nutone_relay_handler_t lights;
  nutone_relay_handler_t fan;

  if(switch_selector.value == MOTION_SWITCH_MODE_3)
 80030ae:	2396      	movs	r3, #150	; 0x96
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d16d      	bne.n	8003196 <main+0x5f2>
  {

	  lights.relay = &light_1;
 80030ba:	4bb5      	ldr	r3, [pc, #724]	; (8003390 <main+0x7ec>)
 80030bc:	259c      	movs	r5, #156	; 0x9c
 80030be:	006d      	lsls	r5, r5, #1
 80030c0:	195b      	adds	r3, r3, r5
 80030c2:	19db      	adds	r3, r3, r7
 80030c4:	22e8      	movs	r2, #232	; 0xe8
 80030c6:	18ba      	adds	r2, r7, r2
 80030c8:	601a      	str	r2, [r3, #0]
	  lights.deadline_timer = &deadline_timer_light_1;
 80030ca:	4bb1      	ldr	r3, [pc, #708]	; (8003390 <main+0x7ec>)
 80030cc:	195b      	adds	r3, r3, r5
 80030ce:	19db      	adds	r3, r3, r7
 80030d0:	4ab0      	ldr	r2, [pc, #704]	; (8003394 <main+0x7f0>)
 80030d2:	605a      	str	r2, [r3, #4]
	  fan.relay = &light_2;
 80030d4:	4bb0      	ldr	r3, [pc, #704]	; (8003398 <main+0x7f4>)
 80030d6:	195b      	adds	r3, r3, r5
 80030d8:	19db      	adds	r3, r3, r7
 80030da:	22c4      	movs	r2, #196	; 0xc4
 80030dc:	18ba      	adds	r2, r7, r2
 80030de:	601a      	str	r2, [r3, #0]
	  fan.deadline_timer = &deadline_timer_light_2;
 80030e0:	4bad      	ldr	r3, [pc, #692]	; (8003398 <main+0x7f4>)
 80030e2:	195b      	adds	r3, r3, r5
 80030e4:	19db      	adds	r3, r3, r7
 80030e6:	4aad      	ldr	r2, [pc, #692]	; (800339c <main+0x7f8>)
 80030e8:	605a      	str	r2, [r3, #4]

	  nutone_setup(&exhaust_fan, &lights, &fan, &ctrl_timer, &vyv_timeoff);
 80030ea:	4cad      	ldr	r4, [pc, #692]	; (80033a0 <main+0x7fc>)
 80030ec:	003a      	movs	r2, r7
 80030ee:	2308      	movs	r3, #8
 80030f0:	18f9      	adds	r1, r7, r3
 80030f2:	2638      	movs	r6, #56	; 0x38
 80030f4:	19b8      	adds	r0, r7, r6
 80030f6:	4bab      	ldr	r3, [pc, #684]	; (80033a4 <main+0x800>)
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	0023      	movs	r3, r4
 80030fc:	f7fe ff06 	bl	8001f0c <nutone_setup>

	  button_white.button = &button_light_1;
 8003100:	4ba9      	ldr	r3, [pc, #676]	; (80033a8 <main+0x804>)
 8003102:	0029      	movs	r1, r5
 8003104:	185b      	adds	r3, r3, r1
 8003106:	19db      	adds	r3, r3, r7
 8003108:	4aa8      	ldr	r2, [pc, #672]	; (80033ac <main+0x808>)
 800310a:	601a      	str	r2, [r3, #0]
	  button_white.btn_timer = &deadline_buttons;
 800310c:	4ba6      	ldr	r3, [pc, #664]	; (80033a8 <main+0x804>)
 800310e:	185b      	adds	r3, r3, r1
 8003110:	19db      	adds	r3, r3, r7
 8003112:	4aa7      	ldr	r2, [pc, #668]	; (80033b0 <main+0x80c>)
 8003114:	605a      	str	r2, [r3, #4]
	  button_fan.button = &button_light_2;
 8003116:	4ba7      	ldr	r3, [pc, #668]	; (80033b4 <main+0x810>)
 8003118:	185b      	adds	r3, r3, r1
 800311a:	19db      	adds	r3, r3, r7
 800311c:	4aa6      	ldr	r2, [pc, #664]	; (80033b8 <main+0x814>)
 800311e:	601a      	str	r2, [r3, #0]
	  button_fan.btn_timer = &deadline_buttons;
 8003120:	4ba4      	ldr	r3, [pc, #656]	; (80033b4 <main+0x810>)
 8003122:	185b      	adds	r3, r3, r1
 8003124:	19db      	adds	r3, r3, r7
 8003126:	4aa2      	ldr	r2, [pc, #648]	; (80033b0 <main+0x80c>)
 8003128:	605a      	str	r2, [r3, #4]
	  button_vyv.button = &button_uv;
 800312a:	4ba4      	ldr	r3, [pc, #656]	; (80033bc <main+0x818>)
 800312c:	185b      	adds	r3, r3, r1
 800312e:	19db      	adds	r3, r3, r7
 8003130:	4aa3      	ldr	r2, [pc, #652]	; (80033c0 <main+0x81c>)
 8003132:	601a      	str	r2, [r3, #0]
	  button_vyv.btn_timer = &deadline_buttons;
 8003134:	4ba1      	ldr	r3, [pc, #644]	; (80033bc <main+0x818>)
 8003136:	185b      	adds	r3, r3, r1
 8003138:	19db      	adds	r3, r3, r7
 800313a:	4a9d      	ldr	r2, [pc, #628]	; (80033b0 <main+0x80c>)
 800313c:	605a      	str	r2, [r3, #4]
	  motion_sensor_hand.motion_sensor = &motion_sensor;
 800313e:	4ba1      	ldr	r3, [pc, #644]	; (80033c4 <main+0x820>)
 8003140:	185b      	adds	r3, r3, r1
 8003142:	19db      	adds	r3, r3, r7
 8003144:	4aa0      	ldr	r2, [pc, #640]	; (80033c8 <main+0x824>)
 8003146:	601a      	str	r2, [r3, #0]

	  led_signal_hand.led_signal = &signal_led;
 8003148:	4ba0      	ldr	r3, [pc, #640]	; (80033cc <main+0x828>)
 800314a:	185b      	adds	r3, r3, r1
 800314c:	19db      	adds	r3, r3, r7
 800314e:	225c      	movs	r2, #92	; 0x5c
 8003150:	18ba      	adds	r2, r7, r2
 8003152:	601a      	str	r2, [r3, #0]
	  led_signal_hand.led_signal_timer = &deadline_led_indicator;
 8003154:	4b9d      	ldr	r3, [pc, #628]	; (80033cc <main+0x828>)
 8003156:	185b      	adds	r3, r3, r1
 8003158:	19db      	adds	r3, r3, r7
 800315a:	4a9d      	ldr	r2, [pc, #628]	; (80033d0 <main+0x82c>)
 800315c:	605a      	str	r2, [r3, #4]

	  nutone_app_config(&nutone_app_hand, &exhaust_fan, &motion_sensor_hand,
 800315e:	2330      	movs	r3, #48	; 0x30
 8003160:	18fc      	adds	r4, r7, r3
 8003162:	2318      	movs	r3, #24
 8003164:	18fa      	adds	r2, r7, r3
 8003166:	19b9      	adds	r1, r7, r6
 8003168:	489a      	ldr	r0, [pc, #616]	; (80033d4 <main+0x830>)
 800316a:	4b85      	ldr	r3, [pc, #532]	; (8003380 <main+0x7dc>)
 800316c:	9307      	str	r3, [sp, #28]
 800316e:	4b85      	ldr	r3, [pc, #532]	; (8003384 <main+0x7e0>)
 8003170:	9306      	str	r3, [sp, #24]
 8003172:	4b82      	ldr	r3, [pc, #520]	; (800337c <main+0x7d8>)
 8003174:	9305      	str	r3, [sp, #20]
 8003176:	4b7d      	ldr	r3, [pc, #500]	; (800336c <main+0x7c8>)
 8003178:	9304      	str	r3, [sp, #16]
 800317a:	4b7e      	ldr	r3, [pc, #504]	; (8003374 <main+0x7d0>)
 800317c:	9303      	str	r3, [sp, #12]
 800317e:	2310      	movs	r3, #16
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	2320      	movs	r3, #32
 8003186:	18fb      	adds	r3, r7, r3
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	2328      	movs	r3, #40	; 0x28
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	0023      	movs	r3, r4
 8003192:	f7fd f845 	bl	8000220 <nutone_app_config>


  //Start Timers
  //----------------------------------------------------------------------------
	//Start interrupts:
	HAL_TIM_Base_Start_IT(&htim1);
 8003196:	4b90      	ldr	r3, [pc, #576]	; (80033d8 <main+0x834>)
 8003198:	0018      	movs	r0, r3
 800319a:	f002 f8fb 	bl	8005394 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 800319e:	4b8f      	ldr	r3, [pc, #572]	; (80033dc <main+0x838>)
 80031a0:	0018      	movs	r0, r3
 80031a2:	f002 f8f7 	bl	8005394 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 80031a6:	4b8e      	ldr	r3, [pc, #568]	; (80033e0 <main+0x83c>)
 80031a8:	0018      	movs	r0, r3
 80031aa:	f002 f8f3 	bl	8005394 <HAL_TIM_Base_Start_IT>
	//Direct Link communication timer
	HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80031ae:	2200      	movs	r2, #0
 80031b0:	2100      	movs	r1, #0
 80031b2:	2016      	movs	r0, #22
 80031b4:	f001 fa6a 	bl	800468c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80031b8:	2016      	movs	r0, #22
 80031ba:	f001 fa7c 	bl	80046b6 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim17);
 80031be:	4b89      	ldr	r3, [pc, #548]	; (80033e4 <main+0x840>)
 80031c0:	0018      	movs	r0, r3
 80031c2:	f002 f8e7 	bl	8005394 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 80031c6:	2201      	movs	r2, #1
 80031c8:	2100      	movs	r1, #0
 80031ca:	2007      	movs	r0, #7
 80031cc:	f001 fa5e 	bl	800468c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80031d0:	2007      	movs	r0, #7
 80031d2:	f001 fa70 	bl	80046b6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2103      	movs	r1, #3
 80031da:	2006      	movs	r0, #6
 80031dc:	f001 fa56 	bl	800468c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80031e0:	2006      	movs	r0, #6
 80031e2:	f001 fa68 	bl	80046b6 <HAL_NVIC_EnableIRQ>
#ifdef LIGHT_AS_ACTUATOR
  light_ask_off_pulse_fsm(&light_1);
  light_ask_off_pulse_fsm(&light_2);
  light_ask_off_pulse_fsm(&light_uv);
#else //LIGHT_AS_ACTUATOR
  relay_ask_off_pulse_fsm(&light_1);
 80031e6:	23e8      	movs	r3, #232	; 0xe8
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fe fc7d 	bl	8001aea <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_2);
 80031f0:	23c4      	movs	r3, #196	; 0xc4
 80031f2:	18fb      	adds	r3, r7, r3
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fe fc78 	bl	8001aea <relay_ask_off_pulse_fsm>
  relay_ask_off_pulse_fsm(&light_uv);
 80031fa:	23a0      	movs	r3, #160	; 0xa0
 80031fc:	18fb      	adds	r3, r7, r3
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fe fc73 	bl	8001aea <relay_ask_off_pulse_fsm>
#endif //LIGHT_AS_ACTUATOR


  uv_state = MOTION_LIGHT_UV_IDLE;
 8003204:	4b78      	ldr	r3, [pc, #480]	; (80033e8 <main+0x844>)
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
  abort_uv = MOTION_ABORT_FALSE;
 800320a:	4b78      	ldr	r3, [pc, #480]	; (80033ec <main+0x848>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
  //Light timeout UV

  //motion switch
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 8003210:	4b77      	ldr	r3, [pc, #476]	; (80033f0 <main+0x84c>)
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 8003216:	4b77      	ldr	r3, [pc, #476]	; (80033f4 <main+0x850>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 800321c:	4b76      	ldr	r3, [pc, #472]	; (80033f8 <main+0x854>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]

  led_signal_stop(&signal_led);
 8003222:	235c      	movs	r3, #92	; 0x5c
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	0018      	movs	r0, r3
 8003228:	f7fd fd85 	bl	8000d36 <led_signal_stop>
    /* USER CODE BEGIN 3 */
	/**************************************************************************/



	  switch(switch_selector.value)
 800322c:	2396      	movs	r3, #150	; 0x96
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	18fb      	adds	r3, r7, r3
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d100      	bne.n	800323a <main+0x696>
 8003238:	e160      	b.n	80034fc <main+0x958>
 800323a:	d900      	bls.n	800323e <main+0x69a>
 800323c:	e164      	b.n	8003508 <main+0x964>
 800323e:	2b02      	cmp	r3, #2
 8003240:	d100      	bne.n	8003244 <main+0x6a0>
 8003242:	e156      	b.n	80034f2 <main+0x94e>
 8003244:	d900      	bls.n	8003248 <main+0x6a4>
 8003246:	e15f      	b.n	8003508 <main+0x964>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <main+0x6b0>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d100      	bne.n	8003252 <main+0x6ae>
 8003250:	e0d8      	b.n	8003404 <main+0x860>
 8003252:	e159      	b.n	8003508 <main+0x964>
	  {
		  case MOTION_SWITCH_MODE_0:

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8003254:	4c58      	ldr	r4, [pc, #352]	; (80033b8 <main+0x814>)
 8003256:	4a55      	ldr	r2, [pc, #340]	; (80033ac <main+0x808>)
 8003258:	4955      	ldr	r1, [pc, #340]	; (80033b0 <main+0x80c>)
 800325a:	485b      	ldr	r0, [pc, #364]	; (80033c8 <main+0x824>)
 800325c:	4b63      	ldr	r3, [pc, #396]	; (80033ec <main+0x848>)
 800325e:	9304      	str	r3, [sp, #16]
 8003260:	4b65      	ldr	r3, [pc, #404]	; (80033f8 <main+0x854>)
 8003262:	9303      	str	r3, [sp, #12]
 8003264:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <main+0x850>)
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	4b61      	ldr	r3, [pc, #388]	; (80033f0 <main+0x84c>)
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	4b54      	ldr	r3, [pc, #336]	; (80033c0 <main+0x81c>)
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	0023      	movs	r3, r4
 8003272:	f000 f9c2 	bl	80035fa <events_detection_uv_waits>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_light_2,
								  &motion_sensed_uv,
								  &abort_uv);
			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8003276:	4c3d      	ldr	r4, [pc, #244]	; (800336c <main+0x7c8>)
 8003278:	4a53      	ldr	r2, [pc, #332]	; (80033c8 <main+0x824>)
 800327a:	494c      	ldr	r1, [pc, #304]	; (80033ac <main+0x808>)
 800327c:	25e8      	movs	r5, #232	; 0xe8
 800327e:	1978      	adds	r0, r7, r5
 8003280:	4b5b      	ldr	r3, [pc, #364]	; (80033f0 <main+0x84c>)
 8003282:	9301      	str	r3, [sp, #4]
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <main+0x7cc>)
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	0023      	movs	r3, r4
 800328a:	f000 fa2d 	bl	80036e8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);
			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 800328e:	4c39      	ldr	r4, [pc, #228]	; (8003374 <main+0x7d0>)
 8003290:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <main+0x824>)
 8003292:	4949      	ldr	r1, [pc, #292]	; (80033b8 <main+0x814>)
 8003294:	26c4      	movs	r6, #196	; 0xc4
 8003296:	19b8      	adds	r0, r7, r6
 8003298:	4b56      	ldr	r3, [pc, #344]	; (80033f4 <main+0x850>)
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <main+0x7d4>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	0023      	movs	r3, r4
 80032a2:	f000 fa21 	bl	80036e8 <motion_light_control_fsm>

#ifdef LIGHT_AS_ACTUATOR
			  if((light_1.light_status == LIGHT_ON) ||
				 (light_2.light_status == LIGHT_ON))
#else	//LIGHT_AS_ACTUATOR
			  if((light_1.relay_status == RELAY_ON) ||
 80032a6:	197b      	adds	r3, r7, r5
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d003      	beq.n	80032b6 <main+0x712>
				 (light_2.relay_status == RELAY_ON))
 80032ae:	19bb      	adds	r3, r7, r6
 80032b0:	781b      	ldrb	r3, [r3, #0]
			  if((light_1.relay_status == RELAY_ON) ||
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d103      	bne.n	80032be <main+0x71a>
#endif	//LIGHT_AS_ACTUATOR
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <main+0x858>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
 80032bc:	e002      	b.n	80032c4 <main+0x720>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 80032be:	4b4f      	ldr	r3, [pc, #316]	; (80033fc <main+0x858>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 80032c4:	4b4d      	ldr	r3, [pc, #308]	; (80033fc <main+0x858>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4d2c      	ldr	r5, [pc, #176]	; (800337c <main+0x7d8>)
 80032ca:	4c3f      	ldr	r4, [pc, #252]	; (80033c8 <main+0x824>)
 80032cc:	493c      	ldr	r1, [pc, #240]	; (80033c0 <main+0x81c>)
 80032ce:	26a0      	movs	r6, #160	; 0xa0
 80032d0:	19b8      	adds	r0, r7, r6
 80032d2:	225c      	movs	r2, #92	; 0x5c
 80032d4:	18ba      	adds	r2, r7, r2
 80032d6:	9207      	str	r2, [sp, #28]
 80032d8:	9306      	str	r3, [sp, #24]
 80032da:	4b44      	ldr	r3, [pc, #272]	; (80033ec <main+0x848>)
 80032dc:	9305      	str	r3, [sp, #20]
 80032de:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <main+0x854>)
 80032e0:	9304      	str	r3, [sp, #16]
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <main+0x844>)
 80032e4:	9303      	str	r3, [sp, #12]
 80032e6:	4b29      	ldr	r3, [pc, #164]	; (800338c <main+0x7e8>)
 80032e8:	9302      	str	r3, [sp, #8]
 80032ea:	4b26      	ldr	r3, [pc, #152]	; (8003384 <main+0x7e0>)
 80032ec:	9301      	str	r3, [sp, #4]
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <main+0x7dc>)
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	002b      	movs	r3, r5
 80032f4:	0022      	movs	r2, r4
 80032f6:	f000 faad 	bl	8003854 <motion_uv_ctrl_wait_fsm>
#ifdef LIGHT_AS_ACTUATOR
				discreate_actuator(&light_1, &deadline_timer_light_1);
				discreate_actuator(&light_2, &deadline_timer_light_2);
				discreate_actuator(&light_uv, &deadline_timer_uv);
#else //LIGHT_AS_ACTUATOR
			  output_fsm_ctrl(&light_1, &deadline_timer_light_1);
 80032fa:	4a26      	ldr	r2, [pc, #152]	; (8003394 <main+0x7f0>)
 80032fc:	23e8      	movs	r3, #232	; 0xe8
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f7ff f9fe 	bl	8002704 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_2, &deadline_timer_light_2);
 8003308:	4a24      	ldr	r2, [pc, #144]	; (800339c <main+0x7f8>)
 800330a:	23c4      	movs	r3, #196	; 0xc4
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff f9f7 	bl	8002704 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_uv, &deadline_timer_uv);
 8003316:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <main+0x85c>)
 8003318:	19bb      	adds	r3, r7, r6
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff f9f1 	bl	8002704 <output_fsm_ctrl>
#endif //LIGHT_AS_ACTUATOR

			  //LED indicator
			  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 8003322:	2453      	movs	r4, #83	; 0x53
 8003324:	193a      	adds	r2, r7, r4
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <main+0x82c>)
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f7ff f90e 	bl	800254c <deadline_timer_check>

			  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 8003330:	193b      	adds	r3, r7, r4
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d000      	beq.n	800333a <main+0x796>
 8003338:	e0e8      	b.n	800350c <main+0x968>
			  {
				  led_signal_fsm(&signal_led);
 800333a:	225c      	movs	r2, #92	; 0x5c
 800333c:	18bb      	adds	r3, r7, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f7fd fbeb 	bl	8000b1a <led_signal_fsm>
				  deadline_timer_set_initial_time(&deadline_led_indicator);
 8003344:	4b22      	ldr	r3, [pc, #136]	; (80033d0 <main+0x82c>)
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff f937 	bl	80025ba <deadline_timer_set_initial_time>
			  }


			  break;
 800334c:	e0de      	b.n	800350c <main+0x968>
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	200003f8 	.word	0x200003f8
 8003354:	00002710 	.word	0x00002710
 8003358:	20000480 	.word	0x20000480
 800335c:	20000588 	.word	0x20000588
 8003360:	20000508 	.word	0x20000508
 8003364:	20000608 	.word	0x20000608
 8003368:	00001388 	.word	0x00001388
 800336c:	20000390 	.word	0x20000390
 8003370:	20000410 	.word	0x20000410
 8003374:	20000418 	.word	0x20000418
 8003378:	20000498 	.word	0x20000498
 800337c:	200004a0 	.word	0x200004a0
 8003380:	20000520 	.word	0x20000520
 8003384:	200005a0 	.word	0x200005a0
 8003388:	200000f0 	.word	0x200000f0
 800338c:	20000620 	.word	0x20000620
 8003390:	fffffed0 	.word	0xfffffed0
 8003394:	20000108 	.word	0x20000108
 8003398:	fffffec8 	.word	0xfffffec8
 800339c:	20000170 	.word	0x20000170
 80033a0:	20000690 	.word	0x20000690
 80033a4:	200006f8 	.word	0x200006f8
 80033a8:	fffffef0 	.word	0xfffffef0
 80033ac:	200002d8 	.word	0x200002d8
 80033b0:	20000258 	.word	0x20000258
 80033b4:	fffffef8 	.word	0xfffffef8
 80033b8:	200002f0 	.word	0x200002f0
 80033bc:	fffffee8 	.word	0xfffffee8
 80033c0:	20000308 	.word	0x20000308
 80033c4:	fffffee0 	.word	0xfffffee0
 80033c8:	20000088 	.word	0x20000088
 80033cc:	fffffed8 	.word	0xfffffed8
 80033d0:	20000328 	.word	0x20000328
 80033d4:	20000760 	.word	0x20000760
 80033d8:	200007a0 	.word	0x200007a0
 80033dc:	20000838 	.word	0x20000838
 80033e0:	20000884 	.word	0x20000884
 80033e4:	200008d0 	.word	0x200008d0
 80033e8:	20000688 	.word	0x20000688
 80033ec:	20000008 	.word	0x20000008
 80033f0:	20000320 	.word	0x20000320
 80033f4:	20000321 	.word	0x20000321
 80033f8:	20000322 	.word	0x20000322
 80033fc:	20000009 	.word	0x20000009
 8003400:	200001d8 	.word	0x200001d8

		  case MOTION_SWITCH_MODE_1:

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8003404:	4c43      	ldr	r4, [pc, #268]	; (8003514 <main+0x970>)
 8003406:	4a44      	ldr	r2, [pc, #272]	; (8003518 <main+0x974>)
 8003408:	4944      	ldr	r1, [pc, #272]	; (800351c <main+0x978>)
 800340a:	4845      	ldr	r0, [pc, #276]	; (8003520 <main+0x97c>)
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <main+0x980>)
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	4b45      	ldr	r3, [pc, #276]	; (8003528 <main+0x984>)
 8003412:	9303      	str	r3, [sp, #12]
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <main+0x988>)
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <main+0x98c>)
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	4b45      	ldr	r3, [pc, #276]	; (8003534 <main+0x990>)
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	0023      	movs	r3, r4
 8003422:	f000 f8ea 	bl	80035fa <events_detection_uv_waits>
			  								  &button_light_1, &button_light_2, &button_uv,
			  								  &motion_sensed_light_1, &motion_sensed_light_2,
			  								  &motion_sensed_uv,
			  								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8003426:	4c44      	ldr	r4, [pc, #272]	; (8003538 <main+0x994>)
 8003428:	4a3d      	ldr	r2, [pc, #244]	; (8003520 <main+0x97c>)
 800342a:	493b      	ldr	r1, [pc, #236]	; (8003518 <main+0x974>)
 800342c:	25e8      	movs	r5, #232	; 0xe8
 800342e:	1978      	adds	r0, r7, r5
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <main+0x98c>)
 8003432:	9301      	str	r3, [sp, #4]
 8003434:	4b41      	ldr	r3, [pc, #260]	; (800353c <main+0x998>)
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	0023      	movs	r3, r4
 800343a:	f000 f955 	bl	80036e8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  direct_light_control_fsm(&light_2, &button_light_2,
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <main+0x99c>)
 8003440:	4a40      	ldr	r2, [pc, #256]	; (8003544 <main+0x9a0>)
 8003442:	4934      	ldr	r1, [pc, #208]	; (8003514 <main+0x970>)
 8003444:	24c4      	movs	r4, #196	; 0xc4
 8003446:	1938      	adds	r0, r7, r4
 8003448:	f000 fb14 	bl	8003a74 <direct_light_control_fsm>

#ifdef LIGHT_AS_ACTUATOR
			  if((light_1.light_status == LIGHT_ON) ||
				 (light_2.light_status == LIGHT_ON))
#else	//LIGHT_AS_ACTUATOR
			  if((light_1.relay_status == RELAY_ON) ||
 800344c:	197b      	adds	r3, r7, r5
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d003      	beq.n	800345c <main+0x8b8>
				 (light_2.relay_status == RELAY_ON))
 8003454:	193b      	adds	r3, r7, r4
 8003456:	781b      	ldrb	r3, [r3, #0]
			  if((light_1.relay_status == RELAY_ON) ||
 8003458:	2b01      	cmp	r3, #1
 800345a:	d103      	bne.n	8003464 <main+0x8c0>
#endif	//LIGHT_AS_ACTUATOR
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 800345c:	4b3a      	ldr	r3, [pc, #232]	; (8003548 <main+0x9a4>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	e002      	b.n	800346a <main+0x8c6>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 8003464:	4b38      	ldr	r3, [pc, #224]	; (8003548 <main+0x9a4>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <main+0x9a4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	4d37      	ldr	r5, [pc, #220]	; (800354c <main+0x9a8>)
 8003470:	4c2b      	ldr	r4, [pc, #172]	; (8003520 <main+0x97c>)
 8003472:	4930      	ldr	r1, [pc, #192]	; (8003534 <main+0x990>)
 8003474:	26a0      	movs	r6, #160	; 0xa0
 8003476:	19b8      	adds	r0, r7, r6
 8003478:	225c      	movs	r2, #92	; 0x5c
 800347a:	18ba      	adds	r2, r7, r2
 800347c:	9207      	str	r2, [sp, #28]
 800347e:	9306      	str	r3, [sp, #24]
 8003480:	4b28      	ldr	r3, [pc, #160]	; (8003524 <main+0x980>)
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	4b28      	ldr	r3, [pc, #160]	; (8003528 <main+0x984>)
 8003486:	9304      	str	r3, [sp, #16]
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <main+0x9ac>)
 800348a:	9303      	str	r3, [sp, #12]
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <main+0x9b0>)
 800348e:	9302      	str	r3, [sp, #8]
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <main+0x9b4>)
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	4b31      	ldr	r3, [pc, #196]	; (800355c <main+0x9b8>)
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	002b      	movs	r3, r5
 800349a:	0022      	movs	r2, r4
 800349c:	f000 f9da 	bl	8003854 <motion_uv_ctrl_wait_fsm>
#ifdef LIGHT_AS_ACTUATOR
				discreate_actuator(&light_1, &deadline_timer_light_1);
				discreate_actuator(&light_2, &deadline_timer_light_2);
				discreate_actuator(&light_uv, &deadline_timer_uv);
#else //LIGHT_AS_ACTUATOR
			  output_fsm_ctrl(&light_1, &deadline_timer_light_1);
 80034a0:	4a2f      	ldr	r2, [pc, #188]	; (8003560 <main+0x9bc>)
 80034a2:	23e8      	movs	r3, #232	; 0xe8
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff f92b 	bl	8002704 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_2, &deadline_timer_light_2);
 80034ae:	4a2d      	ldr	r2, [pc, #180]	; (8003564 <main+0x9c0>)
 80034b0:	23c4      	movs	r3, #196	; 0xc4
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	0011      	movs	r1, r2
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7ff f924 	bl	8002704 <output_fsm_ctrl>
			  output_fsm_ctrl(&light_uv, &deadline_timer_uv);
 80034bc:	4a2a      	ldr	r2, [pc, #168]	; (8003568 <main+0x9c4>)
 80034be:	19bb      	adds	r3, r7, r6
 80034c0:	0011      	movs	r1, r2
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7ff f91e 	bl	8002704 <output_fsm_ctrl>
#endif //LIGHT_AS_ACTUATOR

			  //LED indicator
			  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 80034c8:	2453      	movs	r4, #83	; 0x53
 80034ca:	193a      	adds	r2, r7, r4
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <main+0x9c8>)
 80034ce:	0011      	movs	r1, r2
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff f83b 	bl	800254c <deadline_timer_check>

			  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 80034d6:	193b      	adds	r3, r7, r4
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d118      	bne.n	8003510 <main+0x96c>
			  {
				  led_signal_fsm(&signal_led);
 80034de:	225c      	movs	r2, #92	; 0x5c
 80034e0:	18bb      	adds	r3, r7, r2
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fb19 	bl	8000b1a <led_signal_fsm>
				  deadline_timer_set_initial_time(&deadline_led_indicator);
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <main+0x9c8>)
 80034ea:	0018      	movs	r0, r3
 80034ec:	f7ff f865 	bl	80025ba <deadline_timer_set_initial_time>
			  }


			  break;
 80034f0:	e00e      	b.n	8003510 <main+0x96c>
		  case MOTION_SWITCH_MODE_2:
			  //do nothing
			  signal_led.type = LED_SIGNAL_BLINK;
 80034f2:	235c      	movs	r3, #92	; 0x5c
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	2202      	movs	r2, #2
 80034f8:	725a      	strb	r2, [r3, #9]

			  break;
 80034fa:	e00a      	b.n	8003512 <main+0x96e>
		  case MOTION_SWITCH_MODE_3:

			  nutone_app_process(&nutone_app_hand);
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <main+0x9cc>)
 80034fe:	0018      	movs	r0, r3
 8003500:	f7fc fed1 	bl	80002a6 <nutone_app_process>

//			  led_signal_start(&signal_led);
//			  signal_led.type = LED_SIGNAL_BLINK;
			  __NOP();
 8003504:	46c0      	nop			; (mov r8, r8)
			  break;
 8003506:	e004      	b.n	8003512 <main+0x96e>
		  default:
			  //do nothing
			  __NOP();
 8003508:	46c0      	nop			; (mov r8, r8)
			  break;
 800350a:	e002      	b.n	8003512 <main+0x96e>
			  break;
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	e68d      	b.n	800322c <main+0x688>
			  break;
 8003510:	46c0      	nop			; (mov r8, r8)
	  switch(switch_selector.value)
 8003512:	e68b      	b.n	800322c <main+0x688>
 8003514:	200002f0 	.word	0x200002f0
 8003518:	200002d8 	.word	0x200002d8
 800351c:	20000258 	.word	0x20000258
 8003520:	20000088 	.word	0x20000088
 8003524:	20000008 	.word	0x20000008
 8003528:	20000322 	.word	0x20000322
 800352c:	20000321 	.word	0x20000321
 8003530:	20000320 	.word	0x20000320
 8003534:	20000308 	.word	0x20000308
 8003538:	20000390 	.word	0x20000390
 800353c:	20000410 	.word	0x20000410
 8003540:	20000499 	.word	0x20000499
 8003544:	20000418 	.word	0x20000418
 8003548:	20000009 	.word	0x20000009
 800354c:	200004a0 	.word	0x200004a0
 8003550:	20000688 	.word	0x20000688
 8003554:	20000620 	.word	0x20000620
 8003558:	200005a0 	.word	0x200005a0
 800355c:	20000520 	.word	0x20000520
 8003560:	20000108 	.word	0x20000108
 8003564:	20000170 	.word	0x20000170
 8003568:	200001d8 	.word	0x200001d8
 800356c:	20000328 	.word	0x20000328
 8003570:	20000760 	.word	0x20000760

08003574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003574:	b590      	push	{r4, r7, lr}
 8003576:	b08d      	sub	sp, #52	; 0x34
 8003578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800357a:	2414      	movs	r4, #20
 800357c:	193b      	adds	r3, r7, r4
 800357e:	0018      	movs	r0, r3
 8003580:	231c      	movs	r3, #28
 8003582:	001a      	movs	r2, r3
 8003584:	2100      	movs	r1, #0
 8003586:	f003 f81d 	bl	80065c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800358a:	003b      	movs	r3, r7
 800358c:	0018      	movs	r0, r3
 800358e:	2314      	movs	r3, #20
 8003590:	001a      	movs	r2, r3
 8003592:	2100      	movs	r1, #0
 8003594:	f003 f816 	bl	80065c4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003598:	193b      	adds	r3, r7, r4
 800359a:	2202      	movs	r2, #2
 800359c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	2280      	movs	r2, #128	; 0x80
 80035a2:	0052      	lsls	r2, r2, #1
 80035a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80035a6:	193b      	adds	r3, r7, r4
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035ac:	193b      	adds	r3, r7, r4
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	0018      	movs	r0, r3
 80035b6:	f001 fb65 	bl	8004c84 <HAL_RCC_OscConfig>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80035be:	f000 fbed 	bl	8003d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035c2:	003b      	movs	r3, r7
 80035c4:	2207      	movs	r2, #7
 80035c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80035c8:	003b      	movs	r3, r7
 80035ca:	2200      	movs	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035ce:	003b      	movs	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80035d4:	003b      	movs	r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80035da:	003b      	movs	r3, r7
 80035dc:	2200      	movs	r2, #0
 80035de:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035e0:	003b      	movs	r3, r7
 80035e2:	2101      	movs	r1, #1
 80035e4:	0018      	movs	r0, r3
 80035e6:	f001 fd31 	bl	800504c <HAL_RCC_ClockConfig>
 80035ea:	1e03      	subs	r3, r0, #0
 80035ec:	d001      	beq.n	80035f2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80035ee:	f000 fbd5 	bl	8003d9c <Error_Handler>
  }
}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b00d      	add	sp, #52	; 0x34
 80035f8:	bd90      	pop	{r4, r7, pc}

080035fa <events_detection_uv_waits>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 80035fa:	b5b0      	push	{r4, r5, r7, lr}
 80035fc:	b08a      	sub	sp, #40	; 0x28
 80035fe:	af04      	add	r7, sp, #16
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 8003608:	2417      	movs	r4, #23
 800360a:	193a      	adds	r2, r7, r4
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	0011      	movs	r1, r2
 8003610:	0018      	movs	r0, r3
 8003612:	f7fd feea 	bl	80013ea <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 8003616:	193b      	adds	r3, r7, r4
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d10c      	bne.n	8003638 <events_detection_uv_waits+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2202      	movs	r2, #2
 8003622:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 8003624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	2202      	movs	r2, #2
 800362e:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2258      	movs	r2, #88	; 0x58
 8003634:	2100      	movs	r1, #0
 8003636:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f832 	bl	80036a8 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	0011      	movs	r1, r2
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f82c 	bl	80036a8 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8003650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	0011      	movs	r1, r2
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f826 	bl	80036a8 <sense_button_event>
		*abort_signal_uv = MOTION_ABORT_TRUE;
	}
#endif //ABORT_WITH_BUTTONS

	//Since a push button does not maintain its state, memory is needed.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	2215      	movs	r2, #21
 8003660:	18ba      	adds	r2, r7, r2
 8003662:	9203      	str	r2, [sp, #12]
 8003664:	2516      	movs	r5, #22
 8003666:	197a      	adds	r2, r7, r5
 8003668:	9202      	str	r2, [sp, #8]
 800366a:	466a      	mov	r2, sp
 800366c:	0011      	movs	r1, r2
 800366e:	001a      	movs	r2, r3
 8003670:	3210      	adds	r2, #16
 8003672:	ca11      	ldmia	r2!, {r0, r4}
 8003674:	c111      	stmia	r1!, {r0, r4}
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f7fd fa1d 	bl	8000abc <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8003682:	197b      	adds	r3, r7, r5
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d10a      	bne.n	80036a0 <events_detection_uv_waits+0xa6>
	{
		if(button_lamp_uv->push_status != BUTTON_PUSH_ON)
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	789b      	ldrb	r3, [r3, #2]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d003      	beq.n	800369a <events_detection_uv_waits+0xa0>
		{
			button_lamp_uv->push_status = BUTTON_PUSH_ON;
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2201      	movs	r2, #1
 8003696:	709a      	strb	r2, [r3, #2]
		else
		{
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
		}
	}
}
 8003698:	e002      	b.n	80036a0 <events_detection_uv_waits+0xa6>
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	2200      	movs	r2, #0
 800369e:	709a      	strb	r2, [r3, #2]
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b006      	add	sp, #24
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}

080036a8 <sense_button_event>:
	}

}

void sense_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 80036a8:	b590      	push	{r4, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]

	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	7b5b      	ldrb	r3, [r3, #13]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d112      	bne.n	80036e0 <sense_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 80036ba:	240f      	movs	r4, #15
 80036bc:	193a      	adds	r2, r7, r4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0011      	movs	r1, r2
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fe ff42 	bl	800254c <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 80036c8:	193b      	adds	r3, r7, r4
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <sense_button_event+0x38>
		{
			button_debounce_fsm(button);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fd f93f 	bl	8000956 <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fe ff6d 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}


}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b005      	add	sp, #20
 80036e6:	bd90      	pop	{r4, r7, pc}

080036e8 <motion_light_control_fsm>:
								pyd1598_sensor_t *motion_sensor,
								deadline_timer_t *deadline_timer,
								motion_light_state_t *fsm_state,
								motion_sensed_t *motion_sensed)
#endif	//LIGHT_AS_ACTUATOR
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b08a      	sub	sp, #40	; 0x28
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
 80036f4:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	785a      	ldrb	r2, [r3, #1]
 80036fa:	2116      	movs	r1, #22
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	187a      	adds	r2, r7, r1
 8003704:	9203      	str	r2, [sp, #12]
 8003706:	2517      	movs	r5, #23
 8003708:	197a      	adds	r2, r7, r5
 800370a:	9202      	str	r2, [sp, #8]
 800370c:	466a      	mov	r2, sp
 800370e:	0011      	movs	r1, r2
 8003710:	001a      	movs	r2, r3
 8003712:	3210      	adds	r2, #16
 8003714:	ca11      	ldmia	r2!, {r0, r4}
 8003716:	c111      	stmia	r1!, {r0, r4}
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f7fd f9cc 	bl	8000abc <button_check_isr_request>

	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8003724:	197b      	adds	r3, r7, r5
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d003      	beq.n	8003734 <motion_light_control_fsm+0x4c>
		(*motion_sensed == MOTION_ISR_UNATTENDED))
 800372c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372e:	781b      	ldrb	r3, [r3, #0]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8003730:	2b02      	cmp	r3, #2
 8003732:	d121      	bne.n	8003778 <motion_light_control_fsm+0x90>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8003734:	2217      	movs	r2, #23
 8003736:	18bb      	adds	r3, r7, r2
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d10e      	bne.n	800375c <motion_light_control_fsm+0x74>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 800373e:	18bb      	adds	r3, r7, r2
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 8003744:	2316      	movs	r3, #22
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d103      	bne.n	8003756 <motion_light_control_fsm+0x6e>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 800374e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003750:	2205      	movs	r2, #5
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e002      	b.n	800375c <motion_light_control_fsm+0x74>
			}
			else
			{
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
			}
		}

		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b02      	cmp	r3, #2
 8003762:	d109      	bne.n	8003778 <motion_light_control_fsm+0x90>
			(*fsm_state == MOTION_LIGHT_IDLE))
 8003764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003766:	781b      	ldrb	r3, [r3, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <motion_light_control_fsm+0x90>
		{
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 800376c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
			*motion_sensed = MOTION_ISR_ATTENDED;
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	2200      	movs	r2, #0
 8003776:	701a      	strb	r2, [r3, #0]
		}

	}

	switch(*fsm_state)
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b05      	cmp	r3, #5
 800377e:	d858      	bhi.n	8003832 <motion_light_control_fsm+0x14a>
 8003780:	009a      	lsls	r2, r3, #2
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <motion_light_control_fsm+0x168>)
 8003784:	18d3      	adds	r3, r2, r3
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 800378a:	46c0      	nop			; (mov r8, r8)

			break;
 800378c:	e056      	b.n	800383c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 800378e:	2115      	movs	r1, #21
 8003790:	187b      	adds	r3, r7, r1
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
			button_get_status(button, &button_status);
 8003796:	000c      	movs	r4, r1
 8003798:	187a      	adds	r2, r7, r1
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fd f967 	bl	8000a72 <button_get_status>

			if(button_status == BUTTON_ON)
 80037a4:	193b      	adds	r3, r7, r4
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d106      	bne.n	80037ba <motion_light_control_fsm+0xd2>
			{
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	2202      	movs	r2, #2
 80037b0:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
				 //if an edge where detected an error occurred in the button
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
				*motion_sensed = MOTION_ISR_ATTENDED;
			}

			break;
 80037b8:	e040      	b.n	800383c <motion_light_control_fsm+0x154>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	2205      	movs	r2, #5
 80037be:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 80037c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c2:	2200      	movs	r2, #0
 80037c4:	701a      	strb	r2, [r3, #0]
			break;
 80037c6:	e039      	b.n	800383c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			relay_ask_on_pulse_fsm(light);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	0018      	movs	r0, r3
 80037cc:	f7fe f9b4 	bl	8001b38 <relay_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2203      	movs	r2, #3
 80037d4:	701a      	strb	r2, [r3, #0]

			break;
 80037d6:	e031      	b.n	800383c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(deadline_timer);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fe feed 	bl	80025ba <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 80037e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e2:	2204      	movs	r2, #4
 80037e4:	701a      	strb	r2, [r3, #0]

			break;
 80037e6:	e029      	b.n	800383c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(deadline_timer, &deadline_expired);
 80037e8:	2414      	movs	r4, #20
 80037ea:	193a      	adds	r2, r7, r4
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	0011      	movs	r1, r2
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fe feab 	bl	800254c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80037f6:	193b      	adds	r3, r7, r4
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <motion_light_control_fsm+0x11c>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 80037fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003800:	2205      	movs	r2, #5
 8003802:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d116      	bne.n	800383a <motion_light_control_fsm+0x152>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	2201      	movs	r2, #1
 8003816:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003818:	e00f      	b.n	800383a <motion_light_control_fsm+0x152>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(deadline_timer);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe fe87 	bl	8002530 <deadline_timer_force_expiration>
			//this is done in another fsm
			relay_ask_off_pulse_fsm(light);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fe f960 	bl	8001aea <relay_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
			break;
 8003830:	e004      	b.n	800383c <motion_light_control_fsm+0x154>
		default:
			*fsm_state = MOTION_LIGHT_IDLE;
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]
			break;
 8003838:	e000      	b.n	800383c <motion_light_control_fsm+0x154>
			break;
 800383a:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 800383c:	2317      	movs	r3, #23
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	70da      	strb	r2, [r3, #3]

}
 8003846:	46c0      	nop			; (mov r8, r8)
 8003848:	46bd      	mov	sp, r7
 800384a:	b006      	add	sp, #24
 800384c:	bdb0      	pop	{r4, r5, r7, pc}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	08006768 	.word	0x08006768

08003854 <motion_uv_ctrl_wait_fsm>:
									motion_sensed_t *motion_sensed,
									motion_light_uv_abort_t *uv_abort,
									motion_uv_wait_signal_t wait,
									led_signal_t *signal)
#endif	//LIGHT_AS_ACTUATOR
{
 8003854:	b5b0      	push	{r4, r5, r7, lr}
 8003856:	b09c      	sub	sp, #112	; 0x70
 8003858:	af16      	add	r7, sp, #88	; 0x58
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785a      	ldrb	r2, [r3, #1]
 8003866:	2116      	movs	r1, #22
 8003868:	187b      	adds	r3, r7, r1
 800386a:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;
	deadline_timer_expired_t deadline_safe_expired;
	deadline_timer_expired_t deadline_timeout_expired;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	187a      	adds	r2, r7, r1
 8003870:	9203      	str	r2, [sp, #12]
 8003872:	2517      	movs	r5, #23
 8003874:	197a      	adds	r2, r7, r5
 8003876:	9202      	str	r2, [sp, #8]
 8003878:	466a      	mov	r2, sp
 800387a:	0011      	movs	r1, r2
 800387c:	001a      	movs	r2, r3
 800387e:	3210      	adds	r2, #16
 8003880:	ca11      	ldmia	r2!, {r0, r4}
 8003882:	c111      	stmia	r1!, {r0, r4}
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	6859      	ldr	r1, [r3, #4]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f7fd f916 	bl	8000abc <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8003890:	687c      	ldr	r4, [r7, #4]
 8003892:	2315      	movs	r3, #21
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	9314      	str	r3, [sp, #80]	; 0x50
 8003898:	466b      	mov	r3, sp
 800389a:	0018      	movs	r0, r3
 800389c:	0023      	movs	r3, r4
 800389e:	3310      	adds	r3, #16
 80038a0:	2250      	movs	r2, #80	; 0x50
 80038a2:	0019      	movs	r1, r3
 80038a4:	f002 fed4 	bl	8006650 <memcpy>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	6861      	ldr	r1, [r4, #4]
 80038ac:	68a2      	ldr	r2, [r4, #8]
 80038ae:	68e3      	ldr	r3, [r4, #12]
 80038b0:	f7fd fd84 	bl	80013bc <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 80038b4:	197b      	adds	r3, r7, r5
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d10e      	bne.n	80038da <motion_uv_ctrl_wait_fsm+0x86>
	{

		//Change if abort is not required with a second push
		if(button_uv->push_status == BUTTON_PUSH_ON)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	789b      	ldrb	r3, [r3, #2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d103      	bne.n	80038cc <motion_uv_ctrl_wait_fsm+0x78>
		{
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 80038c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e002      	b.n	80038d2 <motion_uv_ctrl_wait_fsm+0x7e>
		}
		else
		{
			*fsm_state = MOTION_LIGHT_UV_ABORT;
 80038cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ce:	220a      	movs	r2, #10
 80038d0:	701a      	strb	r2, [r3, #0]
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80038d2:	2317      	movs	r3, #23
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 80038da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <motion_uv_ctrl_wait_fsm+0x9a>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	220a      	movs	r2, #10
 80038e6:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 80038e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b0a      	cmp	r3, #10
 80038f4:	d900      	bls.n	80038f8 <motion_uv_ctrl_wait_fsm+0xa4>
 80038f6:	e0a9      	b.n	8003a4c <motion_uv_ctrl_wait_fsm+0x1f8>
 80038f8:	009a      	lsls	r2, r3, #2
 80038fa:	4b5d      	ldr	r3, [pc, #372]	; (8003a70 <motion_uv_ctrl_wait_fsm+0x21c>)
 80038fc:	18d3      	adds	r3, r2, r3
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 8003902:	46c0      	nop			; (mov r8, r8)

			break;
 8003904:	e0ab      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER:
			//Initialize deadline_timeout
			deadline_timer_set_initial_time(deadline_timeout);
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	0018      	movs	r0, r3
 800390a:	f7fe fe56 	bl	80025ba <deadline_timer_set_initial_time>
			deadline_timer_set_initial_time(deadline_wait_timeout);
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	0018      	movs	r0, r3
 8003912:	f7fe fe52 	bl	80025ba <deadline_timer_set_initial_time>

			//Start LED indicator
			led_signal_start(signal);
 8003916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003918:	0018      	movs	r0, r3
 800391a:	f7fd fa00 	bl	8000d1e <led_signal_start>
			signal->type = LED_SIGNAL_BLINK;
 800391e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003920:	2202      	movs	r2, #2
 8003922:	725a      	strb	r2, [r3, #9]

			*fsm_state = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 8003924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003926:	2203      	movs	r2, #3
 8003928:	701a      	strb	r2, [r3, #0]

			break;
 800392a:	e098      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
#ifndef TEST_TIMEOUT
		case MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT:

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 800392c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b02      	cmp	r3, #2
 8003932:	d102      	bne.n	800393a <motion_uv_ctrl_wait_fsm+0xe6>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
			}


			deadline_timer_check(deadline_timeout, &deadline_timeout_expired);
 800393a:	2413      	movs	r4, #19
 800393c:	193a      	adds	r2, r7, r4
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	0011      	movs	r1, r2
 8003942:	0018      	movs	r0, r3
 8003944:	f7fe fe02 	bl	800254c <deadline_timer_check>

			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8003948:	193b      	adds	r3, r7, r4
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d000      	beq.n	8003952 <motion_uv_ctrl_wait_fsm+0xfe>
 8003950:	e080      	b.n	8003a54 <motion_uv_ctrl_wait_fsm+0x200>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8003958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395a:	2204      	movs	r2, #4
 800395c:	701a      	strb	r2, [r3, #0]
				signal->type = LED_SIGNAL_SOLID;
 800395e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003960:	2201      	movs	r2, #1
 8003962:	725a      	strb	r2, [r3, #9]
			}



			break;
 8003964:	e076      	b.n	8003a54 <motion_uv_ctrl_wait_fsm+0x200>
			break;
#endif //TEST_TIMEOUT

		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8003966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003968:	0018      	movs	r0, r3
 800396a:	f7fe fe26 	bl	80025ba <deadline_timer_set_initial_time>

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 800396e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003970:	2205      	movs	r2, #5
 8003972:	701a      	strb	r2, [r3, #0]
			break;
 8003974:	e073      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>

		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8003976:	2414      	movs	r4, #20
 8003978:	193a      	adds	r2, r7, r4
 800397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7fe fde4 	bl	800254c <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8003984:	193b      	adds	r3, r7, r4
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d103      	bne.n	8003994 <motion_uv_ctrl_wait_fsm+0x140>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	2206      	movs	r2, #6
 8003990:	701a      	strb	r2, [r3, #0]
					}
				}

			}

			break;
 8003992:	e061      	b.n	8003a58 <motion_uv_ctrl_wait_fsm+0x204>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8003994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d106      	bne.n	80039aa <motion_uv_ctrl_wait_fsm+0x156>
					*motion_sensed = MOTION_ISR_ATTENDED;
 800399c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_ABORT;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	220a      	movs	r2, #10
 80039a6:	701a      	strb	r2, [r3, #0]
			break;
 80039a8:	e056      	b.n	8003a58 <motion_uv_ctrl_wait_fsm+0x204>
					if(wait == MOTION_UV_WAIT_TRUE)
 80039aa:	2340      	movs	r3, #64	; 0x40
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d151      	bne.n	8003a58 <motion_uv_ctrl_wait_fsm+0x204>
						*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b6:	2204      	movs	r2, #4
 80039b8:	701a      	strb	r2, [r3, #0]
			break;
 80039ba:	e04d      	b.n	8003a58 <motion_uv_ctrl_wait_fsm+0x204>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
#ifdef LIGHT_AS_ACTUATOR
			light_ask_on_pulse_fsm(light_uv);
#else	//LIGHT_AS_ACTUATOR
			relay_ask_on_pulse_fsm(light_uv);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	0018      	movs	r0, r3
 80039c0:	f7fe f8ba 	bl	8001b38 <relay_ask_on_pulse_fsm>
#endif	//LIGHT_AS_ACTUATOR
//			signal->type = LED_SIGNAL_SOLID;
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 80039c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c6:	2207      	movs	r2, #7
 80039c8:	701a      	strb	r2, [r3, #0]

			break;
 80039ca:	e048      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f7fe fdf3 	bl	80025ba <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 80039d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d6:	2208      	movs	r2, #8
 80039d8:	701a      	strb	r2, [r3, #0]
			break;
 80039da:	e040      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 80039dc:	2412      	movs	r4, #18
 80039de:	193a      	adds	r2, r7, r4
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	0011      	movs	r1, r2
 80039e4:	0018      	movs	r0, r3
 80039e6:	f7fe fdb1 	bl	800254c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <motion_uv_ctrl_wait_fsm+0x1a4>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	2209      	movs	r2, #9
 80039f6:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d12d      	bne.n	8003a5c <motion_uv_ctrl_wait_fsm+0x208>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8003a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a02:	2200      	movs	r2, #0
 8003a04:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8003a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a08:	220a      	movs	r2, #10
 8003a0a:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003a0c:	e026      	b.n	8003a5c <motion_uv_ctrl_wait_fsm+0x208>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	2209      	movs	r2, #9
 8003a12:	701a      	strb	r2, [r3, #0]
			break;
 8003a14:	e023      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fe fd89 	bl	8002530 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_timeout);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	0018      	movs	r0, r3
 8003a22:	f7fe fd85 	bl	8002530 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_wait_timeout);
 8003a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fe fd81 	bl	8002530 <deadline_timer_force_expiration>
			button_uv->push_status = BUTTON_PUSH_OFF;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2200      	movs	r2, #0
 8003a32:	709a      	strb	r2, [r3, #2]

			//Send signal to turn off UV lamp
#ifdef LIGHT_AS_ACTUATOR
			light_ask_off_pulse_fsm(light_uv);
#else	//LIGHT_AS_ACTUATOR
			relay_ask_off_pulse_fsm(light_uv);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fe f857 	bl	8001aea <relay_ask_off_pulse_fsm>
#endif	//LIGHT_AS_ACTUATOR

			//Send signal stop LED indicator
			led_signal_stop(signal);
 8003a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f7fd f979 	bl	8000d36 <led_signal_stop>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8003a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a46:	2200      	movs	r2, #0
 8003a48:	701a      	strb	r2, [r3, #0]
			break;
 8003a4a:	e008      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
			break;
 8003a52:	e004      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	e002      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	e000      	b.n	8003a5e <motion_uv_ctrl_wait_fsm+0x20a>
			break;
 8003a5c:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8003a5e:	2317      	movs	r3, #23
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	70da      	strb	r2, [r3, #3]
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b006      	add	sp, #24
 8003a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a70:	08006780 	.word	0x08006780

08003a74 <direct_light_control_fsm>:
void direct_light_control_fsm(relay_t *light,
								button_t *button,
								deadline_timer_t *deadline_timer,
								motion_light_no_motion_state_t *fsm_state)
#endif	//LIGHT_AS_ACTUATOR
{
 8003a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a76:	b08b      	sub	sp, #44	; 0x2c
 8003a78:	af04      	add	r7, sp, #16
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	785a      	ldrb	r2, [r3, #1]
 8003a86:	2516      	movs	r5, #22
 8003a88:	197b      	adds	r3, r7, r5
 8003a8a:	701a      	strb	r2, [r3, #0]
	button_status_t button_status = BUTTON_OFF;
 8003a8c:	2315      	movs	r3, #21
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	197a      	adds	r2, r7, r5
 8003a98:	9203      	str	r2, [sp, #12]
 8003a9a:	2617      	movs	r6, #23
 8003a9c:	19ba      	adds	r2, r7, r6
 8003a9e:	9202      	str	r2, [sp, #8]
 8003aa0:	466a      	mov	r2, sp
 8003aa2:	0011      	movs	r1, r2
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	3210      	adds	r2, #16
 8003aa8:	ca11      	ldmia	r2!, {r0, r4}
 8003aaa:	c111      	stmia	r1!, {r0, r4}
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	6859      	ldr	r1, [r3, #4]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f7fd f802 	bl	8000abc <button_check_isr_request>

	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8003ab8:	19bb      	adds	r3, r7, r6
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d10d      	bne.n	8003adc <direct_light_control_fsm+0x68>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8003ac0:	19bb      	adds	r3, r7, r6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]

		if(edge == BUTTON_EDGE_NEGATIVE)
 8003ac6:	197b      	adds	r3, r7, r5
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d103      	bne.n	8003ad6 <direct_light_control_fsm+0x62>
		{
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	e002      	b.n	8003adc <direct_light_control_fsm+0x68>
		}
		else
		{
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(*fsm_state)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d021      	beq.n	8003b28 <direct_light_control_fsm+0xb4>
 8003ae4:	dc28      	bgt.n	8003b38 <direct_light_control_fsm+0xc4>
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d007      	beq.n	8003afa <direct_light_control_fsm+0x86>
 8003aea:	dc25      	bgt.n	8003b38 <direct_light_control_fsm+0xc4>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <direct_light_control_fsm+0x82>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d00a      	beq.n	8003b0a <direct_light_control_fsm+0x96>
 8003af4:	e020      	b.n	8003b38 <direct_light_control_fsm+0xc4>
	{
		case NO_MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8003af6:	46c0      	nop			; (mov r8, r8)

			break;
 8003af8:	e023      	b.n	8003b42 <direct_light_control_fsm+0xce>

			//this is done in another fsm
#ifdef LIGHT_AS_ACTUATOR
			light_ask_on_pulse_fsm(light);
#else	//LIGHT_AS_ACTUATOR
			relay_ask_on_pulse_fsm(light);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7fe f81b 	bl	8001b38 <relay_ask_on_pulse_fsm>
#endif	//LIGHT_AS_ACTUATOR
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]

			break;
 8003b08:	e01b      	b.n	8003b42 <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_CHECK_BUTTON:
			//This updates the timer count
			button_get_status(button, &button_status);
 8003b0a:	2415      	movs	r4, #21
 8003b0c:	193a      	adds	r2, r7, r4
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	0011      	movs	r1, r2
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7fc ffad 	bl	8000a72 <button_get_status>

			//TODO: (low) This step is just to ensure things are done
			if(button_status == BUTTON_OFF)
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10f      	bne.n	8003b40 <direct_light_control_fsm+0xcc>
			{
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2203      	movs	r2, #3
 8003b24:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003b26:	e00b      	b.n	8003b40 <direct_light_control_fsm+0xcc>
		case NO_MOTION_LIGHT_TURN_OFF_LIGHT:
			//this is done in another fsm
#ifdef LIGHT_AS_ACTUATOR
			light_ask_off_pulse_fsm(light);
#else	//LIGHT_AS_ACTUATOR
			relay_ask_off_pulse_fsm(light);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f7fd ffdd 	bl	8001aea <relay_ask_off_pulse_fsm>
#endif	//LIGHT_AS_ACTUATOR
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
			break;
 8003b36:	e004      	b.n	8003b42 <direct_light_control_fsm+0xce>
		default:
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
			break;
 8003b3e:	e000      	b.n	8003b42 <direct_light_control_fsm+0xce>
			break;
 8003b40:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781a      	ldrb	r2, [r3, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	70da      	strb	r2, [r3, #3]

}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b007      	add	sp, #28
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b54 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]

	if (htim == &htim17)
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d106      	bne.n	8003b72 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8003b64:	4b29      	ldr	r3, [pc, #164]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003b66:	791a      	ldrb	r2, [r3, #4]
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003b6a:	0011      	movs	r1, r2
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fd f9f3 	bl	8000f58 <pyd1598_dl_readout_fsm>
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	4b27      	ldr	r3, [pc, #156]	; (8003c14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d105      	bne.n	8003b86 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8003b7a:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003b7c:	4823      	ldr	r0, [pc, #140]	; (8003c0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003b7e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b82:	f7fd fb51 	bl	8001228 <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	4b23      	ldr	r3, [pc, #140]	; (8003c18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d137      	bne.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0xaa>
	{

		//TODO: (low)can I change this to the infinite while loop in the main?
		deadline_timer_count(&deadline_timer_light_1);
 8003b8e:	4b23      	ldr	r3, [pc, #140]	; (8003c1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe fd05 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8003b96:	4b22      	ldr	r3, [pc, #136]	; (8003c20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fe fd01 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8003b9e:	4b21      	ldr	r3, [pc, #132]	; (8003c24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f7fe fcfd 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8003ba6:	4b20      	ldr	r3, [pc, #128]	; (8003c28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f7fe fcf9 	bl	80025a0 <deadline_timer_count>
		//
		deadline_timer_count(&deadline_motion_light_1);
 8003bae:	4b1f      	ldr	r3, [pc, #124]	; (8003c2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7fe fcf5 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f7fe fcf1 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f7fe fced 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fe fce9 	bl	80025a0 <deadline_timer_count>

		deadline_timer_count(&deadline_led_indicator);
 8003bce:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fe fce5 	bl	80025a0 <deadline_timer_count>

		deadline_timer_count(&deadline_motion_uv_timeout);
 8003bd6:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f7fe fce1 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 8003bde:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8003be0:	0018      	movs	r0, r3
 8003be2:	f7fe fcdd 	bl	80025a0 <deadline_timer_count>

		deadline_timer_count(&ctrl_timer);
 8003be6:	4b18      	ldr	r3, [pc, #96]	; (8003c48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8003be8:	0018      	movs	r0, r3
 8003bea:	f7fe fcd9 	bl	80025a0 <deadline_timer_count>
		deadline_timer_count(&vyv_timeoff);
 8003bee:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8003bf0:	0018      	movs	r0, r3
 8003bf2:	f7fe fcd5 	bl	80025a0 <deadline_timer_count>

		deadline_timer_increment(&general_clock);
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f7fe fd1f 	bl	800263c <deadline_timer_increment>

	}



}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	46bd      	mov	sp, r7
 8003c02:	b002      	add	sp, #8
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	200008d0 	.word	0x200008d0
 8003c0c:	20000088 	.word	0x20000088
 8003c10:	200000a8 	.word	0x200000a8
 8003c14:	20000838 	.word	0x20000838
 8003c18:	20000884 	.word	0x20000884
 8003c1c:	20000108 	.word	0x20000108
 8003c20:	20000170 	.word	0x20000170
 8003c24:	200001d8 	.word	0x200001d8
 8003c28:	20000258 	.word	0x20000258
 8003c2c:	20000390 	.word	0x20000390
 8003c30:	20000418 	.word	0x20000418
 8003c34:	200004a0 	.word	0x200004a0
 8003c38:	20000520 	.word	0x20000520
 8003c3c:	20000328 	.word	0x20000328
 8003c40:	200005a0 	.word	0x200005a0
 8003c44:	20000620 	.word	0x20000620
 8003c48:	20000690 	.word	0x20000690
 8003c4c:	200006f8 	.word	0x200006f8
 8003c50:	20000240 	.word	0x20000240

08003c54 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	1dbb      	adds	r3, r7, #6
 8003c5e:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8003c60:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8003c62:	2248      	movs	r2, #72	; 0x48
 8003c64:	5a9b      	ldrh	r3, [r3, r2]
 8003c66:	1dba      	adds	r2, r7, #6
 8003c68:	8812      	ldrh	r2, [r2, #0]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d107      	bne.n	8003c7e <HAL_GPIO_EXTI_Rising_Callback+0x2a>
	{
//		pyd1598_direct_link_isr_init_set();
		motion_sensor.direct_link.start_fsm = true;
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8003c70:	2241      	movs	r2, #65	; 0x41
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8003c76:	4b20      	ldr	r3, [pc, #128]	; (8003cf8 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8003c7c:	e000      	b.n	8003c80 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	}
	else
	{
		__NOP();
 8003c7e:	46c0      	nop			; (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8003c80:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8003c82:	891b      	ldrh	r3, [r3, #8]
 8003c84:	1dba      	adds	r2, r7, #6
 8003c86:	8812      	ldrh	r2, [r2, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	; (8003cfc <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8003c8e:	7b5b      	ldrb	r3, [r3, #13]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d107      	bne.n	8003ca4 <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_1);
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8003c96:	0018      	movs	r0, r3
 8003c98:	f7fc fec5 	bl	8000a26 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fe fc8b 	bl	80025ba <deadline_timer_set_initial_time>
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8003ca4:	4b17      	ldr	r3, [pc, #92]	; (8003d04 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8003ca6:	891b      	ldrh	r3, [r3, #8]
 8003ca8:	1dba      	adds	r2, r7, #6
 8003caa:	8812      	ldrh	r2, [r2, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d10b      	bne.n	8003cc8 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8003cb2:	7b5b      	ldrb	r3, [r3, #13]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d107      	bne.n	8003cc8 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		{
			button_positive_edge_detected(&button_light_2);
 8003cb8:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fc feb3 	bl	8000a26 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8003cc0:	4b0f      	ldr	r3, [pc, #60]	; (8003d00 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fe fc79 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8003cc8:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8003cca:	891b      	ldrh	r3, [r3, #8]
 8003ccc:	1dba      	adds	r2, r7, #6
 8003cce:	8812      	ldrh	r2, [r2, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d10b      	bne.n	8003cec <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	; (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8003cd6:	7b5b      	ldrb	r3, [r3, #13]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d107      	bne.n	8003cec <HAL_GPIO_EXTI_Rising_Callback+0x98>
		{
			button_positive_edge_detected(&button_uv);
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f7fc fea1 	bl	8000a26 <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8003ce4:	4b06      	ldr	r3, [pc, #24]	; (8003d00 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7fe fc67 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b002      	add	sp, #8
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000088 	.word	0x20000088
 8003cf8:	40014800 	.word	0x40014800
 8003cfc:	200002d8 	.word	0x200002d8
 8003d00:	20000258 	.word	0x20000258
 8003d04:	200002f0 	.word	0x200002f0
 8003d08:	20000308 	.word	0x20000308

08003d0c <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	0002      	movs	r2, r0
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8003d18:	4b1c      	ldr	r3, [pc, #112]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003d1a:	891b      	ldrh	r3, [r3, #8]
 8003d1c:	1dba      	adds	r2, r7, #6
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d10b      	bne.n	8003d3c <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003d26:	7b5b      	ldrb	r3, [r3, #13]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_GPIO_EXTI_Falling_Callback+0x30>
		{
			button_negative_edge_detected(&button_light_1);
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7fc fe8c 	bl	8000a4c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 8003d34:	4b16      	ldr	r3, [pc, #88]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7fe fc3f 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003d3e:	891b      	ldrh	r3, [r3, #8]
 8003d40:	1dba      	adds	r2, r7, #6
 8003d42:	8812      	ldrh	r2, [r2, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d10b      	bne.n	8003d60 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003d48:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003d4a:	7b5b      	ldrb	r3, [r3, #13]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		{
			button_negative_edge_detected(&button_light_2);
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fc fe7a 	bl	8000a4c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8003d58:	4b0d      	ldr	r3, [pc, #52]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7fe fc2d 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8003d60:	4b0d      	ldr	r3, [pc, #52]	; (8003d98 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8003d62:	891b      	ldrh	r3, [r3, #8]
 8003d64:	1dba      	adds	r2, r7, #6
 8003d66:	8812      	ldrh	r2, [r2, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d10b      	bne.n	8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8003d6e:	7b5b      	ldrb	r3, [r3, #13]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button_negative_edge_detected(&button_uv);
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7fc fe68 	bl	8000a4c <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f7fe fc1b 	bl	80025ba <deadline_timer_set_initial_time>
		}
	}
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b002      	add	sp, #8
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200002d8 	.word	0x200002d8
 8003d90:	20000258 	.word	0x20000258
 8003d94:	200002f0 	.word	0x200002f0
 8003d98:	20000308 	.word	0x20000308

08003d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003da0:	b672      	cpsid	i
}
 8003da2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003da4:	e7fe      	b.n	8003da4 <Error_Handler+0x8>
	...

08003da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_MspInit+0x50>)
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_MspInit+0x50>)
 8003db4:	2101      	movs	r1, #1
 8003db6:	430a      	orrs	r2, r1
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_MspInit+0x50>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	607b      	str	r3, [r7, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_MspInit+0x50>)
 8003dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dca:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_MspInit+0x50>)
 8003dcc:	2180      	movs	r1, #128	; 0x80
 8003dce:	0549      	lsls	r1, r1, #21
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_MspInit+0x50>)
 8003dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	055b      	lsls	r3, r3, #21
 8003ddc:	4013      	ands	r3, r2
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8003de2:	2008      	movs	r0, #8
 8003de4:	f000 fb74 	bl	80044d0 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8003de8:	2010      	movs	r0, #16
 8003dea:	f000 fb71 	bl	80044d0 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b002      	add	sp, #8
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	40021000 	.word	0x40021000

08003dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e00:	e7fe      	b.n	8003e00 <NMI_Handler+0x4>

08003e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e06:	e7fe      	b.n	8003e06 <HardFault_Handler+0x4>

08003e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e0c:	46c0      	nop			; (mov r8, r8)
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e20:	f000 fb16 	bl	8004450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 8003e2e:	2004      	movs	r0, #4
 8003e30:	f000 fefe 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 8003e34:	2008      	movs	r0, #8
 8003e36:	f000 fefb 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 8003e44:	2080      	movs	r0, #128	; 0x80
 8003e46:	f000 fef3 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f000 feee 	bl	8004c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003e62:	0018      	movs	r0, r3
 8003e64:	f001 fb9e 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	200007a0 	.word	0x200007a0

08003e74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <TIM1_CC_IRQHandler+0x14>)
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f001 fb92 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	200007a0 	.word	0x200007a0

08003e8c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <TIM14_IRQHandler+0x14>)
 8003e92:	0018      	movs	r0, r3
 8003e94:	f001 fb86 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	20000838 	.word	0x20000838

08003ea4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003ea8:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <TIM16_IRQHandler+0x14>)
 8003eaa:	0018      	movs	r0, r3
 8003eac:	f001 fb7a 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	20000884 	.word	0x20000884

08003ebc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <TIM17_IRQHandler+0x14>)
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f001 fb6e 	bl	80055a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	46c0      	nop			; (mov r8, r8)
 8003ed0:	200008d0 	.word	0x200008d0

08003ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003edc:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <_sbrk+0x5c>)
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <_sbrk+0x60>)
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <_sbrk+0x64>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef0:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <_sbrk+0x64>)
 8003ef2:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <_sbrk+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <_sbrk+0x64>)
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	18d3      	adds	r3, r2, r3
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d207      	bcs.n	8003f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f04:	f002 fb78 	bl	80065f8 <__errno>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	220c      	movs	r2, #12
 8003f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	425b      	negs	r3, r3
 8003f12:	e009      	b.n	8003f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f14:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <_sbrk+0x64>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f1a:	4b07      	ldr	r3, [pc, #28]	; (8003f38 <_sbrk+0x64>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	18d2      	adds	r2, r2, r3
 8003f22:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <_sbrk+0x64>)
 8003f24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003f26:	68fb      	ldr	r3, [r7, #12]
}
 8003f28:	0018      	movs	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b006      	add	sp, #24
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20001800 	.word	0x20001800
 8003f34:	00000400 	.word	0x00000400
 8003f38:	2000079c 	.word	0x2000079c
 8003f3c:	20000a68 	.word	0x20000a68

08003f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <SystemInit+0x14>)
 8003f46:	2280      	movs	r2, #128	; 0x80
 8003f48:	0512      	lsls	r2, r2, #20
 8003f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8003f4c:	46c0      	nop			; (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b088      	sub	sp, #32
 8003f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f5e:	2310      	movs	r3, #16
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	0018      	movs	r0, r3
 8003f64:	2310      	movs	r3, #16
 8003f66:	001a      	movs	r2, r3
 8003f68:	2100      	movs	r1, #0
 8003f6a:	f002 fb2b 	bl	80065c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	0018      	movs	r0, r3
 8003f72:	230c      	movs	r3, #12
 8003f74:	001a      	movs	r2, r3
 8003f76:	2100      	movs	r1, #0
 8003f78:	f002 fb24 	bl	80065c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f7c:	4b21      	ldr	r3, [pc, #132]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f7e:	4a22      	ldr	r2, [pc, #136]	; (8004008 <MX_TIM1_Init+0xb0>)
 8003f80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f84:	222f      	movs	r2, #47	; 0x2f
 8003f86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f88:	4b1e      	ldr	r3, [pc, #120]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f90:	22fa      	movs	r2, #250	; 0xfa
 8003f92:	0092      	lsls	r2, r2, #2
 8003f94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f96:	4b1b      	ldr	r3, [pc, #108]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <MX_TIM1_Init+0xac>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa2:	4b18      	ldr	r3, [pc, #96]	; (8004004 <MX_TIM1_Init+0xac>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fa8:	4b16      	ldr	r3, [pc, #88]	; (8004004 <MX_TIM1_Init+0xac>)
 8003faa:	0018      	movs	r0, r3
 8003fac:	f001 f99a 	bl	80052e4 <HAL_TIM_Base_Init>
 8003fb0:	1e03      	subs	r3, r0, #0
 8003fb2:	d001      	beq.n	8003fb8 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8003fb4:	f7ff fef2 	bl	8003d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fb8:	2110      	movs	r1, #16
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	0152      	lsls	r2, r2, #5
 8003fc0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fc2:	187a      	adds	r2, r7, r1
 8003fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004004 <MX_TIM1_Init+0xac>)
 8003fc6:	0011      	movs	r1, r2
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f001 fc4d 	bl	8005868 <HAL_TIM_ConfigClockSource>
 8003fce:	1e03      	subs	r3, r0, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003fd2:	f7ff fee3 	bl	8003d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003fd6:	1d3b      	adds	r3, r7, #4
 8003fd8:	2240      	movs	r2, #64	; 0x40
 8003fda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003fdc:	1d3b      	adds	r3, r7, #4
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fe8:	1d3a      	adds	r2, r7, #4
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <MX_TIM1_Init+0xac>)
 8003fec:	0011      	movs	r1, r2
 8003fee:	0018      	movs	r0, r3
 8003ff0:	f002 f9b0 	bl	8006354 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8003ff8:	f7ff fed0 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ffc:	46c0      	nop			; (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b008      	add	sp, #32
 8004002:	bd80      	pop	{r7, pc}
 8004004:	200007a0 	.word	0x200007a0
 8004008:	40012c00 	.word	0x40012c00

0800400c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b090      	sub	sp, #64	; 0x40
 8004010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004012:	232c      	movs	r3, #44	; 0x2c
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	0018      	movs	r0, r3
 8004018:	2314      	movs	r3, #20
 800401a:	001a      	movs	r2, r3
 800401c:	2100      	movs	r1, #0
 800401e:	f002 fad1 	bl	80065c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004022:	2320      	movs	r3, #32
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	0018      	movs	r0, r3
 8004028:	230c      	movs	r3, #12
 800402a:	001a      	movs	r2, r3
 800402c:	2100      	movs	r1, #0
 800402e:	f002 fac9 	bl	80065c4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004032:	1d3b      	adds	r3, r7, #4
 8004034:	0018      	movs	r0, r3
 8004036:	231c      	movs	r3, #28
 8004038:	001a      	movs	r2, r3
 800403a:	2100      	movs	r1, #0
 800403c:	f002 fac2 	bl	80065c4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004040:	4b33      	ldr	r3, [pc, #204]	; (8004110 <MX_TIM3_Init+0x104>)
 8004042:	4a34      	ldr	r2, [pc, #208]	; (8004114 <MX_TIM3_Init+0x108>)
 8004044:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8004046:	4b32      	ldr	r3, [pc, #200]	; (8004110 <MX_TIM3_Init+0x104>)
 8004048:	222f      	movs	r2, #47	; 0x2f
 800404a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404c:	4b30      	ldr	r3, [pc, #192]	; (8004110 <MX_TIM3_Init+0x104>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004052:	4b2f      	ldr	r3, [pc, #188]	; (8004110 <MX_TIM3_Init+0x104>)
 8004054:	4a30      	ldr	r2, [pc, #192]	; (8004118 <MX_TIM3_Init+0x10c>)
 8004056:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004058:	4b2d      	ldr	r3, [pc, #180]	; (8004110 <MX_TIM3_Init+0x104>)
 800405a:	2200      	movs	r2, #0
 800405c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800405e:	4b2c      	ldr	r3, [pc, #176]	; (8004110 <MX_TIM3_Init+0x104>)
 8004060:	2200      	movs	r2, #0
 8004062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004064:	4b2a      	ldr	r3, [pc, #168]	; (8004110 <MX_TIM3_Init+0x104>)
 8004066:	0018      	movs	r0, r3
 8004068:	f001 f93c 	bl	80052e4 <HAL_TIM_Base_Init>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004070:	f7ff fe94 	bl	8003d9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <MX_TIM3_Init+0x104>)
 8004076:	0018      	movs	r0, r3
 8004078:	f001 f9da 	bl	8005430 <HAL_TIM_OC_Init>
 800407c:	1e03      	subs	r3, r0, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8004080:	f7ff fe8c 	bl	8003d9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 8004084:	4b22      	ldr	r3, [pc, #136]	; (8004110 <MX_TIM3_Init+0x104>)
 8004086:	2108      	movs	r1, #8
 8004088:	0018      	movs	r0, r3
 800408a:	f001 fa31 	bl	80054f0 <HAL_TIM_OnePulse_Init>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004092:	f7ff fe83 	bl	8003d9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004096:	212c      	movs	r1, #44	; 0x2c
 8004098:	187b      	adds	r3, r7, r1
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800409e:	187b      	adds	r3, r7, r1
 80040a0:	2210      	movs	r2, #16
 80040a2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80040a4:	187a      	adds	r2, r7, r1
 80040a6:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <MX_TIM3_Init+0x104>)
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f001 fcb2 	bl	8005a14 <HAL_TIM_SlaveConfigSynchro>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 80040b4:	f7ff fe72 	bl	8003d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b8:	2120      	movs	r1, #32
 80040ba:	187b      	adds	r3, r7, r1
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040c0:	187b      	adds	r3, r7, r1
 80040c2:	2200      	movs	r2, #0
 80040c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040c6:	187a      	adds	r2, r7, r1
 80040c8:	4b11      	ldr	r3, [pc, #68]	; (8004110 <MX_TIM3_Init+0x104>)
 80040ca:	0011      	movs	r1, r2
 80040cc:	0018      	movs	r0, r3
 80040ce:	f002 f941 	bl	8006354 <HAL_TIMEx_MasterConfigSynchronization>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80040d6:	f7ff fe61 	bl	8003d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 130;
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2282      	movs	r2, #130	; 0x82
 80040e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	2200      	movs	r2, #0
 80040f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040f2:	1d39      	adds	r1, r7, #4
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <MX_TIM3_Init+0x104>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	0018      	movs	r0, r3
 80040fa:	f001 fb55 	bl	80057a8 <HAL_TIM_OC_ConfigChannel>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d001      	beq.n	8004106 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8004102:	f7ff fe4b 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b010      	add	sp, #64	; 0x40
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	200007ec 	.word	0x200007ec
 8004114:	40000400 	.word	0x40000400
 8004118:	0000ffff 	.word	0x0000ffff

0800411c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <MX_TIM14_Init+0x40>)
 8004122:	4a0f      	ldr	r2, [pc, #60]	; (8004160 <MX_TIM14_Init+0x44>)
 8004124:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8004126:	4b0d      	ldr	r3, [pc, #52]	; (800415c <MX_TIM14_Init+0x40>)
 8004128:	222f      	movs	r2, #47	; 0x2f
 800412a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800412c:	4b0b      	ldr	r3, [pc, #44]	; (800415c <MX_TIM14_Init+0x40>)
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 145;
 8004132:	4b0a      	ldr	r3, [pc, #40]	; (800415c <MX_TIM14_Init+0x40>)
 8004134:	2291      	movs	r2, #145	; 0x91
 8004136:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004138:	4b08      	ldr	r3, [pc, #32]	; (800415c <MX_TIM14_Init+0x40>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <MX_TIM14_Init+0x40>)
 8004140:	2200      	movs	r2, #0
 8004142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004144:	4b05      	ldr	r3, [pc, #20]	; (800415c <MX_TIM14_Init+0x40>)
 8004146:	0018      	movs	r0, r3
 8004148:	f001 f8cc 	bl	80052e4 <HAL_TIM_Base_Init>
 800414c:	1e03      	subs	r3, r0, #0
 800414e:	d001      	beq.n	8004154 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8004150:	f7ff fe24 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	20000838 	.word	0x20000838
 8004160:	40002000 	.word	0x40002000

08004164 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004168:	4b10      	ldr	r3, [pc, #64]	; (80041ac <MX_TIM16_Init+0x48>)
 800416a:	4a11      	ldr	r2, [pc, #68]	; (80041b0 <MX_TIM16_Init+0x4c>)
 800416c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 800416e:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <MX_TIM16_Init+0x48>)
 8004170:	222f      	movs	r2, #47	; 0x2f
 8004172:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004174:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <MX_TIM16_Init+0x48>)
 8004176:	2200      	movs	r2, #0
 8004178:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 800417a:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <MX_TIM16_Init+0x48>)
 800417c:	22fa      	movs	r2, #250	; 0xfa
 800417e:	0092      	lsls	r2, r2, #2
 8004180:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004182:	4b0a      	ldr	r3, [pc, #40]	; (80041ac <MX_TIM16_Init+0x48>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <MX_TIM16_Init+0x48>)
 800418a:	2200      	movs	r2, #0
 800418c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800418e:	4b07      	ldr	r3, [pc, #28]	; (80041ac <MX_TIM16_Init+0x48>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <MX_TIM16_Init+0x48>)
 8004196:	0018      	movs	r0, r3
 8004198:	f001 f8a4 	bl	80052e4 <HAL_TIM_Base_Init>
 800419c:	1e03      	subs	r3, r0, #0
 800419e:	d001      	beq.n	80041a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80041a0:	f7ff fdfc 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	20000884 	.word	0x20000884
 80041b0:	40014400 	.word	0x40014400

080041b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <MX_TIM17_Init+0x48>)
 80041bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041c0:	222f      	movs	r2, #47	; 0x2f
 80041c2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 130;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041cc:	2282      	movs	r2, #130	; 0x82
 80041ce:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041d8:	2200      	movs	r2, #0
 80041da:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041de:	2200      	movs	r2, #0
 80041e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <MX_TIM17_Init+0x44>)
 80041e4:	0018      	movs	r0, r3
 80041e6:	f001 f87d 	bl	80052e4 <HAL_TIM_Base_Init>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d001      	beq.n	80041f2 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80041ee:	f7ff fdd5 	bl	8003d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	200008d0 	.word	0x200008d0
 80041fc:	40014800 	.word	0x40014800

08004200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a45      	ldr	r2, [pc, #276]	; (8004324 <HAL_TIM_Base_MspInit+0x124>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d11e      	bne.n	8004250 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004212:	4b45      	ldr	r3, [pc, #276]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	4b44      	ldr	r3, [pc, #272]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	0109      	lsls	r1, r1, #4
 800421c:	430a      	orrs	r2, r1
 800421e:	641a      	str	r2, [r3, #64]	; 0x40
 8004220:	4b41      	ldr	r3, [pc, #260]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	4013      	ands	r3, r2
 800422a:	61fb      	str	r3, [r7, #28]
 800422c:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800422e:	2200      	movs	r2, #0
 8004230:	2100      	movs	r1, #0
 8004232:	200d      	movs	r0, #13
 8004234:	f000 fa2a 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004238:	200d      	movs	r0, #13
 800423a:	f000 fa3c 	bl	80046b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800423e:	2200      	movs	r2, #0
 8004240:	2100      	movs	r1, #0
 8004242:	200e      	movs	r0, #14
 8004244:	f000 fa22 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004248:	200e      	movs	r0, #14
 800424a:	f000 fa34 	bl	80046b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800424e:	e064      	b.n	800431a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a35      	ldr	r2, [pc, #212]	; (800432c <HAL_TIM_Base_MspInit+0x12c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10c      	bne.n	8004274 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800425a:	4b33      	ldr	r3, [pc, #204]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 800425c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800425e:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004260:	2102      	movs	r1, #2
 8004262:	430a      	orrs	r2, r1
 8004264:	63da      	str	r2, [r3, #60]	; 0x3c
 8004266:	4b30      	ldr	r3, [pc, #192]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800426a:	2202      	movs	r2, #2
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	69bb      	ldr	r3, [r7, #24]
}
 8004272:	e052      	b.n	800431a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM14)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a2d      	ldr	r2, [pc, #180]	; (8004330 <HAL_TIM_Base_MspInit+0x130>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d116      	bne.n	80042ac <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 8004284:	2180      	movs	r1, #128	; 0x80
 8004286:	0209      	lsls	r1, r1, #8
 8004288:	430a      	orrs	r2, r1
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
 800428c:	4b26      	ldr	r3, [pc, #152]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 800428e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	4013      	ands	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800429a:	2200      	movs	r2, #0
 800429c:	2100      	movs	r1, #0
 800429e:	2013      	movs	r0, #19
 80042a0:	f000 f9f4 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80042a4:	2013      	movs	r0, #19
 80042a6:	f000 fa06 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 80042aa:	e036      	b.n	800431a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM16)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a20      	ldr	r2, [pc, #128]	; (8004334 <HAL_TIM_Base_MspInit+0x134>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d116      	bne.n	80042e4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80042b6:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042ba:	4b1b      	ldr	r3, [pc, #108]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	0289      	lsls	r1, r1, #10
 80042c0:	430a      	orrs	r2, r1
 80042c2:	641a      	str	r2, [r3, #64]	; 0x40
 80042c4:	4b18      	ldr	r3, [pc, #96]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	029b      	lsls	r3, r3, #10
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80042d2:	2200      	movs	r2, #0
 80042d4:	2100      	movs	r1, #0
 80042d6:	2015      	movs	r0, #21
 80042d8:	f000 f9d8 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80042dc:	2015      	movs	r0, #21
 80042de:	f000 f9ea 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 80042e2:	e01a      	b.n	800431a <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM17)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a13      	ldr	r2, [pc, #76]	; (8004338 <HAL_TIM_Base_MspInit+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d115      	bne.n	800431a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80042ee:	4b0e      	ldr	r3, [pc, #56]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f2:	4b0d      	ldr	r3, [pc, #52]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	02c9      	lsls	r1, r1, #11
 80042f8:	430a      	orrs	r2, r1
 80042fa:	641a      	str	r2, [r3, #64]	; 0x40
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_TIM_Base_MspInit+0x128>)
 80042fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	02db      	lsls	r3, r3, #11
 8004304:	4013      	ands	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	2016      	movs	r0, #22
 8004310:	f000 f9bc 	bl	800468c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004314:	2016      	movs	r0, #22
 8004316:	f000 f9ce 	bl	80046b6 <HAL_NVIC_EnableIRQ>
}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b008      	add	sp, #32
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40021000 	.word	0x40021000
 800432c:	40000400 	.word	0x40000400
 8004330:	40002000 	.word	0x40002000
 8004334:	40014400 	.word	0x40014400
 8004338:	40014800 	.word	0x40014800

0800433c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800433e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004340:	f7ff fdfe 	bl	8003f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004344:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004346:	e003      	b.n	8004350 <LoopCopyDataInit>

08004348 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800434a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800434c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800434e:	3104      	adds	r1, #4

08004350 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004350:	480a      	ldr	r0, [pc, #40]	; (800437c <LoopForever+0xa>)
  ldr r3, =_edata
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <LoopForever+0xe>)
  adds r2, r0, r1
 8004354:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004356:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004358:	d3f6      	bcc.n	8004348 <CopyDataInit>
  ldr r2, =_sbss
 800435a:	4a0a      	ldr	r2, [pc, #40]	; (8004384 <LoopForever+0x12>)
  b LoopFillZerobss
 800435c:	e002      	b.n	8004364 <LoopFillZerobss>

0800435e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800435e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004360:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004362:	3204      	adds	r2, #4

08004364 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8004364:	4b08      	ldr	r3, [pc, #32]	; (8004388 <LoopForever+0x16>)
  cmp r2, r3
 8004366:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004368:	d3f9      	bcc.n	800435e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800436a:	f002 f94b 	bl	8006604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800436e:	f7fe fc19 	bl	8002ba4 <main>

08004372 <LoopForever>:

LoopForever:
    b LoopForever
 8004372:	e7fe      	b.n	8004372 <LoopForever>
  ldr   r0, =_estack
 8004374:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8004378:	08006848 	.word	0x08006848
  ldr r0, =_sdata
 800437c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004380:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8004384:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8004388:	20000a68 	.word	0x20000a68

0800438c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800438c:	e7fe      	b.n	800438c <ADC1_IRQHandler>

0800438e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b082      	sub	sp, #8
 8004392:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004394:	1dfb      	adds	r3, r7, #7
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800439a:	2003      	movs	r0, #3
 800439c:	f000 f80e 	bl	80043bc <HAL_InitTick>
 80043a0:	1e03      	subs	r3, r0, #0
 80043a2:	d003      	beq.n	80043ac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80043a4:	1dfb      	adds	r3, r7, #7
 80043a6:	2201      	movs	r2, #1
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e001      	b.n	80043b0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043ac:	f7ff fcfc 	bl	8003da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043b0:	1dfb      	adds	r3, r7, #7
 80043b2:	781b      	ldrb	r3, [r3, #0]
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b002      	add	sp, #8
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043bc:	b590      	push	{r4, r7, lr}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c4:	230f      	movs	r3, #15
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	2200      	movs	r2, #0
 80043ca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_InitTick+0x88>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d02b      	beq.n	800442c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80043d4:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <HAL_InitTick+0x8c>)
 80043d6:	681c      	ldr	r4, [r3, #0]
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_InitTick+0x88>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	0019      	movs	r1, r3
 80043de:	23fa      	movs	r3, #250	; 0xfa
 80043e0:	0098      	lsls	r0, r3, #2
 80043e2:	f7fb fe91 	bl	8000108 <__udivsi3>
 80043e6:	0003      	movs	r3, r0
 80043e8:	0019      	movs	r1, r3
 80043ea:	0020      	movs	r0, r4
 80043ec:	f7fb fe8c 	bl	8000108 <__udivsi3>
 80043f0:	0003      	movs	r3, r0
 80043f2:	0018      	movs	r0, r3
 80043f4:	f000 f97f 	bl	80046f6 <HAL_SYSTICK_Config>
 80043f8:	1e03      	subs	r3, r0, #0
 80043fa:	d112      	bne.n	8004422 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d80a      	bhi.n	8004418 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	2301      	movs	r3, #1
 8004406:	425b      	negs	r3, r3
 8004408:	2200      	movs	r2, #0
 800440a:	0018      	movs	r0, r3
 800440c:	f000 f93e 	bl	800468c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_InitTick+0x90>)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	e00d      	b.n	8004434 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004418:	230f      	movs	r3, #15
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e008      	b.n	8004434 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004422:	230f      	movs	r3, #15
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	2201      	movs	r2, #1
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	e003      	b.n	8004434 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800442c:	230f      	movs	r3, #15
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004434:	230f      	movs	r3, #15
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	781b      	ldrb	r3, [r3, #0]
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b005      	add	sp, #20
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	20000014 	.word	0x20000014
 8004448:	2000000c 	.word	0x2000000c
 800444c:	20000010 	.word	0x20000010

08004450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_IncTick+0x1c>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	001a      	movs	r2, r3
 800445a:	4b05      	ldr	r3, [pc, #20]	; (8004470 <HAL_IncTick+0x20>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	18d2      	adds	r2, r2, r3
 8004460:	4b03      	ldr	r3, [pc, #12]	; (8004470 <HAL_IncTick+0x20>)
 8004462:	601a      	str	r2, [r3, #0]
}
 8004464:	46c0      	nop			; (mov r8, r8)
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	20000014 	.word	0x20000014
 8004470:	2000091c 	.word	0x2000091c

08004474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  return uwTick;
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <HAL_GetTick+0x10>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	2000091c 	.word	0x2000091c

08004488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7ff fff0 	bl	8004474 <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	d005      	beq.n	80044ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044a2:	4b0a      	ldr	r3, [pc, #40]	; (80044cc <HAL_Delay+0x44>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	001a      	movs	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	189b      	adds	r3, r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	f7ff ffe0 	bl	8004474 <HAL_GetTick>
 80044b4:	0002      	movs	r2, r0
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d8f7      	bhi.n	80044b0 <HAL_Delay+0x28>
  {
  }
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	46bd      	mov	sp, r7
 80044c6:	b004      	add	sp, #16
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	20000014 	.word	0x20000014

080044d0 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HAL_SYSCFG_EnableRemap+0x1c>)
 80044da:	6819      	ldr	r1, [r3, #0]
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HAL_SYSCFG_EnableRemap+0x1c>)
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40010000 	.word	0x40010000

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	0002      	movs	r2, r0
 80044f8:	1dfb      	adds	r3, r7, #7
 80044fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b7f      	cmp	r3, #127	; 0x7f
 8004502:	d809      	bhi.n	8004518 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004504:	1dfb      	adds	r3, r7, #7
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	001a      	movs	r2, r3
 800450a:	231f      	movs	r3, #31
 800450c:	401a      	ands	r2, r3
 800450e:	4b04      	ldr	r3, [pc, #16]	; (8004520 <__NVIC_EnableIRQ+0x30>)
 8004510:	2101      	movs	r1, #1
 8004512:	4091      	lsls	r1, r2
 8004514:	000a      	movs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b002      	add	sp, #8
 800451e:	bd80      	pop	{r7, pc}
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	0002      	movs	r2, r0
 800452c:	1dfb      	adds	r3, r7, #7
 800452e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004530:	1dfb      	adds	r3, r7, #7
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b7f      	cmp	r3, #127	; 0x7f
 8004536:	d810      	bhi.n	800455a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004538:	1dfb      	adds	r3, r7, #7
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	001a      	movs	r2, r3
 800453e:	231f      	movs	r3, #31
 8004540:	4013      	ands	r3, r2
 8004542:	4908      	ldr	r1, [pc, #32]	; (8004564 <__NVIC_DisableIRQ+0x40>)
 8004544:	2201      	movs	r2, #1
 8004546:	409a      	lsls	r2, r3
 8004548:	0013      	movs	r3, r2
 800454a:	2280      	movs	r2, #128	; 0x80
 800454c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 800454e:	f3bf 8f4f 	dsb	sy
}
 8004552:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8004554:	f3bf 8f6f 	isb	sy
}
 8004558:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	46bd      	mov	sp, r7
 800455e:	b002      	add	sp, #8
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	e000e100 	.word	0xe000e100

08004568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	0002      	movs	r2, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	1dfb      	adds	r3, r7, #7
 8004574:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b7f      	cmp	r3, #127	; 0x7f
 800457c:	d828      	bhi.n	80045d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800457e:	4a2f      	ldr	r2, [pc, #188]	; (800463c <__NVIC_SetPriority+0xd4>)
 8004580:	1dfb      	adds	r3, r7, #7
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	b25b      	sxtb	r3, r3
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	33c0      	adds	r3, #192	; 0xc0
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	589b      	ldr	r3, [r3, r2]
 800458e:	1dfa      	adds	r2, r7, #7
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	0011      	movs	r1, r2
 8004594:	2203      	movs	r2, #3
 8004596:	400a      	ands	r2, r1
 8004598:	00d2      	lsls	r2, r2, #3
 800459a:	21ff      	movs	r1, #255	; 0xff
 800459c:	4091      	lsls	r1, r2
 800459e:	000a      	movs	r2, r1
 80045a0:	43d2      	mvns	r2, r2
 80045a2:	401a      	ands	r2, r3
 80045a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	019b      	lsls	r3, r3, #6
 80045aa:	22ff      	movs	r2, #255	; 0xff
 80045ac:	401a      	ands	r2, r3
 80045ae:	1dfb      	adds	r3, r7, #7
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	0018      	movs	r0, r3
 80045b4:	2303      	movs	r3, #3
 80045b6:	4003      	ands	r3, r0
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045bc:	481f      	ldr	r0, [pc, #124]	; (800463c <__NVIC_SetPriority+0xd4>)
 80045be:	1dfb      	adds	r3, r7, #7
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	430a      	orrs	r2, r1
 80045c8:	33c0      	adds	r3, #192	; 0xc0
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80045ce:	e031      	b.n	8004634 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d0:	4a1b      	ldr	r2, [pc, #108]	; (8004640 <__NVIC_SetPriority+0xd8>)
 80045d2:	1dfb      	adds	r3, r7, #7
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	0019      	movs	r1, r3
 80045d8:	230f      	movs	r3, #15
 80045da:	400b      	ands	r3, r1
 80045dc:	3b08      	subs	r3, #8
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3306      	adds	r3, #6
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	18d3      	adds	r3, r2, r3
 80045e6:	3304      	adds	r3, #4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1dfa      	adds	r2, r7, #7
 80045ec:	7812      	ldrb	r2, [r2, #0]
 80045ee:	0011      	movs	r1, r2
 80045f0:	2203      	movs	r2, #3
 80045f2:	400a      	ands	r2, r1
 80045f4:	00d2      	lsls	r2, r2, #3
 80045f6:	21ff      	movs	r1, #255	; 0xff
 80045f8:	4091      	lsls	r1, r2
 80045fa:	000a      	movs	r2, r1
 80045fc:	43d2      	mvns	r2, r2
 80045fe:	401a      	ands	r2, r3
 8004600:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	22ff      	movs	r2, #255	; 0xff
 8004608:	401a      	ands	r2, r3
 800460a:	1dfb      	adds	r3, r7, #7
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	0018      	movs	r0, r3
 8004610:	2303      	movs	r3, #3
 8004612:	4003      	ands	r3, r0
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004618:	4809      	ldr	r0, [pc, #36]	; (8004640 <__NVIC_SetPriority+0xd8>)
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	001c      	movs	r4, r3
 8004620:	230f      	movs	r3, #15
 8004622:	4023      	ands	r3, r4
 8004624:	3b08      	subs	r3, #8
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	430a      	orrs	r2, r1
 800462a:	3306      	adds	r3, #6
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18c3      	adds	r3, r0, r3
 8004630:	3304      	adds	r3, #4
 8004632:	601a      	str	r2, [r3, #0]
}
 8004634:	46c0      	nop			; (mov r8, r8)
 8004636:	46bd      	mov	sp, r7
 8004638:	b003      	add	sp, #12
 800463a:	bd90      	pop	{r4, r7, pc}
 800463c:	e000e100 	.word	0xe000e100
 8004640:	e000ed00 	.word	0xe000ed00

08004644 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1e5a      	subs	r2, r3, #1
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	045b      	lsls	r3, r3, #17
 8004654:	429a      	cmp	r2, r3
 8004656:	d301      	bcc.n	800465c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004658:	2301      	movs	r3, #1
 800465a:	e010      	b.n	800467e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800465c:	4b0a      	ldr	r3, [pc, #40]	; (8004688 <SysTick_Config+0x44>)
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	3a01      	subs	r2, #1
 8004662:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004664:	2301      	movs	r3, #1
 8004666:	425b      	negs	r3, r3
 8004668:	2103      	movs	r1, #3
 800466a:	0018      	movs	r0, r3
 800466c:	f7ff ff7c 	bl	8004568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <SysTick_Config+0x44>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004676:	4b04      	ldr	r3, [pc, #16]	; (8004688 <SysTick_Config+0x44>)
 8004678:	2207      	movs	r2, #7
 800467a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800467c:	2300      	movs	r3, #0
}
 800467e:	0018      	movs	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	b002      	add	sp, #8
 8004684:	bd80      	pop	{r7, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	e000e010 	.word	0xe000e010

0800468c <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
 8004696:	210f      	movs	r1, #15
 8004698:	187b      	adds	r3, r7, r1
 800469a:	1c02      	adds	r2, r0, #0
 800469c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	187b      	adds	r3, r7, r1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b25b      	sxtb	r3, r3
 80046a6:	0011      	movs	r1, r2
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7ff ff5d 	bl	8004568 <__NVIC_SetPriority>
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	0002      	movs	r2, r0
 80046be:	1dfb      	adds	r3, r7, #7
 80046c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046c2:	1dfb      	adds	r3, r7, #7
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b25b      	sxtb	r3, r3
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7ff ff11 	bl	80044f0 <__NVIC_EnableIRQ>
}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b002      	add	sp, #8
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	0002      	movs	r2, r0
 80046de:	1dfb      	adds	r3, r7, #7
 80046e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80046e2:	1dfb      	adds	r3, r7, #7
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7ff ff1b 	bl	8004524 <__NVIC_DisableIRQ>
}
 80046ee:	46c0      	nop			; (mov r8, r8)
 80046f0:	46bd      	mov	sp, r7
 80046f2:	b002      	add	sp, #8
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b082      	sub	sp, #8
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	0018      	movs	r0, r3
 8004702:	f7ff ff9f 	bl	8004644 <SysTick_Config>
 8004706:	0003      	movs	r3, r0
}
 8004708:	0018      	movs	r0, r3
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}

08004710 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b086      	sub	sp, #24
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800471e:	e14d      	b.n	80049bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4091      	lsls	r1, r2
 800472a:	000a      	movs	r2, r1
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d100      	bne.n	8004738 <HAL_GPIO_Init+0x28>
 8004736:	e13e      	b.n	80049b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d003      	beq.n	8004748 <HAL_GPIO_Init+0x38>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	2b12      	cmp	r3, #18
 8004746:	d125      	bne.n	8004794 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	08da      	lsrs	r2, r3, #3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3208      	adds	r2, #8
 8004750:	0092      	lsls	r2, r2, #2
 8004752:	58d3      	ldr	r3, [r2, r3]
 8004754:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2207      	movs	r2, #7
 800475a:	4013      	ands	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	220f      	movs	r2, #15
 8004760:	409a      	lsls	r2, r3
 8004762:	0013      	movs	r3, r2
 8004764:	43da      	mvns	r2, r3
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	4013      	ands	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	220f      	movs	r2, #15
 8004772:	401a      	ands	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	2107      	movs	r1, #7
 8004778:	400b      	ands	r3, r1
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	409a      	lsls	r2, r3
 800477e:	0013      	movs	r3, r2
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	08da      	lsrs	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3208      	adds	r2, #8
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	6979      	ldr	r1, [r7, #20]
 8004792:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	409a      	lsls	r2, r3
 80047a2:	0013      	movs	r3, r2
 80047a4:	43da      	mvns	r2, r3
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	401a      	ands	r2, r3
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	0013      	movs	r3, r2
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d00b      	beq.n	80047e8 <HAL_GPIO_Init+0xd8>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d007      	beq.n	80047e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80047dc:	2b11      	cmp	r3, #17
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b12      	cmp	r3, #18
 80047e6:	d130      	bne.n	800484a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	2203      	movs	r2, #3
 80047f4:	409a      	lsls	r2, r3
 80047f6:	0013      	movs	r3, r2
 80047f8:	43da      	mvns	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	4013      	ands	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	409a      	lsls	r2, r3
 800480a:	0013      	movs	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800481e:	2201      	movs	r2, #1
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	409a      	lsls	r2, r3
 8004824:	0013      	movs	r3, r2
 8004826:	43da      	mvns	r2, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	4013      	ands	r3, r2
 800482c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	2201      	movs	r2, #1
 8004836:	401a      	ands	r2, r3
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	409a      	lsls	r2, r3
 800483c:	0013      	movs	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d017      	beq.n	8004882 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	2203      	movs	r2, #3
 800485e:	409a      	lsls	r2, r3
 8004860:	0013      	movs	r3, r2
 8004862:	43da      	mvns	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4013      	ands	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	409a      	lsls	r2, r3
 8004874:	0013      	movs	r3, r2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	055b      	lsls	r3, r3, #21
 800488a:	4013      	ands	r3, r2
 800488c:	d100      	bne.n	8004890 <HAL_GPIO_Init+0x180>
 800488e:	e092      	b.n	80049b6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8004890:	4a50      	ldr	r2, [pc, #320]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	089b      	lsrs	r3, r3, #2
 8004896:	3318      	adds	r3, #24
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	589b      	ldr	r3, [r3, r2]
 800489c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2203      	movs	r2, #3
 80048a2:	4013      	ands	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	220f      	movs	r2, #15
 80048a8:	409a      	lsls	r2, r3
 80048aa:	0013      	movs	r3, r2
 80048ac:	43da      	mvns	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4013      	ands	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	23a0      	movs	r3, #160	; 0xa0
 80048b8:	05db      	lsls	r3, r3, #23
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d013      	beq.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a45      	ldr	r2, [pc, #276]	; (80049d8 <HAL_GPIO_Init+0x2c8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00d      	beq.n	80048e2 <HAL_GPIO_Init+0x1d2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a44      	ldr	r2, [pc, #272]	; (80049dc <HAL_GPIO_Init+0x2cc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d007      	beq.n	80048de <HAL_GPIO_Init+0x1ce>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a43      	ldr	r2, [pc, #268]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <HAL_GPIO_Init+0x1ca>
 80048d6:	2305      	movs	r3, #5
 80048d8:	e006      	b.n	80048e8 <HAL_GPIO_Init+0x1d8>
 80048da:	2306      	movs	r3, #6
 80048dc:	e004      	b.n	80048e8 <HAL_GPIO_Init+0x1d8>
 80048de:	2302      	movs	r3, #2
 80048e0:	e002      	b.n	80048e8 <HAL_GPIO_Init+0x1d8>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_GPIO_Init+0x1d8>
 80048e6:	2300      	movs	r3, #0
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	2103      	movs	r1, #3
 80048ec:	400a      	ands	r2, r1
 80048ee:	00d2      	lsls	r2, r2, #3
 80048f0:	4093      	lsls	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80048f8:	4936      	ldr	r1, [pc, #216]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	089b      	lsrs	r3, r3, #2
 80048fe:	3318      	adds	r3, #24
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8004906:	4a33      	ldr	r2, [pc, #204]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	58d3      	ldr	r3, [r2, r3]
 800490c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43da      	mvns	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4013      	ands	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	025b      	lsls	r3, r3, #9
 8004920:	4013      	ands	r3, r2
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800492c:	4929      	ldr	r1, [pc, #164]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 800492e:	2280      	movs	r2, #128	; 0x80
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 8004936:	2384      	movs	r3, #132	; 0x84
 8004938:	58d3      	ldr	r3, [r2, r3]
 800493a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	43da      	mvns	r2, r3
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	4013      	ands	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	4013      	ands	r3, r2
 8004950:	d003      	beq.n	800495a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800495a:	491e      	ldr	r1, [pc, #120]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 800495c:	2284      	movs	r2, #132	; 0x84
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004962:	4b1c      	ldr	r3, [pc, #112]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	43da      	mvns	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4013      	ands	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	035b      	lsls	r3, r3, #13
 800497a:	4013      	ands	r3, r2
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8004986:	4b13      	ldr	r3, [pc, #76]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	43da      	mvns	r2, r3
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	4013      	ands	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	039b      	lsls	r3, r3, #14
 80049a4:	4013      	ands	r3, r2
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <HAL_GPIO_Init+0x2c4>)
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	40da      	lsrs	r2, r3
 80049c4:	1e13      	subs	r3, r2, #0
 80049c6:	d000      	beq.n	80049ca <HAL_GPIO_Init+0x2ba>
 80049c8:	e6aa      	b.n	8004720 <HAL_GPIO_Init+0x10>
  }
}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b006      	add	sp, #24
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021800 	.word	0x40021800
 80049d8:	50000400 	.word	0x50000400
 80049dc:	50000800 	.word	0x50000800
 80049e0:	50001400 	.word	0x50001400

080049e4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80049f2:	e0b4      	b.n	8004b5e <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80049f4:	2201      	movs	r2, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	409a      	lsls	r2, r3
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d100      	bne.n	8004a08 <HAL_GPIO_DeInit+0x24>
 8004a06:	e0a7      	b.n	8004b58 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8004a08:	4a5a      	ldr	r2, [pc, #360]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3318      	adds	r3, #24
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	589b      	ldr	r3, [r3, r2]
 8004a14:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2203      	movs	r2, #3
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	220f      	movs	r2, #15
 8004a20:	409a      	lsls	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4013      	ands	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	23a0      	movs	r3, #160	; 0xa0
 8004a2c:	05db      	lsls	r3, r3, #23
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d013      	beq.n	8004a5a <HAL_GPIO_DeInit+0x76>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a50      	ldr	r2, [pc, #320]	; (8004b78 <HAL_GPIO_DeInit+0x194>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <HAL_GPIO_DeInit+0x72>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4f      	ldr	r2, [pc, #316]	; (8004b7c <HAL_GPIO_DeInit+0x198>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_GPIO_DeInit+0x6e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4e      	ldr	r2, [pc, #312]	; (8004b80 <HAL_GPIO_DeInit+0x19c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_GPIO_DeInit+0x6a>
 8004a4a:	2305      	movs	r3, #5
 8004a4c:	e006      	b.n	8004a5c <HAL_GPIO_DeInit+0x78>
 8004a4e:	2306      	movs	r3, #6
 8004a50:	e004      	b.n	8004a5c <HAL_GPIO_DeInit+0x78>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e002      	b.n	8004a5c <HAL_GPIO_DeInit+0x78>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_GPIO_DeInit+0x78>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	2103      	movs	r1, #3
 8004a60:	400a      	ands	r2, r1
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	4093      	lsls	r3, r2
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d136      	bne.n	8004ada <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004a6c:	4a41      	ldr	r2, [pc, #260]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	58d3      	ldr	r3, [r2, r3]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	43d2      	mvns	r2, r2
 8004a76:	493f      	ldr	r1, [pc, #252]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2280      	movs	r2, #128	; 0x80
 8004a7c:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8004a7e:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a80:	2384      	movs	r3, #132	; 0x84
 8004a82:	58d3      	ldr	r3, [r2, r3]
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	43d2      	mvns	r2, r2
 8004a88:	493a      	ldr	r1, [pc, #232]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2284      	movs	r2, #132	; 0x84
 8004a8e:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004a90:	4b38      	ldr	r3, [pc, #224]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	43d9      	mvns	r1, r3
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004a9e:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43d9      	mvns	r1, r3
 8004aa6:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004aa8:	400a      	ands	r2, r1
 8004aaa:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	2203      	movs	r2, #3
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	220f      	movs	r2, #15
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	0013      	movs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8004abc:	4a2d      	ldr	r2, [pc, #180]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	089b      	lsrs	r3, r3, #2
 8004ac2:	3318      	adds	r3, #24
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	589a      	ldr	r2, [r3, r2]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	43d9      	mvns	r1, r3
 8004acc:	4829      	ldr	r0, [pc, #164]	; (8004b74 <HAL_GPIO_DeInit+0x190>)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	089b      	lsrs	r3, r3, #2
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	3318      	adds	r3, #24
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2103      	movs	r1, #3
 8004ae4:	4099      	lsls	r1, r3
 8004ae6:	000b      	movs	r3, r1
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	08da      	lsrs	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3208      	adds	r2, #8
 8004af6:	0092      	lsls	r2, r2, #2
 8004af8:	58d3      	ldr	r3, [r2, r3]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	2107      	movs	r1, #7
 8004afe:	400a      	ands	r2, r1
 8004b00:	0092      	lsls	r2, r2, #2
 8004b02:	210f      	movs	r1, #15
 8004b04:	4091      	lsls	r1, r2
 8004b06:	000a      	movs	r2, r1
 8004b08:	43d1      	mvns	r1, r2
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	08d2      	lsrs	r2, r2, #3
 8004b0e:	4019      	ands	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	0052      	lsls	r2, r2, #1
 8004b20:	2103      	movs	r1, #3
 8004b22:	4091      	lsls	r1, r2
 8004b24:	000a      	movs	r2, r1
 8004b26:	43d2      	mvns	r2, r2
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2101      	movs	r1, #1
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4091      	lsls	r1, r2
 8004b38:	000a      	movs	r2, r1
 8004b3a:	43d2      	mvns	r2, r2
 8004b3c:	401a      	ands	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	0052      	lsls	r2, r2, #1
 8004b4a:	2103      	movs	r1, #3
 8004b4c:	4091      	lsls	r1, r2
 8004b4e:	000a      	movs	r2, r1
 8004b50:	43d2      	mvns	r2, r2
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	40da      	lsrs	r2, r3
 8004b64:	1e13      	subs	r3, r2, #0
 8004b66:	d000      	beq.n	8004b6a <HAL_GPIO_DeInit+0x186>
 8004b68:	e744      	b.n	80049f4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b006      	add	sp, #24
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40021800 	.word	0x40021800
 8004b78:	50000400 	.word	0x50000400
 8004b7c:	50000800 	.word	0x50000800
 8004b80:	50001400 	.word	0x50001400

08004b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	000a      	movs	r2, r1
 8004b8e:	1cbb      	adds	r3, r7, #2
 8004b90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	1cba      	adds	r2, r7, #2
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004b9e:	230f      	movs	r3, #15
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e003      	b.n	8004bb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba8:	230f      	movs	r3, #15
 8004baa:	18fb      	adds	r3, r7, r3
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004bb0:	230f      	movs	r3, #15
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	781b      	ldrb	r3, [r3, #0]
}
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	b004      	add	sp, #16
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	0008      	movs	r0, r1
 8004bc8:	0011      	movs	r1, r2
 8004bca:	1cbb      	adds	r3, r7, #2
 8004bcc:	1c02      	adds	r2, r0, #0
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	1c7b      	adds	r3, r7, #1
 8004bd2:	1c0a      	adds	r2, r1, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bd6:	1c7b      	adds	r3, r7, #1
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d004      	beq.n	8004be8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bde:	1cbb      	adds	r3, r7, #2
 8004be0:	881a      	ldrh	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004be6:	e003      	b.n	8004bf0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004be8:	1cbb      	adds	r3, r7, #2
 8004bea:	881a      	ldrh	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bf0:	46c0      	nop			; (mov r8, r8)
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b002      	add	sp, #8
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	000a      	movs	r2, r1
 8004c02:	1cbb      	adds	r3, r7, #2
 8004c04:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c0c:	1cbb      	adds	r3, r7, #2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4013      	ands	r3, r2
 8004c14:	041a      	lsls	r2, r3, #16
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	1cb9      	adds	r1, r7, #2
 8004c1c:	8809      	ldrh	r1, [r1, #0]
 8004c1e:	400b      	ands	r3, r1
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	619a      	str	r2, [r3, #24]
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b004      	add	sp, #16
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	1dbb      	adds	r3, r7, #6
 8004c3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8004c3c:	4b10      	ldr	r3, [pc, #64]	; (8004c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	1dba      	adds	r2, r7, #6
 8004c42:	8812      	ldrh	r2, [r2, #0]
 8004c44:	4013      	ands	r3, r2
 8004c46:	d008      	beq.n	8004c5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004c48:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c4a:	1dba      	adds	r2, r7, #6
 8004c4c:	8812      	ldrh	r2, [r2, #0]
 8004c4e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004c50:	1dbb      	adds	r3, r7, #6
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	0018      	movs	r0, r3
 8004c56:	f7fe fffd 	bl	8003c54 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	1dba      	adds	r2, r7, #6
 8004c60:	8812      	ldrh	r2, [r2, #0]
 8004c62:	4013      	ands	r3, r2
 8004c64:	d008      	beq.n	8004c78 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004c66:	4b06      	ldr	r3, [pc, #24]	; (8004c80 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004c68:	1dba      	adds	r2, r7, #6
 8004c6a:	8812      	ldrh	r2, [r2, #0]
 8004c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004c6e:	1dbb      	adds	r3, r7, #6
 8004c70:	881b      	ldrh	r3, [r3, #0]
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7ff f84a 	bl	8003d0c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004c78:	46c0      	nop			; (mov r8, r8)
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	b002      	add	sp, #8
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40021800 	.word	0x40021800

08004c84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e1d0      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d100      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x1e>
 8004ca0:	e069      	b.n	8004d76 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ca2:	4bc8      	ldr	r3, [pc, #800]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2238      	movs	r2, #56	; 0x38
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d105      	bne.n	8004cbe <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d15d      	bne.n	8004d76 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e1bc      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_OscConfig+0x56>
 8004cca:	4bbe      	ldr	r3, [pc, #760]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4bbd      	ldr	r3, [pc, #756]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004cd0:	2180      	movs	r1, #128	; 0x80
 8004cd2:	0249      	lsls	r1, r1, #9
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e020      	b.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	23a0      	movs	r3, #160	; 0xa0
 8004ce0:	02db      	lsls	r3, r3, #11
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d10e      	bne.n	8004d04 <HAL_RCC_OscConfig+0x80>
 8004ce6:	4bb7      	ldr	r3, [pc, #732]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	4bb6      	ldr	r3, [pc, #728]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004cec:	2180      	movs	r1, #128	; 0x80
 8004cee:	02c9      	lsls	r1, r1, #11
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	4bb3      	ldr	r3, [pc, #716]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	4bb2      	ldr	r3, [pc, #712]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004cfa:	2180      	movs	r1, #128	; 0x80
 8004cfc:	0249      	lsls	r1, r1, #9
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]
 8004d02:	e00b      	b.n	8004d1c <HAL_RCC_OscConfig+0x98>
 8004d04:	4baf      	ldr	r3, [pc, #700]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	4bae      	ldr	r3, [pc, #696]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d0a:	49af      	ldr	r1, [pc, #700]	; (8004fc8 <HAL_RCC_OscConfig+0x344>)
 8004d0c:	400a      	ands	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	4bac      	ldr	r3, [pc, #688]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4bab      	ldr	r3, [pc, #684]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d16:	49ad      	ldr	r1, [pc, #692]	; (8004fcc <HAL_RCC_OscConfig+0x348>)
 8004d18:	400a      	ands	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d014      	beq.n	8004d4e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7ff fba6 	bl	8004474 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004d2e:	f7ff fba1 	bl	8004474 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b64      	cmp	r3, #100	; 0x64
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e17b      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d40:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	2380      	movs	r3, #128	; 0x80
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0xaa>
 8004d4c:	e013      	b.n	8004d76 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4e:	f7ff fb91 	bl	8004474 <HAL_GetTick>
 8004d52:	0003      	movs	r3, r0
 8004d54:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004d58:	f7ff fb8c 	bl	8004474 <HAL_GetTick>
 8004d5c:	0002      	movs	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b64      	cmp	r3, #100	; 0x64
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e166      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d6a:	4b96      	ldr	r3, [pc, #600]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	029b      	lsls	r3, r3, #10
 8004d72:	4013      	ands	r3, r2
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d100      	bne.n	8004d82 <HAL_RCC_OscConfig+0xfe>
 8004d80:	e086      	b.n	8004e90 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	4b90      	ldr	r3, [pc, #576]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2238      	movs	r2, #56	; 0x38
 8004d88:	4013      	ands	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d12f      	bne.n	8004df2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e14c      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d9e:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	4a8b      	ldr	r2, [pc, #556]	; (8004fd0 <HAL_RCC_OscConfig+0x34c>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	0019      	movs	r1, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	021a      	lsls	r2, r3, #8
 8004dae:	4b85      	ldr	r3, [pc, #532]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d112      	bne.n	8004de0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dba:	4b82      	ldr	r3, [pc, #520]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a85      	ldr	r2, [pc, #532]	; (8004fd4 <HAL_RCC_OscConfig+0x350>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691a      	ldr	r2, [r3, #16]
 8004dc8:	4b7e      	ldr	r3, [pc, #504]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004dce:	4b7d      	ldr	r3, [pc, #500]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	0adb      	lsrs	r3, r3, #11
 8004dd4:	2207      	movs	r2, #7
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	4a7f      	ldr	r2, [pc, #508]	; (8004fd8 <HAL_RCC_OscConfig+0x354>)
 8004dda:	40da      	lsrs	r2, r3
 8004ddc:	4b7f      	ldr	r3, [pc, #508]	; (8004fdc <HAL_RCC_OscConfig+0x358>)
 8004dde:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004de0:	4b7f      	ldr	r3, [pc, #508]	; (8004fe0 <HAL_RCC_OscConfig+0x35c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f7ff fae9 	bl	80043bc <HAL_InitTick>
 8004dea:	1e03      	subs	r3, r0, #0
 8004dec:	d050      	beq.n	8004e90 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e122      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d030      	beq.n	8004e5c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004dfa:	4b72      	ldr	r3, [pc, #456]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a75      	ldr	r2, [pc, #468]	; (8004fd4 <HAL_RCC_OscConfig+0x350>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	4b6e      	ldr	r3, [pc, #440]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4b6c      	ldr	r3, [pc, #432]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	0049      	lsls	r1, r1, #1
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7ff fb2a 	bl	8004474 <HAL_GetTick>
 8004e20:	0003      	movs	r3, r0
 8004e22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004e26:	f7ff fb25 	bl	8004474 <HAL_GetTick>
 8004e2a:	0002      	movs	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0ff      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e38:	4b62      	ldr	r3, [pc, #392]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4013      	ands	r3, r2
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b5f      	ldr	r3, [pc, #380]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	4a61      	ldr	r2, [pc, #388]	; (8004fd0 <HAL_RCC_OscConfig+0x34c>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	021a      	lsls	r2, r3, #8
 8004e54:	4b5b      	ldr	r3, [pc, #364]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	e019      	b.n	8004e90 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	4b58      	ldr	r3, [pc, #352]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e62:	4960      	ldr	r1, [pc, #384]	; (8004fe4 <HAL_RCC_OscConfig+0x360>)
 8004e64:	400a      	ands	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e68:	f7ff fb04 	bl	8004474 <HAL_GetTick>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004e72:	f7ff faff 	bl	8004474 <HAL_GetTick>
 8004e76:	0002      	movs	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e0d9      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e84:	4b4f      	ldr	r3, [pc, #316]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	4013      	ands	r3, r2
 8004e98:	d042      	beq.n	8004f20 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8004e9a:	4b4a      	ldr	r3, [pc, #296]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	2238      	movs	r2, #56	; 0x38
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b18      	cmp	r3, #24
 8004ea4:	d105      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d138      	bne.n	8004f20 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e0c2      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d019      	beq.n	8004eee <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004eba:	4b42      	ldr	r3, [pc, #264]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ebc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ebe:	4b41      	ldr	r3, [pc, #260]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7ff fad5 	bl	8004474 <HAL_GetTick>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004ed0:	f7ff fad0 	bl	8004474 <HAL_GetTick>
 8004ed4:	0002      	movs	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0aa      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004ee2:	4b38      	ldr	r3, [pc, #224]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d0f1      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x24c>
 8004eec:	e018      	b.n	8004f20 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004eee:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ef2:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	438a      	bics	r2, r1
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7ff fabb 	bl	8004474 <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004f04:	f7ff fab6 	bl	8004474 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e090      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8004f16:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d1f1      	bne.n	8004f04 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2204      	movs	r2, #4
 8004f26:	4013      	ands	r3, r2
 8004f28:	d100      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2a8>
 8004f2a:	e084      	b.n	8005036 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f2c:	230f      	movs	r3, #15
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	2200      	movs	r2, #0
 8004f32:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004f34:	4b23      	ldr	r3, [pc, #140]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2238      	movs	r2, #56	; 0x38
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b20      	cmp	r3, #32
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d000      	beq.n	8004f4a <HAL_RCC_OscConfig+0x2c6>
 8004f48:	e075      	b.n	8005036 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e074      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x2e0>
 8004f56:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f62:	e01c      	b.n	8004f9e <HAL_RCC_OscConfig+0x31a>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b05      	cmp	r3, #5
 8004f6a:	d10c      	bne.n	8004f86 <HAL_RCC_OscConfig+0x302>
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f70:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f72:	2104      	movs	r1, #4
 8004f74:	430a      	orrs	r2, r1
 8004f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f7e:	2101      	movs	r1, #1
 8004f80:	430a      	orrs	r2, r1
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f84:	e00b      	b.n	8004f9e <HAL_RCC_OscConfig+0x31a>
 8004f86:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f8c:	2101      	movs	r1, #1
 8004f8e:	438a      	bics	r2, r1
 8004f90:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_OscConfig+0x340>)
 8004f98:	2104      	movs	r1, #4
 8004f9a:	438a      	bics	r2, r1
 8004f9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d028      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7ff fa65 	bl	8004474 <HAL_GetTick>
 8004faa:	0003      	movs	r3, r0
 8004fac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004fae:	e01d      	b.n	8004fec <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb0:	f7ff fa60 	bl	8004474 <HAL_GetTick>
 8004fb4:	0002      	movs	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	4a0b      	ldr	r2, [pc, #44]	; (8004fe8 <HAL_RCC_OscConfig+0x364>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d915      	bls.n	8004fec <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e039      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	fffeffff 	.word	0xfffeffff
 8004fcc:	fffbffff 	.word	0xfffbffff
 8004fd0:	ffff80ff 	.word	0xffff80ff
 8004fd4:	ffffc7ff 	.word	0xffffc7ff
 8004fd8:	02dc6c00 	.word	0x02dc6c00
 8004fdc:	2000000c 	.word	0x2000000c
 8004fe0:	20000010 	.word	0x20000010
 8004fe4:	fffffeff 	.word	0xfffffeff
 8004fe8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <HAL_RCC_OscConfig+0x3bc>)
 8004fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d0dc      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x32c>
 8004ff6:	e013      	b.n	8005020 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7ff fa3c 	bl	8004474 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005000:	e009      	b.n	8005016 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7ff fa37 	bl	8004474 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <HAL_RCC_OscConfig+0x3c0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e010      	b.n	8005038 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <HAL_RCC_OscConfig+0x3bc>)
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	2202      	movs	r2, #2
 800501c:	4013      	ands	r3, r2
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005020:	230f      	movs	r3, #15
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_OscConfig+0x3bc>)
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	4b04      	ldr	r3, [pc, #16]	; (8005040 <HAL_RCC_OscConfig+0x3bc>)
 8005030:	4905      	ldr	r1, [pc, #20]	; (8005048 <HAL_RCC_OscConfig+0x3c4>)
 8005032:	400a      	ands	r2, r1
 8005034:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8005036:	2300      	movs	r3, #0
}
 8005038:	0018      	movs	r0, r3
 800503a:	46bd      	mov	sp, r7
 800503c:	b006      	add	sp, #24
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000
 8005044:	00001388 	.word	0x00001388
 8005048:	efffffff 	.word	0xefffffff

0800504c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e0e9      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005060:	4b76      	ldr	r3, [pc, #472]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2207      	movs	r2, #7
 8005066:	4013      	ands	r3, r2
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d91e      	bls.n	80050ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b73      	ldr	r3, [pc, #460]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2207      	movs	r2, #7
 8005074:	4393      	bics	r3, r2
 8005076:	0019      	movs	r1, r3
 8005078:	4b70      	ldr	r3, [pc, #448]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005080:	f7ff f9f8 	bl	8004474 <HAL_GetTick>
 8005084:	0003      	movs	r3, r0
 8005086:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005088:	e009      	b.n	800509e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800508a:	f7ff f9f3 	bl	8004474 <HAL_GetTick>
 800508e:	0002      	movs	r2, r0
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	4a6a      	ldr	r2, [pc, #424]	; (8005240 <HAL_RCC_ClockConfig+0x1f4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d901      	bls.n	800509e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e0ca      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800509e:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2207      	movs	r2, #7
 80050a4:	4013      	ands	r3, r2
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d1ee      	bne.n	800508a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2202      	movs	r2, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	d017      	beq.n	80050e6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2204      	movs	r2, #4
 80050bc:	4013      	ands	r3, r2
 80050be:	d008      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80050c0:	4b60      	ldr	r3, [pc, #384]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	4a60      	ldr	r2, [pc, #384]	; (8005248 <HAL_RCC_ClockConfig+0x1fc>)
 80050c6:	401a      	ands	r2, r3
 80050c8:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80050ca:	21b0      	movs	r1, #176	; 0xb0
 80050cc:	0109      	lsls	r1, r1, #4
 80050ce:	430a      	orrs	r2, r1
 80050d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d2:	4b5c      	ldr	r3, [pc, #368]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	4a5d      	ldr	r2, [pc, #372]	; (800524c <HAL_RCC_ClockConfig+0x200>)
 80050d8:	4013      	ands	r3, r2
 80050da:	0019      	movs	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	4b58      	ldr	r3, [pc, #352]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80050e2:	430a      	orrs	r2, r1
 80050e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2201      	movs	r2, #1
 80050ec:	4013      	ands	r3, r2
 80050ee:	d055      	beq.n	800519c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80050f0:	4b54      	ldr	r3, [pc, #336]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	221c      	movs	r2, #28
 80050f6:	4393      	bics	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	4b51      	ldr	r3, [pc, #324]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 8005100:	430a      	orrs	r2, r1
 8005102:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d107      	bne.n	800511c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800510c:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	029b      	lsls	r3, r3, #10
 8005114:	4013      	ands	r3, r2
 8005116:	d11f      	bne.n	8005158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e08b      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d107      	bne.n	8005134 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005124:	4b47      	ldr	r3, [pc, #284]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4013      	ands	r3, r2
 800512e:	d113      	bne.n	8005158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e07f      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b03      	cmp	r3, #3
 800513a:	d106      	bne.n	800514a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800513c:	4b41      	ldr	r3, [pc, #260]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800513e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d108      	bne.n	8005158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e074      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800514a:	4b3e      	ldr	r3, [pc, #248]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800514c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e06d      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005158:	4b3a      	ldr	r3, [pc, #232]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2207      	movs	r2, #7
 800515e:	4393      	bics	r3, r2
 8005160:	0019      	movs	r1, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	4b37      	ldr	r3, [pc, #220]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516c:	f7ff f982 	bl	8004474 <HAL_GetTick>
 8005170:	0003      	movs	r3, r0
 8005172:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005174:	e009      	b.n	800518a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005176:	f7ff f97d 	bl	8004474 <HAL_GetTick>
 800517a:	0002      	movs	r2, r0
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	4a2f      	ldr	r2, [pc, #188]	; (8005240 <HAL_RCC_ClockConfig+0x1f4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d901      	bls.n	800518a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e054      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2238      	movs	r2, #56	; 0x38
 8005190:	401a      	ands	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	429a      	cmp	r2, r3
 800519a:	d1ec      	bne.n	8005176 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800519c:	4b27      	ldr	r3, [pc, #156]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2207      	movs	r2, #7
 80051a2:	4013      	ands	r3, r2
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d21e      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051aa:	4b24      	ldr	r3, [pc, #144]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2207      	movs	r2, #7
 80051b0:	4393      	bics	r3, r2
 80051b2:	0019      	movs	r1, r3
 80051b4:	4b21      	ldr	r3, [pc, #132]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051bc:	f7ff f95a 	bl	8004474 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051c4:	e009      	b.n	80051da <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80051c6:	f7ff f955 	bl	8004474 <HAL_GetTick>
 80051ca:	0002      	movs	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	4a1b      	ldr	r2, [pc, #108]	; (8005240 <HAL_RCC_ClockConfig+0x1f4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e02c      	b.n	8005234 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80051da:	4b18      	ldr	r3, [pc, #96]	; (800523c <HAL_RCC_ClockConfig+0x1f0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2207      	movs	r2, #7
 80051e0:	4013      	ands	r3, r2
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1ee      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2204      	movs	r2, #4
 80051ee:	4013      	ands	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80051f2:	4b14      	ldr	r3, [pc, #80]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	4a16      	ldr	r2, [pc, #88]	; (8005250 <HAL_RCC_ClockConfig+0x204>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	0019      	movs	r1, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	4b10      	ldr	r3, [pc, #64]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005206:	f000 f82b 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800520a:	0001      	movs	r1, r0
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <HAL_RCC_ClockConfig+0x1f8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	0a1b      	lsrs	r3, r3, #8
 8005212:	220f      	movs	r2, #15
 8005214:	401a      	ands	r2, r3
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <HAL_RCC_ClockConfig+0x208>)
 8005218:	0092      	lsls	r2, r2, #2
 800521a:	58d3      	ldr	r3, [r2, r3]
 800521c:	221f      	movs	r2, #31
 800521e:	4013      	ands	r3, r2
 8005220:	000a      	movs	r2, r1
 8005222:	40da      	lsrs	r2, r3
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_ClockConfig+0x20c>)
 8005226:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005228:	4b0c      	ldr	r3, [pc, #48]	; (800525c <HAL_RCC_ClockConfig+0x210>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	0018      	movs	r0, r3
 800522e:	f7ff f8c5 	bl	80043bc <HAL_InitTick>
 8005232:	0003      	movs	r3, r0
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b004      	add	sp, #16
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40022000 	.word	0x40022000
 8005240:	00001388 	.word	0x00001388
 8005244:	40021000 	.word	0x40021000
 8005248:	ffff84ff 	.word	0xffff84ff
 800524c:	fffff0ff 	.word	0xfffff0ff
 8005250:	ffff8fff 	.word	0xffff8fff
 8005254:	080067ac 	.word	0x080067ac
 8005258:	2000000c 	.word	0x2000000c
 800525c:	20000010 	.word	0x20000010

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2238      	movs	r2, #56	; 0x38
 800526c:	4013      	ands	r3, r2
 800526e:	d10f      	bne.n	8005290 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	0adb      	lsrs	r3, r3, #11
 8005276:	2207      	movs	r2, #7
 8005278:	4013      	ands	r3, r2
 800527a:	2201      	movs	r2, #1
 800527c:	409a      	lsls	r2, r3
 800527e:	0013      	movs	r3, r2
 8005280:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005282:	6839      	ldr	r1, [r7, #0]
 8005284:	4815      	ldr	r0, [pc, #84]	; (80052dc <HAL_RCC_GetSysClockFreq+0x7c>)
 8005286:	f7fa ff3f 	bl	8000108 <__udivsi3>
 800528a:	0003      	movs	r3, r0
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	e01e      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005290:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2238      	movs	r2, #56	; 0x38
 8005296:	4013      	ands	r3, r2
 8005298:	2b08      	cmp	r3, #8
 800529a:	d102      	bne.n	80052a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <HAL_RCC_GetSysClockFreq+0x80>)
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	e015      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2238      	movs	r2, #56	; 0x38
 80052a8:	4013      	ands	r3, r2
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	d103      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e00b      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80052b6:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2238      	movs	r2, #56	; 0x38
 80052bc:	4013      	ands	r3, r2
 80052be:	2b18      	cmp	r3, #24
 80052c0:	d103      	bne.n	80052ca <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80052c2:	23fa      	movs	r3, #250	; 0xfa
 80052c4:	01db      	lsls	r3, r3, #7
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e001      	b.n	80052ce <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80052ca:	2300      	movs	r3, #0
 80052cc:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80052ce:	687b      	ldr	r3, [r7, #4]
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40021000 	.word	0x40021000
 80052dc:	02dc6c00 	.word	0x02dc6c00
 80052e0:	007a1200 	.word	0x007a1200

080052e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e04a      	b.n	800538c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	223d      	movs	r2, #61	; 0x3d
 80052fa:	5c9b      	ldrb	r3, [r3, r2]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d107      	bne.n	8005312 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	223c      	movs	r2, #60	; 0x3c
 8005306:	2100      	movs	r1, #0
 8005308:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fe ff77 	bl	8004200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	223d      	movs	r2, #61	; 0x3d
 8005316:	2102      	movs	r1, #2
 8005318:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3304      	adds	r3, #4
 8005322:	0019      	movs	r1, r3
 8005324:	0010      	movs	r0, r2
 8005326:	f000 fbdb 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2248      	movs	r2, #72	; 0x48
 800532e:	2101      	movs	r1, #1
 8005330:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	223e      	movs	r2, #62	; 0x3e
 8005336:	2101      	movs	r1, #1
 8005338:	5499      	strb	r1, [r3, r2]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	223f      	movs	r2, #63	; 0x3f
 800533e:	2101      	movs	r1, #1
 8005340:	5499      	strb	r1, [r3, r2]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	2101      	movs	r1, #1
 8005348:	5499      	strb	r1, [r3, r2]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2241      	movs	r2, #65	; 0x41
 800534e:	2101      	movs	r1, #1
 8005350:	5499      	strb	r1, [r3, r2]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2242      	movs	r2, #66	; 0x42
 8005356:	2101      	movs	r1, #1
 8005358:	5499      	strb	r1, [r3, r2]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2243      	movs	r2, #67	; 0x43
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2244      	movs	r2, #68	; 0x44
 8005366:	2101      	movs	r1, #1
 8005368:	5499      	strb	r1, [r3, r2]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2245      	movs	r2, #69	; 0x45
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2246      	movs	r2, #70	; 0x46
 8005376:	2101      	movs	r1, #1
 8005378:	5499      	strb	r1, [r3, r2]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2247      	movs	r2, #71	; 0x47
 800537e:	2101      	movs	r1, #1
 8005380:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	223d      	movs	r2, #61	; 0x3d
 8005386:	2101      	movs	r1, #1
 8005388:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	0018      	movs	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	b002      	add	sp, #8
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	223d      	movs	r2, #61	; 0x3d
 80053a0:	5c9b      	ldrb	r3, [r3, r2]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e037      	b.n	800541c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	223d      	movs	r2, #61	; 0x3d
 80053b0:	2102      	movs	r1, #2
 80053b2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2101      	movs	r1, #1
 80053c0:	430a      	orrs	r2, r1
 80053c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	; (8005424 <HAL_TIM_Base_Start_IT+0x90>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <HAL_TIM_Base_Start_IT+0x44>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a15      	ldr	r2, [pc, #84]	; (8005428 <HAL_TIM_Base_Start_IT+0x94>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d116      	bne.n	8005406 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_TIM_Base_Start_IT+0x98>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d016      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x84>
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	2380      	movs	r3, #128	; 0x80
 80053ee:	025b      	lsls	r3, r3, #9
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d011      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2101      	movs	r1, #1
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	e008      	b.n	8005418 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2101      	movs	r1, #1
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	e000      	b.n	800541a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005418:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	0018      	movs	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	b004      	add	sp, #16
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40012c00 	.word	0x40012c00
 8005428:	40000400 	.word	0x40000400
 800542c:	00010007 	.word	0x00010007

08005430 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e04a      	b.n	80054d8 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	223d      	movs	r2, #61	; 0x3d
 8005446:	5c9b      	ldrb	r3, [r3, r2]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	223c      	movs	r2, #60	; 0x3c
 8005452:	2100      	movs	r1, #0
 8005454:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f841 	bl	80054e0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	223d      	movs	r2, #61	; 0x3d
 8005462:	2102      	movs	r1, #2
 8005464:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3304      	adds	r3, #4
 800546e:	0019      	movs	r1, r3
 8005470:	0010      	movs	r0, r2
 8005472:	f000 fb35 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2248      	movs	r2, #72	; 0x48
 800547a:	2101      	movs	r1, #1
 800547c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	223e      	movs	r2, #62	; 0x3e
 8005482:	2101      	movs	r1, #1
 8005484:	5499      	strb	r1, [r3, r2]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	223f      	movs	r2, #63	; 0x3f
 800548a:	2101      	movs	r1, #1
 800548c:	5499      	strb	r1, [r3, r2]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2240      	movs	r2, #64	; 0x40
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2241      	movs	r2, #65	; 0x41
 800549a:	2101      	movs	r1, #1
 800549c:	5499      	strb	r1, [r3, r2]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2242      	movs	r2, #66	; 0x42
 80054a2:	2101      	movs	r1, #1
 80054a4:	5499      	strb	r1, [r3, r2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2243      	movs	r2, #67	; 0x43
 80054aa:	2101      	movs	r1, #1
 80054ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2244      	movs	r2, #68	; 0x44
 80054b2:	2101      	movs	r1, #1
 80054b4:	5499      	strb	r1, [r3, r2]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2245      	movs	r2, #69	; 0x45
 80054ba:	2101      	movs	r1, #1
 80054bc:	5499      	strb	r1, [r3, r2]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2246      	movs	r2, #70	; 0x46
 80054c2:	2101      	movs	r1, #1
 80054c4:	5499      	strb	r1, [r3, r2]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2247      	movs	r2, #71	; 0x47
 80054ca:	2101      	movs	r1, #1
 80054cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223d      	movs	r2, #61	; 0x3d
 80054d2:	2101      	movs	r1, #1
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e042      	b.n	800558a <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	223d      	movs	r2, #61	; 0x3d
 8005508:	5c9b      	ldrb	r3, [r3, r2]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	223c      	movs	r2, #60	; 0x3c
 8005514:	2100      	movs	r1, #0
 8005516:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f839 	bl	8005592 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	223d      	movs	r2, #61	; 0x3d
 8005524:	2102      	movs	r1, #2
 8005526:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	3304      	adds	r3, #4
 8005530:	0019      	movs	r1, r3
 8005532:	0010      	movs	r0, r2
 8005534:	f000 fad4 	bl	8005ae0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2108      	movs	r1, #8
 8005544:	438a      	bics	r2, r1
 8005546:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6819      	ldr	r1, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2248      	movs	r2, #72	; 0x48
 800555c:	2101      	movs	r1, #1
 800555e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	223e      	movs	r2, #62	; 0x3e
 8005564:	2101      	movs	r1, #1
 8005566:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	223f      	movs	r2, #63	; 0x3f
 800556c:	2101      	movs	r1, #1
 800556e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2244      	movs	r2, #68	; 0x44
 8005574:	2101      	movs	r1, #1
 8005576:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2245      	movs	r2, #69	; 0x45
 800557c:	2101      	movs	r1, #1
 800557e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	223d      	movs	r2, #61	; 0x3d
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b002      	add	sp, #8
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b002      	add	sp, #8
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	2202      	movs	r2, #2
 80055c0:	4013      	ands	r3, r2
 80055c2:	d021      	beq.n	8005608 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2202      	movs	r2, #2
 80055c8:	4013      	ands	r3, r2
 80055ca:	d01d      	beq.n	8005608 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2203      	movs	r2, #3
 80055d2:	4252      	negs	r2, r2
 80055d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	2203      	movs	r2, #3
 80055e4:	4013      	ands	r3, r2
 80055e6:	d004      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f000 fa60 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e007      	b.n	8005602 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	0018      	movs	r0, r3
 80055f6:	f000 fa53 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 fa5f 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2204      	movs	r2, #4
 800560c:	4013      	ands	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2204      	movs	r2, #4
 8005614:	4013      	ands	r3, r2
 8005616:	d01e      	beq.n	8005656 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2205      	movs	r2, #5
 800561e:	4252      	negs	r2, r2
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	23c0      	movs	r3, #192	; 0xc0
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4013      	ands	r3, r2
 8005634:	d004      	beq.n	8005640 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	0018      	movs	r0, r3
 800563a:	f000 fa39 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 800563e:	e007      	b.n	8005650 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	0018      	movs	r0, r3
 8005644:	f000 fa2c 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fa38 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2208      	movs	r2, #8
 800565a:	4013      	ands	r3, r2
 800565c:	d021      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2208      	movs	r2, #8
 8005662:	4013      	ands	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2209      	movs	r2, #9
 800566c:	4252      	negs	r2, r2
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	2203      	movs	r2, #3
 800567e:	4013      	ands	r3, r2
 8005680:	d004      	beq.n	800568c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	0018      	movs	r0, r3
 8005686:	f000 fa13 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 800568a:	e007      	b.n	800569c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	0018      	movs	r0, r3
 8005690:	f000 fa06 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0018      	movs	r0, r3
 8005698:	f000 fa12 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2210      	movs	r2, #16
 80056a6:	4013      	ands	r3, r2
 80056a8:	d022      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2210      	movs	r2, #16
 80056ae:	4013      	ands	r3, r2
 80056b0:	d01e      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2211      	movs	r2, #17
 80056b8:	4252      	negs	r2, r2
 80056ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2208      	movs	r2, #8
 80056c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	23c0      	movs	r3, #192	; 0xc0
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4013      	ands	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	0018      	movs	r0, r3
 80056d4:	f000 f9ec 	bl	8005ab0 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e007      	b.n	80056ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	0018      	movs	r0, r3
 80056de:	f000 f9df 	bl	8005aa0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0018      	movs	r0, r3
 80056e6:	f000 f9eb 	bl	8005ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2201      	movs	r2, #1
 80056f4:	4013      	ands	r3, r2
 80056f6:	d00c      	beq.n	8005712 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	4013      	ands	r3, r2
 80056fe:	d008      	beq.n	8005712 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2202      	movs	r2, #2
 8005706:	4252      	negs	r2, r2
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0018      	movs	r0, r3
 800570e:	f7fe fa21 	bl	8003b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2280      	movs	r2, #128	; 0x80
 8005716:	4013      	ands	r3, r2
 8005718:	d00c      	beq.n	8005734 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	4013      	ands	r3, r2
 8005720:	d008      	beq.n	8005734 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2281      	movs	r2, #129	; 0x81
 8005728:	4252      	negs	r2, r2
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	0018      	movs	r0, r3
 8005730:	f000 fe7a 	bl	8006428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	2380      	movs	r3, #128	; 0x80
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4013      	ands	r3, r2
 800573c:	d00b      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2280      	movs	r2, #128	; 0x80
 8005742:	4013      	ands	r3, r2
 8005744:	d007      	beq.n	8005756 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <HAL_TIM_IRQHandler+0x200>)
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	0018      	movs	r0, r3
 8005752:	f000 fe71 	bl	8006438 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2240      	movs	r2, #64	; 0x40
 800575a:	4013      	ands	r3, r2
 800575c:	d00c      	beq.n	8005778 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2240      	movs	r2, #64	; 0x40
 8005762:	4013      	ands	r3, r2
 8005764:	d008      	beq.n	8005778 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2241      	movs	r2, #65	; 0x41
 800576c:	4252      	negs	r2, r2
 800576e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	0018      	movs	r0, r3
 8005774:	f000 f9ac 	bl	8005ad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2220      	movs	r2, #32
 800577c:	4013      	ands	r3, r2
 800577e:	d00c      	beq.n	800579a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2220      	movs	r2, #32
 8005784:	4013      	ands	r3, r2
 8005786:	d008      	beq.n	800579a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2221      	movs	r2, #33	; 0x21
 800578e:	4252      	negs	r2, r2
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	0018      	movs	r0, r3
 8005796:	f000 fe3f 	bl	8006418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	46bd      	mov	sp, r7
 800579e:	b004      	add	sp, #16
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	fffffeff 	.word	0xfffffeff

080057a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057b4:	2317      	movs	r3, #23
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	223c      	movs	r2, #60	; 0x3c
 80057c0:	5c9b      	ldrb	r3, [r3, r2]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d101      	bne.n	80057ca <HAL_TIM_OC_ConfigChannel+0x22>
 80057c6:	2302      	movs	r3, #2
 80057c8:	e048      	b.n	800585c <HAL_TIM_OC_ConfigChannel+0xb4>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	223c      	movs	r2, #60	; 0x3c
 80057ce:	2101      	movs	r1, #1
 80057d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2b14      	cmp	r3, #20
 80057d6:	d835      	bhi.n	8005844 <HAL_TIM_OC_ConfigChannel+0x9c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	009a      	lsls	r2, r3, #2
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <HAL_TIM_OC_ConfigChannel+0xbc>)
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	0011      	movs	r1, r2
 80057ec:	0018      	movs	r0, r3
 80057ee:	f000 f9e3 	bl	8005bb8 <TIM_OC1_SetConfig>
      break;
 80057f2:	e02c      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	0011      	movs	r1, r2
 80057fc:	0018      	movs	r0, r3
 80057fe:	f000 fa5b 	bl	8005cb8 <TIM_OC2_SetConfig>
      break;
 8005802:	e024      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	0011      	movs	r1, r2
 800580c:	0018      	movs	r0, r3
 800580e:	f000 fad1 	bl	8005db4 <TIM_OC3_SetConfig>
      break;
 8005812:	e01c      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	0011      	movs	r1, r2
 800581c:	0018      	movs	r0, r3
 800581e:	f000 fb4b 	bl	8005eb8 <TIM_OC4_SetConfig>
      break;
 8005822:	e014      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	0011      	movs	r1, r2
 800582c:	0018      	movs	r0, r3
 800582e:	f000 fba7 	bl	8005f80 <TIM_OC5_SetConfig>
      break;
 8005832:	e00c      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f000 fbf9 	bl	8006034 <TIM_OC6_SetConfig>
      break;
 8005842:	e004      	b.n	800584e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005844:	2317      	movs	r3, #23
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
      break;
 800584c:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	223c      	movs	r2, #60	; 0x3c
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]

  return status;
 8005856:	2317      	movs	r3, #23
 8005858:	18fb      	adds	r3, r7, r3
 800585a:	781b      	ldrb	r3, [r3, #0]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b006      	add	sp, #24
 8005862:	bd80      	pop	{r7, pc}
 8005864:	080067ec 	.word	0x080067ec

08005868 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005872:	230f      	movs	r3, #15
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	2200      	movs	r2, #0
 8005878:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	223c      	movs	r2, #60	; 0x3c
 800587e:	5c9b      	ldrb	r3, [r3, r2]
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_TIM_ConfigClockSource+0x20>
 8005884:	2302      	movs	r3, #2
 8005886:	e0bc      	b.n	8005a02 <HAL_TIM_ConfigClockSource+0x19a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	223c      	movs	r2, #60	; 0x3c
 800588c:	2101      	movs	r1, #1
 800588e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	223d      	movs	r2, #61	; 0x3d
 8005894:	2102      	movs	r1, #2
 8005896:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	4a5a      	ldr	r2, [pc, #360]	; (8005a0c <HAL_TIM_ConfigClockSource+0x1a4>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a59      	ldr	r2, [pc, #356]	; (8005a10 <HAL_TIM_ConfigClockSource+0x1a8>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2280      	movs	r2, #128	; 0x80
 80058be:	0192      	lsls	r2, r2, #6
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d040      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0xde>
 80058c4:	2280      	movs	r2, #128	; 0x80
 80058c6:	0192      	lsls	r2, r2, #6
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d900      	bls.n	80058ce <HAL_TIM_ConfigClockSource+0x66>
 80058cc:	e088      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 80058ce:	2280      	movs	r2, #128	; 0x80
 80058d0:	0152      	lsls	r2, r2, #5
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d100      	bne.n	80058d8 <HAL_TIM_ConfigClockSource+0x70>
 80058d6:	e088      	b.n	80059ea <HAL_TIM_ConfigClockSource+0x182>
 80058d8:	2280      	movs	r2, #128	; 0x80
 80058da:	0152      	lsls	r2, r2, #5
 80058dc:	4293      	cmp	r3, r2
 80058de:	d900      	bls.n	80058e2 <HAL_TIM_ConfigClockSource+0x7a>
 80058e0:	e07e      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 80058e2:	2b70      	cmp	r3, #112	; 0x70
 80058e4:	d018      	beq.n	8005918 <HAL_TIM_ConfigClockSource+0xb0>
 80058e6:	d900      	bls.n	80058ea <HAL_TIM_ConfigClockSource+0x82>
 80058e8:	e07a      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 80058ea:	2b60      	cmp	r3, #96	; 0x60
 80058ec:	d04f      	beq.n	800598e <HAL_TIM_ConfigClockSource+0x126>
 80058ee:	d900      	bls.n	80058f2 <HAL_TIM_ConfigClockSource+0x8a>
 80058f0:	e076      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 80058f2:	2b50      	cmp	r3, #80	; 0x50
 80058f4:	d03b      	beq.n	800596e <HAL_TIM_ConfigClockSource+0x106>
 80058f6:	d900      	bls.n	80058fa <HAL_TIM_ConfigClockSource+0x92>
 80058f8:	e072      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d057      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0x146>
 80058fe:	d900      	bls.n	8005902 <HAL_TIM_ConfigClockSource+0x9a>
 8005900:	e06e      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 8005902:	2b30      	cmp	r3, #48	; 0x30
 8005904:	d063      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x166>
 8005906:	d86b      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 8005908:	2b20      	cmp	r3, #32
 800590a:	d060      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x166>
 800590c:	d868      	bhi.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d05d      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x166>
 8005912:	2b10      	cmp	r3, #16
 8005914:	d05b      	beq.n	80059ce <HAL_TIM_ConfigClockSource+0x166>
 8005916:	e063      	b.n	80059e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005928:	f000 fcf4 	bl	8006314 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2277      	movs	r2, #119	; 0x77
 8005938:	4313      	orrs	r3, r2
 800593a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	609a      	str	r2, [r3, #8]
      break;
 8005944:	e052      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005956:	f000 fcdd 	bl	8006314 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2180      	movs	r1, #128	; 0x80
 8005966:	01c9      	lsls	r1, r1, #7
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]
      break;
 800596c:	e03e      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	001a      	movs	r2, r3
 800597c:	f000 fc4e 	bl	800621c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2150      	movs	r1, #80	; 0x50
 8005986:	0018      	movs	r0, r3
 8005988:	f000 fca8 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 800598c:	e02e      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	001a      	movs	r2, r3
 800599c:	f000 fc6c 	bl	8006278 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2160      	movs	r1, #96	; 0x60
 80059a6:	0018      	movs	r0, r3
 80059a8:	f000 fc98 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 80059ac:	e01e      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	001a      	movs	r2, r3
 80059bc:	f000 fc2e 	bl	800621c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2140      	movs	r1, #64	; 0x40
 80059c6:	0018      	movs	r0, r3
 80059c8:	f000 fc88 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 80059cc:	e00e      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	0019      	movs	r1, r3
 80059d8:	0010      	movs	r0, r2
 80059da:	f000 fc7f 	bl	80062dc <TIM_ITRx_SetConfig>
      break;
 80059de:	e005      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80059e0:	230f      	movs	r3, #15
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
      break;
 80059e8:	e000      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x184>
      break;
 80059ea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	223d      	movs	r2, #61	; 0x3d
 80059f0:	2101      	movs	r1, #1
 80059f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	223c      	movs	r2, #60	; 0x3c
 80059f8:	2100      	movs	r1, #0
 80059fa:	5499      	strb	r1, [r3, r2]

  return status;
 80059fc:	230f      	movs	r3, #15
 80059fe:	18fb      	adds	r3, r7, r3
 8005a00:	781b      	ldrb	r3, [r3, #0]
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	ffceff88 	.word	0xffceff88
 8005a10:	ffff00ff 	.word	0xffff00ff

08005a14 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	223c      	movs	r2, #60	; 0x3c
 8005a22:	5c9b      	ldrb	r3, [r3, r2]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e032      	b.n	8005a92 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	223c      	movs	r2, #60	; 0x3c
 8005a30:	2101      	movs	r1, #1
 8005a32:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	223d      	movs	r2, #61	; 0x3d
 8005a38:	2102      	movs	r1, #2
 8005a3a:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	0011      	movs	r1, r2
 8005a42:	0018      	movs	r0, r3
 8005a44:	f000 fb54 	bl	80060f0 <TIM_SlaveTimer_SetConfig>
 8005a48:	1e03      	subs	r3, r0, #0
 8005a4a:	d009      	beq.n	8005a60 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	223d      	movs	r2, #61	; 0x3d
 8005a50:	2101      	movs	r1, #1
 8005a52:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	223c      	movs	r2, #60	; 0x3c
 8005a58:	2100      	movs	r1, #0
 8005a5a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e018      	b.n	8005a92 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2140      	movs	r1, #64	; 0x40
 8005a6c:	438a      	bics	r2, r1
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4908      	ldr	r1, [pc, #32]	; (8005a9c <HAL_TIM_SlaveConfigSynchro+0x88>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	223d      	movs	r2, #61	; 0x3d
 8005a84:	2101      	movs	r1, #1
 8005a86:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	223c      	movs	r2, #60	; 0x3c
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b002      	add	sp, #8
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	ffffbfff 	.word	0xffffbfff

08005aa0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b002      	add	sp, #8
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ab8:	46c0      	nop			; (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b002      	add	sp, #8
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ac8:	46c0      	nop			; (mov r8, r8)
 8005aca:	46bd      	mov	sp, r7
 8005acc:	b002      	add	sp, #8
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ad8:	46c0      	nop			; (mov r8, r8)
 8005ada:	46bd      	mov	sp, r7
 8005adc:	b002      	add	sp, #8
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a2b      	ldr	r2, [pc, #172]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d003      	beq.n	8005b00 <TIM_Base_SetConfig+0x20>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <TIM_Base_SetConfig+0xc4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d108      	bne.n	8005b12 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2270      	movs	r2, #112	; 0x70
 8005b04:	4393      	bics	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_Base_SetConfig+0x5a>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <TIM_Base_SetConfig+0xc4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_Base_SetConfig+0x5a>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <TIM_Base_SetConfig+0xc8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_Base_SetConfig+0x5a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1f      	ldr	r2, [pc, #124]	; (8005bac <TIM_Base_SetConfig+0xcc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_Base_SetConfig+0x5a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <TIM_Base_SetConfig+0xd0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d108      	bne.n	8005b4c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <TIM_Base_SetConfig+0xd4>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	4393      	bics	r3, r2
 8005b52:	001a      	movs	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	689a      	ldr	r2, [r3, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a0a      	ldr	r2, [pc, #40]	; (8005ba0 <TIM_Base_SetConfig+0xc0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d007      	beq.n	8005b8a <TIM_Base_SetConfig+0xaa>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a0b      	ldr	r2, [pc, #44]	; (8005bac <TIM_Base_SetConfig+0xcc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d003      	beq.n	8005b8a <TIM_Base_SetConfig+0xaa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a0a      	ldr	r2, [pc, #40]	; (8005bb0 <TIM_Base_SetConfig+0xd0>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d103      	bne.n	8005b92 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	615a      	str	r2, [r3, #20]
}
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b004      	add	sp, #16
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	40012c00 	.word	0x40012c00
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40002000 	.word	0x40002000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	fffffcff 	.word	0xfffffcff

08005bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	4393      	bics	r3, r2
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a2e      	ldr	r2, [pc, #184]	; (8005ca0 <TIM_OC1_SetConfig+0xe8>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2203      	movs	r2, #3
 8005bee:	4393      	bics	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	4393      	bics	r3, r2
 8005c02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a24      	ldr	r2, [pc, #144]	; (8005ca4 <TIM_OC1_SetConfig+0xec>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_OC1_SetConfig+0x6e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a23      	ldr	r2, [pc, #140]	; (8005ca8 <TIM_OC1_SetConfig+0xf0>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_OC1_SetConfig+0x6e>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a22      	ldr	r2, [pc, #136]	; (8005cac <TIM_OC1_SetConfig+0xf4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d10c      	bne.n	8005c40 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	4393      	bics	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	4393      	bics	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <TIM_OC1_SetConfig+0xec>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_OC1_SetConfig+0xa0>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <TIM_OC1_SetConfig+0xf0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_OC1_SetConfig+0xa0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a16      	ldr	r2, [pc, #88]	; (8005cac <TIM_OC1_SetConfig+0xf4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4a15      	ldr	r2, [pc, #84]	; (8005cb0 <TIM_OC1_SetConfig+0xf8>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	4a14      	ldr	r2, [pc, #80]	; (8005cb4 <TIM_OC1_SetConfig+0xfc>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	621a      	str	r2, [r3, #32]
}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	b006      	add	sp, #24
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	fffeff8f 	.word	0xfffeff8f
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800
 8005cb0:	fffffeff 	.word	0xfffffeff
 8005cb4:	fffffdff 	.word	0xfffffdff

08005cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a1b      	ldr	r3, [r3, #32]
 8005ccc:	2210      	movs	r2, #16
 8005cce:	4393      	bics	r3, r2
 8005cd0:	001a      	movs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a2c      	ldr	r2, [pc, #176]	; (8005d98 <TIM_OC2_SetConfig+0xe0>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a2b      	ldr	r2, [pc, #172]	; (8005d9c <TIM_OC2_SetConfig+0xe4>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	021b      	lsls	r3, r3, #8
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2220      	movs	r2, #32
 8005d02:	4393      	bics	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a22      	ldr	r2, [pc, #136]	; (8005da0 <TIM_OC2_SetConfig+0xe8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10d      	bne.n	8005d36 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2280      	movs	r2, #128	; 0x80
 8005d1e:	4393      	bics	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2240      	movs	r2, #64	; 0x40
 8005d32:	4393      	bics	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <TIM_OC2_SetConfig+0xe8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d007      	beq.n	8005d4e <TIM_OC2_SetConfig+0x96>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a18      	ldr	r2, [pc, #96]	; (8005da4 <TIM_OC2_SetConfig+0xec>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d003      	beq.n	8005d4e <TIM_OC2_SetConfig+0x96>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <TIM_OC2_SetConfig+0xf0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d113      	bne.n	8005d76 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4a16      	ldr	r2, [pc, #88]	; (8005dac <TIM_OC2_SetConfig+0xf4>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	4a15      	ldr	r2, [pc, #84]	; (8005db0 <TIM_OC2_SetConfig+0xf8>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	621a      	str	r2, [r3, #32]
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b006      	add	sp, #24
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	feff8fff 	.word	0xfeff8fff
 8005d9c:	fffffcff 	.word	0xfffffcff
 8005da0:	40012c00 	.word	0x40012c00
 8005da4:	40014400 	.word	0x40014400
 8005da8:	40014800 	.word	0x40014800
 8005dac:	fffffbff 	.word	0xfffffbff
 8005db0:	fffff7ff 	.word	0xfffff7ff

08005db4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1b      	ldr	r3, [r3, #32]
 8005dc8:	4a31      	ldr	r2, [pc, #196]	; (8005e90 <TIM_OC3_SetConfig+0xdc>)
 8005dca:	401a      	ands	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <TIM_OC3_SetConfig+0xe0>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2203      	movs	r2, #3
 8005de8:	4393      	bics	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	4a27      	ldr	r2, [pc, #156]	; (8005e98 <TIM_OC3_SetConfig+0xe4>)
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a23      	ldr	r2, [pc, #140]	; (8005e9c <TIM_OC3_SetConfig+0xe8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10d      	bne.n	8005e2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4a22      	ldr	r2, [pc, #136]	; (8005ea0 <TIM_OC3_SetConfig+0xec>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <TIM_OC3_SetConfig+0xf0>)
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <TIM_OC3_SetConfig+0xe8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_OC3_SetConfig+0x92>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1b      	ldr	r2, [pc, #108]	; (8005ea8 <TIM_OC3_SetConfig+0xf4>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC3_SetConfig+0x92>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1a      	ldr	r2, [pc, #104]	; (8005eac <TIM_OC3_SetConfig+0xf8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d113      	bne.n	8005e6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4a19      	ldr	r2, [pc, #100]	; (8005eb0 <TIM_OC3_SetConfig+0xfc>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4a18      	ldr	r2, [pc, #96]	; (8005eb4 <TIM_OC3_SetConfig+0x100>)
 8005e52:	4013      	ands	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	621a      	str	r2, [r3, #32]
}
 8005e88:	46c0      	nop			; (mov r8, r8)
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b006      	add	sp, #24
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	fffffeff 	.word	0xfffffeff
 8005e94:	fffeff8f 	.word	0xfffeff8f
 8005e98:	fffffdff 	.word	0xfffffdff
 8005e9c:	40012c00 	.word	0x40012c00
 8005ea0:	fffff7ff 	.word	0xfffff7ff
 8005ea4:	fffffbff 	.word	0xfffffbff
 8005ea8:	40014400 	.word	0x40014400
 8005eac:	40014800 	.word	0x40014800
 8005eb0:	ffffefff 	.word	0xffffefff
 8005eb4:	ffffdfff 	.word	0xffffdfff

08005eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a1b      	ldr	r3, [r3, #32]
 8005ecc:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <TIM_OC4_SetConfig+0xa8>)
 8005ece:	401a      	ands	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <TIM_OC4_SetConfig+0xac>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <TIM_OC4_SetConfig+0xb0>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <TIM_OC4_SetConfig+0xb4>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <TIM_OC4_SetConfig+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC4_SetConfig+0x70>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <TIM_OC4_SetConfig+0xbc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC4_SetConfig+0x70>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <TIM_OC4_SetConfig+0xc0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d109      	bne.n	8005f3c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4a14      	ldr	r2, [pc, #80]	; (8005f7c <TIM_OC4_SetConfig+0xc4>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	019b      	lsls	r3, r3, #6
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b006      	add	sp, #24
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	ffffefff 	.word	0xffffefff
 8005f64:	feff8fff 	.word	0xfeff8fff
 8005f68:	fffffcff 	.word	0xfffffcff
 8005f6c:	ffffdfff 	.word	0xffffdfff
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	ffffbfff 	.word	0xffffbfff

08005f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <TIM_OC5_SetConfig+0x9c>)
 8005f96:	401a      	ands	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4a1d      	ldr	r2, [pc, #116]	; (8006020 <TIM_OC5_SetConfig+0xa0>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	4a19      	ldr	r2, [pc, #100]	; (8006024 <TIM_OC5_SetConfig+0xa4>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a15      	ldr	r2, [pc, #84]	; (8006028 <TIM_OC5_SetConfig+0xa8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_OC5_SetConfig+0x66>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a14      	ldr	r2, [pc, #80]	; (800602c <TIM_OC5_SetConfig+0xac>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_OC5_SetConfig+0x66>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a13      	ldr	r2, [pc, #76]	; (8006030 <TIM_OC5_SetConfig+0xb0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d109      	bne.n	8005ffa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4a0c      	ldr	r2, [pc, #48]	; (800601c <TIM_OC5_SetConfig+0x9c>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	46c0      	nop			; (mov r8, r8)
 8006016:	46bd      	mov	sp, r7
 8006018:	b006      	add	sp, #24
 800601a:	bd80      	pop	{r7, pc}
 800601c:	fffeffff 	.word	0xfffeffff
 8006020:	fffeff8f 	.word	0xfffeff8f
 8006024:	fffdffff 	.word	0xfffdffff
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	4a22      	ldr	r2, [pc, #136]	; (80060d4 <TIM_OC6_SetConfig+0xa0>)
 800604a:	401a      	ands	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a1e      	ldr	r2, [pc, #120]	; (80060d8 <TIM_OC6_SetConfig+0xa4>)
 8006060:	4013      	ands	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <TIM_OC6_SetConfig+0xa8>)
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	051b      	lsls	r3, r3, #20
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a16      	ldr	r2, [pc, #88]	; (80060e0 <TIM_OC6_SetConfig+0xac>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d007      	beq.n	800609c <TIM_OC6_SetConfig+0x68>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <TIM_OC6_SetConfig+0xb0>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d003      	beq.n	800609c <TIM_OC6_SetConfig+0x68>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <TIM_OC6_SetConfig+0xb4>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d109      	bne.n	80060b0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4a13      	ldr	r2, [pc, #76]	; (80060ec <TIM_OC6_SetConfig+0xb8>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	029b      	lsls	r3, r3, #10
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	621a      	str	r2, [r3, #32]
}
 80060ca:	46c0      	nop			; (mov r8, r8)
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b006      	add	sp, #24
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	ffefffff 	.word	0xffefffff
 80060d8:	feff8fff 	.word	0xfeff8fff
 80060dc:	ffdfffff 	.word	0xffdfffff
 80060e0:	40012c00 	.word	0x40012c00
 80060e4:	40014400 	.word	0x40014400
 80060e8:	40014800 	.word	0x40014800
 80060ec:	fffbffff 	.word	0xfffbffff

080060f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2317      	movs	r3, #23
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	4a41      	ldr	r2, [pc, #260]	; (8006214 <TIM_SlaveTimer_SetConfig+0x124>)
 800610e:	4013      	ands	r3, r2
 8006110:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	4a3e      	ldr	r2, [pc, #248]	; (8006218 <TIM_SlaveTimer_SetConfig+0x128>)
 8006120:	4013      	ands	r3, r2
 8006122:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b70      	cmp	r3, #112	; 0x70
 800613c:	d015      	beq.n	800616a <TIM_SlaveTimer_SetConfig+0x7a>
 800613e:	d900      	bls.n	8006142 <TIM_SlaveTimer_SetConfig+0x52>
 8006140:	e05b      	b.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 8006142:	2b60      	cmp	r3, #96	; 0x60
 8006144:	d04f      	beq.n	80061e6 <TIM_SlaveTimer_SetConfig+0xf6>
 8006146:	d858      	bhi.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 8006148:	2b50      	cmp	r3, #80	; 0x50
 800614a:	d042      	beq.n	80061d2 <TIM_SlaveTimer_SetConfig+0xe2>
 800614c:	d855      	bhi.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d016      	beq.n	8006180 <TIM_SlaveTimer_SetConfig+0x90>
 8006152:	d852      	bhi.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 8006154:	2b30      	cmp	r3, #48	; 0x30
 8006156:	d055      	beq.n	8006204 <TIM_SlaveTimer_SetConfig+0x114>
 8006158:	d84f      	bhi.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 800615a:	2b20      	cmp	r3, #32
 800615c:	d052      	beq.n	8006204 <TIM_SlaveTimer_SetConfig+0x114>
 800615e:	d84c      	bhi.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d04f      	beq.n	8006204 <TIM_SlaveTimer_SetConfig+0x114>
 8006164:	2b10      	cmp	r3, #16
 8006166:	d04d      	beq.n	8006204 <TIM_SlaveTimer_SetConfig+0x114>
 8006168:	e047      	b.n	80061fa <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800617a:	f000 f8cb 	bl	8006314 <TIM_ETR_SetConfig>
      break;
 800617e:	e042      	b.n	8006206 <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b05      	cmp	r3, #5
 8006186:	d101      	bne.n	800618c <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e03f      	b.n	800620c <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6a1a      	ldr	r2, [r3, #32]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	438a      	bics	r2, r1
 80061a2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699b      	ldr	r3, [r3, #24]
 80061aa:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	22f0      	movs	r2, #240	; 0xf0
 80061b0:	4393      	bics	r3, r2
 80061b2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4313      	orrs	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	621a      	str	r2, [r3, #32]
      break;
 80061d0:	e019      	b.n	8006206 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061de:	001a      	movs	r2, r3
 80061e0:	f000 f81c 	bl	800621c <TIM_TI1_ConfigInputStage>
      break;
 80061e4:	e00f      	b.n	8006206 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061f2:	001a      	movs	r2, r3
 80061f4:	f000 f840 	bl	8006278 <TIM_TI2_ConfigInputStage>
      break;
 80061f8:	e005      	b.n	8006206 <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80061fa:	2317      	movs	r3, #23
 80061fc:	18fb      	adds	r3, r7, r3
 80061fe:	2201      	movs	r2, #1
 8006200:	701a      	strb	r2, [r3, #0]
      break;
 8006202:	e000      	b.n	8006206 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006204:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8006206:	2317      	movs	r3, #23
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	781b      	ldrb	r3, [r3, #0]
}
 800620c:	0018      	movs	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	b006      	add	sp, #24
 8006212:	bd80      	pop	{r7, pc}
 8006214:	ffcfff8f 	.word	0xffcfff8f
 8006218:	fffefff8 	.word	0xfffefff8

0800621c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	2201      	movs	r2, #1
 8006234:	4393      	bics	r3, r2
 8006236:	001a      	movs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	22f0      	movs	r2, #240	; 0xf0
 8006246:	4393      	bics	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	4313      	orrs	r3, r2
 8006252:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	220a      	movs	r2, #10
 8006258:	4393      	bics	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	621a      	str	r2, [r3, #32]
}
 8006270:	46c0      	nop			; (mov r8, r8)
 8006272:	46bd      	mov	sp, r7
 8006274:	b006      	add	sp, #24
 8006276:	bd80      	pop	{r7, pc}

08006278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	2210      	movs	r2, #16
 8006290:	4393      	bics	r3, r2
 8006292:	001a      	movs	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <TIM_TI2_ConfigInputStage+0x60>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	22a0      	movs	r2, #160	; 0xa0
 80062b4:	4393      	bics	r3, r2
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	46c0      	nop			; (mov r8, r8)
 80062d0:	46bd      	mov	sp, r7
 80062d2:	b006      	add	sp, #24
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	46c0      	nop			; (mov r8, r8)
 80062d8:	ffff0fff 	.word	0xffff0fff

080062dc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a08      	ldr	r2, [pc, #32]	; (8006310 <TIM_ITRx_SetConfig+0x34>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	2207      	movs	r2, #7
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	609a      	str	r2, [r3, #8]
}
 8006306:	46c0      	nop			; (mov r8, r8)
 8006308:	46bd      	mov	sp, r7
 800630a:	b004      	add	sp, #16
 800630c:	bd80      	pop	{r7, pc}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	ffcfff8f 	.word	0xffcfff8f

08006314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	4a09      	ldr	r2, [pc, #36]	; (8006350 <TIM_ETR_SetConfig+0x3c>)
 800632c:	4013      	ands	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	021a      	lsls	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	431a      	orrs	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	46c0      	nop			; (mov r8, r8)
 800634a:	46bd      	mov	sp, r7
 800634c:	b006      	add	sp, #24
 800634e:	bd80      	pop	{r7, pc}
 8006350:	ffff00ff 	.word	0xffff00ff

08006354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	223c      	movs	r2, #60	; 0x3c
 8006362:	5c9b      	ldrb	r3, [r3, r2]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d101      	bne.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006368:	2302      	movs	r3, #2
 800636a:	e04a      	b.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	223c      	movs	r2, #60	; 0x3c
 8006370:	2101      	movs	r1, #1
 8006372:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	223d      	movs	r2, #61	; 0x3d
 8006378:	2102      	movs	r1, #2
 800637a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1e      	ldr	r2, [pc, #120]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d108      	bne.n	80063a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4a1d      	ldr	r2, [pc, #116]	; (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800639a:	4013      	ands	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2270      	movs	r2, #112	; 0x70
 80063ac:	4393      	bics	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a11      	ldr	r2, [pc, #68]	; (800640c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d004      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a10      	ldr	r2, [pc, #64]	; (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10c      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2280      	movs	r2, #128	; 0x80
 80063da:	4393      	bics	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	223d      	movs	r2, #61	; 0x3d
 80063f4:	2101      	movs	r1, #1
 80063f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	223c      	movs	r2, #60	; 0x3c
 80063fc:	2100      	movs	r1, #0
 80063fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			; (mov r8, r8)
 800640c:	40012c00 	.word	0x40012c00
 8006410:	ff0fffff 	.word	0xff0fffff
 8006414:	40000400 	.word	0x40000400

08006418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006420:	46c0      	nop			; (mov r8, r8)
 8006422:	46bd      	mov	sp, r7
 8006424:	b002      	add	sp, #8
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b002      	add	sp, #8
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006440:	46c0      	nop			; (mov r8, r8)
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <malloc>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4b03      	ldr	r3, [pc, #12]	; (8006458 <malloc+0x10>)
 800644c:	0001      	movs	r1, r0
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	f000 f826 	bl	80064a0 <_malloc_r>
 8006454:	bd10      	pop	{r4, pc}
 8006456:	46c0      	nop			; (mov r8, r8)
 8006458:	20000064 	.word	0x20000064

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0f      	ldr	r6, [pc, #60]	; (800649c <sbrk_aligned+0x40>)
 8006460:	000d      	movs	r5, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	0004      	movs	r4, r0
 8006466:	2900      	cmp	r1, #0
 8006468:	d102      	bne.n	8006470 <sbrk_aligned+0x14>
 800646a:	f000 f8b3 	bl	80065d4 <_sbrk_r>
 800646e:	6030      	str	r0, [r6, #0]
 8006470:	0029      	movs	r1, r5
 8006472:	0020      	movs	r0, r4
 8006474:	f000 f8ae 	bl	80065d4 <_sbrk_r>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d00a      	beq.n	8006492 <sbrk_aligned+0x36>
 800647c:	2303      	movs	r3, #3
 800647e:	1cc5      	adds	r5, r0, #3
 8006480:	439d      	bics	r5, r3
 8006482:	42a8      	cmp	r0, r5
 8006484:	d007      	beq.n	8006496 <sbrk_aligned+0x3a>
 8006486:	1a29      	subs	r1, r5, r0
 8006488:	0020      	movs	r0, r4
 800648a:	f000 f8a3 	bl	80065d4 <_sbrk_r>
 800648e:	3001      	adds	r0, #1
 8006490:	d101      	bne.n	8006496 <sbrk_aligned+0x3a>
 8006492:	2501      	movs	r5, #1
 8006494:	426d      	negs	r5, r5
 8006496:	0028      	movs	r0, r5
 8006498:	bd70      	pop	{r4, r5, r6, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	20000924 	.word	0x20000924

080064a0 <_malloc_r>:
 80064a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064a2:	2203      	movs	r2, #3
 80064a4:	1ccb      	adds	r3, r1, #3
 80064a6:	4393      	bics	r3, r2
 80064a8:	3308      	adds	r3, #8
 80064aa:	0006      	movs	r6, r0
 80064ac:	001f      	movs	r7, r3
 80064ae:	2b0c      	cmp	r3, #12
 80064b0:	d238      	bcs.n	8006524 <_malloc_r+0x84>
 80064b2:	270c      	movs	r7, #12
 80064b4:	42b9      	cmp	r1, r7
 80064b6:	d837      	bhi.n	8006528 <_malloc_r+0x88>
 80064b8:	0030      	movs	r0, r6
 80064ba:	f000 f873 	bl	80065a4 <__malloc_lock>
 80064be:	4b38      	ldr	r3, [pc, #224]	; (80065a0 <_malloc_r+0x100>)
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	001c      	movs	r4, r3
 80064c6:	2c00      	cmp	r4, #0
 80064c8:	d133      	bne.n	8006532 <_malloc_r+0x92>
 80064ca:	0039      	movs	r1, r7
 80064cc:	0030      	movs	r0, r6
 80064ce:	f7ff ffc5 	bl	800645c <sbrk_aligned>
 80064d2:	0004      	movs	r4, r0
 80064d4:	1c43      	adds	r3, r0, #1
 80064d6:	d15e      	bne.n	8006596 <_malloc_r+0xf6>
 80064d8:	9b00      	ldr	r3, [sp, #0]
 80064da:	681c      	ldr	r4, [r3, #0]
 80064dc:	0025      	movs	r5, r4
 80064de:	2d00      	cmp	r5, #0
 80064e0:	d14e      	bne.n	8006580 <_malloc_r+0xe0>
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	d051      	beq.n	800658a <_malloc_r+0xea>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	0029      	movs	r1, r5
 80064ea:	18e3      	adds	r3, r4, r3
 80064ec:	0030      	movs	r0, r6
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f000 f870 	bl	80065d4 <_sbrk_r>
 80064f4:	9b01      	ldr	r3, [sp, #4]
 80064f6:	4283      	cmp	r3, r0
 80064f8:	d147      	bne.n	800658a <_malloc_r+0xea>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	0030      	movs	r0, r6
 80064fe:	1aff      	subs	r7, r7, r3
 8006500:	0039      	movs	r1, r7
 8006502:	f7ff ffab 	bl	800645c <sbrk_aligned>
 8006506:	3001      	adds	r0, #1
 8006508:	d03f      	beq.n	800658a <_malloc_r+0xea>
 800650a:	6823      	ldr	r3, [r4, #0]
 800650c:	19db      	adds	r3, r3, r7
 800650e:	6023      	str	r3, [r4, #0]
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d040      	beq.n	800659a <_malloc_r+0xfa>
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	42a2      	cmp	r2, r4
 800651c:	d133      	bne.n	8006586 <_malloc_r+0xe6>
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	e014      	b.n	800654e <_malloc_r+0xae>
 8006524:	2b00      	cmp	r3, #0
 8006526:	dac5      	bge.n	80064b4 <_malloc_r+0x14>
 8006528:	230c      	movs	r3, #12
 800652a:	2500      	movs	r5, #0
 800652c:	6033      	str	r3, [r6, #0]
 800652e:	0028      	movs	r0, r5
 8006530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006532:	6821      	ldr	r1, [r4, #0]
 8006534:	1bc9      	subs	r1, r1, r7
 8006536:	d420      	bmi.n	800657a <_malloc_r+0xda>
 8006538:	290b      	cmp	r1, #11
 800653a:	d918      	bls.n	800656e <_malloc_r+0xce>
 800653c:	19e2      	adds	r2, r4, r7
 800653e:	6027      	str	r7, [r4, #0]
 8006540:	42a3      	cmp	r3, r4
 8006542:	d112      	bne.n	800656a <_malloc_r+0xca>
 8006544:	9b00      	ldr	r3, [sp, #0]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	6053      	str	r3, [r2, #4]
 800654e:	0030      	movs	r0, r6
 8006550:	0025      	movs	r5, r4
 8006552:	f000 f82f 	bl	80065b4 <__malloc_unlock>
 8006556:	2207      	movs	r2, #7
 8006558:	350b      	adds	r5, #11
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	4395      	bics	r5, r2
 800655e:	1aea      	subs	r2, r5, r3
 8006560:	429d      	cmp	r5, r3
 8006562:	d0e4      	beq.n	800652e <_malloc_r+0x8e>
 8006564:	1b5b      	subs	r3, r3, r5
 8006566:	50a3      	str	r3, [r4, r2]
 8006568:	e7e1      	b.n	800652e <_malloc_r+0x8e>
 800656a:	605a      	str	r2, [r3, #4]
 800656c:	e7ec      	b.n	8006548 <_malloc_r+0xa8>
 800656e:	6862      	ldr	r2, [r4, #4]
 8006570:	42a3      	cmp	r3, r4
 8006572:	d1d5      	bne.n	8006520 <_malloc_r+0x80>
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e7e9      	b.n	800654e <_malloc_r+0xae>
 800657a:	0023      	movs	r3, r4
 800657c:	6864      	ldr	r4, [r4, #4]
 800657e:	e7a2      	b.n	80064c6 <_malloc_r+0x26>
 8006580:	002c      	movs	r4, r5
 8006582:	686d      	ldr	r5, [r5, #4]
 8006584:	e7ab      	b.n	80064de <_malloc_r+0x3e>
 8006586:	0013      	movs	r3, r2
 8006588:	e7c4      	b.n	8006514 <_malloc_r+0x74>
 800658a:	230c      	movs	r3, #12
 800658c:	0030      	movs	r0, r6
 800658e:	6033      	str	r3, [r6, #0]
 8006590:	f000 f810 	bl	80065b4 <__malloc_unlock>
 8006594:	e7cb      	b.n	800652e <_malloc_r+0x8e>
 8006596:	6027      	str	r7, [r4, #0]
 8006598:	e7d9      	b.n	800654e <_malloc_r+0xae>
 800659a:	605b      	str	r3, [r3, #4]
 800659c:	deff      	udf	#255	; 0xff
 800659e:	46c0      	nop			; (mov r8, r8)
 80065a0:	20000920 	.word	0x20000920

080065a4 <__malloc_lock>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	4802      	ldr	r0, [pc, #8]	; (80065b0 <__malloc_lock+0xc>)
 80065a8:	f000 f850 	bl	800664c <__retarget_lock_acquire_recursive>
 80065ac:	bd10      	pop	{r4, pc}
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	20000a64 	.word	0x20000a64

080065b4 <__malloc_unlock>:
 80065b4:	b510      	push	{r4, lr}
 80065b6:	4802      	ldr	r0, [pc, #8]	; (80065c0 <__malloc_unlock+0xc>)
 80065b8:	f000 f849 	bl	800664e <__retarget_lock_release_recursive>
 80065bc:	bd10      	pop	{r4, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	20000a64 	.word	0x20000a64

080065c4 <memset>:
 80065c4:	0003      	movs	r3, r0
 80065c6:	1882      	adds	r2, r0, r2
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d100      	bne.n	80065ce <memset+0xa>
 80065cc:	4770      	bx	lr
 80065ce:	7019      	strb	r1, [r3, #0]
 80065d0:	3301      	adds	r3, #1
 80065d2:	e7f9      	b.n	80065c8 <memset+0x4>

080065d4 <_sbrk_r>:
 80065d4:	2300      	movs	r3, #0
 80065d6:	b570      	push	{r4, r5, r6, lr}
 80065d8:	4d06      	ldr	r5, [pc, #24]	; (80065f4 <_sbrk_r+0x20>)
 80065da:	0004      	movs	r4, r0
 80065dc:	0008      	movs	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fd fc78 	bl	8003ed4 <_sbrk>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d103      	bne.n	80065f0 <_sbrk_r+0x1c>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d000      	beq.n	80065f0 <_sbrk_r+0x1c>
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	bd70      	pop	{r4, r5, r6, pc}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	20000a60 	.word	0x20000a60

080065f8 <__errno>:
 80065f8:	4b01      	ldr	r3, [pc, #4]	; (8006600 <__errno+0x8>)
 80065fa:	6818      	ldr	r0, [r3, #0]
 80065fc:	4770      	bx	lr
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	20000064 	.word	0x20000064

08006604 <__libc_init_array>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2600      	movs	r6, #0
 8006608:	4c0c      	ldr	r4, [pc, #48]	; (800663c <__libc_init_array+0x38>)
 800660a:	4d0d      	ldr	r5, [pc, #52]	; (8006640 <__libc_init_array+0x3c>)
 800660c:	1b64      	subs	r4, r4, r5
 800660e:	10a4      	asrs	r4, r4, #2
 8006610:	42a6      	cmp	r6, r4
 8006612:	d109      	bne.n	8006628 <__libc_init_array+0x24>
 8006614:	2600      	movs	r6, #0
 8006616:	f000 f825 	bl	8006664 <_init>
 800661a:	4c0a      	ldr	r4, [pc, #40]	; (8006644 <__libc_init_array+0x40>)
 800661c:	4d0a      	ldr	r5, [pc, #40]	; (8006648 <__libc_init_array+0x44>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	42a6      	cmp	r6, r4
 8006624:	d105      	bne.n	8006632 <__libc_init_array+0x2e>
 8006626:	bd70      	pop	{r4, r5, r6, pc}
 8006628:	00b3      	lsls	r3, r6, #2
 800662a:	58eb      	ldr	r3, [r5, r3]
 800662c:	4798      	blx	r3
 800662e:	3601      	adds	r6, #1
 8006630:	e7ee      	b.n	8006610 <__libc_init_array+0xc>
 8006632:	00b3      	lsls	r3, r6, #2
 8006634:	58eb      	ldr	r3, [r5, r3]
 8006636:	4798      	blx	r3
 8006638:	3601      	adds	r6, #1
 800663a:	e7f2      	b.n	8006622 <__libc_init_array+0x1e>
 800663c:	08006840 	.word	0x08006840
 8006640:	08006840 	.word	0x08006840
 8006644:	08006844 	.word	0x08006844
 8006648:	08006840 	.word	0x08006840

0800664c <__retarget_lock_acquire_recursive>:
 800664c:	4770      	bx	lr

0800664e <__retarget_lock_release_recursive>:
 800664e:	4770      	bx	lr

08006650 <memcpy>:
 8006650:	2300      	movs	r3, #0
 8006652:	b510      	push	{r4, lr}
 8006654:	429a      	cmp	r2, r3
 8006656:	d100      	bne.n	800665a <memcpy+0xa>
 8006658:	bd10      	pop	{r4, pc}
 800665a:	5ccc      	ldrb	r4, [r1, r3]
 800665c:	54c4      	strb	r4, [r0, r3]
 800665e:	3301      	adds	r3, #1
 8006660:	e7f8      	b.n	8006654 <memcpy+0x4>
	...

08006664 <_init>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	46c0      	nop			; (mov r8, r8)
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr

08006670 <_fini>:
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006676:	bc08      	pop	{r3}
 8006678:	469e      	mov	lr, r3
 800667a:	4770      	bx	lr
