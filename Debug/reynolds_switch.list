
reynolds_switch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005664  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08005724  08005724  00015724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005828  08005828  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005828  08005828  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005828  08005828  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005830  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000948  20000070  0800589c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800589c  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db5c  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255a  00000000  00000000  0002dc33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e10  00000000  00000000  00030190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abd  00000000  00000000  00030fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000144ca  00000000  00000000  00031a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010518  00000000  00000000  00045f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c150  00000000  00000000  0005643f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003594  00000000  00000000  000d2590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d5b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800570c 	.word	0x0800570c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800570c 	.word	0x0800570c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <button_setup>:

#include "button.h"


uint8_t button_setup(button_t *button, button_gpio_t hardware_input)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	6019      	str	r1, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]

	button->hardware_input = hardware_input;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	1d3a      	adds	r2, r7, #4
 8000232:	3304      	adds	r3, #4
 8000234:	ca03      	ldmia	r2!, {r0, r1}
 8000236:	c303      	stmia	r3!, {r0, r1}
	button->edge = BUTTON_EDGE_NOT_DETECTED;
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	2200      	movs	r2, #0
 800023c:	705a      	strb	r2, [r3, #1]
	button->edge_attended = BUTTON_ISR_ATTENDED;
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2200      	movs	r2, #0
 8000242:	70da      	strb	r2, [r3, #3]
	button->debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2200      	movs	r2, #0
 8000248:	731a      	strb	r2, [r3, #12]
	button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	2201      	movs	r2, #1
 800024e:	735a      	strb	r2, [r3, #13]
	button->debounce_idx = 0;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
	button->debounce_count_limit = 1;
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	2201      	movs	r2, #1
 800025a:	615a      	str	r2, [r3, #20]
	button->push_status = BUTTON_PUSH_OFF;//For push button only
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	2200      	movs	r2, #0
 8000260:	709a      	strb	r2, [r3, #2]

	return 0;
 8000262:	2300      	movs	r3, #0

}
 8000264:	0018      	movs	r0, r3
 8000266:	46bd      	mov	sp, r7
 8000268:	b004      	add	sp, #16
 800026a:	bd80      	pop	{r7, pc}

0800026c <button_debounce_fsm>:


uint8_t button_debounce_fsm(button_t *button)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b088      	sub	sp, #32
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	button_debounce_state_fsm_t debounce_fsm_state = button->debounce_fsm_state;
 8000274:	211f      	movs	r1, #31
 8000276:	187b      	adds	r3, r7, r1
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	7b12      	ldrb	r2, [r2, #12]
 800027c:	701a      	strb	r2, [r3, #0]
	button_edge_t edge = button->edge;
 800027e:	2317      	movs	r3, #23
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	687a      	ldr	r2, [r7, #4]
 8000284:	7852      	ldrb	r2, [r2, #1]
 8000286:	701a      	strb	r2, [r3, #0]
	uint32_t debounce_idx = button->debounce_idx;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	61bb      	str	r3, [r7, #24]
	uint32_t debounce_count_limit = button->debounce_count_limit;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	613b      	str	r3, [r7, #16]
	button_status_t button_status;

	switch(debounce_fsm_state)
 8000294:	187b      	adds	r3, r7, r1
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d022      	beq.n	80002e2 <button_debounce_fsm+0x76>
 800029c:	dc36      	bgt.n	800030c <button_debounce_fsm+0xa0>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d002      	beq.n	80002a8 <button_debounce_fsm+0x3c>
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d011      	beq.n	80002ca <button_debounce_fsm+0x5e>
 80002a6:	e031      	b.n	800030c <button_debounce_fsm+0xa0>
	{
		case BUTTON_DEBOUNCE_IDLE:

			if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	7b5b      	ldrb	r3, [r3, #13]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d132      	bne.n	8000316 <button_debounce_fsm+0xaa>
			{
				if(debounce_count_limit == 0)
 80002b0:	693b      	ldr	r3, [r7, #16]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d104      	bne.n	80002c0 <button_debounce_fsm+0x54>
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002b6:	231f      	movs	r3, #31
 80002b8:	18fb      	adds	r3, r7, r3
 80002ba:	2202      	movs	r2, #2
 80002bc:	701a      	strb	r2, [r3, #0]
				else
				{
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
				}
			}
			break;
 80002be:	e02a      	b.n	8000316 <button_debounce_fsm+0xaa>
					debounce_fsm_state = BUTTON_DEBOUNCE_WAIT;
 80002c0:	231f      	movs	r3, #31
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	2201      	movs	r2, #1
 80002c6:	701a      	strb	r2, [r3, #0]
			break;
 80002c8:	e025      	b.n	8000316 <button_debounce_fsm+0xaa>
		case BUTTON_DEBOUNCE_WAIT:

			if(debounce_idx >= debounce_count_limit)
 80002ca:	69ba      	ldr	r2, [r7, #24]
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	429a      	cmp	r2, r3
 80002d0:	d303      	bcc.n	80002da <button_debounce_fsm+0x6e>
			{
				debounce_fsm_state = BUTTON_DEBOUNCE_CLEAR_LOCK;
 80002d2:	231f      	movs	r3, #31
 80002d4:	18fb      	adds	r3, r7, r3
 80002d6:	2202      	movs	r2, #2
 80002d8:	701a      	strb	r2, [r3, #0]
			}
			debounce_idx++;
 80002da:	69bb      	ldr	r3, [r7, #24]
 80002dc:	3301      	adds	r3, #1
 80002de:	61bb      	str	r3, [r7, #24]

			break;
 80002e0:	e01a      	b.n	8000318 <button_debounce_fsm+0xac>
		case BUTTON_DEBOUNCE_CLEAR_LOCK:

			button->edge_attended = BUTTON_ISR_UNATTENDED;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2202      	movs	r2, #2
 80002e6:	70da      	strb	r2, [r3, #3]
			button->debounce_idx = 0;
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
			button->debounce_lock = BUTTON_DEBOUNCE_LOCK_OFF;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	735a      	strb	r2, [r3, #13]
			button_get_status(button, &button_status);
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fa      	adds	r2, r7, r3
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	0011      	movs	r1, r2
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 f843 	bl	8000388 <button_get_status>

			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 8000302:	231f      	movs	r3, #31
 8000304:	18fb      	adds	r3, r7, r3
 8000306:	2200      	movs	r2, #0
 8000308:	701a      	strb	r2, [r3, #0]

			break;
 800030a:	e005      	b.n	8000318 <button_debounce_fsm+0xac>
		default:
			debounce_fsm_state = BUTTON_DEBOUNCE_IDLE;
 800030c:	231f      	movs	r3, #31
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
			break;
 8000314:	e000      	b.n	8000318 <button_debounce_fsm+0xac>
			break;
 8000316:	46c0      	nop			; (mov r8, r8)
	}

	button->debounce_fsm_state = debounce_fsm_state;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	221f      	movs	r2, #31
 800031c:	18ba      	adds	r2, r7, r2
 800031e:	7812      	ldrb	r2, [r2, #0]
 8000320:	731a      	strb	r2, [r3, #12]
	button->edge = edge;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	2217      	movs	r2, #23
 8000326:	18ba      	adds	r2, r7, r2
 8000328:	7812      	ldrb	r2, [r2, #0]
 800032a:	705a      	strb	r2, [r3, #1]
	button->debounce_idx = debounce_idx;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	69ba      	ldr	r2, [r7, #24]
 8000330:	611a      	str	r2, [r3, #16]

	return 0;
 8000332:	2300      	movs	r3, #0
}
 8000334:	0018      	movs	r0, r3
 8000336:	46bd      	mov	sp, r7
 8000338:	b008      	add	sp, #32
 800033a:	bd80      	pop	{r7, pc}

0800033c <button_positive_edge_detected>:

}


uint8_t button_positive_edge_detected(button_t *button)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]

	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	7b5b      	ldrb	r3, [r3, #13]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d105      	bne.n	8000358 <button_positive_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_POSITIVE;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2202      	movs	r2, #2
 8000350:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2200      	movs	r2, #0
 8000356:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 8000358:	2300      	movs	r3, #0
}
 800035a:	0018      	movs	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}

08000362 <button_negative_edge_detected>:

uint8_t button_negative_edge_detected(button_t *button)
{
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	7b5b      	ldrb	r3, [r3, #13]
 800036e:	2b01      	cmp	r3, #1
 8000370:	d105      	bne.n	800037e <button_negative_edge_detected+0x1c>
	{
		button->edge = BUTTON_EDGE_NEGATIVE;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	2201      	movs	r2, #1
 8000376:	705a      	strb	r2, [r3, #1]
		button->debounce_lock = BUTTON_DEBOUNCE_LOCK_ON;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	735a      	strb	r2, [r3, #13]
	}
	return 0;
 800037e:	2300      	movs	r3, #0
}
 8000380:	0018      	movs	r0, r3
 8000382:	46bd      	mov	sp, r7
 8000384:	b002      	add	sp, #8
 8000386:	bd80      	pop	{r7, pc}

08000388 <button_get_status>:
	button->edge = BUTTON_EDGE_NOT_DETECTED;
	return 0;
}

uint8_t button_get_status(button_t *button, button_status_t *status)
{
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	6039      	str	r1, [r7, #0]
	GPIO_PinState pin_value;
	pin_value = HAL_GPIO_ReadPin(button->hardware_input.port,
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685a      	ldr	r2, [r3, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	891b      	ldrh	r3, [r3, #8]
 800039a:	250f      	movs	r5, #15
 800039c:	197c      	adds	r4, r7, r5
 800039e:	0019      	movs	r1, r3
 80003a0:	0010      	movs	r0, r2
 80003a2:	f003 fc43 	bl	8003c2c <HAL_GPIO_ReadPin>
 80003a6:	0003      	movs	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
												button->hardware_input.pin);
	if(pin_value == GPIO_PIN_SET)
 80003aa:	197b      	adds	r3, r7, r5
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	2b01      	cmp	r3, #1
 80003b0:	d103      	bne.n	80003ba <button_get_status+0x32>
	{
		button->status = BUTTON_ON;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	e002      	b.n	80003c0 <button_get_status+0x38>
	}
	else
	{
		button->status = BUTTON_OFF;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
	}

	*status = button->status;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	701a      	strb	r2, [r3, #0]

	return 0;
 80003c8:	2300      	movs	r3, #0
}
 80003ca:	0018      	movs	r0, r3
 80003cc:	46bd      	mov	sp, r7
 80003ce:	b004      	add	sp, #16
 80003d0:	bdb0      	pop	{r4, r5, r7, pc}

080003d2 <button_check_isr_request>:


uint8_t button_check_isr_request(button_t button,
									button_isr_status_t *button_isr_status,
									button_edge_t *edge)
{
 80003d2:	b084      	sub	sp, #16
 80003d4:	b5b0      	push	{r4, r5, r7, lr}
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	250c      	movs	r5, #12
 80003da:	1d2c      	adds	r4, r5, #4
 80003dc:	19e4      	adds	r4, r4, r7
 80003de:	6020      	str	r0, [r4, #0]
 80003e0:	6061      	str	r1, [r4, #4]
 80003e2:	60a2      	str	r2, [r4, #8]
 80003e4:	60e3      	str	r3, [r4, #12]
	*button_isr_status = button.edge_attended;
 80003e6:	0029      	movs	r1, r5
 80003e8:	1d0b      	adds	r3, r1, #4
 80003ea:	19db      	adds	r3, r3, r7
 80003ec:	78da      	ldrb	r2, [r3, #3]
 80003ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f0:	701a      	strb	r2, [r3, #0]
	*edge = button.edge;
 80003f2:	1d0b      	adds	r3, r1, #4
 80003f4:	19db      	adds	r3, r3, r7
 80003f6:	785a      	ldrb	r2, [r3, #1]
 80003f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003fa:	701a      	strb	r2, [r3, #0]
	return 0;
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	0018      	movs	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	bcb0      	pop	{r4, r5, r7}
 8000404:	bc08      	pop	{r3}
 8000406:	b004      	add	sp, #16
 8000408:	4718      	bx	r3

0800040a <deadline_timer_setup>:
#include "deadline_timer.h"

//TODO: (High) fix this to include seconds
uint8_t deadline_timer_setup(deadline_timer_t *deadline_timer,
												timer_clock_t deadline)
{
 800040a:	b082      	sub	sp, #8
 800040c:	b5b0      	push	{r4, r5, r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af04      	add	r7, sp, #16
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	2418      	movs	r4, #24
 8000416:	1939      	adds	r1, r7, r4
 8000418:	600a      	str	r2, [r1, #0]
 800041a:	604b      	str	r3, [r1, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_FALSE;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2260      	movs	r2, #96	; 0x60
 8000420:	2100      	movs	r1, #0
 8000422:	5499      	strb	r1, [r3, r2]

	timer_clock_clear(&deadline_timer->time_current);
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	0018      	movs	r0, r3
 8000428:	f000 f87a 	bl	8000520 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_initial);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	3330      	adds	r3, #48	; 0x30
 8000430:	0018      	movs	r0, r3
 8000432:	f000 f875 	bl	8000520 <timer_clock_clear>
	timer_clock_clear(&deadline_timer->time_goal);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	3348      	adds	r3, #72	; 0x48
 800043a:	0018      	movs	r0, r3
 800043c:	f000 f870 	bl	8000520 <timer_clock_clear>
	timer_clock_set_time(&deadline_timer->deadline, deadline);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	3318      	adds	r3, #24
 8000444:	001d      	movs	r5, r3
 8000446:	193c      	adds	r4, r7, r4
 8000448:	466b      	mov	r3, sp
 800044a:	0018      	movs	r0, r3
 800044c:	0023      	movs	r3, r4
 800044e:	3308      	adds	r3, #8
 8000450:	2210      	movs	r2, #16
 8000452:	0019      	movs	r1, r3
 8000454:	f005 f950 	bl	80056f8 <memcpy>
 8000458:	6822      	ldr	r2, [r4, #0]
 800045a:	6863      	ldr	r3, [r4, #4]
 800045c:	0028      	movs	r0, r5
 800045e:	f000 f873 	bl	8000548 <timer_clock_set_time>
	return 0;
 8000462:	2300      	movs	r3, #0

}
 8000464:	0018      	movs	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	b002      	add	sp, #8
 800046a:	bcb0      	pop	{r4, r5, r7}
 800046c:	bc08      	pop	{r3}
 800046e:	b002      	add	sp, #8
 8000470:	4718      	bx	r3

08000472 <deadline_timer_force_expiration>:
	time_current = time_current_2;
}


uint8_t deadline_timer_force_expiration(deadline_timer_t *deadline_timer)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	b082      	sub	sp, #8
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
	deadline_timer->deadline_expired = TIMER_EXPIRED_TRUE;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2260      	movs	r2, #96	; 0x60
 800047e:	2101      	movs	r1, #1
 8000480:	5499      	strb	r1, [r3, r2]
	return 0;
 8000482:	2300      	movs	r3, #0
}
 8000484:	0018      	movs	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	b002      	add	sp, #8
 800048a:	bd80      	pop	{r7, pc}

0800048c <deadline_timer_check>:
uint8_t deadline_timer_check(deadline_timer_t *deadline_timer,
								deadline_timer_expired_t *deadline_expired)
{
 800048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048e:	b087      	sub	sp, #28
 8000490:	af02      	add	r7, sp, #8
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
	uint8_t status = 0;
 8000496:	260f      	movs	r6, #15
 8000498:	19bb      	adds	r3, r7, r6
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	//TODO: (High) fix this to include seconds

//	deadline_timer_expired_t deadline_expired_sec = TIMER_EXPIRED_FALSE;
	deadline_timer_expired_t deadline_expired_msec = TIMER_EXPIRED_FALSE;
 800049e:	250e      	movs	r5, #14
 80004a0:	197b      	adds	r3, r7, r5
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]

//	uint32_t time_current = deadline_timer->time_current.msec;
//	uint32_t deadline = deadline_timer->deadline.msec;
//	uint32_t time_initial = deadline_timer->time_initial.msec;

	deadline_timer_compare_check(deadline_timer->time_current.msec,
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	6898      	ldr	r0, [r3, #8]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6a19      	ldr	r1, [r3, #32]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004b2:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <deadline_timer_check+0x50>)
 80004b4:	197b      	adds	r3, r7, r5
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	0023      	movs	r3, r4
 80004ba:	f000 f881 	bl	80005c0 <deadline_timer_compare_check>
											deadline_timer->deadline.msec,
											deadline_timer->time_initial.msec,
											DEADLINE_MAX_MSEC,
											&deadline_expired_msec);

	*deadline_expired = deadline_expired_msec;
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	701a      	strb	r2, [r3, #0]
	deadline_timer->deadline_expired = deadline_expired_msec;
 80004c6:	197b      	adds	r3, r7, r5
 80004c8:	7819      	ldrb	r1, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2260      	movs	r2, #96	; 0x60
 80004ce:	5499      	strb	r1, [r3, r2]
	return status;
 80004d0:	19bb      	adds	r3, r7, r6
 80004d2:	781b      	ldrb	r3, [r3, #0]

}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b005      	add	sp, #20
 80004da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004dc:	3b9aca00 	.word	0x3b9aca00

080004e0 <deadline_timer_count>:

uint8_t deadline_timer_count(deadline_timer_t *deadline_timer)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	deadline_timer_increment(&deadline_timer->time_current);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f846 	bl	800057c <deadline_timer_increment>
	return 0;
 80004f0:	2300      	movs	r3, #0
}
 80004f2:	0018      	movs	r0, r3
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b002      	add	sp, #8
 80004f8:	bd80      	pop	{r7, pc}

080004fa <deadline_timer_set_initial_time>:

	return 0;
}

uint8_t deadline_timer_set_initial_time(deadline_timer_t *deadline_timer)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
	//memcpy fails after several assignations.
	//copy uint32_t variables directly to avoid a race condition
	deadline_timer->time_initial.counts = deadline_timer->time_current.counts;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	6879      	ldr	r1, [r7, #4]
 800050a:	630a      	str	r2, [r1, #48]	; 0x30
 800050c:	634b      	str	r3, [r1, #52]	; 0x34
	deadline_timer->time_initial.msec = deadline_timer->time_current.msec;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	689a      	ldr	r2, [r3, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	639a      	str	r2, [r3, #56]	; 0x38


	return 0;
 8000516:	2300      	movs	r3, #0
}
 8000518:	0018      	movs	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	b002      	add	sp, #8
 800051e:	bd80      	pop	{r7, pc}

08000520 <timer_clock_clear>:
	return 0;
}


uint8_t timer_clock_clear(timer_clock_t *timer)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	timer->counts = 0;
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	600a      	str	r2, [r1, #0]
 8000530:	604b      	str	r3, [r1, #4]
	timer->msec = 0;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
	timer->sec = 0;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
	return 0;
 800053e:	2300      	movs	r3, #0
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b002      	add	sp, #8
 8000546:	bd80      	pop	{r7, pc}

08000548 <timer_clock_set_time>:

uint8_t timer_clock_set_time(timer_clock_t *timer, timer_clock_t new_time)
{
 8000548:	b082      	sub	sp, #8
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
 8000552:	2010      	movs	r0, #16
 8000554:	1839      	adds	r1, r7, r0
 8000556:	600a      	str	r2, [r1, #0]
 8000558:	604b      	str	r3, [r1, #4]
	timer->msec = new_time.msec;
 800055a:	0001      	movs	r1, r0
 800055c:	187b      	adds	r3, r7, r1
 800055e:	689a      	ldr	r2, [r3, #8]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
	timer->sec = new_time.sec;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	68da      	ldr	r2, [r3, #12]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	60da      	str	r2, [r3, #12]
	return 0;
 800056c:	2300      	movs	r3, #0
}
 800056e:	0018      	movs	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bc80      	pop	{r7}
 8000576:	bc08      	pop	{r3}
 8000578:	b002      	add	sp, #8
 800057a:	4718      	bx	r3

0800057c <deadline_timer_increment>:
	sec = timer.sec;
	return 0;
}

uint8_t deadline_timer_increment(timer_clock_t *timer)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

	timer->msec++;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	1c5a      	adds	r2, r3, #1
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	609a      	str	r2, [r3, #8]
	timer->counts++;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	685b      	ldr	r3, [r3, #4]
 8000594:	2001      	movs	r0, #1
 8000596:	2100      	movs	r1, #0
 8000598:	1812      	adds	r2, r2, r0
 800059a:	414b      	adcs	r3, r1
 800059c:	6879      	ldr	r1, [r7, #4]
 800059e:	600a      	str	r2, [r1, #0]
 80005a0:	604b      	str	r3, [r1, #4]

	if(timer->msec >= DEADLINE_MAX_MSEC )
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <deadline_timer_increment+0x40>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d902      	bls.n	80005b2 <deadline_timer_increment+0x36>
	{
//		timer->sec++;
		timer->msec = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
//	if(timer->counts >= (DEADLINE_MAX_COUNT) )
//	{
//		timer->counts = 0;
//	}

	return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	0018      	movs	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	3b9ac9ff 	.word	0x3b9ac9ff

080005c0 <deadline_timer_compare_check>:
uint8_t deadline_timer_compare_check(uint32_t time_current,
								uint32_t deadline,
								uint32_t time_initial,
								uint32_t max_time,
								deadline_timer_expired_t *deadline_expired)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08a      	sub	sp, #40	; 0x28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6178      	str	r0, [r7, #20]
 80005c8:	6139      	str	r1, [r7, #16]
 80005ca:	60fa      	str	r2, [r7, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
	uint8_t status = 0;
 80005ce:	2317      	movs	r3, #23
 80005d0:	2208      	movs	r2, #8
 80005d2:	189b      	adds	r3, r3, r2
 80005d4:	19db      	adds	r3, r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
	int64_t remaining = 0;
 80005da:	2200      	movs	r2, #0
 80005dc:	2300      	movs	r3, #0
 80005de:	623a      	str	r2, [r7, #32]
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t deadline_difference = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]

	remaining = ((int64_t) time_current) - ((int64_t) time_initial);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	001c      	movs	r4, r3
 80005f2:	2300      	movs	r3, #0
 80005f4:	001d      	movs	r5, r3
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	1b12      	subs	r2, r2, r4
 80005fc:	41ab      	sbcs	r3, r5
 80005fe:	623a      	str	r2, [r7, #32]
 8000600:	627b      	str	r3, [r7, #36]	; 0x24

	if(remaining < 0)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	2b00      	cmp	r3, #0
 8000606:	da07      	bge.n	8000618 <deadline_timer_compare_check+0x58>
	{
		remaining = (max_time - time_initial) + time_current;
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	18d3      	adds	r3, r2, r3
 8000612:	623b      	str	r3, [r7, #32]
 8000614:	2300      	movs	r3, #0
 8000616:	627b      	str	r3, [r7, #36]	; 0x24

	}
	deadline_difference = (uint32_t) remaining;
 8000618:	6a3b      	ldr	r3, [r7, #32]
 800061a:	61bb      	str	r3, [r7, #24]

	if(deadline_difference >= deadline)
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	429a      	cmp	r2, r3
 8000622:	d803      	bhi.n	800062c <deadline_timer_compare_check+0x6c>
	{
		*deadline_expired = TIMER_EXPIRED_TRUE;
 8000624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000626:	2201      	movs	r2, #1
 8000628:	701a      	strb	r2, [r3, #0]
 800062a:	e002      	b.n	8000632 <deadline_timer_compare_check+0x72>
	}
	else
	{
		*deadline_expired = TIMER_EXPIRED_FALSE;
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8000632:	2317      	movs	r3, #23
 8000634:	2208      	movs	r2, #8
 8000636:	189b      	adds	r3, r3, r2
 8000638:	19db      	adds	r3, r3, r7
 800063a:	781b      	ldrb	r3, [r3, #0]
}
 800063c:	0018      	movs	r0, r3
 800063e:	46bd      	mov	sp, r7
 8000640:	b00a      	add	sp, #40	; 0x28
 8000642:	bdb0      	pop	{r4, r5, r7, pc}

08000644 <HAL_DIRECT_LINK_conf_as_input>:

/* USER CODE BEGIN 0 */

void HAL_DIRECT_LINK_conf_as_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	0008      	movs	r0, r1
 800064e:	0011      	movs	r1, r2
 8000650:	1cbb      	adds	r3, r7, #2
 8000652:	1c02      	adds	r2, r0, #0
 8000654:	801a      	strh	r2, [r3, #0]
 8000656:	1c7b      	adds	r3, r7, #1
 8000658:	1c0a      	adds	r2, r1, #0
 800065a:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(irq_type);
 800065c:	1c7b      	adds	r3, r7, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	0018      	movs	r0, r3
 8000664:	f003 f88b 	bl	800377e <HAL_NVIC_DisableIRQ>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	240c      	movs	r4, #12
 800066a:	193b      	adds	r3, r7, r4
 800066c:	0018      	movs	r0, r3
 800066e:	2314      	movs	r3, #20
 8000670:	001a      	movs	r2, r3
 8000672:	2100      	movs	r1, #0
 8000674:	f004 fffa 	bl	800566c <memset>

	HAL_GPIO_DeInit(port, pin);
 8000678:	1cbb      	adds	r3, r7, #2
 800067a:	881a      	ldrh	r2, [r3, #0]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f003 fa03 	bl	8003a8c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8000686:	1cbb      	adds	r3, r7, #2
 8000688:	881a      	ldrh	r2, [r3, #0]
 800068a:	193b      	adds	r3, r7, r4
 800068c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800069a:	193a      	adds	r2, r7, r4
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	0011      	movs	r1, r2
 80006a0:	0018      	movs	r0, r3
 80006a2:	f003 f889 	bl	80037b8 <HAL_GPIO_Init>

//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);

}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	b009      	add	sp, #36	; 0x24
 80006ac:	bd90      	pop	{r4, r7, pc}
	...

080006b0 <HAL_DIRECT_LINK_conf_as_interrupt_input>:

void HAL_DIRECT_LINK_conf_as_interrupt_input(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	0008      	movs	r0, r1
 80006ba:	0011      	movs	r1, r2
 80006bc:	1cbb      	adds	r3, r7, #2
 80006be:	1c02      	adds	r2, r0, #0
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	1c7b      	adds	r3, r7, #1
 80006c4:	1c0a      	adds	r2, r1, #0
 80006c6:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c8:	240c      	movs	r4, #12
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	2314      	movs	r3, #20
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f004 ffca 	bl	800566c <memset>
	HAL_GPIO_DeInit(port, pin);
 80006d8:	1cbb      	adds	r3, r7, #2
 80006da:	881a      	ldrh	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	0011      	movs	r1, r2
 80006e0:	0018      	movs	r0, r3
 80006e2:	f003 f9d3 	bl	8003a8c <HAL_GPIO_DeInit>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 80006e6:	1cbb      	adds	r3, r7, #2
 80006e8:	881a      	ldrh	r2, [r3, #0]
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_DIRECT_LINK_conf_as_interrupt_input+0x7c>)
 80006f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80006fa:	193a      	adds	r2, r7, r4
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f003 f859 	bl	80037b8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(irq_type, 0, 3);
 8000706:	1c7b      	adds	r3, r7, #1
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	2203      	movs	r2, #3
 800070e:	2100      	movs	r1, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f003 f80f 	bl	8003734 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(irq_type);
 8000716:	1c7b      	adds	r3, r7, #1
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	b25b      	sxtb	r3, r3
 800071c:	0018      	movs	r0, r3
 800071e:	f003 f81e 	bl	800375e <HAL_NVIC_EnableIRQ>


}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b009      	add	sp, #36	; 0x24
 8000728:	bd90      	pop	{r4, r7, pc}
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	10110000 	.word	0x10110000

08000730 <HAL_DIRECT_LINK_conf_as_output>:



void HAL_DIRECT_LINK_conf_as_output(GPIO_TypeDef *port, uint16_t pin,
															IRQn_Type irq_type)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b089      	sub	sp, #36	; 0x24
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	0008      	movs	r0, r1
 800073a:	0011      	movs	r1, r2
 800073c:	1cbb      	adds	r3, r7, #2
 800073e:	1c02      	adds	r2, r0, #0
 8000740:	801a      	strh	r2, [r3, #0]
 8000742:	1c7b      	adds	r3, r7, #1
 8000744:	1c0a      	adds	r2, r1, #0
 8000746:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	240c      	movs	r4, #12
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f004 ff8a 	bl	800566c <memset>

	HAL_NVIC_DisableIRQ(irq_type);
 8000758:	1c7b      	adds	r3, r7, #1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25b      	sxtb	r3, r3
 800075e:	0018      	movs	r0, r3
 8000760:	f003 f80d 	bl	800377e <HAL_NVIC_DisableIRQ>
	HAL_GPIO_DeInit(port, pin);
 8000764:	1cbb      	adds	r3, r7, #2
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0011      	movs	r1, r2
 800076c:	0018      	movs	r0, r3
 800076e:	f003 f98d 	bl	8003a8c <HAL_GPIO_DeInit>


	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = pin;
 8000772:	1cbb      	adds	r3, r7, #2
 8000774:	881a      	ldrh	r2, [r3, #0]
 8000776:	0021      	movs	r1, r4
 8000778:	187b      	adds	r3, r7, r1
 800077a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2203      	movs	r2, #3
 800078c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800078e:	187a      	adds	r2, r7, r1
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f003 f80f 	bl	80037b8 <HAL_GPIO_Init>


	__HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_DIRECT_LINK_conf_as_output+0x80>)
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0289      	lsls	r1, r1, #10
 80007a4:	430a      	orrs	r2, r1
 80007a6:	601a      	str	r2, [r3, #0]

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b009      	add	sp, #36	; 0x24
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40010000 	.word	0x40010000

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b08b      	sub	sp, #44	; 0x2c
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	2414      	movs	r4, #20
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	0018      	movs	r0, r3
 80007c0:	2314      	movs	r3, #20
 80007c2:	001a      	movs	r2, r3
 80007c4:	2100      	movs	r1, #0
 80007c6:	f004 ff51 	bl	800566c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b73      	ldr	r3, [pc, #460]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ce:	4b72      	ldr	r3, [pc, #456]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007d0:	2104      	movs	r1, #4
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	4b70      	ldr	r3, [pc, #448]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	2204      	movs	r2, #4
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	4b6d      	ldr	r3, [pc, #436]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	4b6c      	ldr	r3, [pc, #432]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007e8:	2120      	movs	r1, #32
 80007ea:	430a      	orrs	r2, r1
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
 80007ee:	4b6a      	ldr	r3, [pc, #424]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007f2:	2220      	movs	r2, #32
 80007f4:	4013      	ands	r3, r2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <MX_GPIO_Init+0x1e4>)
 80007fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fe:	4b66      	ldr	r3, [pc, #408]	; (8000998 <MX_GPIO_Init+0x1e4>)
 8000800:	2101      	movs	r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	635a      	str	r2, [r3, #52]	; 0x34
 8000806:	4b64      	ldr	r3, [pc, #400]	; (8000998 <MX_GPIO_Init+0x1e4>)
 8000808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080a:	2201      	movs	r2, #1
 800080c:	4013      	ands	r3, r2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b61      	ldr	r3, [pc, #388]	; (8000998 <MX_GPIO_Init+0x1e4>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b60      	ldr	r3, [pc, #384]	; (8000998 <MX_GPIO_Init+0x1e4>)
 8000818:	2102      	movs	r1, #2
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <MX_GPIO_Init+0x1e4>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2202      	movs	r2, #2
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_OUTB_Pin|SERIN_Pin, GPIO_PIN_RESET);
 800082a:	23c0      	movs	r3, #192	; 0xc0
 800082c:	021b      	lsls	r3, r3, #8
 800082e:	485b      	ldr	r0, [pc, #364]	; (800099c <MX_GPIO_Init+0x1e8>)
 8000830:	2200      	movs	r2, #0
 8000832:	0019      	movs	r1, r3
 8000834:	f003 fa17 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8000838:	4959      	ldr	r1, [pc, #356]	; (80009a0 <MX_GPIO_Init+0x1ec>)
 800083a:	23a0      	movs	r3, #160	; 0xa0
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2200      	movs	r2, #0
 8000840:	0018      	movs	r0, r3
 8000842:	f003 fa10 	bl	8003c66 <HAL_GPIO_WritePin>
                          |LAMP1_OUTB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP1_OUTA_GPIO_Port, LAMP1_OUTA_Pin, GPIO_PIN_RESET);
 8000846:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <MX_GPIO_Init+0x1f0>)
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	0018      	movs	r0, r3
 800084e:	f003 fa0a 	bl	8003c66 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = UV_OUTB_Pin|SERIN_Pin;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	22c0      	movs	r2, #192	; 0xc0
 8000856:	0212      	lsls	r2, r2, #8
 8000858:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2201      	movs	r2, #1
 800085e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086c:	193b      	adds	r3, r7, r4
 800086e:	4a4b      	ldr	r2, [pc, #300]	; (800099c <MX_GPIO_Init+0x1e8>)
 8000870:	0019      	movs	r1, r3
 8000872:	0010      	movs	r0, r2
 8000874:	f002 ffa0 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2204      	movs	r2, #4
 800087c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800088a:	193b      	adds	r3, r7, r4
 800088c:	4a46      	ldr	r2, [pc, #280]	; (80009a8 <MX_GPIO_Init+0x1f4>)
 800088e:	0019      	movs	r1, r3
 8000890:	0010      	movs	r0, r2
 8000892:	f002 ff91 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = UV_OUTA_Pin|LED_Pin|LAMP2_OUTB_Pin|LAMP2_OUTA_Pin
 8000896:	193b      	adds	r3, r7, r4
 8000898:	4a41      	ldr	r2, [pc, #260]	; (80009a0 <MX_GPIO_Init+0x1ec>)
 800089a:	601a      	str	r2, [r3, #0]
                          |LAMP1_OUTB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2201      	movs	r2, #1
 80008a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	193b      	adds	r3, r7, r4
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	193a      	adds	r2, r7, r4
 80008b0:	23a0      	movs	r3, #160	; 0xa0
 80008b2:	05db      	lsls	r3, r3, #23
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 ff7e 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UV_IN_Pin;
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	2204      	movs	r2, #4
 80008c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	4a39      	ldr	r2, [pc, #228]	; (80009ac <MX_GPIO_Init+0x1f8>)
 80008c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(UV_IN_GPIO_Port, &GPIO_InitStruct);
 80008ce:	193a      	adds	r2, r7, r4
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 ff6e 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LAMP2_IN_Pin|LAMP1_IN_Pin;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2282      	movs	r2, #130	; 0x82
 80008e0:	0092      	lsls	r2, r2, #2
 80008e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a32      	ldr	r2, [pc, #200]	; (80009b0 <MX_GPIO_Init+0x1fc>)
 80008e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f0:	193a      	adds	r2, r7, r4
 80008f2:	23a0      	movs	r3, #160	; 0xa0
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 ff5d 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIP_IN1_Pin|DIP_IN2_Pin;
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	2260      	movs	r2, #96	; 0x60
 8000902:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2200      	movs	r2, #0
 8000908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	193a      	adds	r2, r7, r4
 8000912:	23a0      	movs	r3, #160	; 0xa0
 8000914:	05db      	lsls	r3, r3, #23
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f002 ff4d 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP1_OUTA_Pin;
 800091e:	193b      	adds	r3, r7, r4
 8000920:	2240      	movs	r2, #64	; 0x40
 8000922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	193b      	adds	r3, r7, r4
 8000926:	2201      	movs	r2, #1
 8000928:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	193b      	adds	r3, r7, r4
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	193b      	adds	r3, r7, r4
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LAMP1_OUTA_GPIO_Port, &GPIO_InitStruct);
 8000936:	193b      	adds	r3, r7, r4
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <MX_GPIO_Init+0x1f0>)
 800093a:	0019      	movs	r1, r3
 800093c:	0010      	movs	r0, r2
 800093e:	f002 ff3b 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIRLINK_Pin;
 8000942:	0021      	movs	r1, r4
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MX_GPIO_Init+0x200>)
 800094e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIRLINK_GPIO_Port, &GPIO_InitStruct);
 8000956:	187b      	adds	r3, r7, r1
 8000958:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_GPIO_Init+0x1f0>)
 800095a:	0019      	movs	r1, r3
 800095c:	0010      	movs	r0, r2
 800095e:	f002 ff2b 	bl	80037b8 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PC14);
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_GPIO_Init+0x204>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_GPIO_Init+0x204>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0449      	lsls	r1, r1, #17
 800096c:	430a      	orrs	r2, r1
 800096e:	601a      	str	r2, [r3, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	2006      	movs	r0, #6
 8000976:	f002 fedd 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800097a:	2006      	movs	r0, #6
 800097c:	f002 feef 	bl	800375e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2007      	movs	r0, #7
 8000986:	f002 fed5 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800098a:	2007      	movs	r0, #7
 800098c:	f002 fee7 	bl	800375e <HAL_NVIC_EnableIRQ>

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b00b      	add	sp, #44	; 0x2c
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40021000 	.word	0x40021000
 800099c:	50000800 	.word	0x50000800
 80009a0:	00000583 	.word	0x00000583
 80009a4:	50000400 	.word	0x50000400
 80009a8:	50001400 	.word	0x50001400
 80009ac:	10210000 	.word	0x10210000
 80009b0:	10310000 	.word	0x10310000
 80009b4:	10110000 	.word	0x10110000
 80009b8:	40010000 	.word	0x40010000

080009bc <led_signal_setup>:
 */

#include "led_indicator.h"

uint8_t led_signal_setup(led_signal_t *led_signal, led_signal_gpio_t gpio)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	6019      	str	r1, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
	led_signal->gpio = gpio;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	1d3a      	adds	r2, r7, #4
 80009ce:	ca03      	ldmia	r2!, {r0, r1}
 80009d0:	c303      	stmia	r3!, {r0, r1}
	led_signal->type = LED_SIGNAL_OFF;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	725a      	strb	r2, [r3, #9]

	return 0;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	0018      	movs	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	b004      	add	sp, #16
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <led_signal_fsm>:



uint8_t led_signal_fsm(led_signal_t *led_signal)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
	led_signal_type_t type = led_signal->type;
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	7a52      	ldrb	r2, [r2, #9]
 80009f2:	701a      	strb	r2, [r3, #0]

	switch(type)
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d01c      	beq.n	8000a36 <led_signal_fsm+0x54>
 80009fc:	dc1d      	bgt.n	8000a3a <led_signal_fsm+0x58>
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d014      	beq.n	8000a2c <led_signal_fsm+0x4a>
 8000a02:	dc1a      	bgt.n	8000a3a <led_signal_fsm+0x58>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <led_signal_fsm+0x2c>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d00a      	beq.n	8000a22 <led_signal_fsm+0x40>
			led_signal_togle_fsm(led_signal);
			break;
		case LED_SIGNAL_BLINK_2:
			break;
		default:
			break;
 8000a0c:	e015      	b.n	8000a3a <led_signal_fsm+0x58>
			led_signal_turn_off(*led_signal);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	6859      	ldr	r1, [r3, #4]
 8000a14:	689a      	ldr	r2, [r3, #8]
 8000a16:	f000 f906 	bl	8000c26 <led_signal_turn_off>
			led_signal->state = LED_SIGNAL_STATE_IDDLE;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	729a      	strb	r2, [r3, #10]
			break;
 8000a20:	e00c      	b.n	8000a3c <led_signal_fsm+0x5a>
			led_signal_solid_fsm(led_signal);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 f81e 	bl	8000a66 <led_signal_solid_fsm>
			break;
 8000a2a:	e007      	b.n	8000a3c <led_signal_fsm+0x5a>
			led_signal_togle_fsm(led_signal);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 f870 	bl	8000b14 <led_signal_togle_fsm>
			break;
 8000a34:	e002      	b.n	8000a3c <led_signal_fsm+0x5a>
			break;
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	e000      	b.n	8000a3c <led_signal_fsm+0x5a>
			break;
 8000a3a:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <led_signal_type_selector>:



uint8_t led_signal_type_selector(led_signal_t *led_signal,
												led_signal_type_t type)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
 8000a4e:	000a      	movs	r2, r1
 8000a50:	1cfb      	adds	r3, r7, #3
 8000a52:	701a      	strb	r2, [r3, #0]
	led_signal->type = type;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	1cfa      	adds	r2, r7, #3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	725a      	strb	r2, [r3, #9]
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	0018      	movs	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b002      	add	sp, #8
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <led_signal_solid_fsm>:

uint8_t led_signal_solid_fsm(led_signal_t *led_signal)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b084      	sub	sp, #16
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000a6e:	210f      	movs	r1, #15
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	687a      	ldr	r2, [r7, #4]
 8000a74:	7a92      	ldrb	r2, [r2, #10]
 8000a76:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000a78:	230e      	movs	r3, #14
 8000a7a:	18fb      	adds	r3, r7, r3
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	7a12      	ldrb	r2, [r2, #8]
 8000a80:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	d027      	beq.n	8000ada <led_signal_solid_fsm+0x74>
 8000a8a:	dc31      	bgt.n	8000af0 <led_signal_solid_fsm+0x8a>
 8000a8c:	2b02      	cmp	r3, #2
 8000a8e:	d01a      	beq.n	8000ac6 <led_signal_solid_fsm+0x60>
 8000a90:	dc2e      	bgt.n	8000af0 <led_signal_solid_fsm+0x8a>
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <led_signal_solid_fsm+0x36>
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d00a      	beq.n	8000ab0 <led_signal_solid_fsm+0x4a>
 8000a9a:	e029      	b.n	8000af0 <led_signal_solid_fsm+0x8a>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000a9c:	230e      	movs	r3, #14
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d129      	bne.n	8000afa <led_signal_solid_fsm+0x94>
			{
				state = LED_SIGNAL_STATE_ON;
 8000aa6:	230f      	movs	r3, #15
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	2201      	movs	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000aae:	e024      	b.n	8000afa <led_signal_solid_fsm+0x94>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	6859      	ldr	r1, [r3, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	f000 f8a1 	bl	8000bfe <led_signal_turn_on>
			state = LED_SIGNAL_STATE_SOLID_ON;
 8000abc:	230f      	movs	r3, #15
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	701a      	strb	r2, [r3, #0]
			break;
 8000ac4:	e01c      	b.n	8000b00 <led_signal_solid_fsm+0x9a>
		case LED_SIGNAL_STATE_SOLID_ON:

			if(control == LED_SIGNAL_CTRL_STOP)
 8000ac6:	230e      	movs	r3, #14
 8000ac8:	18fb      	adds	r3, r7, r3
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d116      	bne.n	8000afe <led_signal_solid_fsm+0x98>
			{
				state = LED_SIGNAL_STATE_END;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000ad8:	e011      	b.n	8000afe <led_signal_solid_fsm+0x98>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6818      	ldr	r0, [r3, #0]
 8000ade:	6859      	ldr	r1, [r3, #4]
 8000ae0:	689a      	ldr	r2, [r3, #8]
 8000ae2:	f000 f8a0 	bl	8000c26 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
			break;
 8000aee:	e007      	b.n	8000b00 <led_signal_solid_fsm+0x9a>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	701a      	strb	r2, [r3, #0]
			break;
 8000af8:	e002      	b.n	8000b00 <led_signal_solid_fsm+0x9a>
			break;
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e000      	b.n	8000b00 <led_signal_solid_fsm+0x9a>
			break;
 8000afe:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	220f      	movs	r2, #15
 8000b04:	18ba      	adds	r2, r7, r2
 8000b06:	7812      	ldrb	r2, [r2, #0]
 8000b08:	729a      	strb	r2, [r3, #10]

	return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b004      	add	sp, #16
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <led_signal_togle_fsm>:

uint8_t led_signal_togle_fsm(led_signal_t *led_signal)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	led_signal_fsm_state_t state = led_signal->state;
 8000b1c:	210f      	movs	r1, #15
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	7a92      	ldrb	r2, [r2, #10]
 8000b24:	701a      	strb	r2, [r3, #0]
	led_signal_ctrl_t control = led_signal->control;
 8000b26:	230e      	movs	r3, #14
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	7a12      	ldrb	r2, [r2, #8]
 8000b2e:	701a      	strb	r2, [r3, #0]


	switch(state)
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d02d      	beq.n	8000b94 <led_signal_togle_fsm+0x80>
 8000b38:	dc37      	bgt.n	8000baa <led_signal_togle_fsm+0x96>
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d01a      	beq.n	8000b74 <led_signal_togle_fsm+0x60>
 8000b3e:	dc34      	bgt.n	8000baa <led_signal_togle_fsm+0x96>
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d002      	beq.n	8000b4a <led_signal_togle_fsm+0x36>
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d00a      	beq.n	8000b5e <led_signal_togle_fsm+0x4a>
 8000b48:	e02f      	b.n	8000baa <led_signal_togle_fsm+0x96>
	{
		case LED_SIGNAL_STATE_IDDLE:
			if(control == LED_SIGNAL_CTRL_START)
 8000b4a:	230e      	movs	r3, #14
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d12f      	bne.n	8000bb4 <led_signal_togle_fsm+0xa0>
			{
				state = LED_SIGNAL_STATE_ON;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b5c:	e02a      	b.n	8000bb4 <led_signal_togle_fsm+0xa0>
		case LED_SIGNAL_STATE_ON:
			led_signal_turn_on(*led_signal);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	6859      	ldr	r1, [r3, #4]
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	f000 f84a 	bl	8000bfe <led_signal_turn_on>
			state = LED_SIGNAL_STATE_TOGLE;
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	2203      	movs	r2, #3
 8000b70:	701a      	strb	r2, [r3, #0]
			break;
 8000b72:	e022      	b.n	8000bba <led_signal_togle_fsm+0xa6>
		case LED_SIGNAL_STATE_TOGLE:

			led_signal_toggle(*led_signal);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	6859      	ldr	r1, [r3, #4]
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	f000 f867 	bl	8000c4e <led_signal_toggle>
			if(control == LED_SIGNAL_CTRL_STOP)
 8000b80:	230e      	movs	r3, #14
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d116      	bne.n	8000bb8 <led_signal_togle_fsm+0xa4>
			{
				state = LED_SIGNAL_STATE_END;
 8000b8a:	230f      	movs	r3, #15
 8000b8c:	18fb      	adds	r3, r7, r3
 8000b8e:	2204      	movs	r2, #4
 8000b90:	701a      	strb	r2, [r3, #0]
			}
			break;
 8000b92:	e011      	b.n	8000bb8 <led_signal_togle_fsm+0xa4>
		case LED_SIGNAL_STATE_END:
			led_signal_turn_off(*led_signal);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	6859      	ldr	r1, [r3, #4]
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	f000 f843 	bl	8000c26 <led_signal_turn_off>
			state = LED_SIGNAL_STATE_IDDLE;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
			break;
 8000ba8:	e007      	b.n	8000bba <led_signal_togle_fsm+0xa6>
		default:
			state = LED_SIGNAL_STATE_IDDLE;
 8000baa:	230f      	movs	r3, #15
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
			break;
 8000bb2:	e002      	b.n	8000bba <led_signal_togle_fsm+0xa6>
			break;
 8000bb4:	46c0      	nop			; (mov r8, r8)
 8000bb6:	e000      	b.n	8000bba <led_signal_togle_fsm+0xa6>
			break;
 8000bb8:	46c0      	nop			; (mov r8, r8)

	}

	led_signal->state = state;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	220f      	movs	r2, #15
 8000bbe:	18ba      	adds	r2, r7, r2
 8000bc0:	7812      	ldrb	r2, [r2, #0]
 8000bc2:	729a      	strb	r2, [r3, #10]

	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <led_signal_start>:


uint8_t led_signal_start(led_signal_t *led_signal)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_START;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	721a      	strb	r2, [r3, #8]

	return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <led_signal_stop>:
uint8_t led_signal_stop(led_signal_t *led_signal)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
	led_signal->control = LED_SIGNAL_CTRL_STOP;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	721a      	strb	r2, [r3, #8]

	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <led_signal_turn_on>:

uint8_t led_signal_turn_on(led_signal_t led_signal)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	6018      	str	r0, [r3, #0]
 8000c08:	6059      	str	r1, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin, GPIO_PIN_SET);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	2201      	movs	r2, #1
 8000c16:	0019      	movs	r1, r3
 8000c18:	f003 f825 	bl	8003c66 <HAL_GPIO_WritePin>
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	0018      	movs	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b004      	add	sp, #16
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <led_signal_turn_off>:

uint8_t led_signal_turn_off(led_signal_t led_signal)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b084      	sub	sp, #16
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	6018      	str	r0, [r3, #0]
 8000c30:	6059      	str	r1, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
	HAL_GPIO_WritePin(led_signal.gpio.port, led_signal.gpio.pin,
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	889b      	ldrh	r3, [r3, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	0019      	movs	r1, r3
 8000c40:	f003 f811 	bl	8003c66 <HAL_GPIO_WritePin>
													GPIO_PIN_RESET);
	return 0;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	0018      	movs	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <led_signal_toggle>:

uint8_t led_signal_toggle(led_signal_t led_signal)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b084      	sub	sp, #16
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	6018      	str	r0, [r3, #0]
 8000c58:	6059      	str	r1, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_TogglePin(led_signal.gpio.port, led_signal.gpio.pin);
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	889b      	ldrh	r3, [r3, #4]
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f003 f81a 	bl	8003ca0 <HAL_GPIO_TogglePin>
	return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b004      	add	sp, #16
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <light_setup>:
#include "lights.h"


uint8_t light_setup(light_t *light, light_gpio_t hardware_output_1,
												light_gpio_t hardware_output_2)
{
 8000c76:	b082      	sub	sp, #8
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	1d38      	adds	r0, r7, #4
 8000c82:	6001      	str	r1, [r0, #0]
 8000c84:	6042      	str	r2, [r0, #4]
 8000c86:	2204      	movs	r2, #4
 8000c88:	2418      	movs	r4, #24
 8000c8a:	1912      	adds	r2, r2, r4
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	468c      	mov	ip, r1
 8000c90:	44bc      	add	ip, r7
 8000c92:	4462      	add	r2, ip
 8000c94:	6013      	str	r3, [r2, #0]

	light->hardware_output_1 = hardware_output_1;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1d3a      	adds	r2, r7, #4
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	ca03      	ldmia	r2!, {r0, r1}
 8000c9e:	c303      	stmia	r3!, {r0, r1}
	light->hardware_output_2 = hardware_output_2;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	1912      	adds	r2, r2, r4
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	468c      	mov	ip, r1
 8000caa:	44bc      	add	ip, r7
 8000cac:	4462      	add	r2, ip
 8000cae:	330c      	adds	r3, #12
 8000cb0:	ca03      	ldmia	r2!, {r0, r1}
 8000cb2:	c303      	stmia	r3!, {r0, r1}
	light_deenergize(light);
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 f978 	bl	8000fac <light_deenergize>
	light->light_status = LIGHT_OFF;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	2221      	movs	r2, #33	; 0x21
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2222      	movs	r2, #34	; 0x22
 8000cce:	2101      	movs	r1, #1
 8000cd0:	5499      	strb	r1, [r3, r2]
	light->fsm_pulse_counts = 1;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	619a      	str	r2, [r3, #24]
	return 0;
 8000cd8:	2300      	movs	r3, #0

}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b005      	add	sp, #20
 8000ce0:	bc90      	pop	{r4, r7}
 8000ce2:	bc08      	pop	{r3}
 8000ce4:	b002      	add	sp, #8
 8000ce6:	4718      	bx	r3

08000ce8 <light_on_pulse_fsm>:
uint8_t light_on_pulse_fsm(light_t *light)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2221      	movs	r2, #33	; 0x21
 8000cf4:	5c9b      	ldrb	r3, [r3, r2]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d111      	bne.n	8000d1e <light_on_pulse_fsm+0x36>
		(light->fsm_run_off != LIGHT_RUN_TRUE) )
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2222      	movs	r2, #34	; 0x22
 8000cfe:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_on == LIGHT_RUN_TRUE) &&
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00c      	beq.n	8000d1e <light_on_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_ON);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2101      	movs	r1, #1
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 f890 	bl	8000e2e <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7d1b      	ldrb	r3, [r3, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d103      	bne.n	8000d1e <light_on_pulse_fsm+0x36>
		{
			light->fsm_run_on = LIGHT_RUN_FALSE;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2221      	movs	r2, #33	; 0x21
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	5499      	strb	r1, [r3, r2]
		}
	}
	return 0;
 8000d1e:	2300      	movs	r3, #0
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <light_off_pulse_fsm>:

uint8_t light_off_pulse_fsm(light_t *light)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2222      	movs	r2, #34	; 0x22
 8000d34:	5c9b      	ldrb	r3, [r3, r2]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d111      	bne.n	8000d5e <light_off_pulse_fsm+0x36>
			(light->fsm_run_on != LIGHT_RUN_TRUE) )
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2221      	movs	r2, #33	; 0x21
 8000d3e:	5c9b      	ldrb	r3, [r3, r2]
	if( (light->fsm_run_off == LIGHT_RUN_TRUE) &&
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00c      	beq.n	8000d5e <light_off_pulse_fsm+0x36>
	{
		light_pulse_fsm(light, LIGHT_OFF);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2100      	movs	r1, #0
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 f870 	bl	8000e2e <light_pulse_fsm>

		if(light->fsm_status == LIGHT_STATE_STATUS_READY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7d1b      	ldrb	r3, [r3, #20]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d103      	bne.n	8000d5e <light_off_pulse_fsm+0x36>
		{
			light->fsm_run_off = LIGHT_RUN_FALSE;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2222      	movs	r2, #34	; 0x22
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	5499      	strb	r1, [r3, r2]
		}
	}

	return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	0018      	movs	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <light_ask_off_pulse_fsm>:


uint8_t light_ask_off_pulse_fsm(light_t *light)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000d70:	200f      	movs	r0, #15
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_FALSE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2221      	movs	r2, #33	; 0x21
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_TRUE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2222      	movs	r2, #34	; 0x22
 8000d84:	2100      	movs	r1, #0
 8000d86:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2223      	movs	r2, #35	; 0x23
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	5499      	strb	r1, [r3, r2]
	status = 0;
 8000d98:	183b      	adds	r3, r7, r0
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]

	return status;
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}

08000daa <light_ask_on_pulse_fsm>:
uint8_t light_ask_on_pulse_fsm(light_t *light)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b084      	sub	sp, #16
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	uint8_t status = 0;
 8000db2:	200f      	movs	r0, #15
 8000db4:	183b      	adds	r3, r7, r0
 8000db6:	2200      	movs	r2, #0
 8000db8:	701a      	strb	r2, [r3, #0]
//	else
//	{
//		status = 1;
//	}

	light->fsm_run_on = LIGHT_RUN_TRUE;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2221      	movs	r2, #33	; 0x21
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	5499      	strb	r1, [r3, r2]
	light->fsm_run_off = LIGHT_RUN_FALSE;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2222      	movs	r2, #34	; 0x22
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	5499      	strb	r1, [r3, r2]
	light->fsm_init = LIGHT_INIT_TRUE;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2223      	movs	r2, #35	; 0x23
 8000dce:	2100      	movs	r1, #0
 8000dd0:	5499      	strb	r1, [r3, r2]
	light->fsm_state = LIGHT_STATE_IDLE;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2220      	movs	r2, #32
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	5499      	strb	r1, [r3, r2]

	return status;
 8000dda:	183b      	adds	r3, r7, r0
 8000ddc:	781b      	ldrb	r3, [r3, #0]
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b004      	add	sp, #16
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <light_check_init_fsm>:
uint8_t light_check_init_fsm(light_t light, light_fsm_init_t *init)
{
 8000de6:	b084      	sub	sp, #16
 8000de8:	b5b0      	push	{r4, r5, r7, lr}
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	250c      	movs	r5, #12
 8000dee:	1d2c      	adds	r4, r5, #4
 8000df0:	19e4      	adds	r4, r4, r7
 8000df2:	6020      	str	r0, [r4, #0]
 8000df4:	6061      	str	r1, [r4, #4]
 8000df6:	60a2      	str	r2, [r4, #8]
 8000df8:	60e3      	str	r3, [r4, #12]
	*init = light.fsm_init;
 8000dfa:	1d2b      	adds	r3, r5, #4
 8000dfc:	19db      	adds	r3, r3, r7
 8000dfe:	2223      	movs	r2, #35	; 0x23
 8000e00:	5c9a      	ldrb	r2, [r3, r2]
 8000e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e04:	701a      	strb	r2, [r3, #0]
	return 0;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	0018      	movs	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bcb0      	pop	{r4, r5, r7}
 8000e0e:	bc08      	pop	{r3}
 8000e10:	b004      	add	sp, #16
 8000e12:	4718      	bx	r3

08000e14 <light_acknowledge_init_fsm>:

uint8_t light_acknowledge_init_fsm(light_t *light)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	light->fsm_init = LIGHT_INIT_FALSE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2223      	movs	r2, #35	; 0x23
 8000e20:	2101      	movs	r1, #1
 8000e22:	5499      	strb	r1, [r3, r2]
	return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <light_pulse_fsm>:



uint8_t light_pulse_fsm(light_t *light, light_status_t new_status)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b088      	sub	sp, #32
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
 8000e36:	000a      	movs	r2, r1
 8000e38:	1cfb      	adds	r3, r7, #3
 8000e3a:	701a      	strb	r2, [r3, #0]
	//TODO: (high) check if the implementation of this FSM is necessary

	light_fsm_state_t state = light->fsm_state;
 8000e3c:	201f      	movs	r0, #31
 8000e3e:	183b      	adds	r3, r7, r0
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	2120      	movs	r1, #32
 8000e44:	5c52      	ldrb	r2, [r2, r1]
 8000e46:	701a      	strb	r2, [r3, #0]
//	light_fsm_init_t fsm_init = light->fsm_init;
	uint32_t fsm_pulse_counts = light->fsm_pulse_counts;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	613b      	str	r3, [r7, #16]
	uint32_t fsm_pulse_idx = light->fsm_pulse_idx;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	61bb      	str	r3, [r7, #24]
	light_fsm_status_t fsm_status = light->fsm_status;
 8000e54:	2317      	movs	r3, #23
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	7d12      	ldrb	r2, [r2, #20]
 8000e5c:	701a      	strb	r2, [r3, #0]
	light_fsm_init_t fsm_init = light->fsm_init;
 8000e5e:	230f      	movs	r3, #15
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	2123      	movs	r1, #35	; 0x23
 8000e66:	5c52      	ldrb	r2, [r2, r1]
 8000e68:	701a      	strb	r2, [r3, #0]
//	light_status_t light_status = light->light_status;
//	light_status_t new_light_status = light->new_light_status;


	switch(state)
 8000e6a:	183b      	adds	r3, r7, r0
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d035      	beq.n	8000ede <light_pulse_fsm+0xb0>
 8000e72:	dc41      	bgt.n	8000ef8 <light_pulse_fsm+0xca>
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <light_pulse_fsm+0x50>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d01e      	beq.n	8000eba <light_pulse_fsm+0x8c>
			fsm_status = LIGHT_STATE_STATUS_READY;
			state = LIGHT_STATE_IDLE;
			break;
		default:

			break;
 8000e7c:	e03c      	b.n	8000ef8 <light_pulse_fsm+0xca>
				fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000e7e:	2317      	movs	r3, #23
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2201      	movs	r2, #1
 8000e84:	701a      	strb	r2, [r3, #0]
				if(new_status == LIGHT_ON)
 8000e86:	1cfb      	adds	r3, r7, #3
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d104      	bne.n	8000e98 <light_pulse_fsm+0x6a>
					light_on(light);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 f84d 	bl	8000f30 <light_on>
 8000e96:	e003      	b.n	8000ea0 <light_pulse_fsm+0x72>
					light_off(light);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f867 	bl	8000f6e <light_off>
				if(fsm_pulse_counts == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d104      	bne.n	8000eb0 <light_pulse_fsm+0x82>
					state = LIGHT_STATE_DEENERGIZING;
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	2203      	movs	r2, #3
 8000eac:	701a      	strb	r2, [r3, #0]
			break;
 8000eae:	e026      	b.n	8000efe <light_pulse_fsm+0xd0>
					state = LIGHT_STATE_WAIT;
 8000eb0:	231f      	movs	r3, #31
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	2202      	movs	r2, #2
 8000eb6:	701a      	strb	r2, [r3, #0]
			break;
 8000eb8:	e021      	b.n	8000efe <light_pulse_fsm+0xd0>
			fsm_status = LIGHT_STATE_STATUS_BUSY;
 8000eba:	2317      	movs	r3, #23
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
			fsm_pulse_idx++;
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
			if(fsm_pulse_idx > fsm_pulse_counts)
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d915      	bls.n	8000efc <light_pulse_fsm+0xce>
				state = LIGHT_STATE_DEENERGIZING;
 8000ed0:	231f      	movs	r3, #31
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	701a      	strb	r2, [r3, #0]
				fsm_pulse_idx = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
			break;
 8000edc:	e00e      	b.n	8000efc <light_pulse_fsm+0xce>
			light_deenergize(light);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 f863 	bl	8000fac <light_deenergize>
			fsm_status = LIGHT_STATE_STATUS_READY;
 8000ee6:	2317      	movs	r3, #23
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			state = LIGHT_STATE_IDLE;
 8000eee:	231f      	movs	r3, #31
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
			break;
 8000ef6:	e002      	b.n	8000efe <light_pulse_fsm+0xd0>
			break;
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	e000      	b.n	8000efe <light_pulse_fsm+0xd0>
			break;
 8000efc:	46c0      	nop			; (mov r8, r8)
	}

	light->fsm_state = state;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	221f      	movs	r2, #31
 8000f02:	18ba      	adds	r2, r7, r2
 8000f04:	2120      	movs	r1, #32
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	545a      	strb	r2, [r3, r1]
	light->fsm_init = fsm_init;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	18ba      	adds	r2, r7, r2
 8000f10:	2123      	movs	r1, #35	; 0x23
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	545a      	strb	r2, [r3, r1]
	light->fsm_pulse_idx = fsm_pulse_idx;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	61da      	str	r2, [r3, #28]
	light->fsm_status = fsm_status;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2217      	movs	r2, #23
 8000f20:	18ba      	adds	r2, r7, r2
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	751a      	strb	r2, [r3, #20]

	return 0;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b008      	add	sp, #32
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <light_on>:

uint8_t light_on(light_t *light)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6858      	ldr	r0, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	891b      	ldrh	r3, [r3, #8]
 8000f40:	2200      	movs	r2, #0
 8000f42:	0019      	movs	r1, r3
 8000f44:	f002 fe8f 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68d8      	ldr	r0, [r3, #12]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	8a1b      	ldrh	r3, [r3, #16]
 8000f50:	2201      	movs	r2, #1
 8000f52:	0019      	movs	r1, r3
 8000f54:	f002 fe87 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_SET);

	light->light_status = LIGHT_ON;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_ON;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	705a      	strb	r2, [r3, #1]
	return 0;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	0018      	movs	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <light_off>:

uint8_t light_off(light_t *light)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6858      	ldr	r0, [r3, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	891b      	ldrh	r3, [r3, #8]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	0019      	movs	r1, r3
 8000f82:	f002 fe70 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_SET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68d8      	ldr	r0, [r3, #12]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	8a1b      	ldrh	r3, [r3, #16]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	0019      	movs	r1, r3
 8000f92:	f002 fe68 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->light_status = LIGHT_OFF;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
	light->power_status = LIGHT_POWER_STATUS_ENERGIZED_OFF;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
	return 0;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <light_deenergize>:


uint8_t light_deenergize(light_t *light)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(light->hardware_output_1.port,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6858      	ldr	r0, [r3, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	f002 fe51 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_1.pin,
						GPIO_PIN_RESET);

	HAL_GPIO_WritePin(light->hardware_output_2.port,
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68d8      	ldr	r0, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	8a1b      	ldrh	r3, [r3, #16]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0019      	movs	r1, r3
 8000fd0:	f002 fe49 	bl	8003c66 <HAL_GPIO_WritePin>
						light->hardware_output_2.pin,
						GPIO_PIN_RESET);

	light->power_status = LIGHT_POWER_STATUS_DEENERGIZED;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	705a      	strb	r2, [r3, #1]
	return 0;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe6:	b0a9      	sub	sp, #164	; 0xa4
 8000fe8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000fea:	f002 fa24 	bl	8003436 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fee:	f000 fbb9 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff2:	f7ff fbdf 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ff6:	f002 f803 	bl	8003000 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000ffa:	f002 f8e3 	bl	80031c4 <MX_TIM14_Init>
  MX_TIM3_Init();
 8000ffe:	f002 f859 	bl	80030b4 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001002:	f002 f92b 	bl	800325c <MX_TIM17_Init>
  MX_TIM16_Init();
 8001006:	f002 f901 	bl	800320c <MX_TIM16_Init>


  //DIP SWITCH SETUP
  switch_selector_t switch_selector;
  switch_selector_gpio_t switch_selector_gpio[2];//We can use malloc also
  switch_selector_gpio[0].port = DIP_IN1_GPIO_Port;
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	187b      	adds	r3, r7, r1
 800100e:	22a0      	movs	r2, #160	; 0xa0
 8001010:	05d2      	lsls	r2, r2, #23
 8001012:	601a      	str	r2, [r3, #0]
  switch_selector_gpio[0].pin = DIP_IN1_Pin;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2220      	movs	r2, #32
 8001018:	809a      	strh	r2, [r3, #4]
  switch_selector_gpio[1].port = DIP_IN2_GPIO_Port;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	22a0      	movs	r2, #160	; 0xa0
 800101e:	05d2      	lsls	r2, r2, #23
 8001020:	609a      	str	r2, [r3, #8]
  switch_selector_gpio[1].pin = DIP_IN2_Pin;
 8001022:	187b      	adds	r3, r7, r1
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	819a      	strh	r2, [r3, #12]

  switch_selector_setup(&switch_selector, switch_selector_gpio, 2);
 8001028:	1879      	adds	r1, r7, r1
 800102a:	2474      	movs	r4, #116	; 0x74
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2202      	movs	r2, #2
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fedb 	bl	8002dec <switch_selector_setup>


  //MOTION SENSOR SETUP
  //-------------------

  switch(switch_selector.value)
 8001036:	193b      	adds	r3, r7, r4
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d018      	beq.n	8001070 <main+0x8c>
 800103e:	d819      	bhi.n	8001074 <main+0x90>
 8001040:	2b02      	cmp	r3, #2
 8001042:	d013      	beq.n	800106c <main+0x88>
 8001044:	d816      	bhi.n	8001074 <main+0x90>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <main+0x6c>
 800104a:	2b01      	cmp	r3, #1
 800104c:	d007      	beq.n	800105e <main+0x7a>
 800104e:	e011      	b.n	8001074 <main+0x90>
  {
	case MOTION_SWITCH_MODE_0:
		motion_initial_conf.threshold = OFFICE_MOTION_SENSOR_DETECTION_THRESHOLD;
 8001050:	4bbb      	ldr	r3, [pc, #748]	; (8001340 <main+0x35c>)
 8001052:	2214      	movs	r2, #20
 8001054:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = OFFICE_MOTION_SENSOR_WINDOW;
 8001056:	2200      	movs	r2, #0
 8001058:	4bb9      	ldr	r3, [pc, #740]	; (8001340 <main+0x35c>)
 800105a:	70da      	strb	r2, [r3, #3]
	  break;
 800105c:	e00c      	b.n	8001078 <main+0x94>
	case MOTION_SWITCH_MODE_1:
		motion_initial_conf.threshold = RESIDENTIAL_MOTION_SENSOR_DETECTION_THRESHOLD;
 800105e:	4bb8      	ldr	r3, [pc, #736]	; (8001340 <main+0x35c>)
 8001060:	2214      	movs	r2, #20
 8001062:	701a      	strb	r2, [r3, #0]
		motion_initial_conf.window_time = RESIDENTIAL_MOTION_SENSOR_WINDOW;
 8001064:	2200      	movs	r2, #0
 8001066:	4bb6      	ldr	r3, [pc, #728]	; (8001340 <main+0x35c>)
 8001068:	70da      	strb	r2, [r3, #3]
	  break;
 800106a:	e005      	b.n	8001078 <main+0x94>
	case MOTION_SWITCH_MODE_2:
		//do nothing
		__NOP();
 800106c:	46c0      	nop			; (mov r8, r8)
		break;
 800106e:	e003      	b.n	8001078 <main+0x94>
	case MOTION_SWITCH_MODE_3:
		//do nothing
		__NOP();
 8001070:	46c0      	nop			; (mov r8, r8)
		break;
 8001072:	e001      	b.n	8001078 <main+0x94>
	default:
		//do nothing
		__NOP();
 8001074:	46c0      	nop			; (mov r8, r8)
	  break;
 8001076:	46c0      	nop			; (mov r8, r8)
  }

  //Good initial conf.
  motion_initial_conf.blind_time = PYD1598_BT_0_5_SEC;
 8001078:	4bb1      	ldr	r3, [pc, #708]	; (8001340 <main+0x35c>)
 800107a:	2200      	movs	r2, #0
 800107c:	705a      	strb	r2, [r3, #1]
  motion_initial_conf.count_mode = PYD1598_COUNT_MODE_NO_BPF_SIGN_CHANGE;
 800107e:	4bb0      	ldr	r3, [pc, #704]	; (8001340 <main+0x35c>)
 8001080:	2200      	movs	r2, #0
 8001082:	71da      	strb	r2, [r3, #7]
  motion_initial_conf.hpf_cutoff = PYD1598_HPF_0_4HZ;
 8001084:	4bae      	ldr	r3, [pc, #696]	; (8001340 <main+0x35c>)
 8001086:	2200      	movs	r2, #0
 8001088:	719a      	strb	r2, [r3, #6]
  motion_initial_conf.op_mode = PYD1598_WAKE_UP;
 800108a:	4bad      	ldr	r3, [pc, #692]	; (8001340 <main+0x35c>)
 800108c:	2202      	movs	r2, #2
 800108e:	711a      	strb	r2, [r3, #4]
  motion_initial_conf.pulse_counter = PYD1598_PC_1_PULSE;
 8001090:	4bab      	ldr	r3, [pc, #684]	; (8001340 <main+0x35c>)
 8001092:	2200      	movs	r2, #0
 8001094:	709a      	strb	r2, [r3, #2]
  motion_initial_conf.signal_source = PYD1598_SOURCE_PIR_BFP;
 8001096:	4baa      	ldr	r3, [pc, #680]	; (8001340 <main+0x35c>)
 8001098:	2200      	movs	r2, #0
 800109a:	715a      	strb	r2, [r3, #5]

  //Hardware assignation:
  pyd1598_hardware_interface_t setin_pin;
  pyd1598_hardware_interface_t direct_link_pin;

  setin_pin.pin = SERIN_Pin;
 800109c:	215c      	movs	r1, #92	; 0x5c
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	01d2      	lsls	r2, r2, #7
 80010a4:	809a      	strh	r2, [r3, #4]
  setin_pin.port = SERIN_GPIO_Port;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	4aa6      	ldr	r2, [pc, #664]	; (8001344 <main+0x360>)
 80010aa:	601a      	str	r2, [r3, #0]
  setin_pin.irq_type = EXTI4_15_IRQn;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2207      	movs	r2, #7
 80010b0:	719a      	strb	r2, [r3, #6]
  direct_link_pin.pin = DIRLINK_Pin;
 80010b2:	2054      	movs	r0, #84	; 0x54
 80010b4:	183b      	adds	r3, r7, r0
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	809a      	strh	r2, [r3, #4]
  direct_link_pin.port = DIRLINK_GPIO_Port;
 80010ba:	183b      	adds	r3, r7, r0
 80010bc:	4aa2      	ldr	r2, [pc, #648]	; (8001348 <main+0x364>)
 80010be:	601a      	str	r2, [r3, #0]
  direct_link_pin.irq_type = EXTI4_15_IRQn;
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	2207      	movs	r2, #7
 80010c4:	719a      	strb	r2, [r3, #6]

//  uint8_t idx = 0;

  pyd1598_setup(&motion_sensor, motion_initial_conf, setin_pin, direct_link_pin);
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	4a9d      	ldr	r2, [pc, #628]	; (8001340 <main+0x35c>)
 80010ca:	4ca0      	ldr	r4, [pc, #640]	; (800134c <main+0x368>)
 80010cc:	1838      	adds	r0, r7, r0
 80010ce:	2104      	movs	r1, #4
 80010d0:	4469      	add	r1, sp
 80010d2:	c860      	ldmia	r0!, {r5, r6}
 80010d4:	c160      	stmia	r1!, {r5, r6}
 80010d6:	4669      	mov	r1, sp
 80010d8:	6858      	ldr	r0, [r3, #4]
 80010da:	6008      	str	r0, [r1, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6811      	ldr	r1, [r2, #0]
 80010e0:	6852      	ldr	r2, [r2, #4]
 80010e2:	0020      	movs	r0, r4
 80010e4:	f000 ffd3 	bl	800208e <pyd1598_setup>

//  pyd1598_serin_set_zero_pulse(setin_pin);
  HAL_Delay(1000);
 80010e8:	23fa      	movs	r3, #250	; 0xfa
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f002 fa1f 	bl	8003530 <HAL_Delay>

  pyd1598_request_write(&motion_sensor);
 80010f2:	4b96      	ldr	r3, [pc, #600]	; (800134c <main+0x368>)
 80010f4:	0018      	movs	r0, r3
 80010f6:	f001 f9ef 	bl	80024d8 <pyd1598_request_write>

  //LIGHTS SETUP
  //-----------

  deadline.msec = 20;
 80010fa:	4b95      	ldr	r3, [pc, #596]	; (8001350 <main+0x36c>)
 80010fc:	2214      	movs	r2, #20
 80010fe:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_timer_light_1, deadline);
 8001100:	4c93      	ldr	r4, [pc, #588]	; (8001350 <main+0x36c>)
 8001102:	4d94      	ldr	r5, [pc, #592]	; (8001354 <main+0x370>)
 8001104:	466b      	mov	r3, sp
 8001106:	0018      	movs	r0, r3
 8001108:	0023      	movs	r3, r4
 800110a:	3308      	adds	r3, #8
 800110c:	2210      	movs	r2, #16
 800110e:	0019      	movs	r1, r3
 8001110:	f004 faf2 	bl	80056f8 <memcpy>
 8001114:	6822      	ldr	r2, [r4, #0]
 8001116:	6863      	ldr	r3, [r4, #4]
 8001118:	0028      	movs	r0, r5
 800111a:	f7ff f976 	bl	800040a <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_light_2, deadline);
 800111e:	4c8c      	ldr	r4, [pc, #560]	; (8001350 <main+0x36c>)
 8001120:	4d8d      	ldr	r5, [pc, #564]	; (8001358 <main+0x374>)
 8001122:	466b      	mov	r3, sp
 8001124:	0018      	movs	r0, r3
 8001126:	0023      	movs	r3, r4
 8001128:	3308      	adds	r3, #8
 800112a:	2210      	movs	r2, #16
 800112c:	0019      	movs	r1, r3
 800112e:	f004 fae3 	bl	80056f8 <memcpy>
 8001132:	6822      	ldr	r2, [r4, #0]
 8001134:	6863      	ldr	r3, [r4, #4]
 8001136:	0028      	movs	r0, r5
 8001138:	f7ff f967 	bl	800040a <deadline_timer_setup>
  deadline_timer_setup(&deadline_timer_uv, deadline);
 800113c:	4c84      	ldr	r4, [pc, #528]	; (8001350 <main+0x36c>)
 800113e:	4d87      	ldr	r5, [pc, #540]	; (800135c <main+0x378>)
 8001140:	466b      	mov	r3, sp
 8001142:	0018      	movs	r0, r3
 8001144:	0023      	movs	r3, r4
 8001146:	3308      	adds	r3, #8
 8001148:	2210      	movs	r2, #16
 800114a:	0019      	movs	r1, r3
 800114c:	f004 fad4 	bl	80056f8 <memcpy>
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	0028      	movs	r0, r5
 8001156:	f7ff f958 	bl	800040a <deadline_timer_setup>
  light_gpio_t light_2_output_a;
  light_gpio_t light_2_output_b;
  light_gpio_t light_uv_output_a;
  light_gpio_t light_uv_output_b;

  light_1_output_a.pin = LAMP1_OUTA_Pin;
 800115a:	214c      	movs	r1, #76	; 0x4c
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	809a      	strh	r2, [r3, #4]
  light_2_output_a.pin = LAMP2_OUTA_Pin;
 8001162:	253c      	movs	r5, #60	; 0x3c
 8001164:	197b      	adds	r3, r7, r5
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	0052      	lsls	r2, r2, #1
 800116a:	809a      	strh	r2, [r3, #4]
  light_uv_output_a.pin = UV_OUTA_Pin;
 800116c:	262c      	movs	r6, #44	; 0x2c
 800116e:	19bb      	adds	r3, r7, r6
 8001170:	2201      	movs	r2, #1
 8001172:	809a      	strh	r2, [r3, #4]
  light_1_output_b.pin = LAMP1_OUTB_Pin;
 8001174:	2044      	movs	r0, #68	; 0x44
 8001176:	183b      	adds	r3, r7, r0
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	00d2      	lsls	r2, r2, #3
 800117c:	809a      	strh	r2, [r3, #4]
  light_2_output_b.pin = LAMP2_OUTB_Pin;
 800117e:	2434      	movs	r4, #52	; 0x34
 8001180:	193b      	adds	r3, r7, r4
 8001182:	2280      	movs	r2, #128	; 0x80
 8001184:	809a      	strh	r2, [r3, #4]
  light_uv_output_b.pin = UV_OUTB_Pin;
 8001186:	2324      	movs	r3, #36	; 0x24
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	4a75      	ldr	r2, [pc, #468]	; (8001360 <main+0x37c>)
 800118c:	809a      	strh	r2, [r3, #4]

  light_1_output_a.port = LAMP1_OUTA_GPIO_Port;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	4a6d      	ldr	r2, [pc, #436]	; (8001348 <main+0x364>)
 8001192:	601a      	str	r2, [r3, #0]
  light_2_output_a.port = LAMP2_OUTA_GPIO_Port;
 8001194:	197b      	adds	r3, r7, r5
 8001196:	22a0      	movs	r2, #160	; 0xa0
 8001198:	05d2      	lsls	r2, r2, #23
 800119a:	601a      	str	r2, [r3, #0]
  light_uv_output_a.port = UV_OUTA_GPIO_Port;
 800119c:	19bb      	adds	r3, r7, r6
 800119e:	22a0      	movs	r2, #160	; 0xa0
 80011a0:	05d2      	lsls	r2, r2, #23
 80011a2:	601a      	str	r2, [r3, #0]
  light_1_output_b.port = LAMP1_OUTB_GPIO_Port;
 80011a4:	183b      	adds	r3, r7, r0
 80011a6:	22a0      	movs	r2, #160	; 0xa0
 80011a8:	05d2      	lsls	r2, r2, #23
 80011aa:	601a      	str	r2, [r3, #0]
  light_2_output_b.port = LAMP2_OUTB_GPIO_Port;
 80011ac:	193b      	adds	r3, r7, r4
 80011ae:	22a0      	movs	r2, #160	; 0xa0
 80011b0:	05d2      	lsls	r2, r2, #23
 80011b2:	601a      	str	r2, [r3, #0]
  light_uv_output_b.port = UV_OUTB_GPIO_Port;
 80011b4:	2324      	movs	r3, #36	; 0x24
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	4a62      	ldr	r2, [pc, #392]	; (8001344 <main+0x360>)
 80011ba:	601a      	str	r2, [r3, #0]

  light_setup(&light_1,light_1_output_a, light_1_output_b);
 80011bc:	183b      	adds	r3, r7, r0
 80011be:	187a      	adds	r2, r7, r1
 80011c0:	4c68      	ldr	r4, [pc, #416]	; (8001364 <main+0x380>)
 80011c2:	4669      	mov	r1, sp
 80011c4:	6858      	ldr	r0, [r3, #4]
 80011c6:	6008      	str	r0, [r1, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6811      	ldr	r1, [r2, #0]
 80011cc:	6852      	ldr	r2, [r2, #4]
 80011ce:	0020      	movs	r0, r4
 80011d0:	f7ff fd51 	bl	8000c76 <light_setup>
  light_setup(&light_2,light_2_output_a, light_2_output_b);
 80011d4:	2434      	movs	r4, #52	; 0x34
 80011d6:	193b      	adds	r3, r7, r4
 80011d8:	197a      	adds	r2, r7, r5
 80011da:	4c63      	ldr	r4, [pc, #396]	; (8001368 <main+0x384>)
 80011dc:	4669      	mov	r1, sp
 80011de:	6858      	ldr	r0, [r3, #4]
 80011e0:	6008      	str	r0, [r1, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6811      	ldr	r1, [r2, #0]
 80011e6:	6852      	ldr	r2, [r2, #4]
 80011e8:	0020      	movs	r0, r4
 80011ea:	f7ff fd44 	bl	8000c76 <light_setup>
  light_setup(&light_uv,light_uv_output_a, light_uv_output_b);
 80011ee:	2324      	movs	r3, #36	; 0x24
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	19ba      	adds	r2, r7, r6
 80011f4:	4c5d      	ldr	r4, [pc, #372]	; (800136c <main+0x388>)
 80011f6:	4669      	mov	r1, sp
 80011f8:	6858      	ldr	r0, [r3, #4]
 80011fa:	6008      	str	r0, [r1, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	6811      	ldr	r1, [r2, #0]
 8001200:	6852      	ldr	r2, [r2, #4]
 8001202:	0020      	movs	r0, r4
 8001204:	f7ff fd37 	bl	8000c76 <light_setup>

  //BUTTONS SETUP
  //-------------

  //timers config:
  timer_buttons.msec = 1;
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <main+0x38c>)
 800120a:	2201      	movs	r2, #1
 800120c:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_buttons, timer_buttons);
 800120e:	4c58      	ldr	r4, [pc, #352]	; (8001370 <main+0x38c>)
 8001210:	4d58      	ldr	r5, [pc, #352]	; (8001374 <main+0x390>)
 8001212:	466b      	mov	r3, sp
 8001214:	0018      	movs	r0, r3
 8001216:	0023      	movs	r3, r4
 8001218:	3308      	adds	r3, #8
 800121a:	2210      	movs	r2, #16
 800121c:	0019      	movs	r1, r3
 800121e:	f004 fa6b 	bl	80056f8 <memcpy>
 8001222:	6822      	ldr	r2, [r4, #0]
 8001224:	6863      	ldr	r3, [r4, #4]
 8001226:	0028      	movs	r0, r5
 8001228:	f7ff f8ef 	bl	800040a <deadline_timer_setup>

  //Hardware assignation:
  button_gpio_t button_input;
  button_input.pin = LAMP1_IN_Pin;
 800122c:	211c      	movs	r1, #28
 800122e:	187b      	adds	r3, r7, r1
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP1_IN_GPIO_Port;
 8001236:	187b      	adds	r3, r7, r1
 8001238:	22a0      	movs	r2, #160	; 0xa0
 800123a:	05d2      	lsls	r2, r2, #23
 800123c:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_1, button_input);
 800123e:	000c      	movs	r4, r1
 8001240:	187b      	adds	r3, r7, r1
 8001242:	484d      	ldr	r0, [pc, #308]	; (8001378 <main+0x394>)
 8001244:	6819      	ldr	r1, [r3, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	f7fe ffea 	bl	8000220 <button_setup>

  button_input.pin = LAMP2_IN_Pin;
 800124c:	0021      	movs	r1, r4
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2208      	movs	r2, #8
 8001252:	809a      	strh	r2, [r3, #4]
  button_input.port = LAMP2_IN_GPIO_Port;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	22a0      	movs	r2, #160	; 0xa0
 8001258:	05d2      	lsls	r2, r2, #23
 800125a:	601a      	str	r2, [r3, #0]
  button_setup(&button_light_2, button_input);
 800125c:	000c      	movs	r4, r1
 800125e:	187b      	adds	r3, r7, r1
 8001260:	4846      	ldr	r0, [pc, #280]	; (800137c <main+0x398>)
 8001262:	6819      	ldr	r1, [r3, #0]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	f7fe ffdb 	bl	8000220 <button_setup>

  button_input.pin = UV_IN_Pin;
 800126a:	0021      	movs	r1, r4
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2204      	movs	r2, #4
 8001270:	809a      	strh	r2, [r3, #4]
  button_input.port = UV_IN_GPIO_Port;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	22a0      	movs	r2, #160	; 0xa0
 8001276:	05d2      	lsls	r2, r2, #23
 8001278:	601a      	str	r2, [r3, #0]
  button_setup(&button_uv, button_input);
 800127a:	187b      	adds	r3, r7, r1
 800127c:	4840      	ldr	r0, [pc, #256]	; (8001380 <main+0x39c>)
 800127e:	6819      	ldr	r1, [r3, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	f7fe ffcd 	bl	8000220 <button_setup>
  //-------------
  led_signal_t signal_led;
  led_signal_gpio_t signal_led_gpio;
  deadline_timer_expired_t indicator_timer_expired;

  signal_led_gpio.pin = LED_Pin;
 8001286:	2108      	movs	r1, #8
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2202      	movs	r2, #2
 800128c:	809a      	strh	r2, [r3, #4]
  signal_led_gpio.port = LED_GPIO_Port;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	22a0      	movs	r2, #160	; 0xa0
 8001292:	05d2      	lsls	r2, r2, #23
 8001294:	601a      	str	r2, [r3, #0]
  led_signal_setup(&signal_led, signal_led_gpio);
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2610      	movs	r6, #16
 800129a:	19b8      	adds	r0, r7, r6
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	f7ff fb8c 	bl	80009bc <led_signal_setup>
  deadline.msec = 500;
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <main+0x36c>)
 80012a6:	22fa      	movs	r2, #250	; 0xfa
 80012a8:	0052      	lsls	r2, r2, #1
 80012aa:	609a      	str	r2, [r3, #8]
  deadline.sec = 0;
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <main+0x36c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]

//  deadline_timer_setup_shared_clock(&deadline_led_indicator, &deadline_buttons.time_current,
//  		  	  	  	  	  	  	  	  	  deadline);
  deadline_timer_setup(&deadline_led_indicator, deadline);
 80012b2:	4c27      	ldr	r4, [pc, #156]	; (8001350 <main+0x36c>)
 80012b4:	4d33      	ldr	r5, [pc, #204]	; (8001384 <main+0x3a0>)
 80012b6:	466b      	mov	r3, sp
 80012b8:	0018      	movs	r0, r3
 80012ba:	0023      	movs	r3, r4
 80012bc:	3308      	adds	r3, #8
 80012be:	2210      	movs	r2, #16
 80012c0:	0019      	movs	r1, r3
 80012c2:	f004 fa19 	bl	80056f8 <memcpy>
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	6863      	ldr	r3, [r4, #4]
 80012ca:	0028      	movs	r0, r5
 80012cc:	f7ff f89d 	bl	800040a <deadline_timer_setup>

  led_signal_type_selector(&signal_led, LED_SIGNAL_SOLID);
 80012d0:	19bb      	adds	r3, r7, r6
 80012d2:	2101      	movs	r1, #1
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fbb6 	bl	8000a46 <led_signal_type_selector>
     * MOTION_SWITCH_MODE_0	=	OFFFICE
     * MOTION_SWITCH_MODE_1	=	RESIDENTIAL
     * MOTION_SWITCH_MODE_2	=
     * */
    //timers config:
    switch(switch_selector.value)
 80012da:	2374      	movs	r3, #116	; 0x74
 80012dc:	18fb      	adds	r3, r7, r3
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d028      	beq.n	8001336 <main+0x352>
 80012e4:	d829      	bhi.n	800133a <main+0x356>
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d05e      	beq.n	80013a8 <main+0x3c4>
 80012ea:	d826      	bhi.n	800133a <main+0x356>
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d002      	beq.n	80012f6 <main+0x312>
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d010      	beq.n	8001316 <main+0x332>
 80012f4:	e021      	b.n	800133a <main+0x356>
    {
      case MOTION_SWITCH_MODE_0:
    	  timer_motion_light_1.msec = OFFICE_LAMP1_ON_TIME_MS;
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <main+0x3a4>)
 80012f8:	4a24      	ldr	r2, [pc, #144]	; (800138c <main+0x3a8>)
 80012fa:	609a      	str	r2, [r3, #8]
    	  timer_motion_light_2.msec = OFFICE_LAMP2_ON_TIME_MS;
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <main+0x3ac>)
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <main+0x3a8>)
 8001300:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_safe.msec = OFFICE_LAMP_UV_SAFETY_TIME_MS;
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <main+0x3b0>)
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <main+0x3a8>)
 8001306:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv.msec = OFFICE_LAMP_UV_ON_TIME_MS;
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <main+0x3b4>)
 800130a:	4a24      	ldr	r2, [pc, #144]	; (800139c <main+0x3b8>)
 800130c:	609a      	str	r2, [r3, #8]
    	  timer_motion_uv_timeout.msec = OFFICE_LAMP_UV_TIMEOUT_MS;
 800130e:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <main+0x3bc>)
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <main+0x3c0>)
 8001312:	609a      	str	r2, [r3, #8]
    	  break;
 8001314:	e049      	b.n	80013aa <main+0x3c6>
      case MOTION_SWITCH_MODE_1:
    	  timer_motion_light_1.msec = RESIDENTIAL_LAMP1_ON_TIME_MS;
 8001316:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <main+0x3a4>)
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <main+0x3a8>)
 800131a:	609a      	str	r2, [r3, #8]
		  timer_motion_light_2.msec = RESIDENTIAL_LAMP2_ON_TIME_MS;
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <main+0x3ac>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_safe.msec = RESIDENTIAL_LAMP_UV_SAFETY_TIME_MS;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <main+0x3b0>)
 8001324:	4a19      	ldr	r2, [pc, #100]	; (800138c <main+0x3a8>)
 8001326:	609a      	str	r2, [r3, #8]
		  timer_motion_uv.msec = RESIDENTIAL_LAMP_UV_ON_TIME_MS;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <main+0x3b4>)
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <main+0x3b8>)
 800132c:	609a      	str	r2, [r3, #8]
		  timer_motion_uv_timeout.msec = RESIDENTIAL_LAMP_UV_TIMEOUT_MS;
 800132e:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <main+0x3bc>)
 8001330:	4a1c      	ldr	r2, [pc, #112]	; (80013a4 <main+0x3c0>)
 8001332:	609a      	str	r2, [r3, #8]
    	  break;
 8001334:	e039      	b.n	80013aa <main+0x3c6>
      case MOTION_SWITCH_MODE_2:
    	  break;
      case MOTION_SWITCH_MODE_3:
    	  //do nothing
    	  __NOP();
 8001336:	46c0      	nop			; (mov r8, r8)
    	  break;
 8001338:	e037      	b.n	80013aa <main+0x3c6>
      default:
    	  //do nothing
    	  __NOP();
 800133a:	46c0      	nop			; (mov r8, r8)
    	  break;
 800133c:	e035      	b.n	80013aa <main+0x3c6>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	200000f0 	.word	0x200000f0
 8001344:	50000800 	.word	0x50000800
 8001348:	50000400 	.word	0x50000400
 800134c:	20000090 	.word	0x20000090
 8001350:	200000f8 	.word	0x200000f8
 8001354:	20000110 	.word	0x20000110
 8001358:	20000178 	.word	0x20000178
 800135c:	200001e0 	.word	0x200001e0
 8001360:	ffff8000 	.word	0xffff8000
 8001364:	20000248 	.word	0x20000248
 8001368:	2000026c 	.word	0x2000026c
 800136c:	20000290 	.word	0x20000290
 8001370:	20000320 	.word	0x20000320
 8001374:	200002b8 	.word	0x200002b8
 8001378:	20000338 	.word	0x20000338
 800137c:	20000350 	.word	0x20000350
 8001380:	20000368 	.word	0x20000368
 8001384:	20000388 	.word	0x20000388
 8001388:	20000458 	.word	0x20000458
 800138c:	00002710 	.word	0x00002710
 8001390:	200004e0 	.word	0x200004e0
 8001394:	200005e8 	.word	0x200005e8
 8001398:	20000568 	.word	0x20000568
 800139c:	00002ee0 	.word	0x00002ee0
 80013a0:	20000668 	.word	0x20000668
 80013a4:	00007530 	.word	0x00007530
    	  break;
 80013a8:	46c0      	nop			; (mov r8, r8)
    }

  //Light 1
  deadline_timer_setup(&deadline_motion_light_1, timer_motion_light_1);
 80013aa:	4cc9      	ldr	r4, [pc, #804]	; (80016d0 <main+0x6ec>)
 80013ac:	4dc9      	ldr	r5, [pc, #804]	; (80016d4 <main+0x6f0>)
 80013ae:	466b      	mov	r3, sp
 80013b0:	0018      	movs	r0, r3
 80013b2:	0023      	movs	r3, r4
 80013b4:	3308      	adds	r3, #8
 80013b6:	2210      	movs	r2, #16
 80013b8:	0019      	movs	r1, r3
 80013ba:	f004 f99d 	bl	80056f8 <memcpy>
 80013be:	6822      	ldr	r2, [r4, #0]
 80013c0:	6863      	ldr	r3, [r4, #4]
 80013c2:	0028      	movs	r0, r5
 80013c4:	f7ff f821 	bl	800040a <deadline_timer_setup>
  light_1_state = MOTION_LIGHT_IDLE;
 80013c8:	4bc3      	ldr	r3, [pc, #780]	; (80016d8 <main+0x6f4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
  //Light 2
  deadline_timer_setup(&deadline_motion_light_2, timer_motion_light_1);
 80013ce:	4cc0      	ldr	r4, [pc, #768]	; (80016d0 <main+0x6ec>)
 80013d0:	4dc2      	ldr	r5, [pc, #776]	; (80016dc <main+0x6f8>)
 80013d2:	466b      	mov	r3, sp
 80013d4:	0018      	movs	r0, r3
 80013d6:	0023      	movs	r3, r4
 80013d8:	3308      	adds	r3, #8
 80013da:	2210      	movs	r2, #16
 80013dc:	0019      	movs	r1, r3
 80013de:	f004 f98b 	bl	80056f8 <memcpy>
 80013e2:	6822      	ldr	r2, [r4, #0]
 80013e4:	6863      	ldr	r3, [r4, #4]
 80013e6:	0028      	movs	r0, r5
 80013e8:	f7ff f80f 	bl	800040a <deadline_timer_setup>
  light_2_state = MOTION_LIGHT_IDLE;
 80013ec:	4bbc      	ldr	r3, [pc, #752]	; (80016e0 <main+0x6fc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
  //Light UV
  deadline_timer_setup(&deadline_motion_uv, timer_motion_uv);
 80013f2:	4cbc      	ldr	r4, [pc, #752]	; (80016e4 <main+0x700>)
 80013f4:	4dbc      	ldr	r5, [pc, #752]	; (80016e8 <main+0x704>)
 80013f6:	466b      	mov	r3, sp
 80013f8:	0018      	movs	r0, r3
 80013fa:	0023      	movs	r3, r4
 80013fc:	3308      	adds	r3, #8
 80013fe:	2210      	movs	r2, #16
 8001400:	0019      	movs	r1, r3
 8001402:	f004 f979 	bl	80056f8 <memcpy>
 8001406:	6822      	ldr	r2, [r4, #0]
 8001408:	6863      	ldr	r3, [r4, #4]
 800140a:	0028      	movs	r0, r5
 800140c:	f7fe fffd 	bl	800040a <deadline_timer_setup>
  //Light safe UV
  deadline_timer_setup(&deadline_motion_uv_safe, timer_motion_uv_safe);
 8001410:	4cb6      	ldr	r4, [pc, #728]	; (80016ec <main+0x708>)
 8001412:	4db7      	ldr	r5, [pc, #732]	; (80016f0 <main+0x70c>)
 8001414:	466b      	mov	r3, sp
 8001416:	0018      	movs	r0, r3
 8001418:	0023      	movs	r3, r4
 800141a:	3308      	adds	r3, #8
 800141c:	2210      	movs	r2, #16
 800141e:	0019      	movs	r1, r3
 8001420:	f004 f96a 	bl	80056f8 <memcpy>
 8001424:	6822      	ldr	r2, [r4, #0]
 8001426:	6863      	ldr	r3, [r4, #4]
 8001428:	0028      	movs	r0, r5
 800142a:	f7fe ffee 	bl	800040a <deadline_timer_setup>
  //Light UV Timeout
  deadline_timer_setup(&deadline_motion_uv_timeout, timer_motion_uv_timeout);
 800142e:	4cb1      	ldr	r4, [pc, #708]	; (80016f4 <main+0x710>)
 8001430:	4db1      	ldr	r5, [pc, #708]	; (80016f8 <main+0x714>)
 8001432:	466b      	mov	r3, sp
 8001434:	0018      	movs	r0, r3
 8001436:	0023      	movs	r3, r4
 8001438:	3308      	adds	r3, #8
 800143a:	2210      	movs	r2, #16
 800143c:	0019      	movs	r1, r3
 800143e:	f004 f95b 	bl	80056f8 <memcpy>
 8001442:	6822      	ldr	r2, [r4, #0]
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	0028      	movs	r0, r5
 8001448:	f7fe ffdf 	bl	800040a <deadline_timer_setup>
  //Light UV Wait Timeout
  deadline.msec = 5000;
 800144c:	4bab      	ldr	r3, [pc, #684]	; (80016fc <main+0x718>)
 800144e:	4aac      	ldr	r2, [pc, #688]	; (8001700 <main+0x71c>)
 8001450:	609a      	str	r2, [r3, #8]
  deadline_timer_setup(&deadline_uv_wait_timeout, deadline);
 8001452:	4caa      	ldr	r4, [pc, #680]	; (80016fc <main+0x718>)
 8001454:	4dab      	ldr	r5, [pc, #684]	; (8001704 <main+0x720>)
 8001456:	466b      	mov	r3, sp
 8001458:	0018      	movs	r0, r3
 800145a:	0023      	movs	r3, r4
 800145c:	3308      	adds	r3, #8
 800145e:	2210      	movs	r2, #16
 8001460:	0019      	movs	r1, r3
 8001462:	f004 f949 	bl	80056f8 <memcpy>
 8001466:	6822      	ldr	r2, [r4, #0]
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	0028      	movs	r0, r5
 800146c:	f7fe ffcd 	bl	800040a <deadline_timer_setup>

  uv_state = MOTION_LIGHT_UV_IDLE;
 8001470:	4ba5      	ldr	r3, [pc, #660]	; (8001708 <main+0x724>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
  abort_uv = MOTION_ABORT_FALSE;
 8001476:	4ba5      	ldr	r3, [pc, #660]	; (800170c <main+0x728>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
  //Light timeout UV

  //motion switch
  motion_sensed_light_1 = MOTION_ISR_ATTENDED;
 800147c:	4ba4      	ldr	r3, [pc, #656]	; (8001710 <main+0x72c>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
  motion_sensed_light_2 = MOTION_ISR_ATTENDED;
 8001482:	4ba4      	ldr	r3, [pc, #656]	; (8001714 <main+0x730>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]
  motion_sensed_uv = MOTION_ISR_ATTENDED;
 8001488:	4ba3      	ldr	r3, [pc, #652]	; (8001718 <main+0x734>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]

  //Start interrupts:
  HAL_TIM_Base_Start_IT(&htim1);
 800148e:	4ba3      	ldr	r3, [pc, #652]	; (800171c <main+0x738>)
 8001490:	0018      	movs	r0, r3
 8001492:	f002 ffd3 	bl	800443c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);//SERIN communication timer
 8001496:	4ba2      	ldr	r3, [pc, #648]	; (8001720 <main+0x73c>)
 8001498:	0018      	movs	r0, r3
 800149a:	f002 ffcf 	bl	800443c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);//Used to generate a clock
 800149e:	4ba1      	ldr	r3, [pc, #644]	; (8001724 <main+0x740>)
 80014a0:	0018      	movs	r0, r3
 80014a2:	f002 ffcb 	bl	800443c <HAL_TIM_Base_Start_IT>

  //Direct Link communication timer
  HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2016      	movs	r0, #22
 80014ac:	f002 f942 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80014b0:	2016      	movs	r0, #22
 80014b2:	f002 f954 	bl	800375e <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim17);
 80014b6:	4b9c      	ldr	r3, [pc, #624]	; (8001728 <main+0x744>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f002 ffbf 	bl	800443c <HAL_TIM_Base_Start_IT>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2100      	movs	r1, #0
 80014c2:	2007      	movs	r0, #7
 80014c4:	f002 f936 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80014c8:	2007      	movs	r0, #7
 80014ca:	f002 f948 	bl	800375e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2103      	movs	r1, #3
 80014d2:	2006      	movs	r0, #6
 80014d4:	f002 f92e 	bl	8003734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80014d8:	2006      	movs	r0, #6
 80014da:	f002 f940 	bl	800375e <HAL_NVIC_EnableIRQ>

  light_ask_off_pulse_fsm(&light_1);
 80014de:	4b93      	ldr	r3, [pc, #588]	; (800172c <main+0x748>)
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fc41 	bl	8000d68 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_2);
 80014e6:	4b92      	ldr	r3, [pc, #584]	; (8001730 <main+0x74c>)
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fc3d 	bl	8000d68 <light_ask_off_pulse_fsm>
  light_ask_off_pulse_fsm(&light_uv);
 80014ee:	4b91      	ldr	r3, [pc, #580]	; (8001734 <main+0x750>)
 80014f0:	0018      	movs	r0, r3
 80014f2:	f7ff fc39 	bl	8000d68 <light_ask_off_pulse_fsm>
  led_signal_stop(&signal_led);
 80014f6:	2310      	movs	r3, #16
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff fb73 	bl	8000be6 <led_signal_stop>
    /* USER CODE BEGIN 3 */
	/**************************************************************************/



	  switch(switch_selector.value)
 8001500:	2374      	movs	r3, #116	; 0x74
 8001502:	18fb      	adds	r3, r7, r3
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d100      	bne.n	800150c <main+0x528>
 800150a:	e0ad      	b.n	8001668 <main+0x684>
 800150c:	d900      	bls.n	8001510 <main+0x52c>
 800150e:	e0b5      	b.n	800167c <main+0x698>
 8001510:	2b02      	cmp	r3, #2
 8001512:	d100      	bne.n	8001516 <main+0x532>
 8001514:	e09f      	b.n	8001656 <main+0x672>
 8001516:	d900      	bls.n	800151a <main+0x536>
 8001518:	e0b0      	b.n	800167c <main+0x698>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <main+0x540>
 800151e:	2b01      	cmp	r3, #1
 8001520:	d051      	beq.n	80015c6 <main+0x5e2>
 8001522:	e0ab      	b.n	800167c <main+0x698>
	  {
		  case MOTION_SWITCH_MODE_0:

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 8001524:	4c84      	ldr	r4, [pc, #528]	; (8001738 <main+0x754>)
 8001526:	4a85      	ldr	r2, [pc, #532]	; (800173c <main+0x758>)
 8001528:	4985      	ldr	r1, [pc, #532]	; (8001740 <main+0x75c>)
 800152a:	4886      	ldr	r0, [pc, #536]	; (8001744 <main+0x760>)
 800152c:	4b77      	ldr	r3, [pc, #476]	; (800170c <main+0x728>)
 800152e:	9304      	str	r3, [sp, #16]
 8001530:	4b79      	ldr	r3, [pc, #484]	; (8001718 <main+0x734>)
 8001532:	9303      	str	r3, [sp, #12]
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <main+0x730>)
 8001536:	9302      	str	r3, [sp, #8]
 8001538:	4b75      	ldr	r3, [pc, #468]	; (8001710 <main+0x72c>)
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	4b82      	ldr	r3, [pc, #520]	; (8001748 <main+0x764>)
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	0023      	movs	r3, r4
 8001542:	f000 f9ca 	bl	80018da <events_detection_uv_waits>
								  &button_light_1, &button_light_2, &button_uv,
								  &motion_sensed_light_1, &motion_sensed_light_2,
								  &motion_sensed_uv,
								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 8001546:	4c63      	ldr	r4, [pc, #396]	; (80016d4 <main+0x6f0>)
 8001548:	4a7e      	ldr	r2, [pc, #504]	; (8001744 <main+0x760>)
 800154a:	497c      	ldr	r1, [pc, #496]	; (800173c <main+0x758>)
 800154c:	4877      	ldr	r0, [pc, #476]	; (800172c <main+0x748>)
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <main+0x72c>)
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <main+0x6f4>)
 8001554:	9300      	str	r3, [sp, #0]
 8001556:	0023      	movs	r3, r4
 8001558:	f000 fa36 	bl	80019c8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  motion_light_control_fsm(&light_2, &button_light_2, &motion_sensor,
 800155c:	4c5f      	ldr	r4, [pc, #380]	; (80016dc <main+0x6f8>)
 800155e:	4a79      	ldr	r2, [pc, #484]	; (8001744 <main+0x760>)
 8001560:	4975      	ldr	r1, [pc, #468]	; (8001738 <main+0x754>)
 8001562:	4873      	ldr	r0, [pc, #460]	; (8001730 <main+0x74c>)
 8001564:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <main+0x730>)
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	4b5d      	ldr	r3, [pc, #372]	; (80016e0 <main+0x6fc>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	0023      	movs	r3, r4
 800156e:	f000 fa2b 	bl	80019c8 <motion_light_control_fsm>
										&deadline_motion_light_2, &light_2_state,
										&motion_sensed_light_2);

			  if((light_1.light_status == LIGHT_ON) ||
 8001572:	4b6e      	ldr	r3, [pc, #440]	; (800172c <main+0x748>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d003      	beq.n	8001582 <main+0x59e>
				 (light_2.light_status == LIGHT_ON))
 800157a:	4b6d      	ldr	r3, [pc, #436]	; (8001730 <main+0x74c>)
 800157c:	781b      	ldrb	r3, [r3, #0]
			  if((light_1.light_status == LIGHT_ON) ||
 800157e:	2b01      	cmp	r3, #1
 8001580:	d103      	bne.n	800158a <main+0x5a6>
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 8001582:	4b72      	ldr	r3, [pc, #456]	; (800174c <main+0x768>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e002      	b.n	8001590 <main+0x5ac>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 800158a:	4b70      	ldr	r3, [pc, #448]	; (800174c <main+0x768>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8001590:	4b6e      	ldr	r3, [pc, #440]	; (800174c <main+0x768>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4d54      	ldr	r5, [pc, #336]	; (80016e8 <main+0x704>)
 8001596:	4c6b      	ldr	r4, [pc, #428]	; (8001744 <main+0x760>)
 8001598:	496b      	ldr	r1, [pc, #428]	; (8001748 <main+0x764>)
 800159a:	4866      	ldr	r0, [pc, #408]	; (8001734 <main+0x750>)
 800159c:	2210      	movs	r2, #16
 800159e:	18ba      	adds	r2, r7, r2
 80015a0:	9207      	str	r2, [sp, #28]
 80015a2:	9306      	str	r3, [sp, #24]
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <main+0x728>)
 80015a6:	9305      	str	r3, [sp, #20]
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <main+0x734>)
 80015aa:	9304      	str	r3, [sp, #16]
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <main+0x724>)
 80015ae:	9303      	str	r3, [sp, #12]
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <main+0x720>)
 80015b2:	9302      	str	r3, [sp, #8]
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <main+0x714>)
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	4b4d      	ldr	r3, [pc, #308]	; (80016f0 <main+0x70c>)
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	002b      	movs	r3, r5
 80015be:	0022      	movs	r2, r4
 80015c0:	f000 fab8 	bl	8001b34 <motion_uv_ctrl_wait_fsm>
								&deadline_motion_uv_timeout,
								&deadline_uv_wait_timeout,
								&uv_state, &motion_sensed_uv, &abort_uv, wait,
								&signal_led);

			  break;
 80015c4:	e05c      	b.n	8001680 <main+0x69c>
//			  events_detection_motion_in_one_lamp(&motion_sensor, &deadline_buttons,
//								  &button_light_1, &button_light_2, &button_uv,
//								  &motion_sensed_light_1, &motion_sensed_uv,
//								  &abort_uv);

			  events_detection_uv_waits(&motion_sensor, &deadline_buttons,
 80015c6:	4c5c      	ldr	r4, [pc, #368]	; (8001738 <main+0x754>)
 80015c8:	4a5c      	ldr	r2, [pc, #368]	; (800173c <main+0x758>)
 80015ca:	495d      	ldr	r1, [pc, #372]	; (8001740 <main+0x75c>)
 80015cc:	485d      	ldr	r0, [pc, #372]	; (8001744 <main+0x760>)
 80015ce:	4b4f      	ldr	r3, [pc, #316]	; (800170c <main+0x728>)
 80015d0:	9304      	str	r3, [sp, #16]
 80015d2:	4b51      	ldr	r3, [pc, #324]	; (8001718 <main+0x734>)
 80015d4:	9303      	str	r3, [sp, #12]
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <main+0x730>)
 80015d8:	9302      	str	r3, [sp, #8]
 80015da:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <main+0x72c>)
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	4b5a      	ldr	r3, [pc, #360]	; (8001748 <main+0x764>)
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	0023      	movs	r3, r4
 80015e4:	f000 f979 	bl	80018da <events_detection_uv_waits>
			  								  &button_light_1, &button_light_2, &button_uv,
			  								  &motion_sensed_light_1, &motion_sensed_light_2,
			  								  &motion_sensed_uv,
			  								  &abort_uv);

			  motion_light_control_fsm(&light_1, &button_light_1, &motion_sensor,
 80015e8:	4c3a      	ldr	r4, [pc, #232]	; (80016d4 <main+0x6f0>)
 80015ea:	4a56      	ldr	r2, [pc, #344]	; (8001744 <main+0x760>)
 80015ec:	4953      	ldr	r1, [pc, #332]	; (800173c <main+0x758>)
 80015ee:	484f      	ldr	r0, [pc, #316]	; (800172c <main+0x748>)
 80015f0:	4b47      	ldr	r3, [pc, #284]	; (8001710 <main+0x72c>)
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <main+0x6f4>)
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	0023      	movs	r3, r4
 80015fa:	f000 f9e5 	bl	80019c8 <motion_light_control_fsm>
									&deadline_motion_light_1, &light_1_state,
									&motion_sensed_light_1);

			  direct_light_control_fsm(&light_2, &button_light_2,
 80015fe:	4b54      	ldr	r3, [pc, #336]	; (8001750 <main+0x76c>)
 8001600:	4a36      	ldr	r2, [pc, #216]	; (80016dc <main+0x6f8>)
 8001602:	494d      	ldr	r1, [pc, #308]	; (8001738 <main+0x754>)
 8001604:	484a      	ldr	r0, [pc, #296]	; (8001730 <main+0x74c>)
 8001606:	f000 fbbb 	bl	8001d80 <direct_light_control_fsm>
//			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
//								&deadline_motion_uv, &deadline_motion_uv_safe,
//								&uv_state, &motion_sensed_uv, &abort_uv,
//								&signal_led);

			  if(light_1.light_status == LIGHT_ON)
 800160a:	4b48      	ldr	r3, [pc, #288]	; (800172c <main+0x748>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d103      	bne.n	800161a <main+0x636>
			  {
				  wait = MOTION_UV_WAIT_TRUE;
 8001612:	4b4e      	ldr	r3, [pc, #312]	; (800174c <main+0x768>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e002      	b.n	8001620 <main+0x63c>
			  }
			  else
			  {
				  wait = MOTION_UV_WAIT_FALSE;
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <main+0x768>)
 800161c:	2201      	movs	r2, #1
 800161e:	701a      	strb	r2, [r3, #0]
			  }

			  motion_uv_ctrl_wait_fsm(&light_uv, &button_uv, &motion_sensor,
 8001620:	4b4a      	ldr	r3, [pc, #296]	; (800174c <main+0x768>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	4d30      	ldr	r5, [pc, #192]	; (80016e8 <main+0x704>)
 8001626:	4c47      	ldr	r4, [pc, #284]	; (8001744 <main+0x760>)
 8001628:	4947      	ldr	r1, [pc, #284]	; (8001748 <main+0x764>)
 800162a:	4842      	ldr	r0, [pc, #264]	; (8001734 <main+0x750>)
 800162c:	2210      	movs	r2, #16
 800162e:	18ba      	adds	r2, r7, r2
 8001630:	9207      	str	r2, [sp, #28]
 8001632:	9306      	str	r3, [sp, #24]
 8001634:	4b35      	ldr	r3, [pc, #212]	; (800170c <main+0x728>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <main+0x734>)
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <main+0x724>)
 800163e:	9303      	str	r3, [sp, #12]
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <main+0x720>)
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <main+0x714>)
 8001646:	9301      	str	r3, [sp, #4]
 8001648:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <main+0x70c>)
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	002b      	movs	r3, r5
 800164e:	0022      	movs	r2, r4
 8001650:	f000 fa70 	bl	8001b34 <motion_uv_ctrl_wait_fsm>
								&deadline_uv_wait_timeout,
								&uv_state, &motion_sensed_uv, &abort_uv, wait,
								&signal_led);


			  break;
 8001654:	e014      	b.n	8001680 <main+0x69c>
//										&motion_sensed_light_2);
//
//			  motion_light_uv_control_fsm(&light_uv, &button_uv, &motion_sensor,
//								&deadline_motion_uv, &deadline_motion_uv_safe,
//								&uv_state,&motion_sensed_uv, &abort_uv, &signal_led);
			  led_signal_start(&signal_led);
 8001656:	2410      	movs	r4, #16
 8001658:	193b      	adds	r3, r7, r4
 800165a:	0018      	movs	r0, r3
 800165c:	f7ff fab7 	bl	8000bce <led_signal_start>
			  signal_led.type = LED_SIGNAL_BLINK;
 8001660:	193b      	adds	r3, r7, r4
 8001662:	2202      	movs	r2, #2
 8001664:	725a      	strb	r2, [r3, #9]

			  break;
 8001666:	e00b      	b.n	8001680 <main+0x69c>
		  case MOTION_SWITCH_MODE_3:
			  //do nothing
			  led_signal_start(&signal_led);
 8001668:	2410      	movs	r4, #16
 800166a:	193b      	adds	r3, r7, r4
 800166c:	0018      	movs	r0, r3
 800166e:	f7ff faae 	bl	8000bce <led_signal_start>
			  signal_led.type = LED_SIGNAL_BLINK;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2202      	movs	r2, #2
 8001676:	725a      	strb	r2, [r3, #9]
			  __NOP();
 8001678:	46c0      	nop			; (mov r8, r8)
			  break;
 800167a:	e001      	b.n	8001680 <main+0x69c>
		  default:
			  //do nothing
			  __NOP();
 800167c:	46c0      	nop			; (mov r8, r8)
			  break;
 800167e:	46c0      	nop			; (mov r8, r8)
	  }

	  //Actuator routines:
	  discreate_actuator(&light_1, &deadline_timer_light_1);
 8001680:	4a34      	ldr	r2, [pc, #208]	; (8001754 <main+0x770>)
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <main+0x748>)
 8001684:	0011      	movs	r1, r2
 8001686:	0018      	movs	r0, r3
 8001688:	f000 f8af 	bl	80017ea <discreate_actuator>
	  discreate_actuator(&light_2, &deadline_timer_light_2);
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <main+0x774>)
 800168e:	4b28      	ldr	r3, [pc, #160]	; (8001730 <main+0x74c>)
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f000 f8a9 	bl	80017ea <discreate_actuator>
	  discreate_actuator(&light_uv, &deadline_timer_uv);
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <main+0x778>)
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <main+0x750>)
 800169c:	0011      	movs	r1, r2
 800169e:	0018      	movs	r0, r3
 80016a0:	f000 f8a3 	bl	80017ea <discreate_actuator>

	  //LED indicator
	  deadline_timer_check(&deadline_led_indicator, &indicator_timer_expired);
 80016a4:	1dfa      	adds	r2, r7, #7
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <main+0x77c>)
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f7fe feee 	bl	800048c <deadline_timer_check>

	  if(indicator_timer_expired == TIMER_EXPIRED_TRUE)
 80016b0:	1dfb      	adds	r3, r7, #7
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d000      	beq.n	80016ba <main+0x6d6>
 80016b8:	e722      	b.n	8001500 <main+0x51c>
	  {
		  led_signal_fsm(&signal_led);
 80016ba:	2310      	movs	r3, #16
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff f98f 	bl	80009e2 <led_signal_fsm>
		  deadline_timer_set_initial_time(&deadline_led_indicator);
 80016c4:	4b26      	ldr	r3, [pc, #152]	; (8001760 <main+0x77c>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7fe ff17 	bl	80004fa <deadline_timer_set_initial_time>
	  switch(switch_selector.value)
 80016cc:	e718      	b.n	8001500 <main+0x51c>
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	20000458 	.word	0x20000458
 80016d4:	200003f0 	.word	0x200003f0
 80016d8:	20000470 	.word	0x20000470
 80016dc:	20000478 	.word	0x20000478
 80016e0:	200004f8 	.word	0x200004f8
 80016e4:	20000568 	.word	0x20000568
 80016e8:	20000500 	.word	0x20000500
 80016ec:	200005e8 	.word	0x200005e8
 80016f0:	20000580 	.word	0x20000580
 80016f4:	20000668 	.word	0x20000668
 80016f8:	20000600 	.word	0x20000600
 80016fc:	200000f8 	.word	0x200000f8
 8001700:	00001388 	.word	0x00001388
 8001704:	20000680 	.word	0x20000680
 8001708:	200006e8 	.word	0x200006e8
 800170c:	20000000 	.word	0x20000000
 8001710:	20000380 	.word	0x20000380
 8001714:	20000381 	.word	0x20000381
 8001718:	20000382 	.word	0x20000382
 800171c:	200006f0 	.word	0x200006f0
 8001720:	20000788 	.word	0x20000788
 8001724:	200007d4 	.word	0x200007d4
 8001728:	20000820 	.word	0x20000820
 800172c:	20000248 	.word	0x20000248
 8001730:	2000026c 	.word	0x2000026c
 8001734:	20000290 	.word	0x20000290
 8001738:	20000350 	.word	0x20000350
 800173c:	20000338 	.word	0x20000338
 8001740:	200002b8 	.word	0x200002b8
 8001744:	20000090 	.word	0x20000090
 8001748:	20000368 	.word	0x20000368
 800174c:	20000001 	.word	0x20000001
 8001750:	200004f9 	.word	0x200004f9
 8001754:	20000110 	.word	0x20000110
 8001758:	20000178 	.word	0x20000178
 800175c:	200001e0 	.word	0x200001e0
 8001760:	20000388 	.word	0x20000388

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b08d      	sub	sp, #52	; 0x34
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	2414      	movs	r4, #20
 800176c:	193b      	adds	r3, r7, r4
 800176e:	0018      	movs	r0, r3
 8001770:	231c      	movs	r3, #28
 8001772:	001a      	movs	r2, r3
 8001774:	2100      	movs	r1, #0
 8001776:	f003 ff79 	bl	800566c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800177a:	003b      	movs	r3, r7
 800177c:	0018      	movs	r0, r3
 800177e:	2314      	movs	r3, #20
 8001780:	001a      	movs	r2, r3
 8001782:	2100      	movs	r1, #0
 8001784:	f003 ff72 	bl	800566c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2202      	movs	r2, #2
 800178c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0052      	lsls	r2, r2, #1
 8001794:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001796:	193b      	adds	r3, r7, r4
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800179c:	193b      	adds	r3, r7, r4
 800179e:	2240      	movs	r2, #64	; 0x40
 80017a0:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	0018      	movs	r0, r3
 80017a6:	f002 fac1 	bl	8003d2c <HAL_RCC_OscConfig>
 80017aa:	1e03      	subs	r3, r0, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80017ae:	f000 fc69 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b2:	003b      	movs	r3, r7
 80017b4:	2207      	movs	r2, #7
 80017b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017b8:	003b      	movs	r3, r7
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017be:	003b      	movs	r3, r7
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80017c4:	003b      	movs	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80017ca:	003b      	movs	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017d0:	003b      	movs	r3, r7
 80017d2:	2101      	movs	r1, #1
 80017d4:	0018      	movs	r0, r3
 80017d6:	f002 fc8d 	bl	80040f4 <HAL_RCC_ClockConfig>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80017de:	f000 fc51 	bl	8002084 <Error_Handler>
  }
}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b00d      	add	sp, #52	; 0x34
 80017e8:	bd90      	pop	{r4, r7, pc}

080017ea <discreate_actuator>:

//TODO: (medium) all the digital outputs behave light a light. Last requirement
//changes added other kind of actuators. Change the HAL layer and middleware
//layer to set a proper name
void discreate_actuator(light_t *actuator, deadline_timer_t *deadline_timer)
{
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	b08b      	sub	sp, #44	; 0x2c
 80017ee:	af06      	add	r7, sp, #24
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]

	light_fsm_init_t init = LIGHT_INIT_FALSE;
 80017f4:	260f      	movs	r6, #15
 80017f6:	19bb      	adds	r3, r7, r6
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
	deadline_timer_expired_t expired;

	if(actuator->fsm_run_on == LIGHT_RUN_TRUE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2221      	movs	r2, #33	; 0x21
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d12f      	bne.n	8001866 <discreate_actuator+0x7c>
	{
		//		if(actuator_state == MOTION_LIGHT_TURN_ON_LIGHT)
		light_check_init_fsm(*actuator, &init);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	19ba      	adds	r2, r7, r6
 800180a:	9205      	str	r2, [sp, #20]
 800180c:	466a      	mov	r2, sp
 800180e:	0011      	movs	r1, r2
 8001810:	001a      	movs	r2, r3
 8001812:	3210      	adds	r2, #16
 8001814:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001816:	c131      	stmia	r1!, {r0, r4, r5}
 8001818:	ca11      	ldmia	r2!, {r0, r4}
 800181a:	c111      	stmia	r1!, {r0, r4}
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	6859      	ldr	r1, [r3, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	f7ff fadf 	bl	8000de6 <light_check_init_fsm>

		if(init == LIGHT_INIT_TRUE)
 8001828:	19bb      	adds	r3, r7, r6
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <discreate_actuator+0x56>
		{
			deadline_timer_set_initial_time(deadline_timer);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f7fe fe61 	bl	80004fa <deadline_timer_set_initial_time>
			light_acknowledge_init_fsm(actuator);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	f7ff faea 	bl	8000e14 <light_acknowledge_init_fsm>
		}

		deadline_timer_check(deadline_timer, &expired);
 8001840:	240e      	movs	r4, #14
 8001842:	193a      	adds	r2, r7, r4
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	0011      	movs	r1, r2
 8001848:	0018      	movs	r0, r3
 800184a:	f7fe fe1f 	bl	800048c <deadline_timer_check>

		if(expired == TIMER_EXPIRED_TRUE)
 800184e:	193b      	adds	r3, r7, r4
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d107      	bne.n	8001866 <discreate_actuator+0x7c>
		{
			light_on_pulse_fsm(actuator);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f7ff fa45 	bl	8000ce8 <light_on_pulse_fsm>
			deadline_timer_set_initial_time(deadline_timer);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	0018      	movs	r0, r3
 8001862:	f7fe fe4a 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}

	if(actuator->fsm_run_off == LIGHT_RUN_TRUE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2222      	movs	r2, #34	; 0x22
 800186a:	5c9b      	ldrb	r3, [r3, r2]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d130      	bne.n	80018d2 <discreate_actuator+0xe8>
	{
//	  if(actuator_state == MOTION_LIGHT_TURN_OFF_LIGHT)

	  light_check_init_fsm(*actuator, &init);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	260f      	movs	r6, #15
 8001874:	19ba      	adds	r2, r7, r6
 8001876:	9205      	str	r2, [sp, #20]
 8001878:	466a      	mov	r2, sp
 800187a:	0011      	movs	r1, r2
 800187c:	001a      	movs	r2, r3
 800187e:	3210      	adds	r2, #16
 8001880:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001882:	c131      	stmia	r1!, {r0, r4, r5}
 8001884:	ca11      	ldmia	r2!, {r0, r4}
 8001886:	c111      	stmia	r1!, {r0, r4}
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f7ff faa9 	bl	8000de6 <light_check_init_fsm>

	  if(init == LIGHT_INIT_TRUE)
 8001894:	19bb      	adds	r3, r7, r6
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d107      	bne.n	80018ac <discreate_actuator+0xc2>
	  {
		  deadline_timer_set_initial_time(deadline_timer);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	0018      	movs	r0, r3
 80018a0:	f7fe fe2b 	bl	80004fa <deadline_timer_set_initial_time>
		  light_acknowledge_init_fsm(actuator);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	0018      	movs	r0, r3
 80018a8:	f7ff fab4 	bl	8000e14 <light_acknowledge_init_fsm>
	  }

	  deadline_timer_check(deadline_timer, &expired);
 80018ac:	240e      	movs	r4, #14
 80018ae:	193a      	adds	r2, r7, r4
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	0011      	movs	r1, r2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7fe fde9 	bl	800048c <deadline_timer_check>

	  if(expired == TIMER_EXPIRED_TRUE)
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d107      	bne.n	80018d2 <discreate_actuator+0xe8>
	  {
		  light_off_pulse_fsm(actuator);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fa2f 	bl	8000d28 <light_off_pulse_fsm>
		  deadline_timer_set_initial_time(deadline_timer);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe fe14 	bl	80004fa <deadline_timer_set_initial_time>
	  }
	}
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b005      	add	sp, #20
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018da <events_detection_uv_waits>:
							button_t *button_lamp_uv,
							motion_sensed_t *motion_light_1,
							motion_sensed_t *motion_light_2,
							motion_sensed_t *motion_uv,
							motion_light_uv_abort_t *abort_signal_uv)
{
 80018da:	b5b0      	push	{r4, r5, r7, lr}
 80018dc:	b08a      	sub	sp, #40	; 0x28
 80018de:	af04      	add	r7, sp, #16
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_stat;
	button_edge_t check_edge;


	//Reading if there is a motion interrupt pending to solve
	pyd1598_read_wakeup_signal(motion, &motion_isr_status);
 80018e8:	2417      	movs	r4, #23
 80018ea:	193a      	adds	r2, r7, r4
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	0011      	movs	r1, r2
 80018f0:	0018      	movs	r0, r3
 80018f2:	f000 fede 	bl	80026b2 <pyd1598_read_wakeup_signal>
	//Activating flags
	if(motion_isr_status == PYD1598_MOTION_ISR_UNATTENDED)
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d10c      	bne.n	8001918 <events_detection_uv_waits+0x3e>
	{
		*motion_light_1 = MOTION_ISR_UNATTENDED;
 80018fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001900:	2202      	movs	r2, #2
 8001902:	701a      	strb	r2, [r3, #0]
		*motion_light_2 = MOTION_ISR_UNATTENDED;
 8001904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
		*motion_uv = MOTION_ISR_UNATTENDED;
 800190a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190c:	2202      	movs	r2, #2
 800190e:	701a      	strb	r2, [r3, #0]
		motion->motion_sensed = PYD1598_MOTION_ISR_ATTENDED;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2258      	movs	r2, #88	; 0x58
 8001914:	2100      	movs	r1, #0
 8001916:	5499      	strb	r1, [r3, r2]
	}

	//Reading Buttons
	sense_button_event(deadline_events, button_lamp_1);
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f000 f832 	bl	8001988 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_2);
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	0011      	movs	r1, r2
 800192a:	0018      	movs	r0, r3
 800192c:	f000 f82c 	bl	8001988 <sense_button_event>
	sense_button_event(deadline_events, button_lamp_uv);
 8001930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f000 f826 	bl	8001988 <sense_button_event>
		*abort_signal_uv = MOTION_ABORT_TRUE;
	}
#endif //ABORT_WITH_BUTTONS

	//Check if lamp buttons are active to invalidate UV button events.
	button_check_isr_request(*button_lamp_uv, &button_isr_stat, &check_edge);
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	2215      	movs	r2, #21
 8001940:	18ba      	adds	r2, r7, r2
 8001942:	9203      	str	r2, [sp, #12]
 8001944:	2516      	movs	r5, #22
 8001946:	197a      	adds	r2, r7, r5
 8001948:	9202      	str	r2, [sp, #8]
 800194a:	466a      	mov	r2, sp
 800194c:	0011      	movs	r1, r2
 800194e:	001a      	movs	r2, r3
 8001950:	3210      	adds	r2, #16
 8001952:	ca11      	ldmia	r2!, {r0, r4}
 8001954:	c111      	stmia	r1!, {r0, r4}
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f7fe fd38 	bl	80003d2 <button_check_isr_request>
	if(button_isr_stat == BUTTON_ISR_UNATTENDED)
 8001962:	197b      	adds	r3, r7, r5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d10a      	bne.n	8001980 <events_detection_uv_waits+0xa6>
	{
		if(button_lamp_uv->push_status != BUTTON_PUSH_ON)
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	789b      	ldrb	r3, [r3, #2]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d003      	beq.n	800197a <events_detection_uv_waits+0xa0>
		{
			button_lamp_uv->push_status = BUTTON_PUSH_ON;
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	2201      	movs	r2, #1
 8001976:	709a      	strb	r2, [r3, #2]
		else
		{
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
		}
	}
}
 8001978:	e002      	b.n	8001980 <events_detection_uv_waits+0xa6>
			button_lamp_uv->push_status = BUTTON_PUSH_OFF;
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	2200      	movs	r2, #0
 800197e:	709a      	strb	r2, [r3, #2]
}
 8001980:	46c0      	nop			; (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b006      	add	sp, #24
 8001986:	bdb0      	pop	{r4, r5, r7, pc}

08001988 <sense_button_event>:
	}

}

void sense_button_event(deadline_timer_t *deadline_events, button_t *button)
{
 8001988:	b590      	push	{r4, r7, lr}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]

	deadline_timer_expired_t timer_expired;
	if(button->debounce_lock == BUTTON_DEBOUNCE_LOCK_ON)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7b5b      	ldrb	r3, [r3, #13]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d112      	bne.n	80019c0 <sense_button_event+0x38>
	{
		//TODO: (medium) Check if a new timer should be configured
		deadline_timer_check(deadline_events, &timer_expired);
 800199a:	240f      	movs	r4, #15
 800199c:	193a      	adds	r2, r7, r4
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	0011      	movs	r1, r2
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe fd72 	bl	800048c <deadline_timer_check>

		if(timer_expired == TIMER_EXPIRED_TRUE)
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d107      	bne.n	80019c0 <sense_button_event+0x38>
		{
			button_debounce_fsm(button);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7fe fc5a 	bl	800026c <button_debounce_fsm>
			deadline_timer_set_initial_time(deadline_events);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	0018      	movs	r0, r3
 80019bc:	f7fe fd9d 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}


}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b005      	add	sp, #20
 80019c6:	bd90      	pop	{r4, r7, pc}

080019c8 <motion_light_control_fsm>:
								button_t *button,
								pyd1598_sensor_t *motion_sensor,
								deadline_timer_t *deadline_timer,
								motion_light_state_t *fsm_state,
								motion_sensed_t *motion_sensed)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b08a      	sub	sp, #40	; 0x28
 80019cc:	af04      	add	r7, sp, #16
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	785a      	ldrb	r2, [r3, #1]
 80019da:	2116      	movs	r1, #22
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	187a      	adds	r2, r7, r1
 80019e4:	9203      	str	r2, [sp, #12]
 80019e6:	2517      	movs	r5, #23
 80019e8:	197a      	adds	r2, r7, r5
 80019ea:	9202      	str	r2, [sp, #8]
 80019ec:	466a      	mov	r2, sp
 80019ee:	0011      	movs	r1, r2
 80019f0:	001a      	movs	r2, r3
 80019f2:	3210      	adds	r2, #16
 80019f4:	ca11      	ldmia	r2!, {r0, r4}
 80019f6:	c111      	stmia	r1!, {r0, r4}
 80019f8:	6818      	ldr	r0, [r3, #0]
 80019fa:	6859      	ldr	r1, [r3, #4]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f7fe fce7 	bl	80003d2 <button_check_isr_request>

	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001a04:	197b      	adds	r3, r7, r5
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d003      	beq.n	8001a14 <motion_light_control_fsm+0x4c>
		(*motion_sensed == MOTION_ISR_UNATTENDED))
 8001a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0e:	781b      	ldrb	r3, [r3, #0]
	if( (button_isr_status == BUTTON_ISR_UNATTENDED) ||
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d121      	bne.n	8001a58 <motion_light_control_fsm+0x90>
	{
		if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001a14:	2217      	movs	r2, #23
 8001a16:	18bb      	adds	r3, r7, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d10e      	bne.n	8001a3c <motion_light_control_fsm+0x74>
		{
			button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001a1e:	18bb      	adds	r3, r7, r2
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]

			if(edge == BUTTON_EDGE_NEGATIVE)
 8001a24:	2316      	movs	r3, #22
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d103      	bne.n	8001a36 <motion_light_control_fsm+0x6e>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	2205      	movs	r2, #5
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <motion_light_control_fsm+0x74>
			}
			else
			{
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
			}
		}

		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d109      	bne.n	8001a58 <motion_light_control_fsm+0x90>
			(*fsm_state == MOTION_LIGHT_IDLE))
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a46:	781b      	ldrb	r3, [r3, #0]
		if( (*motion_sensed == MOTION_ISR_UNATTENDED) &&
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <motion_light_control_fsm+0x90>
		{
			*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
			*motion_sensed = MOTION_ISR_ATTENDED;
 8001a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]
		}

	}

	switch(*fsm_state)
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	d858      	bhi.n	8001b12 <motion_light_control_fsm+0x14a>
 8001a60:	009a      	lsls	r2, r3, #2
 8001a62:	4b33      	ldr	r3, [pc, #204]	; (8001b30 <motion_light_control_fsm+0x168>)
 8001a64:	18d3      	adds	r3, r2, r3
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8001a6a:	46c0      	nop			; (mov r8, r8)

			break;
 8001a6c:	e056      	b.n	8001b1c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_CHECK_BUTTON:

			button_status_t button_status = BUTTON_OFF;
 8001a6e:	2115      	movs	r1, #21
 8001a70:	187b      	adds	r3, r7, r1
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			button_get_status(button, &button_status);
 8001a76:	000c      	movs	r4, r1
 8001a78:	187a      	adds	r2, r7, r1
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0011      	movs	r1, r2
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7fe fc82 	bl	8000388 <button_get_status>

			if(button_status == BUTTON_ON)
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d106      	bne.n	8001a9a <motion_light_control_fsm+0xd2>
			{
				*fsm_state = MOTION_LIGHT_TURN_ON_LIGHT;
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8e:	2202      	movs	r2, #2
 8001a90:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
				 //if an edge where detected an error occurred in the button
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
				*motion_sensed = MOTION_ISR_ATTENDED;
			}

			break;
 8001a98:	e040      	b.n	8001b1c <motion_light_control_fsm+0x154>
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	701a      	strb	r2, [r3, #0]
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
			break;
 8001aa6:	e039      	b.n	8001b1c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7ff f97d 	bl	8000daa <light_ask_on_pulse_fsm>
			*fsm_state = MOTION_LIGHT_INIT_TIMER;
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	701a      	strb	r2, [r3, #0]

			break;
 8001ab6:	e031      	b.n	8001b1c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_INIT_TIMER:
			//This updates the timer count
			deadline_timer_set_initial_time(deadline_timer);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7fe fd1d 	bl	80004fa <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_WAIT_EXPIRATION;
 8001ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	701a      	strb	r2, [r3, #0]

			break;
 8001ac6:	e029      	b.n	8001b1c <motion_light_control_fsm+0x154>
		case MOTION_LIGHT_WAIT_EXPIRATION:

			deadline_timer_expired_t deadline_expired;

			deadline_timer_check(deadline_timer, &deadline_expired);
 8001ac8:	2414      	movs	r4, #20
 8001aca:	193a      	adds	r2, r7, r4
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7fe fcdb 	bl	800048c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d102      	bne.n	8001ae4 <motion_light_control_fsm+0x11c>
			{
				*fsm_state = MOTION_LIGHT_TURN_OFF_LIGHT;
 8001ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae0:	2205      	movs	r2, #5
 8001ae2:	701a      	strb	r2, [r3, #0]
			}
			else
			{
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d116      	bne.n	8001b1a <motion_light_control_fsm+0x152>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
//					*fsm_state = MOTION_LIGHT_INIT_TIMER;
				*fsm_state = MOTION_LIGHT_CHECK_BUTTON;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001af8:	e00f      	b.n	8001b1a <motion_light_control_fsm+0x152>
		case MOTION_LIGHT_TURN_OFF_LIGHT:

			deadline_timer_force_expiration(deadline_timer);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7fe fcb8 	bl	8000472 <deadline_timer_force_expiration>
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	0018      	movs	r0, r3
 8001b06:	f7ff f92f 	bl	8000d68 <light_ask_off_pulse_fsm>
			*fsm_state = MOTION_LIGHT_IDLE;
 8001b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
			break;
 8001b10:	e004      	b.n	8001b1c <motion_light_control_fsm+0x154>
		default:
			*fsm_state = MOTION_LIGHT_IDLE;
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
			break;
 8001b18:	e000      	b.n	8001b1c <motion_light_control_fsm+0x154>
			break;
 8001b1a:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8001b1c:	2317      	movs	r3, #23
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	70da      	strb	r2, [r3, #3]

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b006      	add	sp, #24
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	08005724 	.word	0x08005724

08001b34 <motion_uv_ctrl_wait_fsm>:
									motion_light_uv_state_t *fsm_state,
									motion_sensed_t *motion_sensed,
									motion_light_uv_abort_t *uv_abort,
									motion_uv_wait_signal_t wait,
									led_signal_t *signal)
{
 8001b34:	b5b0      	push	{r4, r5, r7, lr}
 8001b36:	b09c      	sub	sp, #112	; 0x70
 8001b38:	af16      	add	r7, sp, #88	; 0x58
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	button_isr_status_t button_isr_status;
	button_edge_t edge = button_uv->edge;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	785a      	ldrb	r2, [r3, #1]
 8001b46:	2116      	movs	r1, #22
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
	pyd1598_motion_isr_status_t motion_isr_status;
	deadline_timer_expired_t deadline_safe_expired;
	deadline_timer_expired_t deadline_timeout_expired;
	deadline_timer_expired_t deadline_wait_timeout_expired;

	button_check_isr_request(*button_uv, &button_isr_status, &edge);
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	187a      	adds	r2, r7, r1
 8001b50:	9203      	str	r2, [sp, #12]
 8001b52:	2517      	movs	r5, #23
 8001b54:	197a      	adds	r2, r7, r5
 8001b56:	9202      	str	r2, [sp, #8]
 8001b58:	466a      	mov	r2, sp
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	3210      	adds	r2, #16
 8001b60:	ca11      	ldmia	r2!, {r0, r4}
 8001b62:	c111      	stmia	r1!, {r0, r4}
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f7fe fc31 	bl	80003d2 <button_check_isr_request>
	pyd1598_check_isr_request(*motion_sensor, &motion_isr_status);
 8001b70:	687c      	ldr	r4, [r7, #4]
 8001b72:	2315      	movs	r3, #21
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	9314      	str	r3, [sp, #80]	; 0x50
 8001b78:	466b      	mov	r3, sp
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	0023      	movs	r3, r4
 8001b7e:	3310      	adds	r3, #16
 8001b80:	2250      	movs	r2, #80	; 0x50
 8001b82:	0019      	movs	r1, r3
 8001b84:	f003 fdb8 	bl	80056f8 <memcpy>
 8001b88:	6820      	ldr	r0, [r4, #0]
 8001b8a:	6861      	ldr	r1, [r4, #4]
 8001b8c:	68a2      	ldr	r2, [r4, #8]
 8001b8e:	68e3      	ldr	r3, [r4, #12]
 8001b90:	f000 fd78 	bl	8002684 <pyd1598_check_isr_request>


	if(button_isr_status == BUTTON_ISR_UNATTENDED)
 8001b94:	197b      	adds	r3, r7, r5
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d10e      	bne.n	8001bba <motion_uv_ctrl_wait_fsm+0x86>
	{

		//Change if abort is not required with a second push
		if(button_uv->push_status == BUTTON_PUSH_ON)
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	789b      	ldrb	r3, [r3, #2]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d103      	bne.n	8001bac <motion_uv_ctrl_wait_fsm+0x78>
		{
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER;
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
 8001baa:	e002      	b.n	8001bb2 <motion_uv_ctrl_wait_fsm+0x7e>
		}
		else
		{
			*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bae:	220a      	movs	r2, #10
 8001bb0:	701a      	strb	r2, [r3, #0]
		}

		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001bb2:	2317      	movs	r3, #23
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
	}

	if(*uv_abort == MOTION_ABORT_TRUE)
 8001bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <motion_uv_ctrl_wait_fsm+0x9a>
	{
		*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	701a      	strb	r2, [r3, #0]
		*uv_abort = MOTION_ABORT_FALSE;
 8001bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	}


	switch(*fsm_state)
 8001bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b0a      	cmp	r3, #10
 8001bd4:	d900      	bls.n	8001bd8 <motion_uv_ctrl_wait_fsm+0xa4>
 8001bd6:	e0c2      	b.n	8001d5e <motion_uv_ctrl_wait_fsm+0x22a>
 8001bd8:	009a      	lsls	r2, r3, #2
 8001bda:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <motion_uv_ctrl_wait_fsm+0x248>)
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	469f      	mov	pc, r3
	{
		case MOTION_LIGHT_UV_IDLE:

			__NOP();//Do nothing
 8001be2:	46c0      	nop			; (mov r8, r8)

			break;
 8001be4:	e0c0      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_INIT_TIMEOUT_TIMER:
			//Initialize deadline_timeout
			deadline_timer_set_initial_time(deadline_timeout);
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7fe fc86 	bl	80004fa <deadline_timer_set_initial_time>
			deadline_timer_set_initial_time(deadline_wait_timeout);
 8001bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe fc82 	bl	80004fa <deadline_timer_set_initial_time>

			//Start LED indicator
			led_signal_start(signal);
 8001bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f7fe ffe8 	bl	8000bce <led_signal_start>
			signal->type = LED_SIGNAL_BLINK;
 8001bfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c00:	2202      	movs	r2, #2
 8001c02:	725a      	strb	r2, [r3, #9]

			*fsm_state = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 8001c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c06:	2203      	movs	r2, #3
 8001c08:	701a      	strb	r2, [r3, #0]

			break;
 8001c0a:	e0ad      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT:

			deadline_timer_check(deadline_wait_timeout,
 8001c0c:	2412      	movs	r4, #18
 8001c0e:	193a      	adds	r2, r7, r4
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	0011      	movs	r1, r2
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7fe fc39 	bl	800048c <deadline_timer_check>
									&deadline_wait_timeout_expired);

			if(deadline_wait_timeout_expired == TIMER_EXPIRED_TRUE)
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d102      	bne.n	8001c28 <motion_uv_ctrl_wait_fsm+0xf4>
			{
				*fsm_state = MOTION_LIGHT_UV_CHECK_TIMEOUT_TIMER;
 8001c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c24:	2202      	movs	r2, #2
 8001c26:	701a      	strb	r2, [r3, #0]
			}
			__NOP();//Do nothing
 8001c28:	46c0      	nop			; (mov r8, r8)

			break;
 8001c2a:	e09d      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_CHECK_TIMEOUT_TIMER:

			deadline_timer_check(deadline_timeout, &deadline_timeout_expired);
 8001c2c:	2413      	movs	r4, #19
 8001c2e:	193a      	adds	r2, r7, r4
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7fe fc29 	bl	800048c <deadline_timer_check>

			if(deadline_timeout_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d103      	bne.n	8001c4a <motion_uv_ctrl_wait_fsm+0x116>
			{
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	220a      	movs	r2, #10
 8001c46:	701a      	strb	r2, [r3, #0]
				{
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
				}
			}

			break;
 8001c48:	e08e      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d10a      	bne.n	8001c68 <motion_uv_ctrl_wait_fsm+0x134>
					deadline_timer_set_initial_time(deadline_wait_timeout);
 8001c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe fc50 	bl	80004fa <deadline_timer_set_initial_time>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8001c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_WAIT_MOTION_TIMEOUT;
 8001c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c62:	2203      	movs	r2, #3
 8001c64:	701a      	strb	r2, [r3, #0]
			break;
 8001c66:	e07f      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	701a      	strb	r2, [r3, #0]
			break;
 8001c6e:	e07b      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_INIT_SAFE_TIMER:
			//TODO: (high) add a timeout
			deadline_timer_set_initial_time(deadline_safe_timer);
 8001c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fc41 	bl	80004fa <deadline_timer_set_initial_time>

			*fsm_state = MOTION_LIGHT_UV_WAIT_SAFE_TIMER;
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	2205      	movs	r2, #5
 8001c7c:	701a      	strb	r2, [r3, #0]
			break;
 8001c7e:	e073      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>

		case MOTION_LIGHT_UV_WAIT_SAFE_TIMER:

			deadline_timer_check(deadline_safe_timer, &deadline_safe_expired);
 8001c80:	2414      	movs	r4, #20
 8001c82:	193a      	adds	r2, r7, r4
 8001c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c86:	0011      	movs	r1, r2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f7fe fbff 	bl	800048c <deadline_timer_check>

			if(deadline_safe_expired == TIMER_EXPIRED_TRUE)//This should be a long timer
 8001c8e:	193b      	adds	r3, r7, r4
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d103      	bne.n	8001c9e <motion_uv_ctrl_wait_fsm+0x16a>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_ON_LIGHT;
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	2206      	movs	r2, #6
 8001c9a:	701a      	strb	r2, [r3, #0]
					__NOP();
				}

			}

			break;
 8001c9c:	e064      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
				if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d105      	bne.n	8001cb2 <motion_uv_ctrl_wait_fsm+0x17e>
					*motion_sensed = MOTION_ISR_ATTENDED;
 8001ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cae:	2204      	movs	r2, #4
 8001cb0:	701a      	strb	r2, [r3, #0]
				if(wait == MOTION_UV_WAIT_TRUE)
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d103      	bne.n	8001cc4 <motion_uv_ctrl_wait_fsm+0x190>
					*fsm_state = MOTION_LIGHT_UV_INIT_SAFE_TIMER;
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	701a      	strb	r2, [r3, #0]
			break;
 8001cc2:	e051      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
					__NOP();
 8001cc4:	46c0      	nop			; (mov r8, r8)
			break;
 8001cc6:	e04f      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_TURN_ON_LIGHT:
			//this is done in another fsm
			light_ask_on_pulse_fsm(light_uv);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff f86d 	bl	8000daa <light_ask_on_pulse_fsm>
			signal->type = LED_SIGNAL_SOLID;
 8001cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	725a      	strb	r2, [r3, #9]
			*fsm_state = MOTION_LIGHT_UV_INIT_TIMER;
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	2207      	movs	r2, #7
 8001cda:	701a      	strb	r2, [r3, #0]

			break;
 8001cdc:	e044      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_INIT_TIMER:
			deadline_timer_set_initial_time(deadline_timer);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fc0a 	bl	80004fa <deadline_timer_set_initial_time>
			*fsm_state = MOTION_LIGHT_UV_WAIT_EXPIRATION;
 8001ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce8:	2208      	movs	r2, #8
 8001cea:	701a      	strb	r2, [r3, #0]
			break;
 8001cec:	e03c      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_WAIT_EXPIRATION:
			deadline_timer_expired_t deadline_expired;
			deadline_timer_check(deadline_timer, &deadline_expired);
 8001cee:	2411      	movs	r4, #17
 8001cf0:	193a      	adds	r2, r7, r4
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fbc8 	bl	800048c <deadline_timer_check>

			if(deadline_expired == TIMER_EXPIRED_TRUE)
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d102      	bne.n	8001d0a <motion_uv_ctrl_wait_fsm+0x1d6>
			{
				*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d06:	2209      	movs	r2, #9
 8001d08:	701a      	strb	r2, [r3, #0]
			else
			{
				//Do nothing
			}

			if(*motion_sensed == MOTION_ISR_UNATTENDED)
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d129      	bne.n	8001d66 <motion_uv_ctrl_wait_fsm+0x232>
			{
				*motion_sensed = MOTION_ISR_ATTENDED;
 8001d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
				*fsm_state = MOTION_LIGHT_UV_ABORT;
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	220a      	movs	r2, #10
 8001d1c:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001d1e:	e022      	b.n	8001d66 <motion_uv_ctrl_wait_fsm+0x232>
		case MOTION_LIGHT_UV_ABORT:

			*fsm_state = MOTION_LIGHT_UV_TURN_OFF_LIGHT;
 8001d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d22:	2209      	movs	r2, #9
 8001d24:	701a      	strb	r2, [r3, #0]
			break;
 8001d26:	e01f      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		case MOTION_LIGHT_UV_TURN_OFF_LIGHT:
			//this is done in another fsm
			deadline_timer_force_expiration(deadline_timer);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f7fe fba1 	bl	8000472 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_timeout);
 8001d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7fe fb9d 	bl	8000472 <deadline_timer_force_expiration>
			deadline_timer_force_expiration(deadline_wait_timeout);
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7fe fb99 	bl	8000472 <deadline_timer_force_expiration>
			button_uv->push_status = BUTTON_PUSH_OFF;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2200      	movs	r2, #0
 8001d44:	709a      	strb	r2, [r3, #2]

			//Stop LED indicator
			led_signal_stop(signal);
 8001d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe ff4c 	bl	8000be6 <led_signal_stop>
			light_ask_off_pulse_fsm(light_uv);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff f809 	bl	8000d68 <light_ask_off_pulse_fsm>


			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
			break;
 8001d5c:	e004      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
		default:
			*fsm_state = MOTION_LIGHT_UV_IDLE;
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
			break;
 8001d64:	e000      	b.n	8001d68 <motion_uv_ctrl_wait_fsm+0x234>
			break;
 8001d66:	46c0      	nop			; (mov r8, r8)
	}

	button_uv->edge_attended = button_isr_status;
 8001d68:	2317      	movs	r3, #23
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	781a      	ldrb	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	70da      	strb	r2, [r3, #3]
}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b006      	add	sp, #24
 8001d78:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	0800573c 	.word	0x0800573c

08001d80 <direct_light_control_fsm>:

void direct_light_control_fsm(light_t *light,
						button_t *button,
						deadline_timer_t *deadline_timer,
						motion_light_no_motion_state_t *fsm_state)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	b08b      	sub	sp, #44	; 0x2c
 8001d84:	af04      	add	r7, sp, #16
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	603b      	str	r3, [r7, #0]

	button_isr_status_t button_isr_status;
	button_edge_t edge = button->edge;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	785a      	ldrb	r2, [r3, #1]
 8001d92:	2516      	movs	r5, #22
 8001d94:	197b      	adds	r3, r7, r5
 8001d96:	701a      	strb	r2, [r3, #0]
	button_status_t button_status = BUTTON_OFF;
 8001d98:	2315      	movs	r3, #21
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]

	button_check_isr_request(*button, &button_isr_status, &edge);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	197a      	adds	r2, r7, r5
 8001da4:	9203      	str	r2, [sp, #12]
 8001da6:	2617      	movs	r6, #23
 8001da8:	19ba      	adds	r2, r7, r6
 8001daa:	9202      	str	r2, [sp, #8]
 8001dac:	466a      	mov	r2, sp
 8001dae:	0011      	movs	r1, r2
 8001db0:	001a      	movs	r2, r3
 8001db2:	3210      	adds	r2, #16
 8001db4:	ca11      	ldmia	r2!, {r0, r4}
 8001db6:	c111      	stmia	r1!, {r0, r4}
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	689a      	ldr	r2, [r3, #8]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f7fe fb07 	bl	80003d2 <button_check_isr_request>

	if( button_isr_status == BUTTON_ISR_UNATTENDED)
 8001dc4:	19bb      	adds	r3, r7, r6
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d10d      	bne.n	8001de8 <direct_light_control_fsm+0x68>
	{
		button_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 8001dcc:	19bb      	adds	r3, r7, r6
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

		if(edge == BUTTON_EDGE_NEGATIVE)
 8001dd2:	197b      	adds	r3, r7, r5
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d103      	bne.n	8001de2 <direct_light_control_fsm+0x62>
		{
			*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2203      	movs	r2, #3
 8001dde:	701a      	strb	r2, [r3, #0]
 8001de0:	e002      	b.n	8001de8 <direct_light_control_fsm+0x68>
		}
		else
		{
			*fsm_state =  NO_MOTION_LIGHT_TURN_ON_LIGHT;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	701a      	strb	r2, [r3, #0]
		}
	}

	switch(*fsm_state)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b03      	cmp	r3, #3
 8001dee:	d021      	beq.n	8001e34 <direct_light_control_fsm+0xb4>
 8001df0:	dc28      	bgt.n	8001e44 <direct_light_control_fsm+0xc4>
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d007      	beq.n	8001e06 <direct_light_control_fsm+0x86>
 8001df6:	dc25      	bgt.n	8001e44 <direct_light_control_fsm+0xc4>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <direct_light_control_fsm+0x82>
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00a      	beq.n	8001e16 <direct_light_control_fsm+0x96>
 8001e00:	e020      	b.n	8001e44 <direct_light_control_fsm+0xc4>
	{
		case NO_MOTION_LIGHT_IDLE:

			__NOP();//Do nothing
 8001e02:	46c0      	nop			; (mov r8, r8)

			break;
 8001e04:	e023      	b.n	8001e4e <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_TURN_ON_LIGHT:

			//this is done in another fsm
			light_ask_on_pulse_fsm(light);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f7fe ffce 	bl	8000daa <light_ask_on_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_CHECK_BUTTON;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]

			break;
 8001e14:	e01b      	b.n	8001e4e <direct_light_control_fsm+0xce>
		case NO_MOTION_LIGHT_CHECK_BUTTON:
			//This updates the timer count
			button_get_status(button, &button_status);
 8001e16:	2415      	movs	r4, #21
 8001e18:	193a      	adds	r2, r7, r4
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7fe fab2 	bl	8000388 <button_get_status>

			//TODO: (low) This step is just to ensure things are done
			if(button_status == BUTTON_OFF)
 8001e24:	193b      	adds	r3, r7, r4
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10f      	bne.n	8001e4c <direct_light_control_fsm+0xcc>
			{
				*fsm_state = NO_MOTION_LIGHT_TURN_OFF_LIGHT;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2203      	movs	r2, #3
 8001e30:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001e32:	e00b      	b.n	8001e4c <direct_light_control_fsm+0xcc>
		case NO_MOTION_LIGHT_TURN_OFF_LIGHT:
			//this is done in another fsm
			light_ask_off_pulse_fsm(light);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	0018      	movs	r0, r3
 8001e38:	f7fe ff96 	bl	8000d68 <light_ask_off_pulse_fsm>
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
			break;
 8001e42:	e004      	b.n	8001e4e <direct_light_control_fsm+0xce>
		default:
			*fsm_state = NO_MOTION_LIGHT_IDLE;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			break;
 8001e4a:	e000      	b.n	8001e4e <direct_light_control_fsm+0xce>
			break;
 8001e4c:	46c0      	nop			; (mov r8, r8)
	}

	button->edge_attended = button_isr_status;
 8001e4e:	2317      	movs	r3, #23
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781a      	ldrb	r2, [r3, #0]
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	70da      	strb	r2, [r3, #3]

}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b007      	add	sp, #28
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e60 <HAL_TIM_PeriodElapsedCallback>:

/**********************************ISR*****************************************/

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]

	if (htim == &htim17)
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	4b24      	ldr	r3, [pc, #144]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		pyd1598_dl_readout_fsm(&motion_sensor.direct_link,
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e72:	791a      	ldrb	r2, [r3, #4]
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001e76:	0011      	movs	r1, r2
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f9d1 	bl	8002220 <pyd1598_dl_readout_fsm>
											motion_sensor.serin.config.op_mode);
	}
	if (htim == &htim14)
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d105      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		pyd1598_serin_send_datagram_fsm(&motion_sensor.serin,
 8001e86:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e88:	481d      	ldr	r0, [pc, #116]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001e8a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001e8e:	f000 fb2f 	bl	80024f0 <pyd1598_serin_send_datagram_fsm>
	if (htim == &htim1)
	{
//		increment_timer();
	}

	if (htim == &htim16)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d12b      	bne.n	8001ef2 <HAL_TIM_PeriodElapsedCallback+0x92>
	{

		//TODO: (low)can I change this to the infinite while loop in the main?
		deadline_timer_count(&deadline_timer_light_1);
 8001e9a:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f7fe fb1f 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_light_2);
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7fe fb1b 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_timer_uv);
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7fe fb17 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_buttons);
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f7fe fb13 	bl	80004e0 <deadline_timer_count>
		//
		deadline_timer_count(&deadline_motion_light_1);
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7fe fb0f 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_light_2);
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7fe fb0b 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv);
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fb07 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_motion_uv_safe);
 8001ed2:	4b16      	ldr	r3, [pc, #88]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f7fe fb03 	bl	80004e0 <deadline_timer_count>

		deadline_timer_count(&deadline_led_indicator);
 8001eda:	4b15      	ldr	r3, [pc, #84]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7fe faff 	bl	80004e0 <deadline_timer_count>

		deadline_timer_count(&deadline_motion_uv_timeout);
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7fe fafb 	bl	80004e0 <deadline_timer_count>
		deadline_timer_count(&deadline_uv_wait_timeout);
 8001eea:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7fe faf7 	bl	80004e0 <deadline_timer_count>

	}



}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	20000820 	.word	0x20000820
 8001f00:	20000090 	.word	0x20000090
 8001f04:	200000b0 	.word	0x200000b0
 8001f08:	20000788 	.word	0x20000788
 8001f0c:	200007d4 	.word	0x200007d4
 8001f10:	20000110 	.word	0x20000110
 8001f14:	20000178 	.word	0x20000178
 8001f18:	200001e0 	.word	0x200001e0
 8001f1c:	200002b8 	.word	0x200002b8
 8001f20:	200003f0 	.word	0x200003f0
 8001f24:	20000478 	.word	0x20000478
 8001f28:	20000500 	.word	0x20000500
 8001f2c:	20000580 	.word	0x20000580
 8001f30:	20000388 	.word	0x20000388
 8001f34:	20000600 	.word	0x20000600
 8001f38:	20000680 	.word	0x20000680

08001f3c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	0002      	movs	r2, r0
 8001f44:	1dbb      	adds	r3, r7, #6
 8001f46:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == motion_sensor.direct_link.hardware_inteface.pin)
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8001f4a:	2248      	movs	r2, #72	; 0x48
 8001f4c:	5a9b      	ldrh	r3, [r3, r2]
 8001f4e:	1dba      	adds	r2, r7, #6
 8001f50:	8812      	ldrh	r2, [r2, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d107      	bne.n	8001f66 <HAL_GPIO_EXTI_Rising_Callback+0x2a>
	{
//		pyd1598_direct_link_isr_init_set();
		motion_sensor.direct_link.start_fsm = true;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_GPIO_EXTI_Rising_Callback+0xa0>)
 8001f58:	2241      	movs	r2, #65	; 0x41
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]
		TIM17->CNT = 0;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_GPIO_EXTI_Rising_Callback+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
 8001f64:	e000      	b.n	8001f68 <HAL_GPIO_EXTI_Rising_Callback+0x2c>
	}
	else
	{
		__NOP();
 8001f66:	46c0      	nop			; (mov r8, r8)
	}

	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8001f68:	4b1e      	ldr	r3, [pc, #120]	; (8001fe4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f6a:	891b      	ldrh	r3, [r3, #8]
 8001f6c:	1dba      	adds	r2, r7, #6
 8001f6e:	8812      	ldrh	r2, [r2, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d10b      	bne.n	8001f8c <HAL_GPIO_EXTI_Rising_Callback+0x50>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f76:	7b5b      	ldrb	r3, [r3, #13]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d107      	bne.n	8001f8c <HAL_GPIO_EXTI_Rising_Callback+0x50>
		{
			button_positive_edge_detected(&button_light_1);
 8001f7c:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <HAL_GPIO_EXTI_Rising_Callback+0xa8>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f7fe f9dc 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7fe fab7 	bl	80004fa <deadline_timer_set_initial_time>
		}

	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001f8e:	891b      	ldrh	r3, [r3, #8]
 8001f90:	1dba      	adds	r2, r7, #6
 8001f92:	8812      	ldrh	r2, [r2, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d10b      	bne.n	8001fb0 <HAL_GPIO_EXTI_Rising_Callback+0x74>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001f9a:	7b5b      	ldrb	r3, [r3, #13]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_GPIO_EXTI_Rising_Callback+0x74>
		{
			button_positive_edge_detected(&button_light_2);
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_GPIO_EXTI_Rising_Callback+0xb0>)
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7fe f9ca 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe faa5 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_uv.hardware_input.pin)
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001fb2:	891b      	ldrh	r3, [r3, #8]
 8001fb4:	1dba      	adds	r2, r7, #6
 8001fb6:	8812      	ldrh	r2, [r2, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d10b      	bne.n	8001fd4 <HAL_GPIO_EXTI_Rising_Callback+0x98>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001fbe:	7b5b      	ldrb	r3, [r3, #13]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d107      	bne.n	8001fd4 <HAL_GPIO_EXTI_Rising_Callback+0x98>
		{
			button_positive_edge_detected(&button_uv);
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_GPIO_EXTI_Rising_Callback+0xb4>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f7fe f9b8 	bl	800033c <button_positive_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_GPIO_EXTI_Rising_Callback+0xac>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7fe fa93 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}
}
 8001fd4:	46c0      	nop			; (mov r8, r8)
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b002      	add	sp, #8
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000090 	.word	0x20000090
 8001fe0:	40014800 	.word	0x40014800
 8001fe4:	20000338 	.word	0x20000338
 8001fe8:	200002b8 	.word	0x200002b8
 8001fec:	20000350 	.word	0x20000350
 8001ff0:	20000368 	.word	0x20000368

08001ff4 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	1dbb      	adds	r3, r7, #6
 8001ffe:	801a      	strh	r2, [r3, #0]


	if(GPIO_Pin == button_light_1.hardware_input.pin)
 8002000:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002002:	891b      	ldrh	r3, [r3, #8]
 8002004:	1dba      	adds	r2, r7, #6
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d10b      	bne.n	8002024 <HAL_GPIO_EXTI_Falling_Callback+0x30>
	{
		if(button_light_1.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 800200e:	7b5b      	ldrb	r3, [r3, #13]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d107      	bne.n	8002024 <HAL_GPIO_EXTI_Falling_Callback+0x30>
		{
			button_negative_edge_detected(&button_light_1);
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002016:	0018      	movs	r0, r3
 8002018:	f7fe f9a3 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800201e:	0018      	movs	r0, r3
 8002020:	f7fe fa6b 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}
	if(GPIO_Pin == button_light_2.hardware_input.pin)
 8002024:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002026:	891b      	ldrh	r3, [r3, #8]
 8002028:	1dba      	adds	r2, r7, #6
 800202a:	8812      	ldrh	r2, [r2, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d10b      	bne.n	8002048 <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		if(button_light_2.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002030:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002032:	7b5b      	ldrb	r3, [r3, #13]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_GPIO_EXTI_Falling_Callback+0x54>
		{
			button_negative_edge_detected(&button_light_2);
 8002038:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 800203a:	0018      	movs	r0, r3
 800203c:	f7fe f991 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002042:	0018      	movs	r0, r3
 8002044:	f7fe fa59 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}

	if(GPIO_Pin == button_uv.hardware_input.pin)
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 800204a:	891b      	ldrh	r3, [r3, #8]
 800204c:	1dba      	adds	r2, r7, #6
 800204e:	8812      	ldrh	r2, [r2, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d10b      	bne.n	800206c <HAL_GPIO_EXTI_Falling_Callback+0x78>
	{
		if(button_uv.debounce_lock == BUTTON_DEBOUNCE_LOCK_OFF)
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 8002056:	7b5b      	ldrb	r3, [r3, #13]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_GPIO_EXTI_Falling_Callback+0x78>
		{
			button_negative_edge_detected(&button_uv);
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_GPIO_EXTI_Falling_Callback+0x8c>)
 800205e:	0018      	movs	r0, r3
 8002060:	f7fe f97f 	bl	8000362 <button_negative_edge_detected>
			deadline_timer_set_initial_time(&deadline_buttons);//TODO: (medium) Check if a new timer should be configured
 8002064:	4b04      	ldr	r3, [pc, #16]	; (8002078 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 8002066:	0018      	movs	r0, r3
 8002068:	f7fe fa47 	bl	80004fa <deadline_timer_set_initial_time>
		}
	}
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	b002      	add	sp, #8
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000338 	.word	0x20000338
 8002078:	200002b8 	.word	0x200002b8
 800207c:	20000350 	.word	0x20000350
 8002080:	20000368 	.word	0x20000368

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	e7fe      	b.n	800208c <Error_Handler+0x8>

0800208e <pyd1598_setup>:

/**********************************High Level**********************************/
void pyd1598_setup(pyd1598_sensor_t *sensor, pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t serin_inteface,
							pyd1598_hardware_interface_t direct_link_inteface)
{
 800208e:	b082      	sub	sp, #8
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	1d38      	adds	r0, r7, #4
 800209a:	6001      	str	r1, [r0, #0]
 800209c:	6042      	str	r2, [r0, #4]
 800209e:	2204      	movs	r2, #4
 80020a0:	2520      	movs	r5, #32
 80020a2:	1952      	adds	r2, r2, r5
 80020a4:	19d2      	adds	r2, r2, r7
 80020a6:	6013      	str	r3, [r2, #0]
	pyd1598_serin_setup(&(sensor->serin), initial_config, serin_inteface);
 80020a8:	68fc      	ldr	r4, [r7, #12]
 80020aa:	2304      	movs	r3, #4
 80020ac:	195b      	adds	r3, r3, r5
 80020ae:	19db      	adds	r3, r3, r7
 80020b0:	1d3a      	adds	r2, r7, #4
 80020b2:	4669      	mov	r1, sp
 80020b4:	6858      	ldr	r0, [r3, #4]
 80020b6:	6008      	str	r0, [r1, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6811      	ldr	r1, [r2, #0]
 80020bc:	6852      	ldr	r2, [r2, #4]
 80020be:	0020      	movs	r0, r4
 80020c0:	f000 f831 	bl	8002126 <pyd1598_serin_setup>
	pyd1598_direct_link_setup(&(sensor->direct_link), direct_link_inteface);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3320      	adds	r3, #32
 80020c8:	0018      	movs	r0, r3
 80020ca:	230c      	movs	r3, #12
 80020cc:	195b      	adds	r3, r3, r5
 80020ce:	19db      	adds	r3, r3, r7
 80020d0:	6819      	ldr	r1, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	f000 f85f 	bl	8002196 <pyd1598_direct_link_setup>



	sensor->current_config.blind_time = 0;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2251      	movs	r2, #81	; 0x51
 80020dc:	2100      	movs	r1, #0
 80020de:	5499      	strb	r1, [r3, r2]
	sensor->current_config.count_mode = 0;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2257      	movs	r2, #87	; 0x57
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.hpf_cutoff = 0;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2256      	movs	r2, #86	; 0x56
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]
	sensor->current_config.op_mode = 0;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2254      	movs	r2, #84	; 0x54
 80020f4:	2100      	movs	r1, #0
 80020f6:	5499      	strb	r1, [r3, r2]
	sensor->current_config.pulse_counter = 0;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2252      	movs	r2, #82	; 0x52
 80020fc:	2100      	movs	r1, #0
 80020fe:	5499      	strb	r1, [r3, r2]
	sensor->current_config.signal_source = 0;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2255      	movs	r2, #85	; 0x55
 8002104:	2100      	movs	r1, #0
 8002106:	5499      	strb	r1, [r3, r2]
	sensor->current_config.threshold = 0;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2250      	movs	r2, #80	; 0x50
 800210c:	2100      	movs	r1, #0
 800210e:	5499      	strb	r1, [r3, r2]
	sensor->current_config.window_time = 0;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2253      	movs	r2, #83	; 0x53
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]





}
 8002118:	46c0      	nop			; (mov r8, r8)
 800211a:	46bd      	mov	sp, r7
 800211c:	b004      	add	sp, #16
 800211e:	bcb0      	pop	{r4, r5, r7}
 8002120:	bc08      	pop	{r3}
 8002122:	b002      	add	sp, #8
 8002124:	4718      	bx	r3

08002126 <pyd1598_serin_setup>:

void pyd1598_serin_setup(pyd1598_serin_t *serin,
							pyd1598_config_t initial_config,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8002126:	b082      	sub	sp, #8
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	1d38      	adds	r0, r7, #4
 8002132:	6001      	str	r1, [r0, #0]
 8002134:	6042      	str	r2, [r0, #4]
 8002136:	2204      	movs	r2, #4
 8002138:	2418      	movs	r4, #24
 800213a:	1912      	adds	r2, r2, r4
 800213c:	2108      	movs	r1, #8
 800213e:	468c      	mov	ip, r1
 8002140:	44bc      	add	ip, r7
 8002142:	4462      	add	r2, ip
 8002144:	6013      	str	r3, [r2, #0]
	serin->config = initial_config;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1d3a      	adds	r2, r7, #4
 800214a:	ca03      	ldmia	r2!, {r0, r1}
 800214c:	c303      	stmia	r3!, {r0, r1}


	pyd1598_serin_add_all_conf(serin->config, serin);
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	f000 fac6 	bl	80026e6 <pyd1598_serin_add_all_conf>

	serin->hardware_inteface = hardware_inteface;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2204      	movs	r2, #4
 800215e:	1912      	adds	r2, r2, r4
 8002160:	2108      	movs	r1, #8
 8002162:	468c      	mov	ip, r1
 8002164:	44bc      	add	ip, r7
 8002166:	4462      	add	r2, ip
 8002168:	3318      	adds	r3, #24
 800216a:	ca03      	ldmia	r2!, {r0, r1}
 800216c:	c303      	stmia	r3!, {r0, r1}
	//This is incremented when data is send to SERIN pin
	serin->data_idx = 0;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
	//This mask is shifted when data is send to SERIN pin.
	serin->mask = PYD1598_SERIN_BIT_24_MASK;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0452      	lsls	r2, r2, #17
 800217a:	60da      	str	r2, [r3, #12]
	serin->state = PYD1598_SERIN_IDLE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	751a      	strb	r2, [r3, #20]
	serin->start_fsm = false;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	755a      	strb	r2, [r3, #21]




}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b005      	add	sp, #20
 800218e:	bc90      	pop	{r4, r7}
 8002190:	bc08      	pop	{r3}
 8002192:	b002      	add	sp, #8
 8002194:	4718      	bx	r3

08002196 <pyd1598_direct_link_setup>:

void pyd1598_direct_link_setup(pyd1598_direct_link_t *direct_link,
							pyd1598_hardware_interface_t hardware_inteface)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	60f8      	str	r0, [r7, #12]
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	6019      	str	r1, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
	//Hardware initializations
	direct_link->hardware_inteface = hardware_inteface;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1d3a      	adds	r2, r7, #4
 80021a8:	3324      	adds	r3, #36	; 0x24
 80021aa:	ca03      	ldmia	r2!, {r0, r1}
 80021ac:	c303      	stmia	r3!, {r0, r1}

	//Sensor variables initializations
	//This will be updated after the first comm
	direct_link->config.blind_time = 0;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	705a      	strb	r2, [r3, #1]
	direct_link->config.count_mode = 0;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	71da      	strb	r2, [r3, #7]
	direct_link->config.hpf_cutoff = 0;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	719a      	strb	r2, [r3, #6]
	direct_link->config.op_mode = 0;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	711a      	strb	r2, [r3, #4]
	direct_link->config.pulse_counter = 0;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	709a      	strb	r2, [r3, #2]
	direct_link->config.signal_source = 0;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	715a      	strb	r2, [r3, #5]
	direct_link->config.threshold = 0;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
	direct_link->config.window_time = 0;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	70da      	strb	r2, [r3, #3]

	direct_link->status = PYD1598_OUT_OF_RANGE_NORMAL;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	739a      	strb	r2, [r3, #14]
	direct_link->source_value.pir_bpf = 0;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	811a      	strh	r2, [r3, #8]
	direct_link->source_value.pir_lpf = 0;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	815a      	strh	r2, [r3, #10]
	direct_link->source_value.temperature = 0;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	819a      	strh	r2, [r3, #12]

	//Finite State Machine initializations
	direct_link->forced_state = PYD_STATE_FORCED_DRIVE_ONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
	direct_link->datagram_bufffer = 0;
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	2300      	movs	r3, #0
 8002202:	610a      	str	r2, [r1, #16]
 8002204:	614b      	str	r3, [r1, #20]
	direct_link->start_fsm = 0;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	2100      	movs	r1, #0
 800220c:	5499      	strb	r1, [r3, r2]
	direct_link->time_update_idx = 0;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2222      	movs	r2, #34	; 0x22
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]
//	else
//	{
//		pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
//	}

}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <pyd1598_dl_readout_fsm>:
/*_________________________________Direct link FSM____________________________*/


void pyd1598_dl_readout_fsm(pyd1598_direct_link_t *direct_link,
													pyd1598_op_mode_t op_mode)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	000a      	movs	r2, r1
 800222a:	1cfb      	adds	r3, r7, #3
 800222c:	701a      	strb	r2, [r3, #0]

	//Information variables
	uint64_t datagram_bufffer = direct_link->datagram_bufffer;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	60fb      	str	r3, [r7, #12]

	//FSM variables
	pyd1598_wakeup_conf_t wakeup_mode = direct_link->wakeup_mode;
 8002238:	2313      	movs	r3, #19
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	7f52      	ldrb	r2, [r2, #29]
 8002240:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_status_t readout_status = direct_link->readout_status;
 8002242:	231f      	movs	r3, #31
 8002244:	18fb      	adds	r3, r7, r3
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	7fd2      	ldrb	r2, [r2, #31]
 800224a:	701a      	strb	r2, [r3, #0]
	pyd1598_readout_state_t readout_state = direct_link->readout_state;
 800224c:	201e      	movs	r0, #30
 800224e:	183b      	adds	r3, r7, r0
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	2120      	movs	r1, #32
 8002254:	5c52      	ldrb	r2, [r2, r1]
 8002256:	701a      	strb	r2, [r3, #0]
	uint8_t time_update_idx = direct_link->time_update_idx;
 8002258:	231d      	movs	r3, #29
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	2122      	movs	r1, #34	; 0x22
 8002260:	5c52      	ldrb	r2, [r2, r1]
 8002262:	701a      	strb	r2, [r3, #0]
	bool start_fsm = direct_link->start_fsm;
 8002264:	231c      	movs	r3, #28
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	2121      	movs	r1, #33	; 0x21
 800226c:	5c52      	ldrb	r2, [r2, r1]
 800226e:	701a      	strb	r2, [r3, #0]
	pyd1598_wakeup_isr_status_t wakeup_isr_status = direct_link->wakeup_isr_status;
 8002270:	231b      	movs	r3, #27
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	2123      	movs	r1, #35	; 0x23
 8002278:	5c52      	ldrb	r2, [r2, r1]
 800227a:	701a      	strb	r2, [r3, #0]

	//Local variable
	uint32_t idx = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]


	//TODO: (low) implement readout abort state

	switch(readout_state)
 8002280:	183b      	adds	r3, r7, r0
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d900      	bls.n	800228a <pyd1598_dl_readout_fsm+0x6a>
 8002288:	e0f1      	b.n	800246e <pyd1598_dl_readout_fsm+0x24e>
 800228a:	009a      	lsls	r2, r3, #2
 800228c:	4b91      	ldr	r3, [pc, #580]	; (80024d4 <pyd1598_dl_readout_fsm+0x2b4>)
 800228e:	18d3      	adds	r3, r2, r3
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	469f      	mov	pc, r3
	{
		case PYD1598_READOUT_IDLE:

			//This state do nothing until start_fsm is activated outside the FSM
			if(start_fsm == true)
 8002294:	231c      	movs	r3, #28
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d100      	bne.n	80022a0 <pyd1598_dl_readout_fsm+0x80>
 800229e:	e0ef      	b.n	8002480 <pyd1598_dl_readout_fsm+0x260>
			{
				//From Table 5 and section 2.7 of the datasheet we know that the
				//time difference from this state and the next ones should be
				// 					120μs < t_{DS} < 150μs
				if(op_mode == PYD1598_FORCE_READOUT)
 80022a0:	1cfb      	adds	r3, r7, #3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10e      	bne.n	80022c6 <pyd1598_dl_readout_fsm+0xa6>
				{
					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022ae:	f000 fc13 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022b6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022b8:	f000 fc4a 	bl	8002b50 <pyd1598_direct_link_set_one_pulse>
					readout_state = PYD1598_READOUT_GET_MSG;
 80022bc:	231e      	movs	r3, #30
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e023      	b.n	800230e <pyd1598_dl_readout_fsm+0xee>

				}
				else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 80022c6:	1cfb      	adds	r3, r7, #3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <pyd1598_dl_readout_fsm+0xb6>
 80022ce:	1cfb      	adds	r3, r7, #3
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d11b      	bne.n	800230e <pyd1598_dl_readout_fsm+0xee>
						(op_mode == PYD1598_WAKE_UP))
				{
					//TODO: (high) is it possible to set another flag if it
					//comes from an interrupt

					pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022dc:	f000 fbfc 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
					pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80022e4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80022e6:	f000 fc4d 	bl	8002b84 <pyd1598_direct_link_set_negative_edge>

					if((op_mode != PYD1598_INTERRUPT_READOUT) &&
 80022ea:	1cfb      	adds	r3, r7, #3
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d009      	beq.n	8002306 <pyd1598_dl_readout_fsm+0xe6>
 80022f2:	2313      	movs	r3, #19
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <pyd1598_dl_readout_fsm+0xe6>
						(wakeup_mode == READOUT_WAKEUP_NO_READ))
					{
						//since in Wake-up mode read is optional:
						readout_state = PYD1598_READOUT_END_COM;
 80022fc:	231e      	movs	r3, #30
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2204      	movs	r2, #4
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e003      	b.n	800230e <pyd1598_dl_readout_fsm+0xee>
					}
					else
					{
						readout_state = PYD1598_READOUT_GET_MSG;
 8002306:	231e      	movs	r3, #30
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
				else
				{
					//TODO: (low) define an error handler
				}

				start_fsm = false;
 800230e:	231c      	movs	r3, #28
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 8002316:	231f      	movs	r3, #31
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]

			}

			break;
 800231e:	e0af      	b.n	8002480 <pyd1598_dl_readout_fsm+0x260>
		case PYD1598_READOUT_GET_MSG:

			//TODO: (HIGH) remember to protect from interrupts!!!!!!!!!!!!!

			datagram_bufffer = 0;
 8002320:	2200      	movs	r2, #0
 8002322:	2300      	movs	r3, #0
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	60fb      	str	r3, [r7, #12]

			//Proceeding with the Readout:
			for(idx = 0; idx < 40; idx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e01e      	b.n	800236c <pyd1598_dl_readout_fsm+0x14c>
			{
				pyd1598_direct_link_set_one_pulse(direct_link->hardware_inteface);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002332:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002334:	f000 fc0c 	bl	8002b50 <pyd1598_direct_link_set_one_pulse>
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800233c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800233e:	f000 fbdf 	bl	8002b00 <pyd1598_direct_link_set_as_input>

				//TODO: (low) Test without using a function call so the pin bit
				// can be faster.
				pyd1598_direct_link_read_pin(direct_link->hardware_inteface,
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2208      	movs	r2, #8
 8002346:	18ba      	adds	r2, r7, r2
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800234c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800234e:	f000 fc2b 	bl	8002ba8 <pyd1598_direct_link_read_pin>
													&datagram_bufffer, idx);

				pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002356:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002358:	f000 fc14 	bl	8002b84 <pyd1598_direct_link_set_negative_edge>
				pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002360:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002362:	f000 fbb9 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
			for(idx = 0; idx < 40; idx++)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b27      	cmp	r3, #39	; 0x27
 8002370:	d9dd      	bls.n	800232e <pyd1598_dl_readout_fsm+0x10e>

			//host controller must force DIRECT LINK pin to LOW for at least
			//t_{UP} >  1250μs and subsequently release DIRECT LINK (High Z)


			time_update_idx = 0;
 8002372:	231d      	movs	r3, #29
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]

			readout_status = READOUT_BUSY;
 800237a:	231f      	movs	r3, #31
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_SIGNAL_DOWN;
 8002382:	231e      	movs	r3, #30
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2203      	movs	r2, #3
 8002388:	701a      	strb	r2, [r3, #0]

			break;
 800238a:	e07c      	b.n	8002486 <pyd1598_dl_readout_fsm+0x266>
		case PYD1598_READOUT_SIGNAL_DOWN:
			pyd1598_direct_link_set_as_output(direct_link->hardware_inteface);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002390:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002392:	f000 fba1 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(direct_link->hardware_inteface);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800239a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800239c:	f000 fbf2 	bl	8002b84 <pyd1598_direct_link_set_negative_edge>

			if( (op_mode == PYD1598_INTERRUPT_READOUT) ||
 80023a0:	1cfb      	adds	r3, r7, #3
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d003      	beq.n	80023b0 <pyd1598_dl_readout_fsm+0x190>
 80023a8:	1cfb      	adds	r3, r7, #3
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d119      	bne.n	80023e4 <pyd1598_dl_readout_fsm+0x1c4>
				(op_mode == PYD1598_WAKE_UP))
			{
				//since these op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80023b4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023b6:	f000 fbb7 	bl	8002b28 <pyd1598_direct_link_set_as_interrupt_input>
				readout_status = READOUT_READY;
 80023ba:	231f      	movs	r3, #31
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_IDLE;
 80023c2:	231e      	movs	r3, #30
 80023c4:	18fb      	adds	r3, r7, r3
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
				time_update_idx = 0;
 80023ca:	231d      	movs	r3, #29
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]

				if(op_mode == PYD1598_WAKE_UP)
 80023d2:	1cfb      	adds	r3, r7, #3
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d10c      	bne.n	80023f4 <pyd1598_dl_readout_fsm+0x1d4>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 80023da:	231b      	movs	r3, #27
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2202      	movs	r2, #2
 80023e0:	701a      	strb	r2, [r3, #0]
				if(op_mode == PYD1598_WAKE_UP)
 80023e2:	e007      	b.n	80023f4 <pyd1598_dl_readout_fsm+0x1d4>


			}
			else
			{
				readout_status = READOUT_BUSY;
 80023e4:	231f      	movs	r3, #31
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_UPDATE;
 80023ec:	231e      	movs	r3, #30
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2202      	movs	r2, #2
 80023f2:	701a      	strb	r2, [r3, #0]
			// 					120μs < t_{DS} < 150μs,
			//and since
			//					t_{UP} >  1250μs
			//this state should remain at least 1250/120 = 10.42 -> 11 cycles.

			time_update_idx++;
 80023f4:	211d      	movs	r1, #29
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	781a      	ldrb	r2, [r3, #0]
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	3201      	adds	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

			//TODO: (low) create a mechanism to configure the number of cycles
			if(time_update_idx >= 11)
 8002400:	187b      	adds	r3, r7, r1
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b0a      	cmp	r3, #10
 8002406:	d93d      	bls.n	8002484 <pyd1598_dl_readout_fsm+0x264>
			{
				time_update_idx = 0;
 8002408:	187b      	adds	r3, r7, r1
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
				readout_status = READOUT_BUSY;
 800240e:	231f      	movs	r3, #31
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
				readout_state = PYD1598_READOUT_END_COM;
 8002416:	231e      	movs	r3, #30
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2204      	movs	r2, #4
 800241c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800241e:	e031      	b.n	8002484 <pyd1598_dl_readout_fsm+0x264>
		case PYD1598_READOUT_END_COM:
			//TODO: (low) check if this conditional is required since it is done
			//in PYD1598_READOUT_SIGNAL_DOWN.

			//release DIRECT LINK (High Z)
			if(op_mode == PYD1598_FORCE_READOUT)
 8002420:	1cfb      	adds	r3, r7, #3
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <pyd1598_dl_readout_fsm+0x214>
			{
				pyd1598_direct_link_set_as_input(direct_link->hardware_inteface);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800242c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800242e:	f000 fb67 	bl	8002b00 <pyd1598_direct_link_set_as_input>
 8002432:	e014      	b.n	800245e <pyd1598_dl_readout_fsm+0x23e>
			}
			else if((op_mode == PYD1598_INTERRUPT_READOUT) ||
 8002434:	1cfb      	adds	r3, r7, #3
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d003      	beq.n	8002444 <pyd1598_dl_readout_fsm+0x224>
 800243c:	1cfb      	adds	r3, r7, #3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d10c      	bne.n	800245e <pyd1598_dl_readout_fsm+0x23e>
					(op_mode == PYD1598_WAKE_UP))
			{
				//since this op modes require an external interrupt
				pyd1598_direct_link_set_as_interrupt_input(direct_link->hardware_inteface);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002448:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800244a:	f000 fb6d 	bl	8002b28 <pyd1598_direct_link_set_as_interrupt_input>

				if(op_mode == PYD1598_WAKE_UP)
 800244e:	1cfb      	adds	r3, r7, #3
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b02      	cmp	r3, #2
 8002454:	d103      	bne.n	800245e <pyd1598_dl_readout_fsm+0x23e>
				{
					wakeup_isr_status = PYD1598_WAKEUP_ISR_UNATTENDED;
 8002456:	231b      	movs	r3, #27
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2202      	movs	r2, #2
 800245c:	701a      	strb	r2, [r3, #0]
				}

			}
			readout_status = READOUT_READY;
 800245e:	231f      	movs	r3, #31
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	2200      	movs	r2, #0
 8002464:	701a      	strb	r2, [r3, #0]
			readout_state = PYD1598_READOUT_IDLE;
 8002466:	231e      	movs	r3, #30
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]

		default:
			readout_state = PYD1598_READOUT_IDLE;
 800246e:	231e      	movs	r3, #30
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
			readout_status = READOUT_READY;
 8002476:	231f      	movs	r3, #31
 8002478:	18fb      	adds	r3, r7, r3
 800247a:	2200      	movs	r2, #0
 800247c:	701a      	strb	r2, [r3, #0]
			break;
 800247e:	e002      	b.n	8002486 <pyd1598_dl_readout_fsm+0x266>
			break;
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	e000      	b.n	8002486 <pyd1598_dl_readout_fsm+0x266>
			break;
 8002484:	46c0      	nop			; (mov r8, r8)
	}

	direct_link->readout_state = readout_state;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	221e      	movs	r2, #30
 800248a:	18ba      	adds	r2, r7, r2
 800248c:	2120      	movs	r1, #32
 800248e:	7812      	ldrb	r2, [r2, #0]
 8002490:	545a      	strb	r2, [r3, r1]
	direct_link->readout_status = readout_status;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	221f      	movs	r2, #31
 8002496:	18ba      	adds	r2, r7, r2
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	77da      	strb	r2, [r3, #31]
	direct_link->time_update_idx = time_update_idx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	221d      	movs	r2, #29
 80024a0:	18ba      	adds	r2, r7, r2
 80024a2:	2122      	movs	r1, #34	; 0x22
 80024a4:	7812      	ldrb	r2, [r2, #0]
 80024a6:	545a      	strb	r2, [r3, r1]
	direct_link->start_fsm = start_fsm;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	221c      	movs	r2, #28
 80024ac:	18ba      	adds	r2, r7, r2
 80024ae:	2121      	movs	r1, #33	; 0x21
 80024b0:	7812      	ldrb	r2, [r2, #0]
 80024b2:	545a      	strb	r2, [r3, r1]
	//Saving datagram to be read outside the ISR:
	direct_link->datagram_bufffer = datagram_bufffer;
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	610a      	str	r2, [r1, #16]
 80024bc:	614b      	str	r3, [r1, #20]
	direct_link->wakeup_isr_status = wakeup_isr_status;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	221b      	movs	r2, #27
 80024c2:	18ba      	adds	r2, r7, r2
 80024c4:	2123      	movs	r1, #35	; 0x23
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	545a      	strb	r2, [r3, r1]


}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b008      	add	sp, #32
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	08005768 	.word	0x08005768

080024d8 <pyd1598_request_write>:


/*____________________________________SERIN FSM_______________________________*/

void pyd1598_request_write(pyd1598_sensor_t *sensor)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
	sensor->serin.start_fsm = true;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	755a      	strb	r2, [r3, #21]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <pyd1598_serin_send_datagram_fsm>:


void pyd1598_serin_send_datagram_fsm(pyd1598_serin_t *serin,
									pyd1598_hardware_interface_t data_link_pin)
{
 80024f0:	b590      	push	{r4, r7, lr}
 80024f2:	b08f      	sub	sp, #60	; 0x3c
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	6019      	str	r1, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
	//Declaring the FSM variables and define them to protect the serin variables
	//from any outside change

	pyd1598_serin_state_t state = serin->state;//Define if it requires to be static
 80024fe:	2437      	movs	r4, #55	; 0x37
 8002500:	193b      	adds	r3, r7, r4
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	7d12      	ldrb	r2, [r2, #20]
 8002506:	701a      	strb	r2, [r3, #0]
	uint32_t data_idx = serin->data_idx;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
	bool start_fsm = serin->start_fsm;
 800250e:	232f      	movs	r3, #47	; 0x2f
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	7d52      	ldrb	r2, [r2, #21]
 8002516:	701a      	strb	r2, [r3, #0]
	pyd1598_config_t config = serin->config;
 8002518:	231c      	movs	r3, #28
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	ca03      	ldmia	r2!, {r0, r1}
 8002520:	c303      	stmia	r3!, {r0, r1}
	uint32_t mask = serin->mask;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t conf_datagram = serin->conf_datagram;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	627b      	str	r3, [r7, #36]	; 0x24

	pyd1598_hardware_interface_t output = serin->hardware_inteface;
 800252e:	2314      	movs	r3, #20
 8002530:	18fa      	adds	r2, r7, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	3318      	adds	r3, #24
 8002536:	cb03      	ldmia	r3!, {r0, r1}
 8002538:	c203      	stmia	r2!, {r0, r1}

	switch(state)
 800253a:	193b      	adds	r3, r7, r4
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d900      	bls.n	8002544 <pyd1598_serin_send_datagram_fsm+0x54>
 8002542:	e07f      	b.n	8002644 <pyd1598_serin_send_datagram_fsm+0x154>
 8002544:	009a      	lsls	r2, r3, #2
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <pyd1598_serin_send_datagram_fsm+0x190>)
 8002548:	18d3      	adds	r3, r2, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	469f      	mov	pc, r3
	{
		case PYD1598_SERIN_IDLE:
			if(start_fsm == true)
 800254e:	242f      	movs	r4, #47	; 0x2f
 8002550:	193b      	adds	r3, r7, r4
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d100      	bne.n	800255a <pyd1598_serin_send_datagram_fsm+0x6a>
 8002558:	e079      	b.n	800264e <pyd1598_serin_send_datagram_fsm+0x15e>
			{
				pyd1598_direct_link_set_as_output(data_link_pin);
 800255a:	1d3b      	adds	r3, r7, #4
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	f000 faba 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
				pyd1598_direct_link_set_negative_edge(data_link_pin);
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	6818      	ldr	r0, [r3, #0]
 8002568:	6859      	ldr	r1, [r3, #4]
 800256a:	f000 fb0b 	bl	8002b84 <pyd1598_direct_link_set_negative_edge>
				state = PYD1598_SERIN_SETUP_FOR_MESSAGE;
 800256e:	2337      	movs	r3, #55	; 0x37
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
				start_fsm = false;
 8002576:	193b      	adds	r3, r7, r4
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800257c:	e067      	b.n	800264e <pyd1598_serin_send_datagram_fsm+0x15e>
		case PYD1598_SERIN_SETUP_FOR_MESSAGE:

			data_idx = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	633b      	str	r3, [r7, #48]	; 0x30
//			pyd1598_direct_link_set_as_output();
//			pyd1598_direct_link_set_negative_edge();

			mask = PYD1598_SERIN_BIT_24_MASK;
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	045b      	lsls	r3, r3, #17
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28
			state = PYD1598_SERIN_SEND_MSG;
 8002588:	2337      	movs	r3, #55	; 0x37
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2202      	movs	r2, #2
 800258e:	701a      	strb	r2, [r3, #0]

			break;
 8002590:	e05e      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_MSG:
			// program the timer interrupt considering: t_{SHD} = 80-150μs
			if((conf_datagram & mask) == 0)
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002596:	4013      	ands	r3, r2
 8002598:	d106      	bne.n	80025a8 <pyd1598_serin_send_datagram_fsm+0xb8>
			{
				pyd1598_serin_set_zero_pulse(output);
 800259a:	2314      	movs	r3, #20
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	f000 fa5d 	bl	8002a60 <pyd1598_serin_set_zero_pulse>
 80025a6:	e005      	b.n	80025b4 <pyd1598_serin_send_datagram_fsm+0xc4>
			}
			else
			{
				pyd1598_serin_set_one_pulse(output);
 80025a8:	2314      	movs	r3, #20
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	f000 fa78 	bl	8002aa4 <pyd1598_serin_set_one_pulse>
			}

			mask >>= 1;
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28

//			if(data_idx >= (PYD1598_SERIN_MSG_LONG+1))
			if(mask == 0)
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d104      	bne.n	80025ca <pyd1598_serin_send_datagram_fsm+0xda>
			{
				state = PYD1598_SERIN_SEND_DOWN;
 80025c0:	2337      	movs	r3, #55	; 0x37
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2203      	movs	r2, #3
 80025c6:	701a      	strb	r2, [r3, #0]
			else
			{
				data_idx++;
			}

			break;
 80025c8:	e042      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 80025ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025cc:	3301      	adds	r3, #1
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80025d0:	e03e      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_SEND_DOWN:
			pyd1598_direct_link_set_as_output(data_link_pin);
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	f000 fa7e 	bl	8002ad8 <pyd1598_direct_link_set_as_output>
			pyd1598_direct_link_set_negative_edge(data_link_pin);
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	f000 facf 	bl	8002b84 <pyd1598_direct_link_set_negative_edge>
			state = PYD1598_SERIN_WAIT_LOAD_TIME;
 80025e6:	2337      	movs	r3, #55	; 0x37
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	2204      	movs	r2, #4
 80025ec:	701a      	strb	r2, [r3, #0]

			break;
 80025ee:	e02f      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>

		case PYD1598_SERIN_WAIT_LOAD_TIME:
			//Data Load Time t_{SLT} > 650μs. i.e. 8.125 to 4.333 times
			//(9 times for a 80μs interrupt or 4 times for a 150μs interrupt)
			if(data_idx >= PYD1598_SERIN_COUNT_TSLT)
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	2b22      	cmp	r3, #34	; 0x22
 80025f4:	d904      	bls.n	8002600 <pyd1598_serin_send_datagram_fsm+0x110>
			{
				state = PYD1598_SERIN_END_COM;
 80025f6:	2337      	movs	r3, #55	; 0x37
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2205      	movs	r2, #5
 80025fc:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				data_idx++;
			}
			break;
 80025fe:	e027      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
				data_idx++;
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	3301      	adds	r3, #1
 8002604:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8002606:	e023      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
		case PYD1598_SERIN_END_COM:

			if(config.op_mode == PYD1598_FORCE_READOUT)
 8002608:	231c      	movs	r3, #28
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	791b      	ldrb	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d105      	bne.n	800261e <pyd1598_serin_send_datagram_fsm+0x12e>
			{
				pyd1598_direct_link_set_as_input(data_link_pin);
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	6859      	ldr	r1, [r3, #4]
 8002618:	f000 fa72 	bl	8002b00 <pyd1598_direct_link_set_as_input>
 800261c:	e00d      	b.n	800263a <pyd1598_serin_send_datagram_fsm+0x14a>
			}
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 800261e:	221c      	movs	r2, #28
 8002620:	18bb      	adds	r3, r7, r2
 8002622:	791b      	ldrb	r3, [r3, #4]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d003      	beq.n	8002630 <pyd1598_serin_send_datagram_fsm+0x140>
					(config.op_mode == PYD1598_WAKE_UP) )
 8002628:	18bb      	adds	r3, r7, r2
 800262a:	791b      	ldrb	r3, [r3, #4]
			else if((config.op_mode == PYD1598_INTERRUPT_READOUT) ||
 800262c:	2b02      	cmp	r3, #2
 800262e:	d104      	bne.n	800263a <pyd1598_serin_send_datagram_fsm+0x14a>
			{
				pyd1598_direct_link_set_as_interrupt_input(data_link_pin);
 8002630:	1d3b      	adds	r3, r7, #4
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	f000 fa77 	bl	8002b28 <pyd1598_direct_link_set_as_interrupt_input>
			}
			state = PYD1598_SERIN_IDLE;
 800263a:	2337      	movs	r3, #55	; 0x37
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
			break;
 8002642:	e005      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
		default:
			state = PYD1598_SERIN_IDLE;
 8002644:	2337      	movs	r3, #55	; 0x37
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
			break;
 800264c:	e000      	b.n	8002650 <pyd1598_serin_send_datagram_fsm+0x160>
			break;
 800264e:	46c0      	nop			; (mov r8, r8)

	}

	//This are the FSM variables that are changed in this function.
	serin->state = state;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2237      	movs	r2, #55	; 0x37
 8002654:	18ba      	adds	r2, r7, r2
 8002656:	7812      	ldrb	r2, [r2, #0]
 8002658:	751a      	strb	r2, [r3, #20]
	serin->data_idx = data_idx;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265e:	611a      	str	r2, [r3, #16]
	serin->start_fsm = false;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	755a      	strb	r2, [r3, #21]
	serin->mask = mask;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800266a:	60da      	str	r2, [r3, #12]
	serin->start_fsm = start_fsm;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	222f      	movs	r2, #47	; 0x2f
 8002670:	18ba      	adds	r2, r7, r2
 8002672:	7812      	ldrb	r2, [r2, #0]
 8002674:	755a      	strb	r2, [r3, #21]

}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b00f      	add	sp, #60	; 0x3c
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	0800577c 	.word	0x0800577c

08002684 <pyd1598_check_isr_request>:
/*---------------------------Middleware Level functions-----------------------*/
/*____________________________Direct link functions___________________________*/

uint8_t pyd1598_check_isr_request(pyd1598_sensor_t sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 8002684:	b084      	sub	sp, #16
 8002686:	b5b0      	push	{r4, r5, r7, lr}
 8002688:	af00      	add	r7, sp, #0
 800268a:	250c      	movs	r5, #12
 800268c:	1d2c      	adds	r4, r5, #4
 800268e:	19e4      	adds	r4, r4, r7
 8002690:	6020      	str	r0, [r4, #0]
 8002692:	6061      	str	r1, [r4, #4]
 8002694:	60a2      	str	r2, [r4, #8]
 8002696:	60e3      	str	r3, [r4, #12]
	*motion_isr_status = sensor.motion_sensed;
 8002698:	1d2b      	adds	r3, r5, #4
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2258      	movs	r2, #88	; 0x58
 800269e:	5c9a      	ldrb	r2, [r3, r2]
 80026a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026a2:	701a      	strb	r2, [r3, #0]
	return 0;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bcb0      	pop	{r4, r5, r7}
 80026ac:	bc08      	pop	{r3}
 80026ae:	b004      	add	sp, #16
 80026b0:	4718      	bx	r3

080026b2 <pyd1598_read_wakeup_signal>:

//Use this in the main loop
uint8_t pyd1598_read_wakeup_signal(pyd1598_sensor_t *sensor,
								pyd1598_motion_isr_status_t *motion_isr_status)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]

	if( sensor->direct_link.wakeup_isr_status == PYD1598_WAKEUP_ISR_UNATTENDED)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2243      	movs	r2, #67	; 0x43
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d10a      	bne.n	80026dc <pyd1598_read_wakeup_signal+0x2a>
	{
		sensor->direct_link.wakeup_isr_status = PYD1598_WAKEUP_ISR_ATTENDED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2243      	movs	r2, #67	; 0x43
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]
		*motion_isr_status = PYD1598_MOTION_ISR_UNATTENDED;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
		sensor->motion_sensed = PYD1598_MOTION_ISR_UNATTENDED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2258      	movs	r2, #88	; 0x58
 80026d8:	2102      	movs	r1, #2
 80026da:	5499      	strb	r1, [r3, r2]
	}

	return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b002      	add	sp, #8
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <pyd1598_serin_add_all_conf>:
/*______________________________SERIN functions_______________________________*/


uint8_t pyd1598_serin_add_all_conf(pyd1598_config_t config,
													pyd1598_serin_t *serin)
{
 80026e6:	b5b0      	push	{r4, r5, r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	2408      	movs	r4, #8
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	6018      	str	r0, [r3, #0]
 80026f2:	6059      	str	r1, [r3, #4]
 80026f4:	607a      	str	r2, [r7, #4]
	uint8_t status = 0;
 80026f6:	2517      	movs	r5, #23
 80026f8:	197b      	adds	r3, r7, r5
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
	//TODO: (low) set error handler
	pyd1598_serin_add_threshold(config.threshold, serin);
 80026fe:	193b      	adds	r3, r7, r4
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	0011      	movs	r1, r2
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f838 	bl	800277c <pyd1598_serin_add_threshold>
	pyd1598_serin_add_blind_time(config.blind_time, serin);
 800270c:	193b      	adds	r3, r7, r4
 800270e:	785b      	ldrb	r3, [r3, #1]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	0011      	movs	r1, r2
 8002714:	0018      	movs	r0, r3
 8002716:	f000 f855 	bl	80027c4 <pyd1598_serin_add_blind_time>
	pyd1598_serin_add_pulse_counter(config.pulse_counter, serin);
 800271a:	193b      	adds	r3, r7, r4
 800271c:	789b      	ldrb	r3, [r3, #2]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	0011      	movs	r1, r2
 8002722:	0018      	movs	r0, r3
 8002724:	f000 f878 	bl	8002818 <pyd1598_serin_add_pulse_counter>
	pyd1598_serin_add_window_time(config.window_time, serin);
 8002728:	193b      	adds	r3, r7, r4
 800272a:	78db      	ldrb	r3, [r3, #3]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f89b 	bl	800286c <pyd1598_serin_add_window_time>
	pyd1598_serin_add_operation_mode(config.op_mode, serin);
 8002736:	193b      	adds	r3, r7, r4
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	0011      	movs	r1, r2
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f8be 	bl	80028c0 <pyd1598_serin_add_operation_mode>
	pyd1598_serin_add_signal_source(config.signal_source, serin);
 8002744:	193b      	adds	r3, r7, r4
 8002746:	795b      	ldrb	r3, [r3, #5]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	0011      	movs	r1, r2
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f8db 	bl	8002908 <pyd1598_serin_add_signal_source>
	pyd1598_serin_add_hpf_cutoff(config.hpf_cutoff, serin);
 8002752:	193b      	adds	r3, r7, r4
 8002754:	799b      	ldrb	r3, [r3, #6]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	0011      	movs	r1, r2
 800275a:	0018      	movs	r0, r3
 800275c:	f000 f8fe 	bl	800295c <pyd1598_serin_add_hpf_cutoff>
	pyd1598_serin_add_count_mode(config.count_mode, serin);
 8002760:	193b      	adds	r3, r7, r4
 8002762:	79db      	ldrb	r3, [r3, #7]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	0011      	movs	r1, r2
 8002768:	0018      	movs	r0, r3
 800276a:	f000 f921 	bl	80029b0 <pyd1598_serin_add_count_mode>
	return status;
 800276e:	197b      	adds	r3, r7, r5
 8002770:	781b      	ldrb	r3, [r3, #0]
}
 8002772:	0018      	movs	r0, r3
 8002774:	46bd      	mov	sp, r7
 8002776:	b006      	add	sp, #24
 8002778:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800277c <pyd1598_serin_add_threshold>:


//uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold, uint32_t *datagram)
uint8_t pyd1598_serin_add_threshold(uint8_t new_threshold,
														pyd1598_serin_t *serin)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	0002      	movs	r2, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	1dfb      	adds	r3, r7, #7
 8002788:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800278a:	200f      	movs	r0, #15
 800278c:	183b      	adds	r3, r7, r0
 800278e:	2200      	movs	r2, #0
 8002790:	701a      	strb	r2, [r3, #0]

	serin->config.threshold = new_threshold;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	1dfa      	adds	r2, r7, #7
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	701a      	strb	r2, [r3, #0]
	status = pyd1598_serin_add_to_datagram(new_threshold, &serin->conf_datagram,
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	3308      	adds	r3, #8
 800279e:	0019      	movs	r1, r3
 80027a0:	0005      	movs	r5, r0
 80027a2:	183c      	adds	r4, r7, r0
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <pyd1598_serin_add_threshold+0x44>)
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	7818      	ldrb	r0, [r3, #0]
 80027aa:	2311      	movs	r3, #17
 80027ac:	f000 f92a 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 80027b0:	0003      	movs	r3, r0
 80027b2:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_THRESHOLD,
											PYD1598_SHIFT_THRESHOLD);
	return status;
 80027b4:	197b      	adds	r3, r7, r5
 80027b6:	781b      	ldrb	r3, [r3, #0]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b004      	add	sp, #16
 80027be:	bdb0      	pop	{r4, r5, r7, pc}
 80027c0:	0001ffff 	.word	0x0001ffff

080027c4 <pyd1598_serin_add_blind_time>:
//Reg Val is 4 bits ...
//max_value 8sec =8000ms
//min value 0.5sec =500ms
uint8_t pyd1598_serin_add_blind_time(pyd1598_blind_time_t new_blind_time,
														pyd1598_serin_t *serin)
{
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	0002      	movs	r2, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80027d2:	200f      	movs	r0, #15
 80027d4:	183b      	adds	r3, r7, r0
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

	new_blind_time &= 0x0F;
 80027da:	1dfb      	adds	r3, r7, #7
 80027dc:	1dfa      	adds	r2, r7, #7
 80027de:	7812      	ldrb	r2, [r2, #0]
 80027e0:	210f      	movs	r1, #15
 80027e2:	400a      	ands	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]
	serin->config.blind_time = new_blind_time;
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	1dfa      	adds	r2, r7, #7
 80027ea:	7812      	ldrb	r2, [r2, #0]
 80027ec:	705a      	strb	r2, [r3, #1]
	status = pyd1598_serin_add_to_datagram(new_blind_time,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3308      	adds	r3, #8
 80027f2:	0019      	movs	r1, r3
 80027f4:	0005      	movs	r5, r0
 80027f6:	183c      	adds	r4, r7, r0
 80027f8:	4a06      	ldr	r2, [pc, #24]	; (8002814 <pyd1598_serin_add_blind_time+0x50>)
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	7818      	ldrb	r0, [r3, #0]
 80027fe:	230d      	movs	r3, #13
 8002800:	f000 f900 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 8002804:	0003      	movs	r3, r0
 8002806:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_BLIND_TIME,
											PYD1598_SHIFT_BLIND_TIME);
	return status;
 8002808:	197b      	adds	r3, r7, r5
 800280a:	781b      	ldrb	r3, [r3, #0]
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b004      	add	sp, #16
 8002812:	bdb0      	pop	{r4, r5, r7, pc}
 8002814:	01fe1fff 	.word	0x01fe1fff

08002818 <pyd1598_serin_add_pulse_counter>:

uint8_t pyd1598_serin_add_pulse_counter(pyd1598_pulse_counter_t pulse_counter,
														pyd1598_serin_t *serin)
{
 8002818:	b5b0      	push	{r4, r5, r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	0002      	movs	r2, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	1dfb      	adds	r3, r7, #7
 8002824:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002826:	200f      	movs	r0, #15
 8002828:	183b      	adds	r3, r7, r0
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]

	pulse_counter &= 0x03;
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	1dfa      	adds	r2, r7, #7
 8002832:	7812      	ldrb	r2, [r2, #0]
 8002834:	2103      	movs	r1, #3
 8002836:	400a      	ands	r2, r1
 8002838:	701a      	strb	r2, [r3, #0]
	serin->config.pulse_counter = pulse_counter;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	1dfa      	adds	r2, r7, #7
 800283e:	7812      	ldrb	r2, [r2, #0]
 8002840:	709a      	strb	r2, [r3, #2]
	status = pyd1598_serin_add_to_datagram(pulse_counter, &serin->conf_datagram,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3308      	adds	r3, #8
 8002846:	0019      	movs	r1, r3
 8002848:	0005      	movs	r5, r0
 800284a:	183c      	adds	r4, r7, r0
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <pyd1598_serin_add_pulse_counter+0x50>)
 800284e:	1dfb      	adds	r3, r7, #7
 8002850:	7818      	ldrb	r0, [r3, #0]
 8002852:	230b      	movs	r3, #11
 8002854:	f000 f8d6 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 8002858:	0003      	movs	r3, r0
 800285a:	7023      	strb	r3, [r4, #0]
											PYD1598_MASK_PULSE_COUNTER,
											PYD1598_SHIFT_PULSE_COUNTER);
	return status;
 800285c:	197b      	adds	r3, r7, r5
 800285e:	781b      	ldrb	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b004      	add	sp, #16
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	01ffe7ff 	.word	0x01ffe7ff

0800286c <pyd1598_serin_add_window_time>:
uint8_t pyd1598_serin_add_window_time(pyd1598_window_time_t window_time,
														pyd1598_serin_t *serin)
{
 800286c:	b5b0      	push	{r4, r5, r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	0002      	movs	r2, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800287a:	200f      	movs	r0, #15
 800287c:	183b      	adds	r3, r7, r0
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]

	window_time &= 0x03;
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	1dfa      	adds	r2, r7, #7
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	2103      	movs	r1, #3
 800288a:	400a      	ands	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
	serin->config.window_time = window_time;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	1dfa      	adds	r2, r7, #7
 8002892:	7812      	ldrb	r2, [r2, #0]
 8002894:	70da      	strb	r2, [r3, #3]
	status = pyd1598_serin_add_to_datagram(window_time, &serin->conf_datagram,
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	3308      	adds	r3, #8
 800289a:	0019      	movs	r1, r3
 800289c:	0005      	movs	r5, r0
 800289e:	183c      	adds	r4, r7, r0
 80028a0:	4a06      	ldr	r2, [pc, #24]	; (80028bc <pyd1598_serin_add_window_time+0x50>)
 80028a2:	1dfb      	adds	r3, r7, #7
 80028a4:	7818      	ldrb	r0, [r3, #0]
 80028a6:	2309      	movs	r3, #9
 80028a8:	f000 f8ac 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 80028ac:	0003      	movs	r3, r0
 80028ae:	7023      	strb	r3, [r4, #0]
										PYD1598_MASK_WINDOW_TIME,
										PYD1598_SHIFT_WINDOW_TIME);
	return status;
 80028b0:	197b      	adds	r3, r7, r5
 80028b2:	781b      	ldrb	r3, [r3, #0]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bdb0      	pop	{r4, r5, r7, pc}
 80028bc:	01fff9ff 	.word	0x01fff9ff

080028c0 <pyd1598_serin_add_operation_mode>:
uint8_t pyd1598_serin_add_operation_mode(pyd1598_op_mode_t new_op_mode,
														pyd1598_serin_t *serin)
{
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	0002      	movs	r2, r0
 80028c8:	6039      	str	r1, [r7, #0]
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80028ce:	200f      	movs	r0, #15
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	serin->config.op_mode = new_op_mode;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	1dfa      	adds	r2, r7, #7
 80028da:	7812      	ldrb	r2, [r2, #0]
 80028dc:	711a      	strb	r2, [r3, #4]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_op_mode,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	3308      	adds	r3, #8
 80028e2:	0019      	movs	r1, r3
 80028e4:	0005      	movs	r5, r0
 80028e6:	183c      	adds	r4, r7, r0
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <pyd1598_serin_add_operation_mode+0x44>)
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	7818      	ldrb	r0, [r3, #0]
 80028ee:	2307      	movs	r3, #7
 80028f0:	f000 f888 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 80028f4:	0003      	movs	r3, r0
 80028f6:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_OPERATION_MODES,
											PYD1598_SHIFT_OPERATION_MODES);
	return status;
 80028f8:	197b      	adds	r3, r7, r5
 80028fa:	781b      	ldrb	r3, [r3, #0]
}
 80028fc:	0018      	movs	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	b004      	add	sp, #16
 8002902:	bdb0      	pop	{r4, r5, r7, pc}
 8002904:	01fffe7f 	.word	0x01fffe7f

08002908 <pyd1598_serin_add_signal_source>:
uint8_t pyd1598_serin_add_signal_source(pyd1598_signal_source_t signal_source,
														pyd1598_serin_t *serin)
{
 8002908:	b5b0      	push	{r4, r5, r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	0002      	movs	r2, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 8002916:	200f      	movs	r0, #15
 8002918:	183b      	adds	r3, r7, r0
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]

	signal_source &= 0x03;
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	1dfa      	adds	r2, r7, #7
 8002922:	7812      	ldrb	r2, [r2, #0]
 8002924:	2103      	movs	r1, #3
 8002926:	400a      	ands	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]
	serin->config.signal_source = signal_source;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	1dfa      	adds	r2, r7, #7
 800292e:	7812      	ldrb	r2, [r2, #0]
 8002930:	715a      	strb	r2, [r3, #5]
	status = pyd1598_serin_add_to_datagram((uint8_t) signal_source,
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	3308      	adds	r3, #8
 8002936:	0019      	movs	r1, r3
 8002938:	0005      	movs	r5, r0
 800293a:	183c      	adds	r4, r7, r0
 800293c:	4a06      	ldr	r2, [pc, #24]	; (8002958 <pyd1598_serin_add_signal_source+0x50>)
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	7818      	ldrb	r0, [r3, #0]
 8002942:	2305      	movs	r3, #5
 8002944:	f000 f85e 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 8002948:	0003      	movs	r3, r0
 800294a:	7023      	strb	r3, [r4, #0]
												&serin->conf_datagram,
												PYD1598_MASK_SIGNAL_SOURCE,
												PYD1598_SHIFT_SIGNAL_SOURCE);
	return status;
 800294c:	197b      	adds	r3, r7, r5
 800294e:	781b      	ldrb	r3, [r3, #0]
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bdb0      	pop	{r4, r5, r7, pc}
 8002958:	01ffff9f 	.word	0x01ffff9f

0800295c <pyd1598_serin_add_hpf_cutoff>:

uint8_t pyd1598_serin_add_hpf_cutoff(pyd1598_hpf_cutoff_t new_hpf_cutoff,
														pyd1598_serin_t *serin)
{
 800295c:	b5b0      	push	{r4, r5, r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	0002      	movs	r2, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	1dfb      	adds	r3, r7, #7
 8002968:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 800296a:	200f      	movs	r0, #15
 800296c:	183b      	adds	r3, r7, r0
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]

	new_hpf_cutoff &= 0x03;
 8002972:	1dfb      	adds	r3, r7, #7
 8002974:	1dfa      	adds	r2, r7, #7
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	2103      	movs	r1, #3
 800297a:	400a      	ands	r2, r1
 800297c:	701a      	strb	r2, [r3, #0]
	serin->config.hpf_cutoff = new_hpf_cutoff;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	1dfa      	adds	r2, r7, #7
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	719a      	strb	r2, [r3, #6]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_hpf_cutoff,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3308      	adds	r3, #8
 800298a:	0019      	movs	r1, r3
 800298c:	0005      	movs	r5, r0
 800298e:	183c      	adds	r4, r7, r0
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <pyd1598_serin_add_hpf_cutoff+0x50>)
 8002992:	1dfb      	adds	r3, r7, #7
 8002994:	7818      	ldrb	r0, [r3, #0]
 8002996:	2302      	movs	r3, #2
 8002998:	f000 f834 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 800299c:	0003      	movs	r3, r0
 800299e:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_HPF_CUTOFF,
											PYD1598_SHIFT_HPF_CUTOFF);
	return status;
 80029a0:	197b      	adds	r3, r7, r5
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	01fffffb 	.word	0x01fffffb

080029b0 <pyd1598_serin_add_count_mode>:

uint8_t pyd1598_serin_add_count_mode(pyd1598_count_mode_t new_count_mode,
														pyd1598_serin_t *serin)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	0002      	movs	r2, r0
 80029b8:	6039      	str	r1, [r7, #0]
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	701a      	strb	r2, [r3, #0]
	uint8_t status = 0;
 80029be:	200f      	movs	r0, #15
 80029c0:	183b      	adds	r3, r7, r0
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]

	new_count_mode &= 0x03;
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	1dfa      	adds	r2, r7, #7
 80029ca:	7812      	ldrb	r2, [r2, #0]
 80029cc:	2103      	movs	r1, #3
 80029ce:	400a      	ands	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
	serin->config.count_mode = new_count_mode;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	1dfa      	adds	r2, r7, #7
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	71da      	strb	r2, [r3, #7]
	status = pyd1598_serin_add_to_datagram((uint8_t) new_count_mode,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	3308      	adds	r3, #8
 80029de:	0019      	movs	r1, r3
 80029e0:	0005      	movs	r5, r0
 80029e2:	183c      	adds	r4, r7, r0
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <pyd1598_serin_add_count_mode+0x50>)
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	7818      	ldrb	r0, [r3, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	f000 f80a 	bl	8002a04 <pyd1598_serin_add_to_datagram>
 80029f0:	0003      	movs	r3, r0
 80029f2:	7023      	strb	r3, [r4, #0]
											&serin->conf_datagram,
											PYD1598_MASK_COUNT_MODE,
											PYD1598_SHIFT_COUNT_MODE);
	return status;
 80029f4:	197b      	adds	r3, r7, r5
 80029f6:	781b      	ldrb	r3, [r3, #0]
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b004      	add	sp, #16
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	01fffffd 	.word	0x01fffffd

08002a04 <pyd1598_serin_add_to_datagram>:

uint8_t pyd1598_serin_add_to_datagram(uint8_t data, uint32_t *datagram,
												uint32_t mask, uint8_t shift)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	0019      	movs	r1, r3
 8002a10:	240f      	movs	r4, #15
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	1c02      	adds	r2, r0, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	200e      	movs	r0, #14
 8002a1a:	183b      	adds	r3, r7, r0
 8002a1c:	1c0a      	adds	r2, r1, #0
 8002a1e:	701a      	strb	r2, [r3, #0]
	uint32_t old_config = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
	uint32_t new_config = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	613b      	str	r3, [r7, #16]

	//generating copy of the datagram to handle the changes
	//(protecting from possible changes due to interrupts)
	old_config = *datagram;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	617b      	str	r3, [r7, #20]

	//Clear section of the datagram copy to set the new data
	old_config &= mask;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4013      	ands	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

	//Shifting data to the position of the datagram copy
	new_config |= (((uint32_t) data) << shift);
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	183b      	adds	r3, r7, r0
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

	//Adding data to the datagram copy
	new_config |= old_config;
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]

	//substitute the values of the datagram with the new configuration
	*datagram = new_config;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	601a      	str	r2, [r3, #0]

	return 0;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b007      	add	sp, #28
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <pyd1598_serin_set_zero_pulse>:
//Information from:
//https://www.excelitas.com/product/pyd-1588-pyd-1598-low-power-digipyros

//TODO: (high) change this to decouple from the main.h header.
void pyd1598_serin_set_zero_pulse(pyd1598_hardware_interface_t gpio)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	003b      	movs	r3, r7
 8002a68:	6018      	str	r0, [r3, #0]
 8002a6a:	6059      	str	r1, [r3, #4]
	//This should takes less than t_{DL}=200-2000ns
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002a6c:	003b      	movs	r3, r7
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	003b      	movs	r3, r7
 8002a72:	889b      	ldrh	r3, [r3, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	0019      	movs	r1, r3
 8002a78:	f001 f8f5 	bl	8003c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002a7c:	003b      	movs	r3, r7
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	003b      	movs	r3, r7
 8002a82:	889b      	ldrh	r3, [r3, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	0019      	movs	r1, r3
 8002a88:	f001 f8ed 	bl	8003c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002a8c:	003b      	movs	r3, r7
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	003b      	movs	r3, r7
 8002a92:	889b      	ldrh	r3, [r3, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	0019      	movs	r1, r3
 8002a98:	f001 f8e5 	bl	8003c66 <HAL_GPIO_WritePin>
}
 8002a9c:	46c0      	nop			; (mov r8, r8)
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b002      	add	sp, #8
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <pyd1598_serin_set_one_pulse>:

void pyd1598_serin_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	003b      	movs	r3, r7
 8002aac:	6018      	str	r0, [r3, #0]
 8002aae:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002ab0:	003b      	movs	r3, r7
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	889b      	ldrh	r3, [r3, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	0019      	movs	r1, r3
 8002abc:	f001 f8d3 	bl	8003c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	003b      	movs	r3, r7
 8002ac6:	889b      	ldrh	r3, [r3, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	0019      	movs	r1, r3
 8002acc:	f001 f8cb 	bl	8003c66 <HAL_GPIO_WritePin>
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <pyd1598_direct_link_set_as_output>:
{
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}

void pyd1598_direct_link_set_as_output(pyd1598_hardware_interface_t gpio)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	003b      	movs	r3, r7
 8002ae0:	6018      	str	r0, [r3, #0]
 8002ae2:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_output(gpio.port, gpio.pin, gpio.irq_type);
 8002ae4:	003b      	movs	r3, r7
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	003b      	movs	r3, r7
 8002aea:	8899      	ldrh	r1, [r3, #4]
 8002aec:	003b      	movs	r3, r7
 8002aee:	799b      	ldrb	r3, [r3, #6]
 8002af0:	b25b      	sxtb	r3, r3
 8002af2:	001a      	movs	r2, r3
 8002af4:	f7fd fe1c 	bl	8000730 <HAL_DIRECT_LINK_conf_as_output>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <pyd1598_direct_link_set_as_input>:

void pyd1598_direct_link_set_as_input(pyd1598_hardware_interface_t gpio)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	003b      	movs	r3, r7
 8002b08:	6018      	str	r0, [r3, #0]
 8002b0a:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_input(gpio.port, gpio.pin, gpio.irq_type);
 8002b0c:	003b      	movs	r3, r7
 8002b0e:	6818      	ldr	r0, [r3, #0]
 8002b10:	003b      	movs	r3, r7
 8002b12:	8899      	ldrh	r1, [r3, #4]
 8002b14:	003b      	movs	r3, r7
 8002b16:	799b      	ldrb	r3, [r3, #6]
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	001a      	movs	r2, r3
 8002b1c:	f7fd fd92 	bl	8000644 <HAL_DIRECT_LINK_conf_as_input>
}
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <pyd1598_direct_link_set_as_interrupt_input>:

void pyd1598_direct_link_set_as_interrupt_input(pyd1598_hardware_interface_t gpio)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	003b      	movs	r3, r7
 8002b30:	6018      	str	r0, [r3, #0]
 8002b32:	6059      	str	r1, [r3, #4]
	HAL_DIRECT_LINK_conf_as_interrupt_input(gpio.port, gpio.pin, gpio.irq_type);
 8002b34:	003b      	movs	r3, r7
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	003b      	movs	r3, r7
 8002b3a:	8899      	ldrh	r1, [r3, #4]
 8002b3c:	003b      	movs	r3, r7
 8002b3e:	799b      	ldrb	r3, [r3, #6]
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	001a      	movs	r2, r3
 8002b44:	f7fd fdb4 	bl	80006b0 <HAL_DIRECT_LINK_conf_as_interrupt_input>
}
 8002b48:	46c0      	nop			; (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b002      	add	sp, #8
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <pyd1598_direct_link_set_one_pulse>:
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
}
void pyd1598_direct_link_set_one_pulse(pyd1598_hardware_interface_t gpio)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	003b      	movs	r3, r7
 8002b58:	6018      	str	r0, [r3, #0]
 8002b5a:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	6818      	ldr	r0, [r3, #0]
 8002b60:	003b      	movs	r3, r7
 8002b62:	889b      	ldrh	r3, [r3, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	0019      	movs	r1, r3
 8002b68:	f001 f87d 	bl	8003c66 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_SET);
 8002b6c:	003b      	movs	r3, r7
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	003b      	movs	r3, r7
 8002b72:	889b      	ldrh	r3, [r3, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	0019      	movs	r1, r3
 8002b78:	f001 f875 	bl	8003c66 <HAL_GPIO_WritePin>
}
 8002b7c:	46c0      	nop			; (mov r8, r8)
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b002      	add	sp, #8
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <pyd1598_direct_link_set_negative_edge>:
void pyd1598_direct_link_set_negative_edge(pyd1598_hardware_interface_t gpio)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	003b      	movs	r3, r7
 8002b8c:	6018      	str	r0, [r3, #0]
 8002b8e:	6059      	str	r1, [r3, #4]
	HAL_GPIO_WritePin(gpio.port, gpio.pin, GPIO_PIN_RESET);
 8002b90:	003b      	movs	r3, r7
 8002b92:	6818      	ldr	r0, [r3, #0]
 8002b94:	003b      	movs	r3, r7
 8002b96:	889b      	ldrh	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	f001 f863 	bl	8003c66 <HAL_GPIO_WritePin>
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b002      	add	sp, #8
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <pyd1598_direct_link_read_pin>:
}


uint8_t pyd1598_direct_link_read_pin(pyd1598_hardware_interface_t gpio,
											uint64_t *buffer, uint32_t shift)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002baa:	b08f      	sub	sp, #60	; 0x3c
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	2608      	movs	r6, #8
 8002bb0:	2418      	movs	r4, #24
 8002bb2:	1935      	adds	r5, r6, r4
 8002bb4:	2608      	movs	r6, #8
 8002bb6:	19be      	adds	r6, r7, r6
 8002bb8:	19ae      	adds	r6, r5, r6
 8002bba:	6030      	str	r0, [r6, #0]
 8002bbc:	6071      	str	r1, [r6, #4]
 8002bbe:	627a      	str	r2, [r7, #36]	; 0x24
 8002bc0:	623b      	str	r3, [r7, #32]
	static uint64_t readout_mask = (uint64_t) PYD1598_DIRECT_LINK_MASK;
	GPIO_PinState pin_value = GPIO_PIN_RESET;
 8002bc2:	2017      	movs	r0, #23
 8002bc4:	0026      	movs	r6, r4
 8002bc6:	1983      	adds	r3, r0, r6
 8002bc8:	2208      	movs	r2, #8
 8002bca:	4694      	mov	ip, r2
 8002bcc:	44bc      	add	ip, r7
 8002bce:	4463      	add	r3, ip
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

	pin_value = HAL_GPIO_ReadPin(gpio.port, gpio.pin);
 8002bd4:	2108      	movs	r1, #8
 8002bd6:	198b      	adds	r3, r1, r6
 8002bd8:	2208      	movs	r2, #8
 8002bda:	4694      	mov	ip, r2
 8002bdc:	44bc      	add	ip, r7
 8002bde:	4463      	add	r3, ip
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	198b      	adds	r3, r1, r6
 8002be4:	2108      	movs	r1, #8
 8002be6:	468c      	mov	ip, r1
 8002be8:	44bc      	add	ip, r7
 8002bea:	4463      	add	r3, ip
 8002bec:	889b      	ldrh	r3, [r3, #4]
 8002bee:	0034      	movs	r4, r6
 8002bf0:	1981      	adds	r1, r0, r6
 8002bf2:	2008      	movs	r0, #8
 8002bf4:	1838      	adds	r0, r7, r0
 8002bf6:	180e      	adds	r6, r1, r0
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	f001 f816 	bl	8003c2c <HAL_GPIO_ReadPin>
 8002c00:	0003      	movs	r3, r0
 8002c02:	7033      	strb	r3, [r6, #0]

	if(pin_value == GPIO_PIN_SET)
 8002c04:	2017      	movs	r0, #23
 8002c06:	0026      	movs	r6, r4
 8002c08:	1983      	adds	r3, r0, r6
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	44bc      	add	ip, r7
 8002c10:	4463      	add	r3, ip
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d110      	bne.n	8002c3a <pyd1598_direct_link_read_pin+0x92>
	{
		*buffer  |= readout_mask;
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	6818      	ldr	r0, [r3, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	4b27      	ldr	r3, [pc, #156]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	0006      	movs	r6, r0
 8002c26:	4316      	orrs	r6, r2
 8002c28:	613e      	str	r6, [r7, #16]
 8002c2a:	4319      	orrs	r1, r3
 8002c2c:	6179      	str	r1, [r7, #20]
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	6939      	ldr	r1, [r7, #16]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	6019      	str	r1, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	e020      	b.n	8002c7c <pyd1598_direct_link_read_pin+0xd4>
	}
	else if(pin_value == GPIO_PIN_RESET)
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	2218      	movs	r2, #24
 8002c3e:	189b      	adds	r3, r3, r2
 8002c40:	2208      	movs	r2, #8
 8002c42:	4694      	mov	ip, r2
 8002c44:	44bc      	add	ip, r7
 8002c46:	4463      	add	r3, ip
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d115      	bne.n	8002c7a <pyd1598_direct_link_read_pin+0xd2>
	{
		*buffer  &= ~readout_mask;
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	4919      	ldr	r1, [pc, #100]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002c56:	6808      	ldr	r0, [r1, #0]
 8002c58:	6849      	ldr	r1, [r1, #4]
 8002c5a:	43c6      	mvns	r6, r0
 8002c5c:	61be      	str	r6, [r7, #24]
 8002c5e:	43c9      	mvns	r1, r1
 8002c60:	61f9      	str	r1, [r7, #28]
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	4011      	ands	r1, r2
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	69f9      	ldr	r1, [r7, #28]
 8002c6a:	4019      	ands	r1, r3
 8002c6c:	60f9      	str	r1, [r7, #12]
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	6019      	str	r1, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	e000      	b.n	8002c7c <pyd1598_direct_link_read_pin+0xd4>
	}
	else
	{
		__NOP();
 8002c7a:	46c0      	nop			; (mov r8, r8)
	}

	readout_mask = (readout_mask >> 1);
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	07d9      	lsls	r1, r3, #31
 8002c84:	0850      	lsrs	r0, r2, #1
 8002c86:	6038      	str	r0, [r7, #0]
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	4308      	orrs	r0, r1
 8002c8c:	6038      	str	r0, [r7, #0]
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002c94:	6839      	ldr	r1, [r7, #0]
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	6019      	str	r1, [r3, #0]
 8002c9a:	605a      	str	r2, [r3, #4]

	if(readout_mask == ((uint64_t) 0))
 8002c9c:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	0011      	movs	r1, r2
 8002ca4:	4319      	orrs	r1, r3
 8002ca6:	d104      	bne.n	8002cb2 <pyd1598_direct_link_read_pin+0x10a>
	{
		readout_mask  = (uint64_t) PYD1598_DIRECT_LINK_MASK;
 8002ca8:	4904      	ldr	r1, [pc, #16]	; (8002cbc <pyd1598_direct_link_read_pin+0x114>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	600a      	str	r2, [r1, #0]
 8002cb0:	604b      	str	r3, [r1, #4]
	}
	return 0;
 8002cb2:	2300      	movs	r3, #0

}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b00f      	add	sp, #60	; 0x3c
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cbc:	20000008 	.word	0x20000008

08002cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_MspInit+0x50>)
 8002cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_MspInit+0x50>)
 8002ccc:	2101      	movs	r1, #1
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <HAL_MspInit+0x50>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	4013      	ands	r3, r2
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cde:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <HAL_MspInit+0x50>)
 8002ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_MspInit+0x50>)
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0549      	lsls	r1, r1, #21
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cec:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_MspInit+0x50>)
 8002cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	055b      	lsls	r3, r3, #21
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	603b      	str	r3, [r7, #0]
 8002cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8002cfa:	2008      	movs	r0, #8
 8002cfc:	f000 fc3c 	bl	8003578 <HAL_SYSCFG_EnableRemap>
  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA12);
 8002d00:	2010      	movs	r0, #16
 8002d02:	f000 fc39 	bl	8003578 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	b002      	add	sp, #8
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	40021000 	.word	0x40021000

08002d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d18:	e7fe      	b.n	8002d18 <NMI_Handler+0x4>

08002d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d1e:	e7fe      	b.n	8002d1e <HardFault_Handler+0x4>

08002d20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d38:	f000 fbde 	bl	80034f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UV_IN_Pin);
 8002d46:	2004      	movs	r0, #4
 8002d48:	f000 ffc6 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP2_IN_Pin);
 8002d4c:	2008      	movs	r0, #8
 8002d4e:	f000 ffc3 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIRLINK_Pin);
 8002d5c:	2080      	movs	r0, #128	; 0x80
 8002d5e:	f000 ffbb 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LAMP1_IN_Pin);
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 ffb6 	bl	8003cd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d78:	4b03      	ldr	r3, [pc, #12]	; (8002d88 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f001 fc66 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	200006f0 	.word	0x200006f0

08002d8c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <TIM1_CC_IRQHandler+0x14>)
 8002d92:	0018      	movs	r0, r3
 8002d94:	f001 fc5a 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	200006f0 	.word	0x200006f0

08002da4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002da8:	4b03      	ldr	r3, [pc, #12]	; (8002db8 <TIM14_IRQHandler+0x14>)
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 fc4e 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002db0:	46c0      	nop			; (mov r8, r8)
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	20000788 	.word	0x20000788

08002dbc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002dc0:	4b03      	ldr	r3, [pc, #12]	; (8002dd0 <TIM16_IRQHandler+0x14>)
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f001 fc42 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002dc8:	46c0      	nop			; (mov r8, r8)
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	200007d4 	.word	0x200007d4

08002dd4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002dd8:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <TIM17_IRQHandler+0x14>)
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f001 fc36 	bl	800464c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	20000820 	.word	0x20000820

08002dec <switch_selector_setup>:
#include "switch_selector.h"

uint8_t switch_selector_setup(switch_selector_t *switch_selector,
								switch_selector_gpio_t *switch_selector_gpio,
								uint8_t switch_size)
{
 8002dec:	b5b0      	push	{r4, r5, r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	1dfb      	adds	r3, r7, #7
 8002df8:	701a      	strb	r2, [r3, #0]

	uint8_t status = 0;
 8002dfa:	231f      	movs	r3, #31
 8002dfc:	18fb      	adds	r3, r7, r3
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8002e02:	231e      	movs	r3, #30
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]



	if(switch_size > 32)
 8002e0a:	1dfb      	adds	r3, r7, #7
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d901      	bls.n	8002e16 <switch_selector_setup+0x2a>
	{
		return 2;
 8002e12:	2302      	movs	r3, #2
 8002e14:	e050      	b.n	8002eb8 <switch_selector_setup+0xcc>
	}


	switch_selector->value = 0;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
	switch_selector->switch_size = switch_size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1dfa      	adds	r2, r7, #7
 8002e20:	7812      	ldrb	r2, [r2, #0]
 8002e22:	711a      	strb	r2, [r3, #4]
	switch_selector->switch_selector_gpio = (switch_selector_gpio_t*)malloc(switch_size * sizeof(switch_selector_gpio_t) );
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f002 fb60 	bl	80054f0 <malloc>
 8002e30:	0003      	movs	r3, r0
 8002e32:	001a      	movs	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	601a      	str	r2, [r3, #0]
	uint32_t value;
	switch_selector_status_t pin_status;

	for(idx = 0; idx < switch_size; idx++)
 8002e38:	231e      	movs	r3, #30
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
 8002e40:	e030      	b.n	8002ea4 <switch_selector_setup+0xb8>
	{
		if((switch_selector_gpio + idx) != NULL)
 8002e42:	201e      	movs	r0, #30
 8002e44:	183b      	adds	r3, r7, r0
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <switch_selector_setup+0x8c>
		{
//			switch_selector->switch_selector_gpio[idx] = switch_selector_gpio[idx];
			*(switch_selector->switch_selector_gpio + idx) = *(switch_selector_gpio + idx);
 8002e52:	183b      	adds	r3, r7, r0
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	18d1      	adds	r1, r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	183b      	adds	r3, r7, r0
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	18d3      	adds	r3, r2, r3
 8002e68:	000a      	movs	r2, r1
 8002e6a:	ca03      	ldmia	r2!, {r0, r1}
 8002e6c:	c303      	stmia	r3!, {r0, r1}

			status = 0;
 8002e6e:	231f      	movs	r3, #31
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
 8002e76:	e004      	b.n	8002e82 <switch_selector_setup+0x96>
		}
		else
		{
			status = 1;
 8002e78:	231f      	movs	r3, #31
 8002e7a:	18fb      	adds	r3, r7, r3
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	701a      	strb	r2, [r3, #0]
			break;
 8002e80:	e017      	b.n	8002eb2 <switch_selector_setup+0xc6>
		}

		switch_selector_read_bit(switch_selector, idx, &pin_status, &value);
 8002e82:	2318      	movs	r3, #24
 8002e84:	18fc      	adds	r4, r7, r3
 8002e86:	2317      	movs	r3, #23
 8002e88:	18fa      	adds	r2, r7, r3
 8002e8a:	251e      	movs	r5, #30
 8002e8c:	197b      	adds	r3, r7, r5
 8002e8e:	7819      	ldrb	r1, [r3, #0]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	0023      	movs	r3, r4
 8002e94:	f000 f814 	bl	8002ec0 <switch_selector_read_bit>
	for(idx = 0; idx < switch_size; idx++)
 8002e98:	0029      	movs	r1, r5
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	3201      	adds	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	231e      	movs	r3, #30
 8002ea6:	18fa      	adds	r2, r7, r3
 8002ea8:	1dfb      	adds	r3, r7, #7
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d3c7      	bcc.n	8002e42 <switch_selector_setup+0x56>

	}

	return status;
 8002eb2:	231f      	movs	r3, #31
 8002eb4:	18fb      	adds	r3, r7, r3
 8002eb6:	781b      	ldrb	r3, [r3, #0]

}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b008      	add	sp, #32
 8002ebe:	bdb0      	pop	{r4, r5, r7, pc}

08002ec0 <switch_selector_read_bit>:

uint8_t switch_selector_read_bit(switch_selector_t *switch_selector,
										uint8_t pin,
										switch_selector_status_t *pin_status,
										uint32_t *value)
{
 8002ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec2:	b087      	sub	sp, #28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	250b      	movs	r5, #11
 8002ece:	197b      	adds	r3, r7, r5
 8002ed0:	1c0a      	adds	r2, r1, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
	GPIO_PinState pin_value;
	uint32_t switch_mask = 0x00000001;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	617b      	str	r3, [r7, #20]

	switch_mask <<= pin;
 8002ed8:	197b      	adds	r3, r7, r5
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	0013      	movs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]

	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	197b      	adds	r3, r7, r5
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	6818      	ldr	r0, [r3, #0]
							(switch_selector->switch_selector_gpio + pin)->pin);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	197b      	adds	r3, r7, r5
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	18d3      	adds	r3, r2, r3
	pin_value = HAL_GPIO_ReadPin((switch_selector->switch_selector_gpio + pin)->port,
 8002efe:	889b      	ldrh	r3, [r3, #4]
 8002f00:	2613      	movs	r6, #19
 8002f02:	19bc      	adds	r4, r7, r6
 8002f04:	0019      	movs	r1, r3
 8002f06:	f000 fe91 	bl	8003c2c <HAL_GPIO_ReadPin>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	7023      	strb	r3, [r4, #0]

	if(pin_value == GPIO_PIN_SET)
 8002f0e:	19bb      	adds	r3, r7, r6
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d10e      	bne.n	8002f34 <switch_selector_read_bit+0x74>
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_ON;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	197b      	adds	r3, r7, r5
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	18d3      	adds	r3, r2, r3
 8002f22:	2201      	movs	r2, #1
 8002f24:	719a      	strb	r2, [r3, #6]

		switch_selector->value |= switch_mask;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	e00f      	b.n	8002f54 <switch_selector_read_bit+0x94>
	}
	else
	{
		(switch_selector->switch_selector_gpio + pin)->status = SWITCH_SELECTOR_OFF;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	230b      	movs	r3, #11
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	2200      	movs	r2, #0
 8002f44:	719a      	strb	r2, [r3, #6]

		switch_selector->value &= ~switch_mask;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	43d2      	mvns	r2, r2
 8002f4e:	401a      	ands	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	609a      	str	r2, [r3, #8]
	}

	*pin_status = (switch_selector->switch_selector_gpio + pin)->status;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	230b      	movs	r3, #11
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	799a      	ldrb	r2, [r3, #6]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	701a      	strb	r2, [r3, #0]

	*value = switch_selector->value;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	601a      	str	r2, [r3, #0]

	return 0;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b007      	add	sp, #28
 8002f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f84:	4a14      	ldr	r2, [pc, #80]	; (8002fd8 <_sbrk+0x5c>)
 8002f86:	4b15      	ldr	r3, [pc, #84]	; (8002fdc <_sbrk+0x60>)
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f90:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <_sbrk+0x64>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <_sbrk+0x64>)
 8002f9a:	4a12      	ldr	r2, [pc, #72]	; (8002fe4 <_sbrk+0x68>)
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9e:	4b10      	ldr	r3, [pc, #64]	; (8002fe0 <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d207      	bcs.n	8002fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fac:	f002 fb78 	bl	80056a0 <__errno>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	220c      	movs	r2, #12
 8002fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	425b      	negs	r3, r3
 8002fba:	e009      	b.n	8002fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <_sbrk+0x64>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc2:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <_sbrk+0x64>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	18d2      	adds	r2, r2, r3
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <_sbrk+0x64>)
 8002fcc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002fce:	68fb      	ldr	r3, [r7, #12]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	20001800 	.word	0x20001800
 8002fdc:	00000400 	.word	0x00000400
 8002fe0:	200006ec 	.word	0x200006ec
 8002fe4:	200009b8 	.word	0x200009b8

08002fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <SystemInit+0x14>)
 8002fee:	2280      	movs	r2, #128	; 0x80
 8002ff0:	0512      	lsls	r2, r2, #20
 8002ff2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ff4:	46c0      	nop			; (mov r8, r8)
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b088      	sub	sp, #32
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003006:	2310      	movs	r3, #16
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	0018      	movs	r0, r3
 800300c:	2310      	movs	r3, #16
 800300e:	001a      	movs	r2, r3
 8003010:	2100      	movs	r1, #0
 8003012:	f002 fb2b 	bl	800566c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	0018      	movs	r0, r3
 800301a:	230c      	movs	r3, #12
 800301c:	001a      	movs	r2, r3
 800301e:	2100      	movs	r1, #0
 8003020:	f002 fb24 	bl	800566c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003024:	4b21      	ldr	r3, [pc, #132]	; (80030ac <MX_TIM1_Init+0xac>)
 8003026:	4a22      	ldr	r2, [pc, #136]	; (80030b0 <MX_TIM1_Init+0xb0>)
 8003028:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <MX_TIM1_Init+0xac>)
 800302c:	222f      	movs	r2, #47	; 0x2f
 800302e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <MX_TIM1_Init+0xac>)
 8003032:	2200      	movs	r2, #0
 8003034:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <MX_TIM1_Init+0xac>)
 8003038:	22fa      	movs	r2, #250	; 0xfa
 800303a:	0092      	lsls	r2, r2, #2
 800303c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800303e:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <MX_TIM1_Init+0xac>)
 8003040:	2200      	movs	r2, #0
 8003042:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003044:	4b19      	ldr	r3, [pc, #100]	; (80030ac <MX_TIM1_Init+0xac>)
 8003046:	2200      	movs	r2, #0
 8003048:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <MX_TIM1_Init+0xac>)
 800304c:	2200      	movs	r2, #0
 800304e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003050:	4b16      	ldr	r3, [pc, #88]	; (80030ac <MX_TIM1_Init+0xac>)
 8003052:	0018      	movs	r0, r3
 8003054:	f001 f99a 	bl	800438c <HAL_TIM_Base_Init>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 800305c:	f7ff f812 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003060:	2110      	movs	r1, #16
 8003062:	187b      	adds	r3, r7, r1
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	0152      	lsls	r2, r2, #5
 8003068:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800306a:	187a      	adds	r2, r7, r1
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <MX_TIM1_Init+0xac>)
 800306e:	0011      	movs	r1, r2
 8003070:	0018      	movs	r0, r3
 8003072:	f001 fc4d 	bl	8004910 <HAL_TIM_ConfigClockSource>
 8003076:	1e03      	subs	r3, r0, #0
 8003078:	d001      	beq.n	800307e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800307a:	f7ff f803 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800307e:	1d3b      	adds	r3, r7, #4
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003090:	1d3a      	adds	r2, r7, #4
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_TIM1_Init+0xac>)
 8003094:	0011      	movs	r1, r2
 8003096:	0018      	movs	r0, r3
 8003098:	f002 f9b0 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d001      	beq.n	80030a4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80030a0:	f7fe fff0 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b008      	add	sp, #32
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200006f0 	.word	0x200006f0
 80030b0:	40012c00 	.word	0x40012c00

080030b4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b090      	sub	sp, #64	; 0x40
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80030ba:	232c      	movs	r3, #44	; 0x2c
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	0018      	movs	r0, r3
 80030c0:	2314      	movs	r3, #20
 80030c2:	001a      	movs	r2, r3
 80030c4:	2100      	movs	r1, #0
 80030c6:	f002 fad1 	bl	800566c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ca:	2320      	movs	r3, #32
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	0018      	movs	r0, r3
 80030d0:	230c      	movs	r3, #12
 80030d2:	001a      	movs	r2, r3
 80030d4:	2100      	movs	r1, #0
 80030d6:	f002 fac9 	bl	800566c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	0018      	movs	r0, r3
 80030de:	231c      	movs	r3, #28
 80030e0:	001a      	movs	r2, r3
 80030e2:	2100      	movs	r1, #0
 80030e4:	f002 fac2 	bl	800566c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030e8:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <MX_TIM3_Init+0x104>)
 80030ea:	4a34      	ldr	r2, [pc, #208]	; (80031bc <MX_TIM3_Init+0x108>)
 80030ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80030ee:	4b32      	ldr	r3, [pc, #200]	; (80031b8 <MX_TIM3_Init+0x104>)
 80030f0:	222f      	movs	r2, #47	; 0x2f
 80030f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <MX_TIM3_Init+0x104>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030fa:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <MX_TIM3_Init+0x104>)
 80030fc:	4a30      	ldr	r2, [pc, #192]	; (80031c0 <MX_TIM3_Init+0x10c>)
 80030fe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003100:	4b2d      	ldr	r3, [pc, #180]	; (80031b8 <MX_TIM3_Init+0x104>)
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003106:	4b2c      	ldr	r3, [pc, #176]	; (80031b8 <MX_TIM3_Init+0x104>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800310c:	4b2a      	ldr	r3, [pc, #168]	; (80031b8 <MX_TIM3_Init+0x104>)
 800310e:	0018      	movs	r0, r3
 8003110:	f001 f93c 	bl	800438c <HAL_TIM_Base_Init>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d001      	beq.n	800311c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003118:	f7fe ffb4 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800311c:	4b26      	ldr	r3, [pc, #152]	; (80031b8 <MX_TIM3_Init+0x104>)
 800311e:	0018      	movs	r0, r3
 8003120:	f001 f9da 	bl	80044d8 <HAL_TIM_OC_Init>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8003128:	f7fe ffac 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim3, TIM_OPMODE_SINGLE) != HAL_OK)
 800312c:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <MX_TIM3_Init+0x104>)
 800312e:	2108      	movs	r1, #8
 8003130:	0018      	movs	r0, r3
 8003132:	f001 fa31 	bl	8004598 <HAL_TIM_OnePulse_Init>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800313a:	f7fe ffa3 	bl	8002084 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	187b      	adds	r3, r7, r1
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8003146:	187b      	adds	r3, r7, r1
 8003148:	2210      	movs	r2, #16
 800314a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800314c:	187a      	adds	r2, r7, r1
 800314e:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <MX_TIM3_Init+0x104>)
 8003150:	0011      	movs	r1, r2
 8003152:	0018      	movs	r0, r3
 8003154:	f001 fcb2 	bl	8004abc <HAL_TIM_SlaveConfigSynchro>
 8003158:	1e03      	subs	r3, r0, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800315c:	f7fe ff92 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003160:	2120      	movs	r1, #32
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800316e:	187a      	adds	r2, r7, r1
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <MX_TIM3_Init+0x104>)
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f002 f941 	bl	80053fc <HAL_TIMEx_MasterConfigSynchronization>
 800317a:	1e03      	subs	r3, r0, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800317e:	f7fe ff81 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 130;
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2282      	movs	r2, #130	; 0x82
 800318c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003194:	1d3b      	adds	r3, r7, #4
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800319a:	1d39      	adds	r1, r7, #4
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <MX_TIM3_Init+0x104>)
 800319e:	2200      	movs	r2, #0
 80031a0:	0018      	movs	r0, r3
 80031a2:	f001 fb55 	bl	8004850 <HAL_TIM_OC_ConfigChannel>
 80031a6:	1e03      	subs	r3, r0, #0
 80031a8:	d001      	beq.n	80031ae <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 80031aa:	f7fe ff6b 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	46bd      	mov	sp, r7
 80031b2:	b010      	add	sp, #64	; 0x40
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	2000073c 	.word	0x2000073c
 80031bc:	40000400 	.word	0x40000400
 80031c0:	0000ffff 	.word	0x0000ffff

080031c4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80031c8:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <MX_TIM14_Init+0x40>)
 80031ca:	4a0f      	ldr	r2, [pc, #60]	; (8003208 <MX_TIM14_Init+0x44>)
 80031cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 80031ce:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <MX_TIM14_Init+0x40>)
 80031d0:	222f      	movs	r2, #47	; 0x2f
 80031d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <MX_TIM14_Init+0x40>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 145;
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MX_TIM14_Init+0x40>)
 80031dc:	2291      	movs	r2, #145	; 0x91
 80031de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <MX_TIM14_Init+0x40>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MX_TIM14_Init+0x40>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <MX_TIM14_Init+0x40>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f001 f8cc 	bl	800438c <HAL_TIM_Base_Init>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80031f8:	f7fe ff44 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	20000788 	.word	0x20000788
 8003208:	40002000 	.word	0x40002000

0800320c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003210:	4b10      	ldr	r3, [pc, #64]	; (8003254 <MX_TIM16_Init+0x48>)
 8003212:	4a11      	ldr	r2, [pc, #68]	; (8003258 <MX_TIM16_Init+0x4c>)
 8003214:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48-1;
 8003216:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <MX_TIM16_Init+0x48>)
 8003218:	222f      	movs	r2, #47	; 0x2f
 800321a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <MX_TIM16_Init+0x48>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8003222:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <MX_TIM16_Init+0x48>)
 8003224:	22fa      	movs	r2, #250	; 0xfa
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322a:	4b0a      	ldr	r3, [pc, #40]	; (8003254 <MX_TIM16_Init+0x48>)
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <MX_TIM16_Init+0x48>)
 8003232:	2200      	movs	r2, #0
 8003234:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <MX_TIM16_Init+0x48>)
 8003238:	2200      	movs	r2, #0
 800323a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <MX_TIM16_Init+0x48>)
 800323e:	0018      	movs	r0, r3
 8003240:	f001 f8a4 	bl	800438c <HAL_TIM_Base_Init>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d001      	beq.n	800324c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003248:	f7fe ff1c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	200007d4 	.word	0x200007d4
 8003258:	40014400 	.word	0x40014400

0800325c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <MX_TIM17_Init+0x44>)
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <MX_TIM17_Init+0x48>)
 8003264:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48-1;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <MX_TIM17_Init+0x44>)
 8003268:	222f      	movs	r2, #47	; 0x2f
 800326a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <MX_TIM17_Init+0x44>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 130;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <MX_TIM17_Init+0x44>)
 8003274:	2282      	movs	r2, #130	; 0x82
 8003276:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <MX_TIM17_Init+0x44>)
 800327a:	2200      	movs	r2, #0
 800327c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <MX_TIM17_Init+0x44>)
 8003280:	2200      	movs	r2, #0
 8003282:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_TIM17_Init+0x44>)
 8003286:	2200      	movs	r2, #0
 8003288:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800328a:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <MX_TIM17_Init+0x44>)
 800328c:	0018      	movs	r0, r3
 800328e:	f001 f87d 	bl	800438c <HAL_TIM_Base_Init>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8003296:	f7fe fef5 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	20000820 	.word	0x20000820
 80032a4:	40014800 	.word	0x40014800

080032a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_TIM_Base_MspInit+0x124>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d11e      	bne.n	80032f8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 80032bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032be:	4b44      	ldr	r3, [pc, #272]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	0109      	lsls	r1, r1, #4
 80032c4:	430a      	orrs	r2, r1
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	200d      	movs	r0, #13
 80032dc:	f000 fa2a 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80032e0:	200d      	movs	r0, #13
 80032e2:	f000 fa3c 	bl	800375e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	2100      	movs	r1, #0
 80032ea:	200e      	movs	r0, #14
 80032ec:	f000 fa22 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032f0:	200e      	movs	r0, #14
 80032f2:	f000 fa34 	bl	800375e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80032f6:	e064      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <HAL_TIM_Base_MspInit+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d10c      	bne.n	800331c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003302:	4b33      	ldr	r3, [pc, #204]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003308:	2102      	movs	r1, #2
 800330a:	430a      	orrs	r2, r1
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c
 800330e:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003312:	2202      	movs	r2, #2
 8003314:	4013      	ands	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
}
 800331a:	e052      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM14)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_TIM_Base_MspInit+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d116      	bne.n	8003354 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800332a:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	0209      	lsls	r1, r1, #8
 8003330:	430a      	orrs	r2, r1
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003338:	2380      	movs	r3, #128	; 0x80
 800333a:	021b      	lsls	r3, r3, #8
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
 8003340:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	2013      	movs	r0, #19
 8003348:	f000 f9f4 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800334c:	2013      	movs	r0, #19
 800334e:	f000 fa06 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 8003352:	e036      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM16)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_TIM_Base_MspInit+0x134>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d116      	bne.n	800338c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0289      	lsls	r1, r1, #10
 8003368:	430a      	orrs	r2, r1
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
 800336c:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 800336e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	029b      	lsls	r3, r3, #10
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	2015      	movs	r0, #21
 8003380:	f000 f9d8 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8003384:	2015      	movs	r0, #21
 8003386:	f000 f9ea 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 800338a:	e01a      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM17)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <HAL_TIM_Base_MspInit+0x138>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d115      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003396:	4b0e      	ldr	r3, [pc, #56]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 8003398:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 800339c:	2180      	movs	r1, #128	; 0x80
 800339e:	02c9      	lsls	r1, r1, #11
 80033a0:	430a      	orrs	r2, r1
 80033a2:	641a      	str	r2, [r3, #64]	; 0x40
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <HAL_TIM_Base_MspInit+0x128>)
 80033a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	02db      	lsls	r3, r3, #11
 80033ac:	4013      	ands	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	2016      	movs	r0, #22
 80033b8:	f000 f9bc 	bl	8003734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80033bc:	2016      	movs	r0, #22
 80033be:	f000 f9ce 	bl	800375e <HAL_NVIC_EnableIRQ>
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b008      	add	sp, #32
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40000400 	.word	0x40000400
 80033d8:	40002000 	.word	0x40002000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800

080033e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80033e4:	480d      	ldr	r0, [pc, #52]	; (800341c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80033e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80033e8:	f7ff fdfe 	bl	8002fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033ee:	e003      	b.n	80033f8 <LoopCopyDataInit>

080033f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80033f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033f6:	3104      	adds	r1, #4

080033f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033f8:	480a      	ldr	r0, [pc, #40]	; (8003424 <LoopForever+0xa>)
  ldr r3, =_edata
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <LoopForever+0xe>)
  adds r2, r0, r1
 80033fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003400:	d3f6      	bcc.n	80033f0 <CopyDataInit>
  ldr r2, =_sbss
 8003402:	4a0a      	ldr	r2, [pc, #40]	; (800342c <LoopForever+0x12>)
  b LoopFillZerobss
 8003404:	e002      	b.n	800340c <LoopFillZerobss>

08003406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  str  r3, [r2]
 8003408:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340a:	3204      	adds	r2, #4

0800340c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800340c:	4b08      	ldr	r3, [pc, #32]	; (8003430 <LoopForever+0x16>)
  cmp r2, r3
 800340e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003410:	d3f9      	bcc.n	8003406 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8003412:	f002 f94b 	bl	80056ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003416:	f7fd fde5 	bl	8000fe4 <main>

0800341a <LoopForever>:

LoopForever:
    b LoopForever
 800341a:	e7fe      	b.n	800341a <LoopForever>
  ldr   r0, =_estack
 800341c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8003420:	08005830 	.word	0x08005830
  ldr r0, =_sdata
 8003424:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003428:	2000006c 	.word	0x2000006c
  ldr r2, =_sbss
 800342c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8003430:	200009b8 	.word	0x200009b8

08003434 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003434:	e7fe      	b.n	8003434 <ADC1_IRQHandler>

08003436 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800343c:	1dfb      	adds	r3, r7, #7
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003442:	2003      	movs	r0, #3
 8003444:	f000 f80e 	bl	8003464 <HAL_InitTick>
 8003448:	1e03      	subs	r3, r0, #0
 800344a:	d003      	beq.n	8003454 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800344c:	1dfb      	adds	r3, r7, #7
 800344e:	2201      	movs	r2, #1
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e001      	b.n	8003458 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003454:	f7ff fc34 	bl	8002cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	781b      	ldrb	r3, [r3, #0]
}
 800345c:	0018      	movs	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	b002      	add	sp, #8
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800346c:	230f      	movs	r3, #15
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8003474:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <HAL_InitTick+0x88>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800347c:	4b1c      	ldr	r3, [pc, #112]	; (80034f0 <HAL_InitTick+0x8c>)
 800347e:	681c      	ldr	r4, [r3, #0]
 8003480:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <HAL_InitTick+0x88>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	0019      	movs	r1, r3
 8003486:	23fa      	movs	r3, #250	; 0xfa
 8003488:	0098      	lsls	r0, r3, #2
 800348a:	f7fc fe3d 	bl	8000108 <__udivsi3>
 800348e:	0003      	movs	r3, r0
 8003490:	0019      	movs	r1, r3
 8003492:	0020      	movs	r0, r4
 8003494:	f7fc fe38 	bl	8000108 <__udivsi3>
 8003498:	0003      	movs	r3, r0
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f97f 	bl	800379e <HAL_SYSTICK_Config>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d112      	bne.n	80034ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d80a      	bhi.n	80034c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	2301      	movs	r3, #1
 80034ae:	425b      	negs	r3, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f93e 	bl	8003734 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_InitTick+0x90>)
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e00d      	b.n	80034dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80034c0:	230f      	movs	r3, #15
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e008      	b.n	80034dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e003      	b.n	80034dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80034d4:	230f      	movs	r3, #15
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2201      	movs	r2, #1
 80034da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
}
 80034e2:	0018      	movs	r0, r3
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b005      	add	sp, #20
 80034e8:	bd90      	pop	{r4, r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	20000018 	.word	0x20000018
 80034f0:	20000010 	.word	0x20000010
 80034f4:	20000014 	.word	0x20000014

080034f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_IncTick+0x1c>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	001a      	movs	r2, r3
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_IncTick+0x20>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	18d2      	adds	r2, r2, r3
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_IncTick+0x20>)
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	20000018 	.word	0x20000018
 8003518:	2000086c 	.word	0x2000086c

0800351c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  return uwTick;
 8003520:	4b02      	ldr	r3, [pc, #8]	; (800352c <HAL_GetTick+0x10>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	2000086c 	.word	0x2000086c

08003530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003538:	f7ff fff0 	bl	800351c <HAL_GetTick>
 800353c:	0003      	movs	r3, r0
 800353e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3301      	adds	r3, #1
 8003548:	d005      	beq.n	8003556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_Delay+0x44>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	001a      	movs	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	189b      	adds	r3, r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	f7ff ffe0 	bl	800351c <HAL_GetTick>
 800355c:	0002      	movs	r2, r0
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	429a      	cmp	r2, r3
 8003566:	d8f7      	bhi.n	8003558 <HAL_Delay+0x28>
  {
  }
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	46bd      	mov	sp, r7
 800356e:	b004      	add	sp, #16
 8003570:	bd80      	pop	{r7, pc}
 8003572:	46c0      	nop			; (mov r8, r8)
 8003574:	20000018 	.word	0x20000018

08003578 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8003580:	4b04      	ldr	r3, [pc, #16]	; (8003594 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	4b03      	ldr	r3, [pc, #12]	; (8003594 <HAL_SYSCFG_EnableRemap+0x1c>)
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40010000 	.word	0x40010000

08003598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	0002      	movs	r2, r0
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035a4:	1dfb      	adds	r3, r7, #7
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b7f      	cmp	r3, #127	; 0x7f
 80035aa:	d809      	bhi.n	80035c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ac:	1dfb      	adds	r3, r7, #7
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	001a      	movs	r2, r3
 80035b2:	231f      	movs	r3, #31
 80035b4:	401a      	ands	r2, r3
 80035b6:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_EnableIRQ+0x30>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	4091      	lsls	r1, r2
 80035bc:	000a      	movs	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80035c0:	46c0      	nop			; (mov r8, r8)
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b002      	add	sp, #8
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	e000e100 	.word	0xe000e100

080035cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	0002      	movs	r2, r0
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035d8:	1dfb      	adds	r3, r7, #7
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b7f      	cmp	r3, #127	; 0x7f
 80035de:	d810      	bhi.n	8003602 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	001a      	movs	r2, r3
 80035e6:	231f      	movs	r3, #31
 80035e8:	4013      	ands	r3, r2
 80035ea:	4908      	ldr	r1, [pc, #32]	; (800360c <__NVIC_DisableIRQ+0x40>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	409a      	lsls	r2, r3
 80035f0:	0013      	movs	r3, r2
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80035f6:	f3bf 8f4f 	dsb	sy
}
 80035fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80035fc:	f3bf 8f6f 	isb	sy
}
 8003600:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b002      	add	sp, #8
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	e000e100 	.word	0xe000e100

08003610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	0002      	movs	r2, r0
 8003618:	6039      	str	r1, [r7, #0]
 800361a:	1dfb      	adds	r3, r7, #7
 800361c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800361e:	1dfb      	adds	r3, r7, #7
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b7f      	cmp	r3, #127	; 0x7f
 8003624:	d828      	bhi.n	8003678 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003626:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <__NVIC_SetPriority+0xd4>)
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b25b      	sxtb	r3, r3
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	33c0      	adds	r3, #192	; 0xc0
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	589b      	ldr	r3, [r3, r2]
 8003636:	1dfa      	adds	r2, r7, #7
 8003638:	7812      	ldrb	r2, [r2, #0]
 800363a:	0011      	movs	r1, r2
 800363c:	2203      	movs	r2, #3
 800363e:	400a      	ands	r2, r1
 8003640:	00d2      	lsls	r2, r2, #3
 8003642:	21ff      	movs	r1, #255	; 0xff
 8003644:	4091      	lsls	r1, r2
 8003646:	000a      	movs	r2, r1
 8003648:	43d2      	mvns	r2, r2
 800364a:	401a      	ands	r2, r3
 800364c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	019b      	lsls	r3, r3, #6
 8003652:	22ff      	movs	r2, #255	; 0xff
 8003654:	401a      	ands	r2, r3
 8003656:	1dfb      	adds	r3, r7, #7
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	0018      	movs	r0, r3
 800365c:	2303      	movs	r3, #3
 800365e:	4003      	ands	r3, r0
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003664:	481f      	ldr	r0, [pc, #124]	; (80036e4 <__NVIC_SetPriority+0xd4>)
 8003666:	1dfb      	adds	r3, r7, #7
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	b25b      	sxtb	r3, r3
 800366c:	089b      	lsrs	r3, r3, #2
 800366e:	430a      	orrs	r2, r1
 8003670:	33c0      	adds	r3, #192	; 0xc0
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003676:	e031      	b.n	80036dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003678:	4a1b      	ldr	r2, [pc, #108]	; (80036e8 <__NVIC_SetPriority+0xd8>)
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	0019      	movs	r1, r3
 8003680:	230f      	movs	r3, #15
 8003682:	400b      	ands	r3, r1
 8003684:	3b08      	subs	r3, #8
 8003686:	089b      	lsrs	r3, r3, #2
 8003688:	3306      	adds	r3, #6
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	3304      	adds	r3, #4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	1dfa      	adds	r2, r7, #7
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	0011      	movs	r1, r2
 8003698:	2203      	movs	r2, #3
 800369a:	400a      	ands	r2, r1
 800369c:	00d2      	lsls	r2, r2, #3
 800369e:	21ff      	movs	r1, #255	; 0xff
 80036a0:	4091      	lsls	r1, r2
 80036a2:	000a      	movs	r2, r1
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	401a      	ands	r2, r3
 80036a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	22ff      	movs	r2, #255	; 0xff
 80036b0:	401a      	ands	r2, r3
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	0018      	movs	r0, r3
 80036b8:	2303      	movs	r3, #3
 80036ba:	4003      	ands	r3, r0
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036c0:	4809      	ldr	r0, [pc, #36]	; (80036e8 <__NVIC_SetPriority+0xd8>)
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	001c      	movs	r4, r3
 80036c8:	230f      	movs	r3, #15
 80036ca:	4023      	ands	r3, r4
 80036cc:	3b08      	subs	r3, #8
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	430a      	orrs	r2, r1
 80036d2:	3306      	adds	r3, #6
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	18c3      	adds	r3, r0, r3
 80036d8:	3304      	adds	r3, #4
 80036da:	601a      	str	r2, [r3, #0]
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b003      	add	sp, #12
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	e000e100 	.word	0xe000e100
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	1e5a      	subs	r2, r3, #1
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	045b      	lsls	r3, r3, #17
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d301      	bcc.n	8003704 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003700:	2301      	movs	r3, #1
 8003702:	e010      	b.n	8003726 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <SysTick_Config+0x44>)
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	3a01      	subs	r2, #1
 800370a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800370c:	2301      	movs	r3, #1
 800370e:	425b      	negs	r3, r3
 8003710:	2103      	movs	r1, #3
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff ff7c 	bl	8003610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003718:	4b05      	ldr	r3, [pc, #20]	; (8003730 <SysTick_Config+0x44>)
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <SysTick_Config+0x44>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003724:	2300      	movs	r3, #0
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b002      	add	sp, #8
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	e000e010 	.word	0xe000e010

08003734 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	210f      	movs	r1, #15
 8003740:	187b      	adds	r3, r7, r1
 8003742:	1c02      	adds	r2, r0, #0
 8003744:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	187b      	adds	r3, r7, r1
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	b25b      	sxtb	r3, r3
 800374e:	0011      	movs	r1, r2
 8003750:	0018      	movs	r0, r3
 8003752:	f7ff ff5d 	bl	8003610 <__NVIC_SetPriority>
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	0002      	movs	r2, r0
 8003766:	1dfb      	adds	r3, r7, #7
 8003768:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b25b      	sxtb	r3, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f7ff ff11 	bl	8003598 <__NVIC_EnableIRQ>
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	0002      	movs	r2, r0
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800378a:	1dfb      	adds	r3, r7, #7
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	b25b      	sxtb	r3, r3
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff ff1b 	bl	80035cc <__NVIC_DisableIRQ>
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f7ff ff9f 	bl	80036ec <SysTick_Config>
 80037ae:	0003      	movs	r3, r0
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80037c6:	e14d      	b.n	8003a64 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2101      	movs	r1, #1
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4091      	lsls	r1, r2
 80037d2:	000a      	movs	r2, r1
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d100      	bne.n	80037e0 <HAL_GPIO_Init+0x28>
 80037de:	e13e      	b.n	8003a5e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x38>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d125      	bne.n	800383c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	08da      	lsrs	r2, r3, #3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3208      	adds	r2, #8
 80037f8:	0092      	lsls	r2, r2, #2
 80037fa:	58d3      	ldr	r3, [r2, r3]
 80037fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2207      	movs	r2, #7
 8003802:	4013      	ands	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	220f      	movs	r2, #15
 8003808:	409a      	lsls	r2, r3
 800380a:	0013      	movs	r3, r2
 800380c:	43da      	mvns	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	4013      	ands	r3, r2
 8003812:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	220f      	movs	r2, #15
 800381a:	401a      	ands	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2107      	movs	r1, #7
 8003820:	400b      	ands	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	409a      	lsls	r2, r3
 8003826:	0013      	movs	r3, r2
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	08da      	lsrs	r2, r3, #3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3208      	adds	r2, #8
 8003836:	0092      	lsls	r2, r2, #2
 8003838:	6979      	ldr	r1, [r7, #20]
 800383a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	2203      	movs	r2, #3
 8003848:	409a      	lsls	r2, r3
 800384a:	0013      	movs	r3, r2
 800384c:	43da      	mvns	r2, r3
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4013      	ands	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	401a      	ands	r2, r3
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	409a      	lsls	r2, r3
 8003862:	0013      	movs	r3, r2
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4313      	orrs	r3, r2
 8003868:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d00b      	beq.n	8003890 <HAL_GPIO_Init+0xd8>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d007      	beq.n	8003890 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003884:	2b11      	cmp	r3, #17
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b12      	cmp	r3, #18
 800388e:	d130      	bne.n	80038f2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	409a      	lsls	r2, r3
 800389e:	0013      	movs	r3, r2
 80038a0:	43da      	mvns	r2, r3
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	409a      	lsls	r2, r3
 80038b2:	0013      	movs	r3, r2
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038c6:	2201      	movs	r2, #1
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	409a      	lsls	r2, r3
 80038cc:	0013      	movs	r3, r2
 80038ce:	43da      	mvns	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	2201      	movs	r2, #1
 80038de:	401a      	ands	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	409a      	lsls	r2, r3
 80038e4:	0013      	movs	r3, r2
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d017      	beq.n	800392a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	409a      	lsls	r2, r3
 8003908:	0013      	movs	r3, r2
 800390a:	43da      	mvns	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4013      	ands	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	409a      	lsls	r2, r3
 800391c:	0013      	movs	r3, r2
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4313      	orrs	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	055b      	lsls	r3, r3, #21
 8003932:	4013      	ands	r3, r2
 8003934:	d100      	bne.n	8003938 <HAL_GPIO_Init+0x180>
 8003936:	e092      	b.n	8003a5e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003938:	4a50      	ldr	r2, [pc, #320]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3318      	adds	r3, #24
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	589b      	ldr	r3, [r3, r2]
 8003944:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2203      	movs	r2, #3
 800394a:	4013      	ands	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	220f      	movs	r2, #15
 8003950:	409a      	lsls	r2, r3
 8003952:	0013      	movs	r3, r2
 8003954:	43da      	mvns	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	23a0      	movs	r3, #160	; 0xa0
 8003960:	05db      	lsls	r3, r3, #23
 8003962:	429a      	cmp	r2, r3
 8003964:	d013      	beq.n	800398e <HAL_GPIO_Init+0x1d6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a45      	ldr	r2, [pc, #276]	; (8003a80 <HAL_GPIO_Init+0x2c8>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00d      	beq.n	800398a <HAL_GPIO_Init+0x1d2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a44      	ldr	r2, [pc, #272]	; (8003a84 <HAL_GPIO_Init+0x2cc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <HAL_GPIO_Init+0x1ce>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a43      	ldr	r2, [pc, #268]	; (8003a88 <HAL_GPIO_Init+0x2d0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d101      	bne.n	8003982 <HAL_GPIO_Init+0x1ca>
 800397e:	2305      	movs	r3, #5
 8003980:	e006      	b.n	8003990 <HAL_GPIO_Init+0x1d8>
 8003982:	2306      	movs	r3, #6
 8003984:	e004      	b.n	8003990 <HAL_GPIO_Init+0x1d8>
 8003986:	2302      	movs	r3, #2
 8003988:	e002      	b.n	8003990 <HAL_GPIO_Init+0x1d8>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_GPIO_Init+0x1d8>
 800398e:	2300      	movs	r3, #0
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	2103      	movs	r1, #3
 8003994:	400a      	ands	r2, r1
 8003996:	00d2      	lsls	r2, r2, #3
 8003998:	4093      	lsls	r3, r2
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4313      	orrs	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80039a0:	4936      	ldr	r1, [pc, #216]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	089b      	lsrs	r3, r3, #2
 80039a6:	3318      	adds	r3, #24
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80039ae:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	58d3      	ldr	r3, [r2, r3]
 80039b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	43da      	mvns	r2, r3
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	4013      	ands	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	025b      	lsls	r3, r3, #9
 80039c8:	4013      	ands	r3, r2
 80039ca:	d003      	beq.n	80039d4 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80039d4:	4929      	ldr	r1, [pc, #164]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80039dc:	4a27      	ldr	r2, [pc, #156]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 80039de:	2384      	movs	r3, #132	; 0x84
 80039e0:	58d3      	ldr	r3, [r2, r3]
 80039e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	4013      	ands	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	029b      	lsls	r3, r3, #10
 80039f6:	4013      	ands	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003a02:	491e      	ldr	r1, [pc, #120]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003a04:	2284      	movs	r2, #132	; 0x84
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43da      	mvns	r2, r3
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4013      	ands	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	035b      	lsls	r3, r3, #13
 8003a22:	4013      	ands	r3, r2
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	4013      	ands	r3, r2
 8003a42:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	039b      	lsls	r3, r3, #14
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8003a50:	697a      	ldr	r2, [r7, #20]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <HAL_GPIO_Init+0x2c4>)
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	3301      	adds	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	40da      	lsrs	r2, r3
 8003a6c:	1e13      	subs	r3, r2, #0
 8003a6e:	d000      	beq.n	8003a72 <HAL_GPIO_Init+0x2ba>
 8003a70:	e6aa      	b.n	80037c8 <HAL_GPIO_Init+0x10>
  }
}
 8003a72:	46c0      	nop			; (mov r8, r8)
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b006      	add	sp, #24
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021800 	.word	0x40021800
 8003a80:	50000400 	.word	0x50000400
 8003a84:	50000800 	.word	0x50000800
 8003a88:	50001400 	.word	0x50001400

08003a8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8003a9a:	e0b4      	b.n	8003c06 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d100      	bne.n	8003ab0 <HAL_GPIO_DeInit+0x24>
 8003aae:	e0a7      	b.n	8003c00 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
 8003ab0:	4a5a      	ldr	r2, [pc, #360]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	089b      	lsrs	r3, r3, #2
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	589b      	ldr	r3, [r3, r2]
 8003abc:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	220f      	movs	r2, #15
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	23a0      	movs	r3, #160	; 0xa0
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d013      	beq.n	8003b02 <HAL_GPIO_DeInit+0x76>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a50      	ldr	r2, [pc, #320]	; (8003c20 <HAL_GPIO_DeInit+0x194>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00d      	beq.n	8003afe <HAL_GPIO_DeInit+0x72>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4f      	ldr	r2, [pc, #316]	; (8003c24 <HAL_GPIO_DeInit+0x198>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <HAL_GPIO_DeInit+0x6e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4e      	ldr	r2, [pc, #312]	; (8003c28 <HAL_GPIO_DeInit+0x19c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_GPIO_DeInit+0x6a>
 8003af2:	2305      	movs	r3, #5
 8003af4:	e006      	b.n	8003b04 <HAL_GPIO_DeInit+0x78>
 8003af6:	2306      	movs	r3, #6
 8003af8:	e004      	b.n	8003b04 <HAL_GPIO_DeInit+0x78>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_DeInit+0x78>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_GPIO_DeInit+0x78>
 8003b02:	2300      	movs	r3, #0
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	2103      	movs	r1, #3
 8003b08:	400a      	ands	r2, r1
 8003b0a:	00d2      	lsls	r2, r2, #3
 8003b0c:	4093      	lsls	r3, r2
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d136      	bne.n	8003b82 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003b14:	4a41      	ldr	r2, [pc, #260]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	58d3      	ldr	r3, [r2, r3]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	43d2      	mvns	r2, r2
 8003b1e:	493f      	ldr	r1, [pc, #252]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003b26:	4a3d      	ldr	r2, [pc, #244]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b28:	2384      	movs	r3, #132	; 0x84
 8003b2a:	58d3      	ldr	r3, [r2, r3]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	43d2      	mvns	r2, r2
 8003b30:	493a      	ldr	r1, [pc, #232]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	2284      	movs	r2, #132	; 0x84
 8003b36:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003b38:	4b38      	ldr	r3, [pc, #224]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	43d9      	mvns	r1, r3
 8003b40:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003b46:	4b35      	ldr	r3, [pc, #212]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b48:	685a      	ldr	r2, [r3, #4]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	43d9      	mvns	r1, r3
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b50:	400a      	ands	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]

        tmp = (0x0FUL) << (8U * (position & 0x03U));
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	220f      	movs	r2, #15
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	0013      	movs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8003b64:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	589a      	ldr	r2, [r3, r2]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	43d9      	mvns	r1, r3
 8003b74:	4829      	ldr	r0, [pc, #164]	; (8003c1c <HAL_GPIO_DeInit+0x190>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	3318      	adds	r3, #24
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	2103      	movs	r1, #3
 8003b8c:	4099      	lsls	r1, r3
 8003b8e:	000b      	movs	r3, r1
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	08da      	lsrs	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	58d3      	ldr	r3, [r2, r3]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	2107      	movs	r1, #7
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	0092      	lsls	r2, r2, #2
 8003baa:	210f      	movs	r1, #15
 8003bac:	4091      	lsls	r1, r2
 8003bae:	000a      	movs	r2, r1
 8003bb0:	43d1      	mvns	r1, r2
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	08d2      	lsrs	r2, r2, #3
 8003bb6:	4019      	ands	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3208      	adds	r2, #8
 8003bbc:	0092      	lsls	r2, r2, #2
 8003bbe:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	0052      	lsls	r2, r2, #1
 8003bc8:	2103      	movs	r1, #3
 8003bca:	4091      	lsls	r1, r2
 8003bcc:	000a      	movs	r2, r1
 8003bce:	43d2      	mvns	r2, r2
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2101      	movs	r1, #1
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	4091      	lsls	r1, r2
 8003be0:	000a      	movs	r2, r1
 8003be2:	43d2      	mvns	r2, r2
 8003be4:	401a      	ands	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	0052      	lsls	r2, r2, #1
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	4091      	lsls	r1, r2
 8003bf6:	000a      	movs	r2, r1
 8003bf8:	43d2      	mvns	r2, r2
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3301      	adds	r3, #1
 8003c04:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	40da      	lsrs	r2, r3
 8003c0c:	1e13      	subs	r3, r2, #0
 8003c0e:	d000      	beq.n	8003c12 <HAL_GPIO_DeInit+0x186>
 8003c10:	e744      	b.n	8003a9c <HAL_GPIO_DeInit+0x10>
  }
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46c0      	nop			; (mov r8, r8)
 8003c16:	46bd      	mov	sp, r7
 8003c18:	b006      	add	sp, #24
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40021800 	.word	0x40021800
 8003c20:	50000400 	.word	0x50000400
 8003c24:	50000800 	.word	0x50000800
 8003c28:	50001400 	.word	0x50001400

08003c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	000a      	movs	r2, r1
 8003c36:	1cbb      	adds	r3, r7, #2
 8003c38:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	1cba      	adds	r2, r7, #2
 8003c40:	8812      	ldrh	r2, [r2, #0]
 8003c42:	4013      	ands	r3, r2
 8003c44:	d004      	beq.n	8003c50 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c46:	230f      	movs	r3, #15
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	e003      	b.n	8003c58 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c58:	230f      	movs	r3, #15
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
}
 8003c5e:	0018      	movs	r0, r3
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b082      	sub	sp, #8
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	0008      	movs	r0, r1
 8003c70:	0011      	movs	r1, r2
 8003c72:	1cbb      	adds	r3, r7, #2
 8003c74:	1c02      	adds	r2, r0, #0
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	1c7b      	adds	r3, r7, #1
 8003c7a:	1c0a      	adds	r2, r1, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c7e:	1c7b      	adds	r3, r7, #1
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d004      	beq.n	8003c90 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c86:	1cbb      	adds	r3, r7, #2
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c8e:	e003      	b.n	8003c98 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c90:	1cbb      	adds	r3, r7, #2
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c98:	46c0      	nop			; (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	000a      	movs	r2, r1
 8003caa:	1cbb      	adds	r3, r7, #2
 8003cac:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cb4:	1cbb      	adds	r3, r7, #2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	041a      	lsls	r2, r3, #16
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	1cb9      	adds	r1, r7, #2
 8003cc4:	8809      	ldrh	r1, [r1, #0]
 8003cc6:	400b      	ands	r3, r1
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	619a      	str	r2, [r3, #24]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	0002      	movs	r2, r0
 8003ce0:	1dbb      	adds	r3, r7, #6
 8003ce2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	1dba      	adds	r2, r7, #6
 8003cea:	8812      	ldrh	r2, [r2, #0]
 8003cec:	4013      	ands	r3, r2
 8003cee:	d008      	beq.n	8003d02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003cf2:	1dba      	adds	r2, r7, #6
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003cf8:	1dbb      	adds	r3, r7, #6
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fe f91d 	bl	8001f3c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	1dba      	adds	r2, r7, #6
 8003d08:	8812      	ldrh	r2, [r2, #0]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d008      	beq.n	8003d20 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d10:	1dba      	adds	r2, r7, #6
 8003d12:	8812      	ldrh	r2, [r2, #0]
 8003d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d16:	1dbb      	adds	r3, r7, #6
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7fe f96a 	bl	8001ff4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d20:	46c0      	nop			; (mov r8, r8)
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b002      	add	sp, #8
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021800 	.word	0x40021800

08003d2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e1d0      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2201      	movs	r2, #1
 8003d44:	4013      	ands	r3, r2
 8003d46:	d100      	bne.n	8003d4a <HAL_RCC_OscConfig+0x1e>
 8003d48:	e069      	b.n	8003e1e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	4bc8      	ldr	r3, [pc, #800]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2238      	movs	r2, #56	; 0x38
 8003d50:	4013      	ands	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d15d      	bne.n	8003e1e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e1bc      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d107      	bne.n	8003d82 <HAL_RCC_OscConfig+0x56>
 8003d72:	4bbe      	ldr	r3, [pc, #760]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	4bbd      	ldr	r3, [pc, #756]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d78:	2180      	movs	r1, #128	; 0x80
 8003d7a:	0249      	lsls	r1, r1, #9
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e020      	b.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	23a0      	movs	r3, #160	; 0xa0
 8003d88:	02db      	lsls	r3, r3, #11
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d10e      	bne.n	8003dac <HAL_RCC_OscConfig+0x80>
 8003d8e:	4bb7      	ldr	r3, [pc, #732]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4bb6      	ldr	r3, [pc, #728]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	02c9      	lsls	r1, r1, #11
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	4bb3      	ldr	r3, [pc, #716]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4bb2      	ldr	r3, [pc, #712]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0249      	lsls	r1, r1, #9
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x98>
 8003dac:	4baf      	ldr	r3, [pc, #700]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4bae      	ldr	r3, [pc, #696]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003db2:	49af      	ldr	r1, [pc, #700]	; (8004070 <HAL_RCC_OscConfig+0x344>)
 8003db4:	400a      	ands	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	4bac      	ldr	r3, [pc, #688]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4bab      	ldr	r3, [pc, #684]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003dbe:	49ad      	ldr	r1, [pc, #692]	; (8004074 <HAL_RCC_OscConfig+0x348>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d014      	beq.n	8003df6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7ff fba6 	bl	800351c <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003dd6:	f7ff fba1 	bl	800351c <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b64      	cmp	r3, #100	; 0x64
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e17b      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de8:	4ba0      	ldr	r3, [pc, #640]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	029b      	lsls	r3, r3, #10
 8003df0:	4013      	ands	r3, r2
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0xaa>
 8003df4:	e013      	b.n	8003e1e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df6:	f7ff fb91 	bl	800351c <HAL_GetTick>
 8003dfa:	0003      	movs	r3, r0
 8003dfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e00:	f7ff fb8c 	bl	800351c <HAL_GetTick>
 8003e04:	0002      	movs	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b64      	cmp	r3, #100	; 0x64
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e166      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e12:	4b96      	ldr	r3, [pc, #600]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	2380      	movs	r3, #128	; 0x80
 8003e18:	029b      	lsls	r3, r3, #10
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2202      	movs	r2, #2
 8003e24:	4013      	ands	r3, r2
 8003e26:	d100      	bne.n	8003e2a <HAL_RCC_OscConfig+0xfe>
 8003e28:	e086      	b.n	8003f38 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e2a:	4b90      	ldr	r3, [pc, #576]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2238      	movs	r2, #56	; 0x38
 8003e30:	4013      	ands	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12f      	bne.n	8003e9a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e14c      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e46:	4b89      	ldr	r3, [pc, #548]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	4a8b      	ldr	r2, [pc, #556]	; (8004078 <HAL_RCC_OscConfig+0x34c>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	021a      	lsls	r2, r3, #8
 8003e56:	4b85      	ldr	r3, [pc, #532]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d112      	bne.n	8003e88 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e62:	4b82      	ldr	r3, [pc, #520]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a85      	ldr	r2, [pc, #532]	; (800407c <HAL_RCC_OscConfig+0x350>)
 8003e68:	4013      	ands	r3, r2
 8003e6a:	0019      	movs	r1, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	4b7e      	ldr	r3, [pc, #504]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e72:	430a      	orrs	r2, r1
 8003e74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e76:	4b7d      	ldr	r3, [pc, #500]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	0adb      	lsrs	r3, r3, #11
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	4013      	ands	r3, r2
 8003e80:	4a7f      	ldr	r2, [pc, #508]	; (8004080 <HAL_RCC_OscConfig+0x354>)
 8003e82:	40da      	lsrs	r2, r3
 8003e84:	4b7f      	ldr	r3, [pc, #508]	; (8004084 <HAL_RCC_OscConfig+0x358>)
 8003e86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e88:	4b7f      	ldr	r3, [pc, #508]	; (8004088 <HAL_RCC_OscConfig+0x35c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff fae9 	bl	8003464 <HAL_InitTick>
 8003e92:	1e03      	subs	r3, r0, #0
 8003e94:	d050      	beq.n	8003f38 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e122      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d030      	beq.n	8003f04 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ea2:	4b72      	ldr	r3, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a75      	ldr	r2, [pc, #468]	; (800407c <HAL_RCC_OscConfig+0x350>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	4b6e      	ldr	r3, [pc, #440]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003ebc:	2180      	movs	r1, #128	; 0x80
 8003ebe:	0049      	lsls	r1, r1, #1
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7ff fb2a 	bl	800351c <HAL_GetTick>
 8003ec8:	0003      	movs	r3, r0
 8003eca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ece:	f7ff fb25 	bl	800351c <HAL_GetTick>
 8003ed2:	0002      	movs	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0ff      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee0:	4b62      	ldr	r3, [pc, #392]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	2380      	movs	r3, #128	; 0x80
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a61      	ldr	r2, [pc, #388]	; (8004078 <HAL_RCC_OscConfig+0x34c>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	021a      	lsls	r2, r3, #8
 8003efc:	4b5b      	ldr	r3, [pc, #364]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	e019      	b.n	8003f38 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003f04:	4b59      	ldr	r3, [pc, #356]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b58      	ldr	r3, [pc, #352]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f0a:	4960      	ldr	r1, [pc, #384]	; (800408c <HAL_RCC_OscConfig+0x360>)
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7ff fb04 	bl	800351c <HAL_GetTick>
 8003f14:	0003      	movs	r3, r0
 8003f16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f1a:	f7ff faff 	bl	800351c <HAL_GetTick>
 8003f1e:	0002      	movs	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e0d9      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4013      	ands	r3, r2
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2208      	movs	r2, #8
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d042      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003f42:	4b4a      	ldr	r3, [pc, #296]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2238      	movs	r2, #56	; 0x38
 8003f48:	4013      	ands	r3, r2
 8003f4a:	2b18      	cmp	r3, #24
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d138      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0c2      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d019      	beq.n	8003f96 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f62:	4b42      	ldr	r3, [pc, #264]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f68:	2101      	movs	r1, #1
 8003f6a:	430a      	orrs	r2, r1
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6e:	f7ff fad5 	bl	800351c <HAL_GetTick>
 8003f72:	0003      	movs	r3, r0
 8003f74:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f78:	f7ff fad0 	bl	800351c <HAL_GetTick>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e0aa      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003f8a:	4b38      	ldr	r3, [pc, #224]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8e:	2202      	movs	r2, #2
 8003f90:	4013      	ands	r3, r2
 8003f92:	d0f1      	beq.n	8003f78 <HAL_RCC_OscConfig+0x24c>
 8003f94:	e018      	b.n	8003fc8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f96:	4b35      	ldr	r3, [pc, #212]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f9a:	4b34      	ldr	r3, [pc, #208]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	438a      	bics	r2, r1
 8003fa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7ff fabb 	bl	800351c <HAL_GetTick>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003fac:	f7ff fab6 	bl	800351c <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e090      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d1f1      	bne.n	8003fac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d100      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x2a8>
 8003fd2:	e084      	b.n	80040de <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd4:	230f      	movs	r3, #15
 8003fd6:	18fb      	adds	r3, r7, r3
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003fdc:	4b23      	ldr	r3, [pc, #140]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2238      	movs	r2, #56	; 0x38
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d000      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x2c6>
 8003ff0:	e075      	b.n	80040de <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e074      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d106      	bne.n	800400c <HAL_RCC_OscConfig+0x2e0>
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004002:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004004:	2101      	movs	r1, #1
 8004006:	430a      	orrs	r2, r1
 8004008:	65da      	str	r2, [r3, #92]	; 0x5c
 800400a:	e01c      	b.n	8004046 <HAL_RCC_OscConfig+0x31a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d10c      	bne.n	800402e <HAL_RCC_OscConfig+0x302>
 8004014:	4b15      	ldr	r3, [pc, #84]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004016:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_RCC_OscConfig+0x340>)
 800401a:	2104      	movs	r1, #4
 800401c:	430a      	orrs	r2, r1
 800401e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004024:	4b11      	ldr	r3, [pc, #68]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004026:	2101      	movs	r1, #1
 8004028:	430a      	orrs	r2, r1
 800402a:	65da      	str	r2, [r3, #92]	; 0x5c
 800402c:	e00b      	b.n	8004046 <HAL_RCC_OscConfig+0x31a>
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004030:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004032:	4b0e      	ldr	r3, [pc, #56]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004034:	2101      	movs	r1, #1
 8004036:	438a      	bics	r2, r1
 8004038:	65da      	str	r2, [r3, #92]	; 0x5c
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_RCC_OscConfig+0x340>)
 800403c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x340>)
 8004040:	2104      	movs	r1, #4
 8004042:	438a      	bics	r2, r1
 8004044:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404e:	f7ff fa65 	bl	800351c <HAL_GetTick>
 8004052:	0003      	movs	r3, r0
 8004054:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004056:	e01d      	b.n	8004094 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004058:	f7ff fa60 	bl	800351c <HAL_GetTick>
 800405c:	0002      	movs	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <HAL_RCC_OscConfig+0x364>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d915      	bls.n	8004094 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e039      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
 800406c:	40021000 	.word	0x40021000
 8004070:	fffeffff 	.word	0xfffeffff
 8004074:	fffbffff 	.word	0xfffbffff
 8004078:	ffff80ff 	.word	0xffff80ff
 800407c:	ffffc7ff 	.word	0xffffc7ff
 8004080:	02dc6c00 	.word	0x02dc6c00
 8004084:	20000010 	.word	0x20000010
 8004088:	20000014 	.word	0x20000014
 800408c:	fffffeff 	.word	0xfffffeff
 8004090:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004094:	4b14      	ldr	r3, [pc, #80]	; (80040e8 <HAL_RCC_OscConfig+0x3bc>)
 8004096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004098:	2202      	movs	r2, #2
 800409a:	4013      	ands	r3, r2
 800409c:	d0dc      	beq.n	8004058 <HAL_RCC_OscConfig+0x32c>
 800409e:	e013      	b.n	80040c8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7ff fa3c 	bl	800351c <HAL_GetTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80040a8:	e009      	b.n	80040be <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7ff fa37 	bl	800351c <HAL_GetTick>
 80040ae:	0002      	movs	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	4a0d      	ldr	r2, [pc, #52]	; (80040ec <HAL_RCC_OscConfig+0x3c0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e010      	b.n	80040e0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80040be:	4b0a      	ldr	r3, [pc, #40]	; (80040e8 <HAL_RCC_OscConfig+0x3bc>)
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2202      	movs	r2, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040c8:	230f      	movs	r3, #15
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_OscConfig+0x3bc>)
 80040d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <HAL_RCC_OscConfig+0x3bc>)
 80040d8:	4905      	ldr	r1, [pc, #20]	; (80040f0 <HAL_RCC_OscConfig+0x3c4>)
 80040da:	400a      	ands	r2, r1
 80040dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b006      	add	sp, #24
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40021000 	.word	0x40021000
 80040ec:	00001388 	.word	0x00001388
 80040f0:	efffffff 	.word	0xefffffff

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0e9      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2207      	movs	r2, #7
 800410e:	4013      	ands	r3, r2
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d91e      	bls.n	8004154 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b73      	ldr	r3, [pc, #460]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2207      	movs	r2, #7
 800411c:	4393      	bics	r3, r2
 800411e:	0019      	movs	r1, r3
 8004120:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004128:	f7ff f9f8 	bl	800351c <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004130:	e009      	b.n	8004146 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004132:	f7ff f9f3 	bl	800351c <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	4a6a      	ldr	r2, [pc, #424]	; (80042e8 <HAL_RCC_ClockConfig+0x1f4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0ca      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2207      	movs	r2, #7
 800414c:	4013      	ands	r3, r2
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d1ee      	bne.n	8004132 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2202      	movs	r2, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d017      	beq.n	800418e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2204      	movs	r2, #4
 8004164:	4013      	ands	r3, r2
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004168:	4b60      	ldr	r3, [pc, #384]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a60      	ldr	r2, [pc, #384]	; (80042f0 <HAL_RCC_ClockConfig+0x1fc>)
 800416e:	401a      	ands	r2, r3
 8004170:	4b5e      	ldr	r3, [pc, #376]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 8004172:	21b0      	movs	r1, #176	; 0xb0
 8004174:	0109      	lsls	r1, r1, #4
 8004176:	430a      	orrs	r2, r1
 8004178:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800417a:	4b5c      	ldr	r3, [pc, #368]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4a5d      	ldr	r2, [pc, #372]	; (80042f4 <HAL_RCC_ClockConfig+0x200>)
 8004180:	4013      	ands	r3, r2
 8004182:	0019      	movs	r1, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b58      	ldr	r3, [pc, #352]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 800418a:	430a      	orrs	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2201      	movs	r2, #1
 8004194:	4013      	ands	r3, r2
 8004196:	d055      	beq.n	8004244 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8004198:	4b54      	ldr	r3, [pc, #336]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	221c      	movs	r2, #28
 800419e:	4393      	bics	r3, r2
 80041a0:	0019      	movs	r1, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	4b51      	ldr	r3, [pc, #324]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b4:	4b4d      	ldr	r3, [pc, #308]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	4013      	ands	r3, r2
 80041be:	d11f      	bne.n	8004200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e08b      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d107      	bne.n	80041dc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041cc:	4b47      	ldr	r3, [pc, #284]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4013      	ands	r3, r2
 80041d6:	d113      	bne.n	8004200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e07f      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d106      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80041e4:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80041e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d108      	bne.n	8004200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e074      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80041f2:	4b3e      	ldr	r3, [pc, #248]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2202      	movs	r2, #2
 80041f8:	4013      	ands	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e06d      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004200:	4b3a      	ldr	r3, [pc, #232]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2207      	movs	r2, #7
 8004206:	4393      	bics	r3, r2
 8004208:	0019      	movs	r1, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	4b37      	ldr	r3, [pc, #220]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004214:	f7ff f982 	bl	800351c <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800421c:	e009      	b.n	8004232 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800421e:	f7ff f97d 	bl	800351c <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4a2f      	ldr	r2, [pc, #188]	; (80042e8 <HAL_RCC_ClockConfig+0x1f4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e054      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	4b2e      	ldr	r3, [pc, #184]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2238      	movs	r2, #56	; 0x38
 8004238:	401a      	ands	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	429a      	cmp	r2, r3
 8004242:	d1ec      	bne.n	800421e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004244:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2207      	movs	r2, #7
 800424a:	4013      	ands	r3, r2
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d21e      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2207      	movs	r2, #7
 8004258:	4393      	bics	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004264:	f7ff f95a 	bl	800351c <HAL_GetTick>
 8004268:	0003      	movs	r3, r0
 800426a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800426c:	e009      	b.n	8004282 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800426e:	f7ff f955 	bl	800351c <HAL_GetTick>
 8004272:	0002      	movs	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_RCC_ClockConfig+0x1f4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e02c      	b.n	80042dc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004282:	4b18      	ldr	r3, [pc, #96]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d1ee      	bne.n	800426e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2204      	movs	r2, #4
 8004296:	4013      	ands	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <HAL_RCC_ClockConfig+0x204>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	0019      	movs	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	4b10      	ldr	r3, [pc, #64]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80042ae:	f000 f82b 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042b2:	0001      	movs	r1, r0
 80042b4:	4b0d      	ldr	r3, [pc, #52]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	220f      	movs	r2, #15
 80042bc:	401a      	ands	r2, r3
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <HAL_RCC_ClockConfig+0x208>)
 80042c0:	0092      	lsls	r2, r2, #2
 80042c2:	58d3      	ldr	r3, [r2, r3]
 80042c4:	221f      	movs	r2, #31
 80042c6:	4013      	ands	r3, r2
 80042c8:	000a      	movs	r2, r1
 80042ca:	40da      	lsrs	r2, r3
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <HAL_RCC_ClockConfig+0x20c>)
 80042ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <HAL_RCC_ClockConfig+0x210>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff f8c5 	bl	8003464 <HAL_InitTick>
 80042da:	0003      	movs	r3, r0
}
 80042dc:	0018      	movs	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	b004      	add	sp, #16
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40022000 	.word	0x40022000
 80042e8:	00001388 	.word	0x00001388
 80042ec:	40021000 	.word	0x40021000
 80042f0:	ffff84ff 	.word	0xffff84ff
 80042f4:	fffff0ff 	.word	0xfffff0ff
 80042f8:	ffff8fff 	.word	0xffff8fff
 80042fc:	08005794 	.word	0x08005794
 8004300:	20000010 	.word	0x20000010
 8004304:	20000014 	.word	0x20000014

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800430e:	4b1c      	ldr	r3, [pc, #112]	; (8004380 <HAL_RCC_GetSysClockFreq+0x78>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2238      	movs	r2, #56	; 0x38
 8004314:	4013      	ands	r3, r2
 8004316:	d10f      	bne.n	8004338 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_GetSysClockFreq+0x78>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	0adb      	lsrs	r3, r3, #11
 800431e:	2207      	movs	r2, #7
 8004320:	4013      	ands	r3, r2
 8004322:	2201      	movs	r2, #1
 8004324:	409a      	lsls	r2, r3
 8004326:	0013      	movs	r3, r2
 8004328:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800432a:	6839      	ldr	r1, [r7, #0]
 800432c:	4815      	ldr	r0, [pc, #84]	; (8004384 <HAL_RCC_GetSysClockFreq+0x7c>)
 800432e:	f7fb feeb 	bl	8000108 <__udivsi3>
 8004332:	0003      	movs	r3, r0
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	e01e      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <HAL_RCC_GetSysClockFreq+0x78>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2238      	movs	r2, #56	; 0x38
 800433e:	4013      	ands	r3, r2
 8004340:	2b08      	cmp	r3, #8
 8004342:	d102      	bne.n	800434a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <HAL_RCC_GetSysClockFreq+0x80>)
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	e015      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800434a:	4b0d      	ldr	r3, [pc, #52]	; (8004380 <HAL_RCC_GetSysClockFreq+0x78>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2238      	movs	r2, #56	; 0x38
 8004350:	4013      	ands	r3, r2
 8004352:	2b20      	cmp	r3, #32
 8004354:	d103      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	607b      	str	r3, [r7, #4]
 800435c:	e00b      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800435e:	4b08      	ldr	r3, [pc, #32]	; (8004380 <HAL_RCC_GetSysClockFreq+0x78>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2238      	movs	r2, #56	; 0x38
 8004364:	4013      	ands	r3, r2
 8004366:	2b18      	cmp	r3, #24
 8004368:	d103      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800436a:	23fa      	movs	r3, #250	; 0xfa
 800436c:	01db      	lsls	r3, r3, #7
 800436e:	607b      	str	r3, [r7, #4]
 8004370:	e001      	b.n	8004376 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8004376:	687b      	ldr	r3, [r7, #4]
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	02dc6c00 	.word	0x02dc6c00
 8004388:	007a1200 	.word	0x007a1200

0800438c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e04a      	b.n	8004434 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	223d      	movs	r2, #61	; 0x3d
 80043a2:	5c9b      	ldrb	r3, [r3, r2]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	223c      	movs	r2, #60	; 0x3c
 80043ae:	2100      	movs	r1, #0
 80043b0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f7fe ff77 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	223d      	movs	r2, #61	; 0x3d
 80043be:	2102      	movs	r1, #2
 80043c0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3304      	adds	r3, #4
 80043ca:	0019      	movs	r1, r3
 80043cc:	0010      	movs	r0, r2
 80043ce:	f000 fbdb 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2248      	movs	r2, #72	; 0x48
 80043d6:	2101      	movs	r1, #1
 80043d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	223e      	movs	r2, #62	; 0x3e
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	223f      	movs	r2, #63	; 0x3f
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2240      	movs	r2, #64	; 0x40
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2241      	movs	r2, #65	; 0x41
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2242      	movs	r2, #66	; 0x42
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2243      	movs	r2, #67	; 0x43
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2244      	movs	r2, #68	; 0x44
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2245      	movs	r2, #69	; 0x45
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2246      	movs	r2, #70	; 0x46
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2247      	movs	r2, #71	; 0x47
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	223d      	movs	r2, #61	; 0x3d
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	223d      	movs	r2, #61	; 0x3d
 8004448:	5c9b      	ldrb	r3, [r3, r2]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b01      	cmp	r3, #1
 800444e:	d001      	beq.n	8004454 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e037      	b.n	80044c4 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	223d      	movs	r2, #61	; 0x3d
 8004458:	2102      	movs	r1, #2
 800445a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2101      	movs	r1, #1
 8004468:	430a      	orrs	r2, r1
 800446a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a16      	ldr	r2, [pc, #88]	; (80044cc <HAL_TIM_Base_Start_IT+0x90>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_TIM_Base_Start_IT+0x44>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a15      	ldr	r2, [pc, #84]	; (80044d0 <HAL_TIM_Base_Start_IT+0x94>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d116      	bne.n	80044ae <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4a13      	ldr	r2, [pc, #76]	; (80044d4 <HAL_TIM_Base_Start_IT+0x98>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b06      	cmp	r3, #6
 8004490:	d016      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x84>
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	025b      	lsls	r3, r3, #9
 8004498:	429a      	cmp	r2, r3
 800449a:	d011      	beq.n	80044c0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2101      	movs	r1, #1
 80044a8:	430a      	orrs	r2, r1
 80044aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ac:	e008      	b.n	80044c0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2101      	movs	r1, #1
 80044ba:	430a      	orrs	r2, r1
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e000      	b.n	80044c2 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b004      	add	sp, #16
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	40000400 	.word	0x40000400
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e04a      	b.n	8004580 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	223d      	movs	r2, #61	; 0x3d
 80044ee:	5c9b      	ldrb	r3, [r3, r2]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	223c      	movs	r2, #60	; 0x3c
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0018      	movs	r0, r3
 8004502:	f000 f841 	bl	8004588 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	223d      	movs	r2, #61	; 0x3d
 800450a:	2102      	movs	r1, #2
 800450c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	3304      	adds	r3, #4
 8004516:	0019      	movs	r1, r3
 8004518:	0010      	movs	r0, r2
 800451a:	f000 fb35 	bl	8004b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2248      	movs	r2, #72	; 0x48
 8004522:	2101      	movs	r1, #1
 8004524:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	223e      	movs	r2, #62	; 0x3e
 800452a:	2101      	movs	r1, #1
 800452c:	5499      	strb	r1, [r3, r2]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	223f      	movs	r2, #63	; 0x3f
 8004532:	2101      	movs	r1, #1
 8004534:	5499      	strb	r1, [r3, r2]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2240      	movs	r2, #64	; 0x40
 800453a:	2101      	movs	r1, #1
 800453c:	5499      	strb	r1, [r3, r2]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2241      	movs	r2, #65	; 0x41
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2242      	movs	r2, #66	; 0x42
 800454a:	2101      	movs	r1, #1
 800454c:	5499      	strb	r1, [r3, r2]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2243      	movs	r2, #67	; 0x43
 8004552:	2101      	movs	r1, #1
 8004554:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2244      	movs	r2, #68	; 0x44
 800455a:	2101      	movs	r1, #1
 800455c:	5499      	strb	r1, [r3, r2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2245      	movs	r2, #69	; 0x45
 8004562:	2101      	movs	r1, #1
 8004564:	5499      	strb	r1, [r3, r2]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2246      	movs	r2, #70	; 0x46
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2247      	movs	r2, #71	; 0x47
 8004572:	2101      	movs	r1, #1
 8004574:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	223d      	movs	r2, #61	; 0x3d
 800457a:	2101      	movs	r1, #1
 800457c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	0018      	movs	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004590:	46c0      	nop			; (mov r8, r8)
 8004592:	46bd      	mov	sp, r7
 8004594:	b002      	add	sp, #8
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e042      	b.n	8004632 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	223d      	movs	r2, #61	; 0x3d
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	223c      	movs	r2, #60	; 0x3c
 80045bc:	2100      	movs	r1, #0
 80045be:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f839 	bl	800463a <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	223d      	movs	r2, #61	; 0x3d
 80045cc:	2102      	movs	r1, #2
 80045ce:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	0019      	movs	r1, r3
 80045da:	0010      	movs	r0, r2
 80045dc:	f000 fad4 	bl	8004b88 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2108      	movs	r1, #8
 80045ec:	438a      	bics	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6819      	ldr	r1, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2248      	movs	r2, #72	; 0x48
 8004604:	2101      	movs	r1, #1
 8004606:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	223e      	movs	r2, #62	; 0x3e
 800460c:	2101      	movs	r1, #1
 800460e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	223f      	movs	r2, #63	; 0x3f
 8004614:	2101      	movs	r1, #1
 8004616:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2244      	movs	r2, #68	; 0x44
 800461c:	2101      	movs	r1, #1
 800461e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2245      	movs	r2, #69	; 0x45
 8004624:	2101      	movs	r1, #1
 8004626:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	223d      	movs	r2, #61	; 0x3d
 800462c:	2101      	movs	r1, #1
 800462e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	0018      	movs	r0, r3
 8004634:	46bd      	mov	sp, r7
 8004636:	b002      	add	sp, #8
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b002      	add	sp, #8
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2202      	movs	r2, #2
 8004668:	4013      	ands	r3, r2
 800466a:	d021      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2202      	movs	r2, #2
 8004670:	4013      	ands	r3, r2
 8004672:	d01d      	beq.n	80046b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2203      	movs	r2, #3
 800467a:	4252      	negs	r2, r2
 800467c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	2203      	movs	r2, #3
 800468c:	4013      	ands	r3, r2
 800468e:	d004      	beq.n	800469a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	0018      	movs	r0, r3
 8004694:	f000 fa60 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004698:	e007      	b.n	80046aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	0018      	movs	r0, r3
 800469e:	f000 fa53 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	0018      	movs	r0, r3
 80046a6:	f000 fa5f 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2204      	movs	r2, #4
 80046b4:	4013      	ands	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2204      	movs	r2, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	d01e      	beq.n	80046fe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2205      	movs	r2, #5
 80046c6:	4252      	negs	r2, r2
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699a      	ldr	r2, [r3, #24]
 80046d6:	23c0      	movs	r3, #192	; 0xc0
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4013      	ands	r3, r2
 80046dc:	d004      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 fa39 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 80046e6:	e007      	b.n	80046f8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	0018      	movs	r0, r3
 80046ec:	f000 fa2c 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 fa38 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2208      	movs	r2, #8
 8004702:	4013      	ands	r3, r2
 8004704:	d021      	beq.n	800474a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2208      	movs	r2, #8
 800470a:	4013      	ands	r3, r2
 800470c:	d01d      	beq.n	800474a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2209      	movs	r2, #9
 8004714:	4252      	negs	r2, r2
 8004716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2204      	movs	r2, #4
 800471c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	2203      	movs	r2, #3
 8004726:	4013      	ands	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 fa13 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004732:	e007      	b.n	8004744 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 fa06 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fa12 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2210      	movs	r2, #16
 800474e:	4013      	ands	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2210      	movs	r2, #16
 8004756:	4013      	ands	r3, r2
 8004758:	d01e      	beq.n	8004798 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2211      	movs	r2, #17
 8004760:	4252      	negs	r2, r2
 8004762:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2208      	movs	r2, #8
 8004768:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	23c0      	movs	r3, #192	; 0xc0
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4013      	ands	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f9ec 	bl	8004b58 <HAL_TIM_IC_CaptureCallback>
 8004780:	e007      	b.n	8004792 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 f9df 	bl	8004b48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 f9eb 	bl	8004b68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	d00c      	beq.n	80047ba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2201      	movs	r2, #1
 80047a4:	4013      	ands	r3, r2
 80047a6:	d008      	beq.n	80047ba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2202      	movs	r2, #2
 80047ae:	4252      	negs	r2, r2
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fd fb53 	bl	8001e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	4013      	ands	r3, r2
 80047c0:	d00c      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	4013      	ands	r3, r2
 80047c8:	d008      	beq.n	80047dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2281      	movs	r2, #129	; 0x81
 80047d0:	4252      	negs	r2, r2
 80047d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 fe7a 	bl	80054d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	2380      	movs	r3, #128	; 0x80
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	4013      	ands	r3, r2
 80047e4:	d00b      	beq.n	80047fe <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2280      	movs	r2, #128	; 0x80
 80047ea:	4013      	ands	r3, r2
 80047ec:	d007      	beq.n	80047fe <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a16      	ldr	r2, [pc, #88]	; (800484c <HAL_TIM_IRQHandler+0x200>)
 80047f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 fe71 	bl	80054e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2240      	movs	r2, #64	; 0x40
 8004802:	4013      	ands	r3, r2
 8004804:	d00c      	beq.n	8004820 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2240      	movs	r2, #64	; 0x40
 800480a:	4013      	ands	r3, r2
 800480c:	d008      	beq.n	8004820 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2241      	movs	r2, #65	; 0x41
 8004814:	4252      	negs	r2, r2
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0018      	movs	r0, r3
 800481c:	f000 f9ac 	bl	8004b78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2220      	movs	r2, #32
 8004824:	4013      	ands	r3, r2
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2220      	movs	r2, #32
 800482c:	4013      	ands	r3, r2
 800482e:	d008      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2221      	movs	r2, #33	; 0x21
 8004836:	4252      	negs	r2, r2
 8004838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f000 fe3f 	bl	80054c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b004      	add	sp, #16
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	fffffeff 	.word	0xfffffeff

08004850 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800485c:	2317      	movs	r3, #23
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	2200      	movs	r2, #0
 8004862:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	223c      	movs	r2, #60	; 0x3c
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_TIM_OC_ConfigChannel+0x22>
 800486e:	2302      	movs	r3, #2
 8004870:	e048      	b.n	8004904 <HAL_TIM_OC_ConfigChannel+0xb4>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	223c      	movs	r2, #60	; 0x3c
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b14      	cmp	r3, #20
 800487e:	d835      	bhi.n	80048ec <HAL_TIM_OC_ConfigChannel+0x9c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	009a      	lsls	r2, r3, #2
 8004884:	4b21      	ldr	r3, [pc, #132]	; (800490c <HAL_TIM_OC_ConfigChannel+0xbc>)
 8004886:	18d3      	adds	r3, r2, r3
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	0011      	movs	r1, r2
 8004894:	0018      	movs	r0, r3
 8004896:	f000 f9e3 	bl	8004c60 <TIM_OC1_SetConfig>
      break;
 800489a:	e02c      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	0011      	movs	r1, r2
 80048a4:	0018      	movs	r0, r3
 80048a6:	f000 fa5b 	bl	8004d60 <TIM_OC2_SetConfig>
      break;
 80048aa:	e024      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fad1 	bl	8004e5c <TIM_OC3_SetConfig>
      break;
 80048ba:	e01c      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	0011      	movs	r1, r2
 80048c4:	0018      	movs	r0, r3
 80048c6:	f000 fb4b 	bl	8004f60 <TIM_OC4_SetConfig>
      break;
 80048ca:	e014      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f000 fba7 	bl	8005028 <TIM_OC5_SetConfig>
      break;
 80048da:	e00c      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 fbf9 	bl	80050dc <TIM_OC6_SetConfig>
      break;
 80048ea:	e004      	b.n	80048f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80048ec:	2317      	movs	r3, #23
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	2201      	movs	r2, #1
 80048f2:	701a      	strb	r2, [r3, #0]
      break;
 80048f4:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	223c      	movs	r2, #60	; 0x3c
 80048fa:	2100      	movs	r1, #0
 80048fc:	5499      	strb	r1, [r3, r2]

  return status;
 80048fe:	2317      	movs	r3, #23
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	781b      	ldrb	r3, [r3, #0]
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b006      	add	sp, #24
 800490a:	bd80      	pop	{r7, pc}
 800490c:	080057d4 	.word	0x080057d4

08004910 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800491a:	230f      	movs	r3, #15
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	223c      	movs	r2, #60	; 0x3c
 8004926:	5c9b      	ldrb	r3, [r3, r2]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_TIM_ConfigClockSource+0x20>
 800492c:	2302      	movs	r3, #2
 800492e:	e0bc      	b.n	8004aaa <HAL_TIM_ConfigClockSource+0x19a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	223c      	movs	r2, #60	; 0x3c
 8004934:	2101      	movs	r1, #1
 8004936:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	223d      	movs	r2, #61	; 0x3d
 800493c:	2102      	movs	r1, #2
 800493e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a5a      	ldr	r2, [pc, #360]	; (8004ab4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800494c:	4013      	ands	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4a59      	ldr	r2, [pc, #356]	; (8004ab8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004954:	4013      	ands	r3, r2
 8004956:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	0192      	lsls	r2, r2, #6
 8004968:	4293      	cmp	r3, r2
 800496a:	d040      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0xde>
 800496c:	2280      	movs	r2, #128	; 0x80
 800496e:	0192      	lsls	r2, r2, #6
 8004970:	4293      	cmp	r3, r2
 8004972:	d900      	bls.n	8004976 <HAL_TIM_ConfigClockSource+0x66>
 8004974:	e088      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	0152      	lsls	r2, r2, #5
 800497a:	4293      	cmp	r3, r2
 800497c:	d100      	bne.n	8004980 <HAL_TIM_ConfigClockSource+0x70>
 800497e:	e088      	b.n	8004a92 <HAL_TIM_ConfigClockSource+0x182>
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	0152      	lsls	r2, r2, #5
 8004984:	4293      	cmp	r3, r2
 8004986:	d900      	bls.n	800498a <HAL_TIM_ConfigClockSource+0x7a>
 8004988:	e07e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 800498a:	2b70      	cmp	r3, #112	; 0x70
 800498c:	d018      	beq.n	80049c0 <HAL_TIM_ConfigClockSource+0xb0>
 800498e:	d900      	bls.n	8004992 <HAL_TIM_ConfigClockSource+0x82>
 8004990:	e07a      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 8004992:	2b60      	cmp	r3, #96	; 0x60
 8004994:	d04f      	beq.n	8004a36 <HAL_TIM_ConfigClockSource+0x126>
 8004996:	d900      	bls.n	800499a <HAL_TIM_ConfigClockSource+0x8a>
 8004998:	e076      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 800499a:	2b50      	cmp	r3, #80	; 0x50
 800499c:	d03b      	beq.n	8004a16 <HAL_TIM_ConfigClockSource+0x106>
 800499e:	d900      	bls.n	80049a2 <HAL_TIM_ConfigClockSource+0x92>
 80049a0:	e072      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d057      	beq.n	8004a56 <HAL_TIM_ConfigClockSource+0x146>
 80049a6:	d900      	bls.n	80049aa <HAL_TIM_ConfigClockSource+0x9a>
 80049a8:	e06e      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 80049aa:	2b30      	cmp	r3, #48	; 0x30
 80049ac:	d063      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x166>
 80049ae:	d86b      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 80049b0:	2b20      	cmp	r3, #32
 80049b2:	d060      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x166>
 80049b4:	d868      	bhi.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d05d      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x166>
 80049ba:	2b10      	cmp	r3, #16
 80049bc:	d05b      	beq.n	8004a76 <HAL_TIM_ConfigClockSource+0x166>
 80049be:	e063      	b.n	8004a88 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049d0:	f000 fcf4 	bl	80053bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2277      	movs	r2, #119	; 0x77
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	609a      	str	r2, [r3, #8]
      break;
 80049ec:	e052      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049fe:	f000 fcdd 	bl	80053bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	689a      	ldr	r2, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	01c9      	lsls	r1, r1, #7
 8004a10:	430a      	orrs	r2, r1
 8004a12:	609a      	str	r2, [r3, #8]
      break;
 8004a14:	e03e      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	001a      	movs	r2, r3
 8004a24:	f000 fc4e 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2150      	movs	r1, #80	; 0x50
 8004a2e:	0018      	movs	r0, r3
 8004a30:	f000 fca8 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8004a34:	e02e      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a42:	001a      	movs	r2, r3
 8004a44:	f000 fc6c 	bl	8005320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2160      	movs	r1, #96	; 0x60
 8004a4e:	0018      	movs	r0, r3
 8004a50:	f000 fc98 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8004a54:	e01e      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a62:	001a      	movs	r2, r3
 8004a64:	f000 fc2e 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2140      	movs	r1, #64	; 0x40
 8004a6e:	0018      	movs	r0, r3
 8004a70:	f000 fc88 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8004a74:	e00e      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	0019      	movs	r1, r3
 8004a80:	0010      	movs	r0, r2
 8004a82:	f000 fc7f 	bl	8005384 <TIM_ITRx_SetConfig>
      break;
 8004a86:	e005      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004a88:	230f      	movs	r3, #15
 8004a8a:	18fb      	adds	r3, r7, r3
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	701a      	strb	r2, [r3, #0]
      break;
 8004a90:	e000      	b.n	8004a94 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004a92:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	223d      	movs	r2, #61	; 0x3d
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	223c      	movs	r2, #60	; 0x3c
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5499      	strb	r1, [r3, r2]

  return status;
 8004aa4:	230f      	movs	r3, #15
 8004aa6:	18fb      	adds	r3, r7, r3
 8004aa8:	781b      	ldrb	r3, [r3, #0]
}
 8004aaa:	0018      	movs	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	b004      	add	sp, #16
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	ffceff88 	.word	0xffceff88
 8004ab8:	ffff00ff 	.word	0xffff00ff

08004abc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	223c      	movs	r2, #60	; 0x3c
 8004aca:	5c9b      	ldrb	r3, [r3, r2]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e032      	b.n	8004b3a <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	223c      	movs	r2, #60	; 0x3c
 8004ad8:	2101      	movs	r1, #1
 8004ada:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	223d      	movs	r2, #61	; 0x3d
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0011      	movs	r1, r2
 8004aea:	0018      	movs	r0, r3
 8004aec:	f000 fb54 	bl	8005198 <TIM_SlaveTimer_SetConfig>
 8004af0:	1e03      	subs	r3, r0, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	223d      	movs	r2, #61	; 0x3d
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223c      	movs	r2, #60	; 0x3c
 8004b00:	2100      	movs	r1, #0
 8004b02:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e018      	b.n	8004b3a <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2140      	movs	r1, #64	; 0x40
 8004b14:	438a      	bics	r2, r1
 8004b16:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4908      	ldr	r1, [pc, #32]	; (8004b44 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004b24:	400a      	ands	r2, r1
 8004b26:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	223d      	movs	r2, #61	; 0x3d
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	223c      	movs	r2, #60	; 0x3c
 8004b34:	2100      	movs	r1, #0
 8004b36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b002      	add	sp, #8
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	ffffbfff 	.word	0xffffbfff

08004b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b50:	46c0      	nop			; (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b002      	add	sp, #8
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b70:	46c0      	nop			; (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a2b      	ldr	r2, [pc, #172]	; (8004c48 <TIM_Base_SetConfig+0xc0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_Base_SetConfig+0x20>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a2a      	ldr	r2, [pc, #168]	; (8004c4c <TIM_Base_SetConfig+0xc4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2270      	movs	r2, #112	; 0x70
 8004bac:	4393      	bics	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a22      	ldr	r2, [pc, #136]	; (8004c48 <TIM_Base_SetConfig+0xc0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00f      	beq.n	8004be2 <TIM_Base_SetConfig+0x5a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a21      	ldr	r2, [pc, #132]	; (8004c4c <TIM_Base_SetConfig+0xc4>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00b      	beq.n	8004be2 <TIM_Base_SetConfig+0x5a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a20      	ldr	r2, [pc, #128]	; (8004c50 <TIM_Base_SetConfig+0xc8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d007      	beq.n	8004be2 <TIM_Base_SetConfig+0x5a>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <TIM_Base_SetConfig+0xcc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d003      	beq.n	8004be2 <TIM_Base_SetConfig+0x5a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a1e      	ldr	r2, [pc, #120]	; (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d108      	bne.n	8004bf4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a1d      	ldr	r2, [pc, #116]	; (8004c5c <TIM_Base_SetConfig+0xd4>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2280      	movs	r2, #128	; 0x80
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a0a      	ldr	r2, [pc, #40]	; (8004c48 <TIM_Base_SetConfig+0xc0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <TIM_Base_SetConfig+0xaa>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a0b      	ldr	r2, [pc, #44]	; (8004c54 <TIM_Base_SetConfig+0xcc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d003      	beq.n	8004c32 <TIM_Base_SetConfig+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <TIM_Base_SetConfig+0xd0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d103      	bne.n	8004c3a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	615a      	str	r2, [r3, #20]
}
 8004c40:	46c0      	nop			; (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b004      	add	sp, #16
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40012c00 	.word	0x40012c00
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40002000 	.word	0x40002000
 8004c54:	40014400 	.word	0x40014400
 8004c58:	40014800 	.word	0x40014800
 8004c5c:	fffffcff 	.word	0xfffffcff

08004c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	2201      	movs	r2, #1
 8004c76:	4393      	bics	r3, r2
 8004c78:	001a      	movs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4a2e      	ldr	r2, [pc, #184]	; (8004d48 <TIM_OC1_SetConfig+0xe8>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2203      	movs	r2, #3
 8004c96:	4393      	bics	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	4393      	bics	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <TIM_OC1_SetConfig+0xec>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d007      	beq.n	8004cce <TIM_OC1_SetConfig+0x6e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a23      	ldr	r2, [pc, #140]	; (8004d50 <TIM_OC1_SetConfig+0xf0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d003      	beq.n	8004cce <TIM_OC1_SetConfig+0x6e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <TIM_OC1_SetConfig+0xf4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10c      	bne.n	8004ce8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	4393      	bics	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	4393      	bics	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <TIM_OC1_SetConfig+0xec>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d007      	beq.n	8004d00 <TIM_OC1_SetConfig+0xa0>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <TIM_OC1_SetConfig+0xf0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_OC1_SetConfig+0xa0>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <TIM_OC1_SetConfig+0xf4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d111      	bne.n	8004d24 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <TIM_OC1_SetConfig+0xf8>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <TIM_OC1_SetConfig+0xfc>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	621a      	str	r2, [r3, #32]
}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	b006      	add	sp, #24
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	fffeff8f 	.word	0xfffeff8f
 8004d4c:	40012c00 	.word	0x40012c00
 8004d50:	40014400 	.word	0x40014400
 8004d54:	40014800 	.word	0x40014800
 8004d58:	fffffeff 	.word	0xfffffeff
 8004d5c:	fffffdff 	.word	0xfffffdff

08004d60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2210      	movs	r2, #16
 8004d76:	4393      	bics	r3, r2
 8004d78:	001a      	movs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a2c      	ldr	r2, [pc, #176]	; (8004e40 <TIM_OC2_SetConfig+0xe0>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4a2b      	ldr	r2, [pc, #172]	; (8004e44 <TIM_OC2_SetConfig+0xe4>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2220      	movs	r2, #32
 8004daa:	4393      	bics	r3, r2
 8004dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	; (8004e48 <TIM_OC2_SetConfig+0xe8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10d      	bne.n	8004dde <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2280      	movs	r2, #128	; 0x80
 8004dc6:	4393      	bics	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	4393      	bics	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a19      	ldr	r2, [pc, #100]	; (8004e48 <TIM_OC2_SetConfig+0xe8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_OC2_SetConfig+0x96>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <TIM_OC2_SetConfig+0xec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC2_SetConfig+0x96>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a17      	ldr	r2, [pc, #92]	; (8004e50 <TIM_OC2_SetConfig+0xf0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d113      	bne.n	8004e1e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <TIM_OC2_SetConfig+0xf4>)
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4a15      	ldr	r2, [pc, #84]	; (8004e58 <TIM_OC2_SetConfig+0xf8>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	621a      	str	r2, [r3, #32]
}
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b006      	add	sp, #24
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	feff8fff 	.word	0xfeff8fff
 8004e44:	fffffcff 	.word	0xfffffcff
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40014400 	.word	0x40014400
 8004e50:	40014800 	.word	0x40014800
 8004e54:	fffffbff 	.word	0xfffffbff
 8004e58:	fffff7ff 	.word	0xfffff7ff

08004e5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	4a31      	ldr	r2, [pc, #196]	; (8004f38 <TIM_OC3_SetConfig+0xdc>)
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a2d      	ldr	r2, [pc, #180]	; (8004f3c <TIM_OC3_SetConfig+0xe0>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2203      	movs	r2, #3
 8004e90:	4393      	bics	r3, r2
 8004e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	4a27      	ldr	r2, [pc, #156]	; (8004f40 <TIM_OC3_SetConfig+0xe4>)
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a23      	ldr	r2, [pc, #140]	; (8004f44 <TIM_OC3_SetConfig+0xe8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10d      	bne.n	8004ed6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	4a22      	ldr	r2, [pc, #136]	; (8004f48 <TIM_OC3_SetConfig+0xec>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <TIM_OC3_SetConfig+0xf0>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <TIM_OC3_SetConfig+0xe8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d007      	beq.n	8004eee <TIM_OC3_SetConfig+0x92>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a1b      	ldr	r2, [pc, #108]	; (8004f50 <TIM_OC3_SetConfig+0xf4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d003      	beq.n	8004eee <TIM_OC3_SetConfig+0x92>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a1a      	ldr	r2, [pc, #104]	; (8004f54 <TIM_OC3_SetConfig+0xf8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d113      	bne.n	8004f16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <TIM_OC3_SetConfig+0xfc>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <TIM_OC3_SetConfig+0x100>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	621a      	str	r2, [r3, #32]
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b006      	add	sp, #24
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	fffffeff 	.word	0xfffffeff
 8004f3c:	fffeff8f 	.word	0xfffeff8f
 8004f40:	fffffdff 	.word	0xfffffdff
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	fffff7ff 	.word	0xfffff7ff
 8004f4c:	fffffbff 	.word	0xfffffbff
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	ffffefff 	.word	0xffffefff
 8004f5c:	ffffdfff 	.word	0xffffdfff

08004f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	4a24      	ldr	r2, [pc, #144]	; (8005008 <TIM_OC4_SetConfig+0xa8>)
 8004f76:	401a      	ands	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69db      	ldr	r3, [r3, #28]
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a20      	ldr	r2, [pc, #128]	; (800500c <TIM_OC4_SetConfig+0xac>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a1f      	ldr	r2, [pc, #124]	; (8005010 <TIM_OC4_SetConfig+0xb0>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4a1b      	ldr	r2, [pc, #108]	; (8005014 <TIM_OC4_SetConfig+0xb4>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	693a      	ldr	r2, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a17      	ldr	r2, [pc, #92]	; (8005018 <TIM_OC4_SetConfig+0xb8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x70>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a16      	ldr	r2, [pc, #88]	; (800501c <TIM_OC4_SetConfig+0xbc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x70>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <TIM_OC4_SetConfig+0xc0>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4a14      	ldr	r2, [pc, #80]	; (8005024 <TIM_OC4_SetConfig+0xc4>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	46bd      	mov	sp, r7
 8005002:	b006      	add	sp, #24
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	ffffefff 	.word	0xffffefff
 800500c:	feff8fff 	.word	0xfeff8fff
 8005010:	fffffcff 	.word	0xfffffcff
 8005014:	ffffdfff 	.word	0xffffdfff
 8005018:	40012c00 	.word	0x40012c00
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800
 8005024:	ffffbfff 	.word	0xffffbfff

08005028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	4a21      	ldr	r2, [pc, #132]	; (80050c4 <TIM_OC5_SetConfig+0x9c>)
 800503e:	401a      	ands	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a1d      	ldr	r2, [pc, #116]	; (80050c8 <TIM_OC5_SetConfig+0xa0>)
 8005054:	4013      	ands	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	4a19      	ldr	r2, [pc, #100]	; (80050cc <TIM_OC5_SetConfig+0xa4>)
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	041b      	lsls	r3, r3, #16
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a15      	ldr	r2, [pc, #84]	; (80050d0 <TIM_OC5_SetConfig+0xa8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_OC5_SetConfig+0x66>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a14      	ldr	r2, [pc, #80]	; (80050d4 <TIM_OC5_SetConfig+0xac>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC5_SetConfig+0x66>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a13      	ldr	r2, [pc, #76]	; (80050d8 <TIM_OC5_SetConfig+0xb0>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d109      	bne.n	80050a2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <TIM_OC5_SetConfig+0x9c>)
 8005092:	4013      	ands	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	46c0      	nop			; (mov r8, r8)
 80050be:	46bd      	mov	sp, r7
 80050c0:	b006      	add	sp, #24
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	fffeffff 	.word	0xfffeffff
 80050c8:	fffeff8f 	.word	0xfffeff8f
 80050cc:	fffdffff 	.word	0xfffdffff
 80050d0:	40012c00 	.word	0x40012c00
 80050d4:	40014400 	.word	0x40014400
 80050d8:	40014800 	.word	0x40014800

080050dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	4a22      	ldr	r2, [pc, #136]	; (800517c <TIM_OC6_SetConfig+0xa0>)
 80050f2:	401a      	ands	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4a1e      	ldr	r2, [pc, #120]	; (8005180 <TIM_OC6_SetConfig+0xa4>)
 8005108:	4013      	ands	r3, r2
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4313      	orrs	r3, r2
 8005116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <TIM_OC6_SetConfig+0xa8>)
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	051b      	lsls	r3, r3, #20
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <TIM_OC6_SetConfig+0xac>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_OC6_SetConfig+0x68>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a15      	ldr	r2, [pc, #84]	; (800518c <TIM_OC6_SetConfig+0xb0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC6_SetConfig+0x68>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a14      	ldr	r2, [pc, #80]	; (8005190 <TIM_OC6_SetConfig+0xb4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d109      	bne.n	8005158 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4a13      	ldr	r2, [pc, #76]	; (8005194 <TIM_OC6_SetConfig+0xb8>)
 8005148:	4013      	ands	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	029b      	lsls	r3, r3, #10
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	621a      	str	r2, [r3, #32]
}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	46bd      	mov	sp, r7
 8005176:	b006      	add	sp, #24
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	ffefffff 	.word	0xffefffff
 8005180:	feff8fff 	.word	0xfeff8fff
 8005184:	ffdfffff 	.word	0xffdfffff
 8005188:	40012c00 	.word	0x40012c00
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800
 8005194:	fffbffff 	.word	0xfffbffff

08005198 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051a2:	2317      	movs	r3, #23
 80051a4:	18fb      	adds	r3, r7, r3
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4a41      	ldr	r2, [pc, #260]	; (80052bc <TIM_SlaveTimer_SetConfig+0x124>)
 80051b6:	4013      	ands	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4a3e      	ldr	r2, [pc, #248]	; (80052c0 <TIM_SlaveTimer_SetConfig+0x128>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b70      	cmp	r3, #112	; 0x70
 80051e4:	d015      	beq.n	8005212 <TIM_SlaveTimer_SetConfig+0x7a>
 80051e6:	d900      	bls.n	80051ea <TIM_SlaveTimer_SetConfig+0x52>
 80051e8:	e05b      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80051ea:	2b60      	cmp	r3, #96	; 0x60
 80051ec:	d04f      	beq.n	800528e <TIM_SlaveTimer_SetConfig+0xf6>
 80051ee:	d858      	bhi.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d042      	beq.n	800527a <TIM_SlaveTimer_SetConfig+0xe2>
 80051f4:	d855      	bhi.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d016      	beq.n	8005228 <TIM_SlaveTimer_SetConfig+0x90>
 80051fa:	d852      	bhi.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d055      	beq.n	80052ac <TIM_SlaveTimer_SetConfig+0x114>
 8005200:	d84f      	bhi.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005202:	2b20      	cmp	r3, #32
 8005204:	d052      	beq.n	80052ac <TIM_SlaveTimer_SetConfig+0x114>
 8005206:	d84c      	bhi.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
 8005208:	2b00      	cmp	r3, #0
 800520a:	d04f      	beq.n	80052ac <TIM_SlaveTimer_SetConfig+0x114>
 800520c:	2b10      	cmp	r3, #16
 800520e:	d04d      	beq.n	80052ac <TIM_SlaveTimer_SetConfig+0x114>
 8005210:	e047      	b.n	80052a2 <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005222:	f000 f8cb 	bl	80053bc <TIM_ETR_SetConfig>
      break;
 8005226:	e042      	b.n	80052ae <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b05      	cmp	r3, #5
 800522e:	d101      	bne.n	8005234 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e03f      	b.n	80052b4 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2101      	movs	r1, #1
 8005248:	438a      	bics	r2, r1
 800524a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	22f0      	movs	r2, #240	; 0xf0
 8005258:	4393      	bics	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	68ba      	ldr	r2, [r7, #8]
 8005264:	4313      	orrs	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]
      break;
 8005278:	e019      	b.n	80052ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005286:	001a      	movs	r2, r3
 8005288:	f000 f81c 	bl	80052c4 <TIM_TI1_ConfigInputStage>
      break;
 800528c:	e00f      	b.n	80052ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800529a:	001a      	movs	r2, r3
 800529c:	f000 f840 	bl	8005320 <TIM_TI2_ConfigInputStage>
      break;
 80052a0:	e005      	b.n	80052ae <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80052a2:	2317      	movs	r3, #23
 80052a4:	18fb      	adds	r3, r7, r3
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e000      	b.n	80052ae <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80052ac:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 80052ae:	2317      	movs	r3, #23
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	781b      	ldrb	r3, [r3, #0]
}
 80052b4:	0018      	movs	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	b006      	add	sp, #24
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	ffcfff8f 	.word	0xffcfff8f
 80052c0:	fffefff8 	.word	0xfffefff8

080052c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	2201      	movs	r2, #1
 80052dc:	4393      	bics	r3, r2
 80052de:	001a      	movs	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	22f0      	movs	r2, #240	; 0xf0
 80052ee:	4393      	bics	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	011b      	lsls	r3, r3, #4
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	220a      	movs	r2, #10
 8005300:	4393      	bics	r3, r2
 8005302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	b006      	add	sp, #24
 800531e:	bd80      	pop	{r7, pc}

08005320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	2210      	movs	r2, #16
 8005338:	4393      	bics	r3, r2
 800533a:	001a      	movs	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <TIM_TI2_ConfigInputStage+0x60>)
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	031b      	lsls	r3, r3, #12
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	22a0      	movs	r2, #160	; 0xa0
 800535c:	4393      	bics	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	621a      	str	r2, [r3, #32]
}
 8005376:	46c0      	nop			; (mov r8, r8)
 8005378:	46bd      	mov	sp, r7
 800537a:	b006      	add	sp, #24
 800537c:	bd80      	pop	{r7, pc}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	ffff0fff 	.word	0xffff0fff

08005384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <TIM_ITRx_SetConfig+0x34>)
 8005398:	4013      	ands	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	2207      	movs	r2, #7
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	609a      	str	r2, [r3, #8]
}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	46bd      	mov	sp, r7
 80053b2:	b004      	add	sp, #16
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	ffcfff8f 	.word	0xffcfff8f

080053bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <TIM_ETR_SetConfig+0x3c>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	431a      	orrs	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	609a      	str	r2, [r3, #8]
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	46bd      	mov	sp, r7
 80053f4:	b006      	add	sp, #24
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	ffff00ff 	.word	0xffff00ff

080053fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	223c      	movs	r2, #60	; 0x3c
 800540a:	5c9b      	ldrb	r3, [r3, r2]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005410:	2302      	movs	r3, #2
 8005412:	e04a      	b.n	80054aa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	223c      	movs	r2, #60	; 0x3c
 8005418:	2101      	movs	r1, #1
 800541a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	223d      	movs	r2, #61	; 0x3d
 8005420:	2102      	movs	r1, #2
 8005422:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d108      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4313      	orrs	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2270      	movs	r2, #112	; 0x70
 8005454:	4393      	bics	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a10      	ldr	r2, [pc, #64]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d10c      	bne.n	8005498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	4393      	bics	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4313      	orrs	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	223d      	movs	r2, #61	; 0x3d
 800549c:	2101      	movs	r1, #1
 800549e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	223c      	movs	r2, #60	; 0x3c
 80054a4:	2100      	movs	r1, #0
 80054a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	0018      	movs	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	b004      	add	sp, #16
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	ff0fffff 	.word	0xff0fffff
 80054bc:	40000400 	.word	0x40000400

080054c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c8:	46c0      	nop			; (mov r8, r8)
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b002      	add	sp, #8
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054e8:	46c0      	nop			; (mov r8, r8)
 80054ea:	46bd      	mov	sp, r7
 80054ec:	b002      	add	sp, #8
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <malloc>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4b03      	ldr	r3, [pc, #12]	; (8005500 <malloc+0x10>)
 80054f4:	0001      	movs	r1, r0
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	f000 f826 	bl	8005548 <_malloc_r>
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	20000068 	.word	0x20000068

08005504 <sbrk_aligned>:
 8005504:	b570      	push	{r4, r5, r6, lr}
 8005506:	4e0f      	ldr	r6, [pc, #60]	; (8005544 <sbrk_aligned+0x40>)
 8005508:	000d      	movs	r5, r1
 800550a:	6831      	ldr	r1, [r6, #0]
 800550c:	0004      	movs	r4, r0
 800550e:	2900      	cmp	r1, #0
 8005510:	d102      	bne.n	8005518 <sbrk_aligned+0x14>
 8005512:	f000 f8b3 	bl	800567c <_sbrk_r>
 8005516:	6030      	str	r0, [r6, #0]
 8005518:	0029      	movs	r1, r5
 800551a:	0020      	movs	r0, r4
 800551c:	f000 f8ae 	bl	800567c <_sbrk_r>
 8005520:	1c43      	adds	r3, r0, #1
 8005522:	d00a      	beq.n	800553a <sbrk_aligned+0x36>
 8005524:	2303      	movs	r3, #3
 8005526:	1cc5      	adds	r5, r0, #3
 8005528:	439d      	bics	r5, r3
 800552a:	42a8      	cmp	r0, r5
 800552c:	d007      	beq.n	800553e <sbrk_aligned+0x3a>
 800552e:	1a29      	subs	r1, r5, r0
 8005530:	0020      	movs	r0, r4
 8005532:	f000 f8a3 	bl	800567c <_sbrk_r>
 8005536:	3001      	adds	r0, #1
 8005538:	d101      	bne.n	800553e <sbrk_aligned+0x3a>
 800553a:	2501      	movs	r5, #1
 800553c:	426d      	negs	r5, r5
 800553e:	0028      	movs	r0, r5
 8005540:	bd70      	pop	{r4, r5, r6, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	20000874 	.word	0x20000874

08005548 <_malloc_r>:
 8005548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800554a:	2203      	movs	r2, #3
 800554c:	1ccb      	adds	r3, r1, #3
 800554e:	4393      	bics	r3, r2
 8005550:	3308      	adds	r3, #8
 8005552:	0006      	movs	r6, r0
 8005554:	001f      	movs	r7, r3
 8005556:	2b0c      	cmp	r3, #12
 8005558:	d238      	bcs.n	80055cc <_malloc_r+0x84>
 800555a:	270c      	movs	r7, #12
 800555c:	42b9      	cmp	r1, r7
 800555e:	d837      	bhi.n	80055d0 <_malloc_r+0x88>
 8005560:	0030      	movs	r0, r6
 8005562:	f000 f873 	bl	800564c <__malloc_lock>
 8005566:	4b38      	ldr	r3, [pc, #224]	; (8005648 <_malloc_r+0x100>)
 8005568:	9300      	str	r3, [sp, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	001c      	movs	r4, r3
 800556e:	2c00      	cmp	r4, #0
 8005570:	d133      	bne.n	80055da <_malloc_r+0x92>
 8005572:	0039      	movs	r1, r7
 8005574:	0030      	movs	r0, r6
 8005576:	f7ff ffc5 	bl	8005504 <sbrk_aligned>
 800557a:	0004      	movs	r4, r0
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d15e      	bne.n	800563e <_malloc_r+0xf6>
 8005580:	9b00      	ldr	r3, [sp, #0]
 8005582:	681c      	ldr	r4, [r3, #0]
 8005584:	0025      	movs	r5, r4
 8005586:	2d00      	cmp	r5, #0
 8005588:	d14e      	bne.n	8005628 <_malloc_r+0xe0>
 800558a:	2c00      	cmp	r4, #0
 800558c:	d051      	beq.n	8005632 <_malloc_r+0xea>
 800558e:	6823      	ldr	r3, [r4, #0]
 8005590:	0029      	movs	r1, r5
 8005592:	18e3      	adds	r3, r4, r3
 8005594:	0030      	movs	r0, r6
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f000 f870 	bl	800567c <_sbrk_r>
 800559c:	9b01      	ldr	r3, [sp, #4]
 800559e:	4283      	cmp	r3, r0
 80055a0:	d147      	bne.n	8005632 <_malloc_r+0xea>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	0030      	movs	r0, r6
 80055a6:	1aff      	subs	r7, r7, r3
 80055a8:	0039      	movs	r1, r7
 80055aa:	f7ff ffab 	bl	8005504 <sbrk_aligned>
 80055ae:	3001      	adds	r0, #1
 80055b0:	d03f      	beq.n	8005632 <_malloc_r+0xea>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	9b00      	ldr	r3, [sp, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d040      	beq.n	8005642 <_malloc_r+0xfa>
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	42a2      	cmp	r2, r4
 80055c4:	d133      	bne.n	800562e <_malloc_r+0xe6>
 80055c6:	2200      	movs	r2, #0
 80055c8:	605a      	str	r2, [r3, #4]
 80055ca:	e014      	b.n	80055f6 <_malloc_r+0xae>
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	dac5      	bge.n	800555c <_malloc_r+0x14>
 80055d0:	230c      	movs	r3, #12
 80055d2:	2500      	movs	r5, #0
 80055d4:	6033      	str	r3, [r6, #0]
 80055d6:	0028      	movs	r0, r5
 80055d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055da:	6821      	ldr	r1, [r4, #0]
 80055dc:	1bc9      	subs	r1, r1, r7
 80055de:	d420      	bmi.n	8005622 <_malloc_r+0xda>
 80055e0:	290b      	cmp	r1, #11
 80055e2:	d918      	bls.n	8005616 <_malloc_r+0xce>
 80055e4:	19e2      	adds	r2, r4, r7
 80055e6:	6027      	str	r7, [r4, #0]
 80055e8:	42a3      	cmp	r3, r4
 80055ea:	d112      	bne.n	8005612 <_malloc_r+0xca>
 80055ec:	9b00      	ldr	r3, [sp, #0]
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	6053      	str	r3, [r2, #4]
 80055f6:	0030      	movs	r0, r6
 80055f8:	0025      	movs	r5, r4
 80055fa:	f000 f82f 	bl	800565c <__malloc_unlock>
 80055fe:	2207      	movs	r2, #7
 8005600:	350b      	adds	r5, #11
 8005602:	1d23      	adds	r3, r4, #4
 8005604:	4395      	bics	r5, r2
 8005606:	1aea      	subs	r2, r5, r3
 8005608:	429d      	cmp	r5, r3
 800560a:	d0e4      	beq.n	80055d6 <_malloc_r+0x8e>
 800560c:	1b5b      	subs	r3, r3, r5
 800560e:	50a3      	str	r3, [r4, r2]
 8005610:	e7e1      	b.n	80055d6 <_malloc_r+0x8e>
 8005612:	605a      	str	r2, [r3, #4]
 8005614:	e7ec      	b.n	80055f0 <_malloc_r+0xa8>
 8005616:	6862      	ldr	r2, [r4, #4]
 8005618:	42a3      	cmp	r3, r4
 800561a:	d1d5      	bne.n	80055c8 <_malloc_r+0x80>
 800561c:	9b00      	ldr	r3, [sp, #0]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e7e9      	b.n	80055f6 <_malloc_r+0xae>
 8005622:	0023      	movs	r3, r4
 8005624:	6864      	ldr	r4, [r4, #4]
 8005626:	e7a2      	b.n	800556e <_malloc_r+0x26>
 8005628:	002c      	movs	r4, r5
 800562a:	686d      	ldr	r5, [r5, #4]
 800562c:	e7ab      	b.n	8005586 <_malloc_r+0x3e>
 800562e:	0013      	movs	r3, r2
 8005630:	e7c4      	b.n	80055bc <_malloc_r+0x74>
 8005632:	230c      	movs	r3, #12
 8005634:	0030      	movs	r0, r6
 8005636:	6033      	str	r3, [r6, #0]
 8005638:	f000 f810 	bl	800565c <__malloc_unlock>
 800563c:	e7cb      	b.n	80055d6 <_malloc_r+0x8e>
 800563e:	6027      	str	r7, [r4, #0]
 8005640:	e7d9      	b.n	80055f6 <_malloc_r+0xae>
 8005642:	605b      	str	r3, [r3, #4]
 8005644:	deff      	udf	#255	; 0xff
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	20000870 	.word	0x20000870

0800564c <__malloc_lock>:
 800564c:	b510      	push	{r4, lr}
 800564e:	4802      	ldr	r0, [pc, #8]	; (8005658 <__malloc_lock+0xc>)
 8005650:	f000 f850 	bl	80056f4 <__retarget_lock_acquire_recursive>
 8005654:	bd10      	pop	{r4, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	200009b4 	.word	0x200009b4

0800565c <__malloc_unlock>:
 800565c:	b510      	push	{r4, lr}
 800565e:	4802      	ldr	r0, [pc, #8]	; (8005668 <__malloc_unlock+0xc>)
 8005660:	f000 f849 	bl	80056f6 <__retarget_lock_release_recursive>
 8005664:	bd10      	pop	{r4, pc}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	200009b4 	.word	0x200009b4

0800566c <memset>:
 800566c:	0003      	movs	r3, r0
 800566e:	1882      	adds	r2, r0, r2
 8005670:	4293      	cmp	r3, r2
 8005672:	d100      	bne.n	8005676 <memset+0xa>
 8005674:	4770      	bx	lr
 8005676:	7019      	strb	r1, [r3, #0]
 8005678:	3301      	adds	r3, #1
 800567a:	e7f9      	b.n	8005670 <memset+0x4>

0800567c <_sbrk_r>:
 800567c:	2300      	movs	r3, #0
 800567e:	b570      	push	{r4, r5, r6, lr}
 8005680:	4d06      	ldr	r5, [pc, #24]	; (800569c <_sbrk_r+0x20>)
 8005682:	0004      	movs	r4, r0
 8005684:	0008      	movs	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fd fc78 	bl	8002f7c <_sbrk>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d103      	bne.n	8005698 <_sbrk_r+0x1c>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <_sbrk_r+0x1c>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	bd70      	pop	{r4, r5, r6, pc}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	200009b0 	.word	0x200009b0

080056a0 <__errno>:
 80056a0:	4b01      	ldr	r3, [pc, #4]	; (80056a8 <__errno+0x8>)
 80056a2:	6818      	ldr	r0, [r3, #0]
 80056a4:	4770      	bx	lr
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	20000068 	.word	0x20000068

080056ac <__libc_init_array>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2600      	movs	r6, #0
 80056b0:	4c0c      	ldr	r4, [pc, #48]	; (80056e4 <__libc_init_array+0x38>)
 80056b2:	4d0d      	ldr	r5, [pc, #52]	; (80056e8 <__libc_init_array+0x3c>)
 80056b4:	1b64      	subs	r4, r4, r5
 80056b6:	10a4      	asrs	r4, r4, #2
 80056b8:	42a6      	cmp	r6, r4
 80056ba:	d109      	bne.n	80056d0 <__libc_init_array+0x24>
 80056bc:	2600      	movs	r6, #0
 80056be:	f000 f825 	bl	800570c <_init>
 80056c2:	4c0a      	ldr	r4, [pc, #40]	; (80056ec <__libc_init_array+0x40>)
 80056c4:	4d0a      	ldr	r5, [pc, #40]	; (80056f0 <__libc_init_array+0x44>)
 80056c6:	1b64      	subs	r4, r4, r5
 80056c8:	10a4      	asrs	r4, r4, #2
 80056ca:	42a6      	cmp	r6, r4
 80056cc:	d105      	bne.n	80056da <__libc_init_array+0x2e>
 80056ce:	bd70      	pop	{r4, r5, r6, pc}
 80056d0:	00b3      	lsls	r3, r6, #2
 80056d2:	58eb      	ldr	r3, [r5, r3]
 80056d4:	4798      	blx	r3
 80056d6:	3601      	adds	r6, #1
 80056d8:	e7ee      	b.n	80056b8 <__libc_init_array+0xc>
 80056da:	00b3      	lsls	r3, r6, #2
 80056dc:	58eb      	ldr	r3, [r5, r3]
 80056de:	4798      	blx	r3
 80056e0:	3601      	adds	r6, #1
 80056e2:	e7f2      	b.n	80056ca <__libc_init_array+0x1e>
 80056e4:	08005828 	.word	0x08005828
 80056e8:	08005828 	.word	0x08005828
 80056ec:	0800582c 	.word	0x0800582c
 80056f0:	08005828 	.word	0x08005828

080056f4 <__retarget_lock_acquire_recursive>:
 80056f4:	4770      	bx	lr

080056f6 <__retarget_lock_release_recursive>:
 80056f6:	4770      	bx	lr

080056f8 <memcpy>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d100      	bne.n	8005702 <memcpy+0xa>
 8005700:	bd10      	pop	{r4, pc}
 8005702:	5ccc      	ldrb	r4, [r1, r3]
 8005704:	54c4      	strb	r4, [r0, r3]
 8005706:	3301      	adds	r3, #1
 8005708:	e7f8      	b.n	80056fc <memcpy+0x4>
	...

0800570c <_init>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr

08005718 <_fini>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr
